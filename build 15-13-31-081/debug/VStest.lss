
build/debug/VStest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121e0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003ca40  080123e0  080123e0  000133e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0804ee20  0804ee20  0004fe20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0804ee28  0804ee28  0004fe28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0804ee2c  0804ee2c  0004fe2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000021d0  20000000  0804ee30  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001c754  200021e0  08051000  000521e0  2**5
                  ALLOC
  8 ._user_heap_stack 00001004  2001e934  08051000  00052934  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000521d0  2**0
                  CONTENTS, READONLY
 10 .comment      0000007b  00000000  00000000  000521fe  2**0
                  CONTENTS, READONLY
 11 .debug_info   00049ce5  00000000  00000000  00052279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008950  00000000  00000000  0009bf5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00023896  00000000  00000000  000a48ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002db0  00000000  00000000  000c8148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000231b  00000000  00000000  000caef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00037665  00000000  00000000  000cd213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000105ea  00000000  00000000  00104878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008000  00000000  00000000  00114e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000a4  00000000  00000000  0011ce64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000200:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000202:	2b01      	cmp	r3, #1
	IT       LS
 8000204:	bf98      	it	ls
	BXLS     lr
 8000206:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000208:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800020c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800020e:	089b      	lsrs	r3, r3, #2

08000210 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000210:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000214:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000218:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800021a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800021e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000220:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000222:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000224:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000226:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800022a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800022e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000230:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000234:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000238:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800023c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000240:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000242:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000246:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800024a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800024c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000250:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000254:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000258:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800025c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800025e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000260:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000262:	d1d5      	bne.n	8000210 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000264:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000268:	4770      	bx	lr

0800026a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800026a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800026c:	2b01      	cmp	r3, #1
	IT       LS
 800026e:	bf98      	it	ls
	BXLS     lr
 8000270:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000272:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000276:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000278:	089b      	lsrs	r3, r3, #2

0800027a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800027a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800027e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000282:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000284:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000288:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800028c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000290:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000294:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000298:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800029c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002a0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002a2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002a6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002aa:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002ae:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002b2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002b4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002b6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002b8:	d1df      	bne.n	800027a <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002be:	4770      	bx	lr

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000370:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000374:	f000 b80c 	b.w	8000390 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f011 fec4 	bl	801210c <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__aeabi_idiv0>:
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop

08000394 <__do_global_dtors_aux>:
 8000394:	b510      	push	{r4, lr}
 8000396:	4c05      	ldr	r4, [pc, #20]	@ (80003ac <__do_global_dtors_aux+0x18>)
 8000398:	7823      	ldrb	r3, [r4, #0]
 800039a:	b933      	cbnz	r3, 80003aa <__do_global_dtors_aux+0x16>
 800039c:	4b04      	ldr	r3, [pc, #16]	@ (80003b0 <__do_global_dtors_aux+0x1c>)
 800039e:	b113      	cbz	r3, 80003a6 <__do_global_dtors_aux+0x12>
 80003a0:	4804      	ldr	r0, [pc, #16]	@ (80003b4 <__do_global_dtors_aux+0x20>)
 80003a2:	f3af 8000 	nop.w
 80003a6:	2301      	movs	r3, #1
 80003a8:	7023      	strb	r3, [r4, #0]
 80003aa:	bd10      	pop	{r4, pc}
 80003ac:	200021e0 	.word	0x200021e0
 80003b0:	00000000 	.word	0x00000000
 80003b4:	080123c8 	.word	0x080123c8

080003b8 <frame_dummy>:
 80003b8:	b508      	push	{r3, lr}
 80003ba:	4b03      	ldr	r3, [pc, #12]	@ (80003c8 <frame_dummy+0x10>)
 80003bc:	b11b      	cbz	r3, 80003c6 <frame_dummy+0xe>
 80003be:	4903      	ldr	r1, [pc, #12]	@ (80003cc <frame_dummy+0x14>)
 80003c0:	4803      	ldr	r0, [pc, #12]	@ (80003d0 <frame_dummy+0x18>)
 80003c2:	f3af 8000 	nop.w
 80003c6:	bd08      	pop	{r3, pc}
 80003c8:	00000000 	.word	0x00000000
 80003cc:	200021e4 	.word	0x200021e4
 80003d0:	080123c8 	.word	0x080123c8

080003d4 <ai_log_err>:

  static ai_buffer *ai_input;
  static ai_buffer *ai_output;

  static void ai_log_err(const ai_error err, const char *fct)
  {
 80003d4:	b508      	push	{r3, lr}
    /* USER CODE BEGIN log */
    if (fct)
 80003d6:	b129      	cbz	r1, 80003e4 <ai_log_err+0x10>
      printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80003d8:	0a03      	lsrs	r3, r0, #8
 80003da:	b2c2      	uxtb	r2, r0
 80003dc:	4804      	ldr	r0, [pc, #16]	@ (80003f0 <ai_log_err+0x1c>)
 80003de:	f010 fda3 	bl	8010f28 <iprintf>
             err.type, err.code);
    else
      printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);

    do
    {
 80003e2:	e7fe      	b.n	80003e2 <ai_log_err+0xe>
      printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80003e4:	0a02      	lsrs	r2, r0, #8
 80003e6:	b2c1      	uxtb	r1, r0
 80003e8:	4802      	ldr	r0, [pc, #8]	@ (80003f4 <ai_log_err+0x20>)
 80003ea:	f010 fd9d 	bl	8010f28 <iprintf>
 80003ee:	e7f8      	b.n	80003e2 <ai_log_err+0xe>
 80003f0:	08012444 	.word	0x08012444
 80003f4:	08012478 	.word	0x08012478

080003f8 <ai_boostrap>:
    } while (1);
    /* USER CODE END log */
  }

  static int ai_boostrap(ai_handle *act_addr)
  {
 80003f8:	b510      	push	{r4, lr}
 80003fa:	4601      	mov	r1, r0
    ai_error err;

    /* Create and initialize an instance of the model */
    err = ai_audio_classifier_create_and_init(&audio_classifier, act_addr, NULL);
 80003fc:	2200      	movs	r2, #0
 80003fe:	481a      	ldr	r0, [pc, #104]	@ (8000468 <ai_boostrap+0x70>)
 8000400:	f001 fac8 	bl	8001994 <ai_audio_classifier_create_and_init>
    if (err.type != AI_ERROR_NONE)
 8000404:	f010 0fff 	tst.w	r0, #255	@ 0xff
 8000408:	d10e      	bne.n	8000428 <ai_boostrap+0x30>
    {
      ai_log_err(err, "ai_audio_classifier_create_and_init");
      return -1;
    }

    ai_input = ai_audio_classifier_inputs_get(audio_classifier, NULL);
 800040a:	4c17      	ldr	r4, [pc, #92]	@ (8000468 <ai_boostrap+0x70>)
 800040c:	2100      	movs	r1, #0
 800040e:	6820      	ldr	r0, [r4, #0]
 8000410:	f001 fa8c 	bl	800192c <ai_audio_classifier_inputs_get>
 8000414:	4b15      	ldr	r3, [pc, #84]	@ (800046c <ai_boostrap+0x74>)
 8000416:	6018      	str	r0, [r3, #0]
    ai_output = ai_audio_classifier_outputs_get(audio_classifier, NULL);
 8000418:	2100      	movs	r1, #0
 800041a:	6820      	ldr	r0, [r4, #0]
 800041c:	f001 fa94 	bl	8001948 <ai_audio_classifier_outputs_get>
 8000420:	4b13      	ldr	r3, [pc, #76]	@ (8000470 <ai_boostrap+0x78>)
 8000422:	6018      	str	r0, [r3, #0]

#if defined(AI_AUDIO_CLASSIFIER_INPUTS_IN_ACTIVATIONS)
    /*  In the case where "--allocate-inputs" option is used, memory buffer can be
     *  used from the activations buffer. This is not mandatory.
     */
    for (int idx = 0; idx < AI_AUDIO_CLASSIFIER_IN_NUM; idx++)
 8000424:	2300      	movs	r3, #0
 8000426:	e00d      	b.n	8000444 <ai_boostrap+0x4c>
      ai_log_err(err, "ai_audio_classifier_create_and_init");
 8000428:	4912      	ldr	r1, [pc, #72]	@ (8000474 <ai_boostrap+0x7c>)
 800042a:	f7ff ffd3 	bl	80003d4 <ai_log_err>
    {
      data_ins[idx] = ai_input[idx].data;
 800042e:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8000432:	4a0e      	ldr	r2, [pc, #56]	@ (800046c <ai_boostrap+0x74>)
 8000434:	6812      	ldr	r2, [r2, #0]
 8000436:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800043a:	6851      	ldr	r1, [r2, #4]
 800043c:	4a0e      	ldr	r2, [pc, #56]	@ (8000478 <ai_boostrap+0x80>)
 800043e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int idx = 0; idx < AI_AUDIO_CLASSIFIER_IN_NUM; idx++)
 8000442:	3301      	adds	r3, #1
 8000444:	2b00      	cmp	r3, #0
 8000446:	ddf2      	ble.n	800042e <ai_boostrap+0x36>

#if defined(AI_AUDIO_CLASSIFIER_OUTPUTS_IN_ACTIVATIONS)
    /*  In the case where "--allocate-outputs" option is used, memory buffer can be
     *  used from the activations buffer. This is no mandatory.
     */
    for (int idx = 0; idx < AI_AUDIO_CLASSIFIER_OUT_NUM; idx++)
 8000448:	2300      	movs	r3, #0
 800044a:	2b00      	cmp	r3, #0
 800044c:	dd01      	ble.n	8000452 <ai_boostrap+0x5a>
    ai_output[idx].data = data_outs[idx];
  }
#endif

    return 0;
  }
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
      data_outs[idx] = ai_output[idx].data;
 8000452:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8000456:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800045a:	6851      	ldr	r1, [r2, #4]
 800045c:	4a07      	ldr	r2, [pc, #28]	@ (800047c <ai_boostrap+0x84>)
 800045e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int idx = 0; idx < AI_AUDIO_CLASSIFIER_OUT_NUM; idx++)
 8000462:	3301      	adds	r3, #1
 8000464:	e7f1      	b.n	800044a <ai_boostrap+0x52>
 8000466:	bf00      	nop
 8000468:	20002204 	.word	0x20002204
 800046c:	20002200 	.word	0x20002200
 8000470:	200021fc 	.word	0x200021fc
 8000474:	080124a8 	.word	0x080124a8
 8000478:	20006db4 	.word	0x20006db4
 800047c:	20006db0 	.word	0x20006db0

08000480 <MX_X_CUBE_AI_Init>:
  /* USER CODE END 2 */

  /* Entry points --------------------------------------------------------------*/

  void MX_X_CUBE_AI_Init(void)
  {
 8000480:	b508      	push	{r3, lr}
    /* USER CODE BEGIN 5 */
    printf("\r\nTEMPLATE - initialization\r\n");
 8000482:	4803      	ldr	r0, [pc, #12]	@ (8000490 <MX_X_CUBE_AI_Init+0x10>)
 8000484:	f010 fdb8 	bl	8010ff8 <puts>

    ai_boostrap(data_activations0);
 8000488:	4802      	ldr	r0, [pc, #8]	@ (8000494 <MX_X_CUBE_AI_Init+0x14>)
 800048a:	f7ff ffb5 	bl	80003f8 <ai_boostrap>
    /* USER CODE END 5 */
  }
 800048e:	bd08      	pop	{r3, pc}
 8000490:	080124cc 	.word	0x080124cc
 8000494:	20000000 	.word	0x20000000

08000498 <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800049c:	ed2d 8b02 	vpush	{d8}
 80004a0:	b090      	sub	sp, #64	@ 0x40
 80004a2:	4606      	mov	r6, r0
 80004a4:	4608      	mov	r0, r1
    uint32_t    L  = S->fftLen;
 80004a6:	8835      	ldrh	r5, [r6, #0]
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 80004a8:	eb01 0785 	add.w	r7, r1, r5, lsl #2
    const float32_t * tw = (float32_t *) S->pTwiddle;
 80004ac:	6874      	ldr	r4, [r6, #4]

    pCol1 = p1;
    pCol2 = p2;

    //    Define new length
    L >>= 1;
 80004ae:	ea4f 0855 	mov.w	r8, r5, lsr #1
    //    Initialize mid pointers
    pMid1 = p1 + L;
 80004b2:	eb01 0e88 	add.w	lr, r1, r8, lsl #2
    pMid2 = p2 + L;
 80004b6:	eb07 0c88 	add.w	ip, r7, r8, lsl #2

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 80004ba:	08ed      	lsrs	r5, r5, #3
    float32_t * p2 = p1 + L;
 80004bc:	463a      	mov	r2, r7
    for ( l = L >> 2; l > 0; l-- )
 80004be:	460b      	mov	r3, r1
 80004c0:	e0cf      	b.n	8000662 <arm_cfft_radix8by2_f32+0x1ca>
    {
        t1[0] = p1[0];
 80004c2:	ed93 5a00 	vldr	s10, [r3]
 80004c6:	ed8d 5a0c 	vstr	s10, [sp, #48]	@ 0x30
        t1[1] = p1[1];
 80004ca:	ed93 6a01 	vldr	s12, [r3, #4]
 80004ce:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
        t1[2] = p1[2];
 80004d2:	ed93 3a02 	vldr	s6, [r3, #8]
 80004d6:	ed8d 3a0e 	vstr	s6, [sp, #56]	@ 0x38
        t1[3] = p1[3];
 80004da:	ed93 7a03 	vldr	s14, [r3, #12]
 80004de:	ed8d 7a0f 	vstr	s14, [sp, #60]	@ 0x3c

        t2[0] = p2[0];
 80004e2:	ed92 0a00 	vldr	s0, [r2]
 80004e6:	ed8d 0a08 	vstr	s0, [sp, #32]
        t2[1] = p2[1];
 80004ea:	edd2 0a01 	vldr	s1, [r2, #4]
 80004ee:	edcd 0a09 	vstr	s1, [sp, #36]	@ 0x24
        t2[2] = p2[2];
 80004f2:	ed92 1a02 	vldr	s2, [r2, #8]
 80004f6:	ed8d 1a0a 	vstr	s2, [sp, #40]	@ 0x28
        t2[3] = p2[3];
 80004fa:	edd2 1a03 	vldr	s3, [r2, #12]
 80004fe:	edcd 1a0b 	vstr	s3, [sp, #44]	@ 0x2c

        t3[0] = pMid1[0];
 8000502:	ed9e 2a00 	vldr	s4, [lr]
 8000506:	ed8d 2a04 	vstr	s4, [sp, #16]
        t3[1] = pMid1[1];
 800050a:	edde 2a01 	vldr	s5, [lr, #4]
 800050e:	edcd 2a05 	vstr	s5, [sp, #20]
        t3[2] = pMid1[2];
 8000512:	ed9e 4a02 	vldr	s8, [lr, #8]
 8000516:	ed8d 4a06 	vstr	s8, [sp, #24]
        t3[3] = pMid1[3];
 800051a:	edde 4a03 	vldr	s9, [lr, #12]
 800051e:	edcd 4a07 	vstr	s9, [sp, #28]

        t4[0] = pMid2[0];
 8000522:	eddc 5a00 	vldr	s11, [ip]
 8000526:	edcd 5a00 	vstr	s11, [sp]
        t4[1] = pMid2[1];
 800052a:	eddc 6a01 	vldr	s13, [ip, #4]
 800052e:	edcd 6a01 	vstr	s13, [sp, #4]
        t4[2] = pMid2[2];
 8000532:	eddc 3a02 	vldr	s7, [ip, #8]
 8000536:	edcd 3a02 	vstr	s7, [sp, #8]
        t4[3] = pMid2[3];
 800053a:	eddc 7a03 	vldr	s15, [ip, #12]
 800053e:	edcd 7a03 	vstr	s15, [sp, #12]

        *p1++ = t1[0] + t2[0];
 8000542:	ee35 8a00 	vadd.f32	s16, s10, s0
 8000546:	ed83 8a00 	vstr	s16, [r3]
        *p1++ = t1[1] + t2[1];
 800054a:	ee36 8a20 	vadd.f32	s16, s12, s1
 800054e:	ed83 8a01 	vstr	s16, [r3, #4]
        *p1++ = t1[2] + t2[2];
 8000552:	ee33 8a01 	vadd.f32	s16, s6, s2
 8000556:	ed83 8a02 	vstr	s16, [r3, #8]
        *p1++ = t1[3] + t2[3];    // col 1
 800055a:	ee37 8a21 	vadd.f32	s16, s14, s3
 800055e:	ed83 8a03 	vstr	s16, [r3, #12]

        t2[0] = t1[0] - t2[0];
 8000562:	ee35 5a40 	vsub.f32	s10, s10, s0
 8000566:	ed8d 5a08 	vstr	s10, [sp, #32]
        t2[1] = t1[1] - t2[1];
 800056a:	ee36 6a60 	vsub.f32	s12, s12, s1
 800056e:	ed8d 6a09 	vstr	s12, [sp, #36]	@ 0x24
        t2[2] = t1[2] - t2[2];
 8000572:	ee33 3a41 	vsub.f32	s6, s6, s2
 8000576:	ed8d 3a0a 	vstr	s6, [sp, #40]	@ 0x28
        t2[3] = t1[3] - t2[3];    // for col 2
 800057a:	ee37 7a61 	vsub.f32	s14, s14, s3
 800057e:	ed8d 7a0b 	vstr	s14, [sp, #44]	@ 0x2c

        *pMid1++ = t3[0] + t4[0];
 8000582:	ee72 1a25 	vadd.f32	s3, s4, s11
 8000586:	edce 1a00 	vstr	s3, [lr]
        *pMid1++ = t3[1] + t4[1];
 800058a:	ee72 1aa6 	vadd.f32	s3, s5, s13
 800058e:	edce 1a01 	vstr	s3, [lr, #4]
        *pMid1++ = t3[2] + t4[2];
 8000592:	ee74 1a23 	vadd.f32	s3, s8, s7
 8000596:	edce 1a02 	vstr	s3, [lr, #8]
        *pMid1++ = t3[3] + t4[3]; // col 1
 800059a:	ee74 1aa7 	vadd.f32	s3, s9, s15
 800059e:	edce 1a03 	vstr	s3, [lr, #12]

        t4[0] = t4[0] - t3[0];
 80005a2:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80005a6:	edcd 5a00 	vstr	s11, [sp]
        t4[1] = t4[1] - t3[1];
 80005aa:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80005ae:	edcd 6a01 	vstr	s13, [sp, #4]
        t4[2] = t4[2] - t3[2];
 80005b2:	ee73 2ac4 	vsub.f32	s5, s7, s8
 80005b6:	edcd 2a02 	vstr	s5, [sp, #8]
        t4[3] = t4[3] - t3[3];    // for col 2
 80005ba:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80005be:	edcd 7a03 	vstr	s15, [sp, #12]

        twR = *tw++;
 80005c2:	edd4 4a00 	vldr	s9, [r4]
        twI = *tw++;
 80005c6:	ed94 4a01 	vldr	s8, [r4, #4]

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 80005ca:	ee65 3a24 	vmul.f32	s7, s10, s9
        m1 = t2[1] * twI;
 80005ce:	ee26 2a04 	vmul.f32	s4, s12, s8
        m2 = t2[1] * twR;
 80005d2:	ee26 6a24 	vmul.f32	s12, s12, s9
        m3 = t2[0] * twI;
 80005d6:	ee25 5a04 	vmul.f32	s10, s10, s8

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80005da:	ee73 3a82 	vadd.f32	s7, s7, s4
 80005de:	edc2 3a00 	vstr	s7, [r2]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80005e2:	ee36 6a45 	vsub.f32	s12, s12, s10
 80005e6:	ed82 6a01 	vstr	s12, [r2, #4]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80005ea:	ee25 6a84 	vmul.f32	s12, s11, s8
        m1 = t4[1] * twR;
 80005ee:	ee26 5aa4 	vmul.f32	s10, s13, s9
        m2 = t4[1] * twI;
 80005f2:	ee66 6a84 	vmul.f32	s13, s13, s8
        m3 = t4[0] * twR;
 80005f6:	ee65 5aa4 	vmul.f32	s11, s11, s9

        *pMid2++ = m0 - m1;
 80005fa:	ee36 6a45 	vsub.f32	s12, s12, s10
 80005fe:	ed8c 6a00 	vstr	s12, [ip]
        *pMid2++ = m2 + m3;
 8000602:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8000606:	edcc 6a01 	vstr	s13, [ip, #4]

        twR = *tw++;
 800060a:	ed94 6a02 	vldr	s12, [r4, #8]
        twI = *tw++;
 800060e:	edd4 5a03 	vldr	s11, [r4, #12]

        m0 = t2[2] * twR;
 8000612:	ee23 5a06 	vmul.f32	s10, s6, s12
        m1 = t2[3] * twI;
 8000616:	ee67 4a25 	vmul.f32	s9, s14, s11
        m2 = t2[3] * twR;
 800061a:	ee27 7a06 	vmul.f32	s14, s14, s12
        m3 = t2[2] * twI;
 800061e:	ee63 6a25 	vmul.f32	s13, s6, s11

        *p2++ = m0 + m1;
 8000622:	ee35 5a24 	vadd.f32	s10, s10, s9
 8000626:	ed82 5a02 	vstr	s10, [r2, #8]
        *p2++ = m2 - m3;
 800062a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800062e:	ed82 7a03 	vstr	s14, [r2, #12]

        m0 = t4[2] * twI;
 8000632:	ee62 6aa5 	vmul.f32	s13, s5, s11
        m1 = t4[3] * twR;
 8000636:	ee27 5a86 	vmul.f32	s10, s15, s12
        m2 = t4[3] * twI;
 800063a:	ee67 7aa5 	vmul.f32	s15, s15, s11
        m3 = t4[2] * twR;
 800063e:	ee22 7a86 	vmul.f32	s14, s5, s12

        *pMid2++ = m0 - m1;
 8000642:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8000646:	edcc 6a02 	vstr	s13, [ip, #8]
        *pMid2++ = m2 + m3;
 800064a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800064e:	edcc 7a03 	vstr	s15, [ip, #12]
    for ( l = L >> 2; l > 0; l-- )
 8000652:	3d01      	subs	r5, #1
        twI = *tw++;
 8000654:	3410      	adds	r4, #16
        *p2++ = m2 - m3;
 8000656:	3210      	adds	r2, #16
        *pMid2++ = m2 + m3;
 8000658:	f10c 0c10 	add.w	ip, ip, #16
        *pMid1++ = t3[3] + t4[3]; // col 1
 800065c:	f10e 0e10 	add.w	lr, lr, #16
        *p1++ = t1[3] + t2[3];    // col 1
 8000660:	3310      	adds	r3, #16
    for ( l = L >> 2; l > 0; l-- )
 8000662:	2d00      	cmp	r5, #0
 8000664:	f47f af2d 	bne.w	80004c2 <arm_cfft_radix8by2_f32+0x2a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8000668:	fa1f f888 	uxth.w	r8, r8
 800066c:	2302      	movs	r3, #2
 800066e:	6872      	ldr	r2, [r6, #4]
 8000670:	4641      	mov	r1, r8
 8000672:	f000 fad7 	bl	8000c24 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8000676:	2302      	movs	r3, #2
 8000678:	6872      	ldr	r2, [r6, #4]
 800067a:	4641      	mov	r1, r8
 800067c:	4638      	mov	r0, r7
 800067e:	f000 fad1 	bl	8000c24 <arm_radix8_butterfly_f32>
}
 8000682:	b010      	add	sp, #64	@ 0x40
 8000684:	ecbd 8b02 	vpop	{d8}
 8000688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800068c <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 800068c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000690:	ed2d 8b04 	vpush	{d8-d9}
 8000694:	b095      	sub	sp, #84	@ 0x54
 8000696:	9004      	str	r0, [sp, #16]
 8000698:	460a      	mov	r2, r1
 800069a:	9105      	str	r1, [sp, #20]
    uint32_t    L  = S->fftLen >> 1;
 800069c:	8803      	ldrh	r3, [r0, #0]
 800069e:	085b      	lsrs	r3, r3, #1
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80006a0:	eb01 0683 	add.w	r6, r1, r3, lsl #2
    float32_t * p3 = p2 + L;
 80006a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80006a8:	460c      	mov	r4, r1
 80006aa:	9102      	str	r1, [sp, #8]
    float32_t * p4 = p3 + L;
 80006ac:	eb01 0583 	add.w	r5, r1, r3, lsl #2

    pCol1 = p1;         // points to real values by default
    pCol2 = p2;
    pCol3 = p3;
    pCol4 = p4;
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80006b0:	1f31      	subs	r1, r6, #4
 80006b2:	9101      	str	r1, [sp, #4]
    pEnd2 = p3 - 1;
    pEnd3 = p4 - 1;
 80006b4:	f1a5 0c04 	sub.w	ip, r5, #4
    pEnd4 = pEnd3 + L;
 80006b8:	eb0c 0183 	add.w	r1, ip, r3, lsl #2

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80006bc:	f8d0 e004 	ldr.w	lr, [r0, #4]

    L >>= 1;
 80006c0:	085b      	lsrs	r3, r3, #1
 80006c2:	461f      	mov	r7, r3
 80006c4:	9303      	str	r3, [sp, #12]
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80006c6:	ed92 7a00 	vldr	s14, [r2]
 80006ca:	f1a4 0804 	sub.w	r8, r4, #4
 80006ce:	edd4 7a00 	vldr	s15, [r4]
 80006d2:	ee37 2a27 	vadd.f32	s4, s14, s15
    p1sp3_0 = p1[0] - p3[0];
 80006d6:	ee37 7a67 	vsub.f32	s14, s14, s15
    p1ap3_1 = p1[1] + p3[1];
 80006da:	edd2 7a01 	vldr	s15, [r2, #4]
 80006de:	4620      	mov	r0, r4
 80006e0:	edd4 6a01 	vldr	s13, [r4, #4]
 80006e4:	ee77 2aa6 	vadd.f32	s5, s15, s13
    p1sp3_1 = p1[1] - p3[1];
 80006e8:	ee77 7ae6 	vsub.f32	s15, s15, s13

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80006ec:	ed96 3a01 	vldr	s6, [r6, #4]
 80006f0:	ee73 3a07 	vadd.f32	s7, s6, s14
 80006f4:	edd5 6a01 	vldr	s13, [r5, #4]
 80006f8:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80006fc:	edcd 3a10 	vstr	s7, [sp, #64]	@ 0x40
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000700:	edd6 5a00 	vldr	s11, [r6]
 8000704:	ee37 4ae5 	vsub.f32	s8, s15, s11
 8000708:	ed95 6a00 	vldr	s12, [r5]
 800070c:	ee34 4a06 	vadd.f32	s8, s8, s12
 8000710:	ed8d 4a11 	vstr	s8, [sp, #68]	@ 0x44
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000714:	ee72 4a65 	vsub.f32	s9, s4, s11
 8000718:	ee74 4ac6 	vsub.f32	s9, s9, s12
 800071c:	edcd 4a0c 	vstr	s9, [sp, #48]	@ 0x30
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000720:	ee32 5ac3 	vsub.f32	s10, s5, s6
 8000724:	ee35 5a66 	vsub.f32	s10, s10, s13
 8000728:	ed8d 5a0d 	vstr	s10, [sp, #52]	@ 0x34
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800072c:	ee37 7a43 	vsub.f32	s14, s14, s6
 8000730:	ee76 6a87 	vadd.f32	s13, s13, s14
 8000734:	edcd 6a08 	vstr	s13, [sp, #32]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000738:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800073c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8000740:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000744:	ee75 5a82 	vadd.f32	s11, s11, s4
 8000748:	ee36 6a25 	vadd.f32	s12, s12, s11
 800074c:	f102 0908 	add.w	r9, r2, #8
 8000750:	ed82 6a00 	vstr	s12, [r2]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000754:	ed96 7a01 	vldr	s14, [r6, #4]
 8000758:	ee37 7a22 	vadd.f32	s14, s14, s5
 800075c:	ed95 6a01 	vldr	s12, [r5, #4]
 8000760:	ee37 7a06 	vadd.f32	s14, s14, s12
 8000764:	ed82 7a01 	vstr	s14, [r2, #4]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8000768:	4632      	mov	r2, r6
 800076a:	3208      	adds	r2, #8
 800076c:	edc6 3a00 	vstr	s7, [r6]
    *p2++ = t2[1];
 8000770:	ed86 4a01 	vstr	s8, [r6, #4]
    *p3++ = t3[0];
 8000774:	3008      	adds	r0, #8
 8000776:	edc4 4a00 	vstr	s9, [r4]
    *p3++ = t3[1];
 800077a:	ed84 5a01 	vstr	s10, [r4, #4]
    *p4++ = t4[0];
 800077e:	462b      	mov	r3, r5
 8000780:	3308      	adds	r3, #8
 8000782:	edc5 6a00 	vstr	s13, [r5]
    *p4++ = t4[1];
 8000786:	edc5 7a01 	vstr	s15, [r5, #4]

    tw2 += twMod2;
 800078a:	f10e 0a08 	add.w	sl, lr, #8
    tw3 += twMod3;
 800078e:	f10e 0410 	add.w	r4, lr, #16
    tw4 += twMod4;
 8000792:	f10e 0e18 	add.w	lr, lr, #24

    for (l = (L - 2) >> 1; l > 0; l-- )
 8000796:	f1a7 0b02 	sub.w	fp, r7, #2
 800079a:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 800079e:	9f01      	ldr	r7, [sp, #4]
 80007a0:	9606      	str	r6, [sp, #24]
 80007a2:	9507      	str	r5, [sp, #28]
 80007a4:	e123      	b.n	80009ee <arm_cfft_radix8by4_f32+0x362>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 80007a6:	ed99 7a00 	vldr	s14, [r9]
 80007aa:	edd0 7a00 	vldr	s15, [r0]
 80007ae:	ee77 3a27 	vadd.f32	s7, s14, s15
        p1sp3_0 = p1[0] - p3[0];
 80007b2:	ee37 7a67 	vsub.f32	s14, s14, s15
        p1ap3_1 = p1[1] + p3[1];
 80007b6:	edd9 7a01 	vldr	s15, [r9, #4]
 80007ba:	edd0 6a01 	vldr	s13, [r0, #4]
 80007be:	ee37 4aa6 	vadd.f32	s8, s15, s13
        p1sp3_1 = p1[1] - p3[1];
 80007c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 80007c6:	edd2 4a01 	vldr	s9, [r2, #4]
 80007ca:	ee34 2a87 	vadd.f32	s4, s9, s14
 80007ce:	ed93 3a01 	vldr	s6, [r3, #4]
 80007d2:	ee32 2a43 	vsub.f32	s4, s4, s6
 80007d6:	ed8d 2a10 	vstr	s4, [sp, #64]	@ 0x40
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 80007da:	ed92 6a00 	vldr	s12, [r2]
 80007de:	ee77 5ac6 	vsub.f32	s11, s15, s12
 80007e2:	edd3 6a00 	vldr	s13, [r3]
 80007e6:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80007ea:	edcd 5a11 	vstr	s11, [sp, #68]	@ 0x44
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 80007ee:	ee73 2ac6 	vsub.f32	s5, s7, s12
 80007f2:	ee72 2ae6 	vsub.f32	s5, s5, s13
 80007f6:	edcd 2a0c 	vstr	s5, [sp, #48]	@ 0x30
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80007fa:	ee34 5a64 	vsub.f32	s10, s8, s9
 80007fe:	ee35 5a43 	vsub.f32	s10, s10, s6
 8000802:	ed8d 5a0d 	vstr	s10, [sp, #52]	@ 0x34
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000806:	ee37 7a64 	vsub.f32	s14, s14, s9
 800080a:	ee33 3a07 	vadd.f32	s6, s6, s14
 800080e:	ed8d 3a08 	vstr	s6, [sp, #32]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000812:	ee76 7a27 	vadd.f32	s15, s12, s15
 8000816:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800081a:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 800081e:	ee36 6a23 	vadd.f32	s12, s12, s7
 8000822:	ee76 6a86 	vadd.f32	s13, s13, s12
 8000826:	464d      	mov	r5, r9
 8000828:	3508      	adds	r5, #8
 800082a:	edc9 6a00 	vstr	s13, [r9]
 800082e:	9501      	str	r5, [sp, #4]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000830:	ed92 7a01 	vldr	s14, [r2, #4]
 8000834:	ee37 7a04 	vadd.f32	s14, s14, s8
 8000838:	edd3 6a01 	vldr	s13, [r3, #4]
 800083c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8000840:	ed89 7a01 	vstr	s14, [r9, #4]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000844:	ed17 0a01 	vldr	s0, [r7, #-4]
 8000848:	ed1c 7a01 	vldr	s14, [ip, #-4]
 800084c:	ee70 8a07 	vadd.f32	s17, s0, s14
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8000850:	ee30 0a47 	vsub.f32	s0, s0, s14
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8000854:	edd7 0a00 	vldr	s1, [r7]
 8000858:	ed9c 7a00 	vldr	s14, [ip]
 800085c:	ee30 9a87 	vadd.f32	s18, s1, s14
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8000860:	ee70 0ac7 	vsub.f32	s1, s1, s14
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8000864:	ed98 1a00 	vldr	s2, [r8]
 8000868:	edd1 1a00 	vldr	s3, [r1]
 800086c:	ee71 6a61 	vsub.f32	s13, s2, s3
 8000870:	ee36 4a80 	vadd.f32	s8, s13, s0
 8000874:	ed8d 4a12 	vstr	s8, [sp, #72]	@ 0x48
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000878:	ed18 8a01 	vldr	s16, [r8, #-4]
 800087c:	ee70 3ac8 	vsub.f32	s7, s1, s16
 8000880:	ed11 7a01 	vldr	s14, [r1, #-4]
 8000884:	ee73 3a87 	vadd.f32	s7, s7, s14
 8000888:	edcd 3a13 	vstr	s7, [sp, #76]	@ 0x4c
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800088c:	ee78 4ac8 	vsub.f32	s9, s17, s16
 8000890:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8000894:	edcd 4a0e 	vstr	s9, [sp, #56]	@ 0x38
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8000898:	ee39 6a41 	vsub.f32	s12, s18, s2
 800089c:	ee36 6a61 	vsub.f32	s12, s12, s3
 80008a0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 80008a4:	ee76 6ac0 	vsub.f32	s13, s13, s0
 80008a8:	edcd 6a0a 	vstr	s13, [sp, #40]	@ 0x28
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80008ac:	ee37 7a48 	vsub.f32	s14, s14, s16
 80008b0:	ee37 7a60 	vsub.f32	s14, s14, s1
 80008b4:	ed8d 7a0b 	vstr	s14, [sp, #44]	@ 0x2c
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 80008b8:	ee31 1a09 	vadd.f32	s2, s2, s18
 80008bc:	ee71 1a81 	vadd.f32	s3, s3, s2
 80008c0:	f1a7 0508 	sub.w	r5, r7, #8
 80008c4:	edc7 1a00 	vstr	s3, [r7]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80008c8:	ed58 1a01 	vldr	s3, [r8, #-4]
 80008cc:	ee71 1aa8 	vadd.f32	s3, s3, s17
 80008d0:	ed11 1a01 	vldr	s2, [r1, #-4]
 80008d4:	ee71 1a81 	vadd.f32	s3, s3, s2
 80008d8:	ed47 1a01 	vstr	s3, [r7, #-4]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 80008dc:	f10a 0908 	add.w	r9, sl, #8
 80008e0:	edda 1a00 	vldr	s3, [sl]
        twI = *tw2++;
 80008e4:	ed9a 1a01 	vldr	s2, [sl, #4]
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 80008e8:	ee62 0a21 	vmul.f32	s1, s4, s3
        m1 = t2[1] * twI;
 80008ec:	ee25 0a81 	vmul.f32	s0, s11, s2
        m2 = t2[1] * twR;
 80008f0:	ee65 5aa1 	vmul.f32	s11, s11, s3
        m3 = t2[0] * twI;
 80008f4:	ee22 2a01 	vmul.f32	s4, s4, s2

        *p2++ = m0 + m1;
 80008f8:	ee70 0a80 	vadd.f32	s1, s1, s0
 80008fc:	f102 0a08 	add.w	sl, r2, #8
 8000900:	edc2 0a00 	vstr	s1, [r2]
        *p2++ = m2 - m3;
 8000904:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8000908:	edc2 5a01 	vstr	s11, [r2, #4]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 800090c:	ee63 5a81 	vmul.f32	s11, s7, s2
        m1 = t2[2] * twR;
 8000910:	ee24 2a21 	vmul.f32	s4, s8, s3
        m2 = t2[2] * twI;
 8000914:	ee24 4a01 	vmul.f32	s8, s8, s2
        m3 = t2[3] * twR;
 8000918:	ee63 3aa1 	vmul.f32	s7, s7, s3

        *pEnd2-- = m0 - m1;
 800091c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8000920:	f1a8 0608 	sub.w	r6, r8, #8
 8000924:	edc8 5a00 	vstr	s11, [r8]
        *pEnd2-- = m2 + m3;
 8000928:	ee34 4a23 	vadd.f32	s8, s8, s7
 800092c:	ed08 4a01 	vstr	s8, [r8, #-4]

        // COL 3
        twR = tw3[0];
 8000930:	ed94 4a00 	vldr	s8, [r4]
        twI = tw3[1];
 8000934:	edd4 5a01 	vldr	s11, [r4, #4]
        tw3 += twMod3;
 8000938:	3410      	adds	r4, #16
        // Top
        m0 = t3[0] * twR;
 800093a:	ee62 3a84 	vmul.f32	s7, s5, s8
        m1 = t3[1] * twI;
 800093e:	ee25 2a25 	vmul.f32	s4, s10, s11
        m2 = t3[1] * twR;
 8000942:	ee25 5a04 	vmul.f32	s10, s10, s8
        m3 = t3[0] * twI;
 8000946:	ee62 2aa5 	vmul.f32	s5, s5, s11

        *p3++ = m0 + m1;
 800094a:	ee73 3a82 	vadd.f32	s7, s7, s4
 800094e:	4602      	mov	r2, r0
 8000950:	3208      	adds	r2, #8
 8000952:	edc0 3a00 	vstr	s7, [r0]
        *p3++ = m2 - m3;
 8000956:	ee35 5a62 	vsub.f32	s10, s10, s5
 800095a:	ed80 5a01 	vstr	s10, [r0, #4]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 800095e:	ee26 5a44 	vnmul.f32	s10, s12, s8
        m1 = t3[2] * twI;
 8000962:	ee64 3aa5 	vmul.f32	s7, s9, s11
        m2 = t3[2] * twR;
 8000966:	ee64 4a84 	vmul.f32	s9, s9, s8
        m3 = t3[3] * twI;
 800096a:	ee26 6a25 	vmul.f32	s12, s12, s11

        *pEnd3-- = m0 - m1;
 800096e:	ee75 5a63 	vsub.f32	s11, s10, s7
 8000972:	f1ac 0708 	sub.w	r7, ip, #8
 8000976:	edcc 5a00 	vstr	s11, [ip]
        *pEnd3-- = m3 - m2;
 800097a:	ee36 6a64 	vsub.f32	s12, s12, s9
 800097e:	ed0c 6a01 	vstr	s12, [ip, #-4]

        // COL 4
        twR = tw4[0];
 8000982:	ed9e 6a00 	vldr	s12, [lr]
        twI = tw4[1];
 8000986:	edde 5a01 	vldr	s11, [lr, #4]
        tw4 += twMod4;
 800098a:	f10e 0e18 	add.w	lr, lr, #24
        // Top
        m0 = t4[0] * twR;
 800098e:	ee23 5a06 	vmul.f32	s10, s6, s12
        m1 = t4[1] * twI;
 8000992:	ee67 4aa5 	vmul.f32	s9, s15, s11
        m2 = t4[1] * twR;
 8000996:	ee67 7a86 	vmul.f32	s15, s15, s12
        m3 = t4[0] * twI;
 800099a:	ee23 3a25 	vmul.f32	s6, s6, s11

        *p4++ = m0 + m1;
 800099e:	ee35 5a24 	vadd.f32	s10, s10, s9
 80009a2:	4618      	mov	r0, r3
 80009a4:	3008      	adds	r0, #8
 80009a6:	ed83 5a00 	vstr	s10, [r3]
        *p4++ = m2 - m3;
 80009aa:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80009ae:	edc3 7a01 	vstr	s15, [r3, #4]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 80009b2:	ee67 7a25 	vmul.f32	s15, s14, s11
        m1 = t4[2] * twR;
 80009b6:	ee26 5a86 	vmul.f32	s10, s13, s12
        m2 = t4[2] * twI;
 80009ba:	ee66 6aa5 	vmul.f32	s13, s13, s11
        m3 = t4[3] * twR;
 80009be:	ee27 7a06 	vmul.f32	s14, s14, s12

        *pEnd4-- = m0 - m1;
 80009c2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80009c6:	f1a1 0c08 	sub.w	ip, r1, #8
 80009ca:	edc1 7a00 	vstr	s15, [r1]
        *pEnd4-- = m2 + m3;
 80009ce:	ee76 6a87 	vadd.f32	s13, s13, s14
 80009d2:	ed41 6a01 	vstr	s13, [r1, #-4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009d6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
        *p4++ = m2 - m3;
 80009da:	4603      	mov	r3, r0
        *p3++ = m2 - m3;
 80009dc:	4610      	mov	r0, r2
        *p2++ = m2 - m3;
 80009de:	4652      	mov	r2, sl
        twI = *tw2++;
 80009e0:	46ca      	mov	sl, r9
        *pEnd4-- = m2 + m3;
 80009e2:	4661      	mov	r1, ip
        *pEnd3-- = m3 - m2;
 80009e4:	46bc      	mov	ip, r7
        *pEnd2-- = m2 + m3;
 80009e6:	46b0      	mov	r8, r6
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80009e8:	462f      	mov	r7, r5
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 80009ea:	f8dd 9004 	ldr.w	r9, [sp, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009ee:	f1bb 0f00 	cmp.w	fp, #0
 80009f2:	f47f aed8 	bne.w	80007a6 <arm_cfft_radix8by4_f32+0x11a>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 80009f6:	9e06      	ldr	r6, [sp, #24]
 80009f8:	9d07      	ldr	r5, [sp, #28]
 80009fa:	edd9 4a00 	vldr	s9, [r9]
 80009fe:	edd0 7a00 	vldr	s15, [r0]
 8000a02:	ee34 2aa7 	vadd.f32	s4, s9, s15
    p1sp3_0 = p1[0] - p3[0];
 8000a06:	ee74 4ae7 	vsub.f32	s9, s9, s15
    p1ap3_1 = p1[1] + p3[1];
 8000a0a:	edd9 7a01 	vldr	s15, [r9, #4]
 8000a0e:	ed90 7a01 	vldr	s14, [r0, #4]
 8000a12:	ee77 2a87 	vadd.f32	s5, s15, s14
    p1sp3_1 = p1[1] - p3[1];
 8000a16:	ee77 7ac7 	vsub.f32	s15, s15, s14

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000a1a:	ed92 3a01 	vldr	s6, [r2, #4]
 8000a1e:	ee73 5a24 	vadd.f32	s11, s6, s9
 8000a22:	ed93 5a01 	vldr	s10, [r3, #4]
 8000a26:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8000a2a:	edcd 5a10 	vstr	s11, [sp, #64]	@ 0x40
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a2e:	edd2 3a00 	vldr	s7, [r2]
 8000a32:	ee77 6ae3 	vsub.f32	s13, s15, s7
 8000a36:	ed93 4a00 	vldr	s8, [r3]
 8000a3a:	ee76 6a84 	vadd.f32	s13, s13, s8
 8000a3e:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000a42:	ee32 6a63 	vsub.f32	s12, s4, s7
 8000a46:	ee36 6a44 	vsub.f32	s12, s12, s8
 8000a4a:	ed8d 6a0c 	vstr	s12, [sp, #48]	@ 0x30
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000a4e:	ee32 7ac3 	vsub.f32	s14, s5, s6
 8000a52:	ee37 7a45 	vsub.f32	s14, s14, s10
 8000a56:	ed8d 7a0d 	vstr	s14, [sp, #52]	@ 0x34
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000a5a:	ee74 4ac3 	vsub.f32	s9, s9, s6
 8000a5e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8000a62:	ed8d 5a08 	vstr	s10, [sp, #32]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000a66:	ee73 7aa7 	vadd.f32	s15, s7, s15
 8000a6a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8000a6e:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a72:	ee73 3a82 	vadd.f32	s7, s7, s4
 8000a76:	ee34 4a23 	vadd.f32	s8, s8, s7
 8000a7a:	ed89 4a00 	vstr	s8, [r9]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a7e:	edd2 4a01 	vldr	s9, [r2, #4]
 8000a82:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8000a86:	ed93 4a01 	vldr	s8, [r3, #4]
 8000a8a:	ee74 4a84 	vadd.f32	s9, s9, s8
 8000a8e:	edc9 4a01 	vstr	s9, [r9, #4]

    // COL 2
    twR = tw2[0];
 8000a92:	edda 3a00 	vldr	s7, [sl]
    twI = tw2[1];
 8000a96:	ed9a 4a01 	vldr	s8, [sl, #4]

    m0 = t2[0] * twR;
 8000a9a:	ee65 4aa3 	vmul.f32	s9, s11, s7
    m1 = t2[1] * twI;
 8000a9e:	ee26 3a84 	vmul.f32	s6, s13, s8
    m2 = t2[1] * twR;
 8000aa2:	ee66 6aa3 	vmul.f32	s13, s13, s7
    m3 = t2[0] * twI;
 8000aa6:	ee65 5a84 	vmul.f32	s11, s11, s8

    *p2++ = m0 + m1;
 8000aaa:	ee74 4a83 	vadd.f32	s9, s9, s6
 8000aae:	edc2 4a00 	vstr	s9, [r2]
    *p2++ = m2 - m3;
 8000ab2:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8000ab6:	edc2 6a01 	vstr	s13, [r2, #4]
    // COL 3
    twR = tw3[0];
 8000aba:	edd4 4a00 	vldr	s9, [r4]
    twI = tw3[1];
 8000abe:	edd4 5a01 	vldr	s11, [r4, #4]

    m0 = t3[0] * twR;
 8000ac2:	ee66 6a24 	vmul.f32	s13, s12, s9
    m1 = t3[1] * twI;
 8000ac6:	ee27 4a25 	vmul.f32	s8, s14, s11
    m2 = t3[1] * twR;
 8000aca:	ee27 7a24 	vmul.f32	s14, s14, s9
    m3 = t3[0] * twI;
 8000ace:	ee26 6a25 	vmul.f32	s12, s12, s11

    *p3++ = m0 + m1;
 8000ad2:	ee76 6a84 	vadd.f32	s13, s13, s8
 8000ad6:	edc0 6a00 	vstr	s13, [r0]
    *p3++ = m2 - m3;
 8000ada:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000ade:	ed80 7a01 	vstr	s14, [r0, #4]
    // COL 4
    twR = tw4[0];
 8000ae2:	ed9e 6a00 	vldr	s12, [lr]
    twI = tw4[1];
 8000ae6:	edde 6a01 	vldr	s13, [lr, #4]

    m0 = t4[0] * twR;
 8000aea:	ee25 7a06 	vmul.f32	s14, s10, s12
    m1 = t4[1] * twI;
 8000aee:	ee67 5aa6 	vmul.f32	s11, s15, s13
    m2 = t4[1] * twR;
 8000af2:	ee67 7a86 	vmul.f32	s15, s15, s12
    m3 = t4[0] * twI;
 8000af6:	ee25 5a26 	vmul.f32	s10, s10, s13

    *p4++ = m0 + m1;
 8000afa:	ee37 7a25 	vadd.f32	s14, s14, s11
 8000afe:	ed83 7a00 	vstr	s14, [r3]
    *p4++ = m2 - m3;
 8000b02:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8000b06:	edc3 7a01 	vstr	s15, [r3, #4]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000b0a:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8000b0e:	2304      	movs	r3, #4
 8000b10:	9f04      	ldr	r7, [sp, #16]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4621      	mov	r1, r4
 8000b16:	9805      	ldr	r0, [sp, #20]
 8000b18:	f000 f884 	bl	8000c24 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	4621      	mov	r1, r4
 8000b22:	4630      	mov	r0, r6
 8000b24:	f000 f87e 	bl	8000c24 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8000b28:	2304      	movs	r3, #4
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	9802      	ldr	r0, [sp, #8]
 8000b30:	f000 f878 	bl	8000c24 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8000b34:	2304      	movs	r3, #4
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	4621      	mov	r1, r4
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	f000 f872 	bl	8000c24 <arm_radix8_butterfly_f32>
}
 8000b40:	b015      	add	sp, #84	@ 0x54
 8000b42:	ecbd 8b04 	vpop	{d8-d9}
 8000b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b4a <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8000b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b4e:	4606      	mov	r6, r0
 8000b50:	460c      	mov	r4, r1
 8000b52:	4617      	mov	r7, r2
 8000b54:	4698      	mov	r8, r3
    uint32_t  L = S->fftLen, l;
 8000b56:	8805      	ldrh	r5, [r0, #0]
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 8000b58:	2a01      	cmp	r2, #1
 8000b5a:	d00f      	beq.n	8000b7c <arm_cfft_f32+0x32>
            *pSrc = -*pSrc;
            pSrc += 2;
        }
    }

    switch (L)
 8000b5c:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8000b60:	d007      	beq.n	8000b72 <arm_cfft_f32+0x28>
 8000b62:	d829      	bhi.n	8000bb8 <arm_cfft_f32+0x6e>
 8000b64:	2d40      	cmp	r5, #64	@ 0x40
 8000b66:	d035      	beq.n	8000bd4 <arm_cfft_f32+0x8a>
 8000b68:	d819      	bhi.n	8000b9e <arm_cfft_f32+0x54>
 8000b6a:	2d10      	cmp	r5, #16
 8000b6c:	d019      	beq.n	8000ba2 <arm_cfft_f32+0x58>
 8000b6e:	2d20      	cmp	r5, #32
 8000b70:	d11b      	bne.n	8000baa <arm_cfft_f32+0x60>
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
        break;
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8000b72:	4621      	mov	r1, r4
 8000b74:	4630      	mov	r0, r6
 8000b76:	f7ff fd89 	bl	800068c <arm_cfft_radix8by4_f32>
        break;
 8000b7a:	e016      	b.n	8000baa <arm_cfft_f32+0x60>
        pSrc = p1 + 1;
 8000b7c:	f101 0c04 	add.w	ip, r1, #4
        for(l=0; l<L; l++)
 8000b80:	2100      	movs	r1, #0
 8000b82:	e009      	b.n	8000b98 <arm_cfft_f32+0x4e>
            *pSrc = -*pSrc;
 8000b84:	eddc 7a00 	vldr	s15, [ip]
 8000b88:	eef1 7a67 	vneg.f32	s15, s15
 8000b8c:	4663      	mov	r3, ip
 8000b8e:	f10c 0c08 	add.w	ip, ip, #8
 8000b92:	edc3 7a00 	vstr	s15, [r3]
        for(l=0; l<L; l++)
 8000b96:	3101      	adds	r1, #1
 8000b98:	42a9      	cmp	r1, r5
 8000b9a:	d3f3      	bcc.n	8000b84 <arm_cfft_f32+0x3a>
 8000b9c:	e7de      	b.n	8000b5c <arm_cfft_f32+0x12>
    switch (L)
 8000b9e:	2d80      	cmp	r5, #128	@ 0x80
 8000ba0:	d103      	bne.n	8000baa <arm_cfft_f32+0x60>
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8000ba2:	4621      	mov	r1, r4
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	f7ff fc77 	bl	8000498 <arm_cfft_radix8by2_f32>
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
        break;
    }

    if ( bitReverseFlag )
 8000baa:	f1b8 0f00 	cmp.w	r8, #0
 8000bae:	d118      	bne.n	8000be2 <arm_cfft_f32+0x98>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);

    if (ifftFlag == 1U)
 8000bb0:	2f01      	cmp	r7, #1
 8000bb2:	d01c      	beq.n	8000bee <arm_cfft_f32+0xa4>
            *pSrc++ *=   invL ;
            *pSrc  = -(*pSrc) * invL;
            pSrc++;
        }
    }
}
 8000bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (L)
 8000bb8:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8000bbc:	d0d9      	beq.n	8000b72 <arm_cfft_f32+0x28>
 8000bbe:	d806      	bhi.n	8000bce <arm_cfft_f32+0x84>
 8000bc0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8000bc4:	d006      	beq.n	8000bd4 <arm_cfft_f32+0x8a>
 8000bc6:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8000bca:	d0ea      	beq.n	8000ba2 <arm_cfft_f32+0x58>
 8000bcc:	e7ed      	b.n	8000baa <arm_cfft_f32+0x60>
 8000bce:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8000bd2:	d1ea      	bne.n	8000baa <arm_cfft_f32+0x60>
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	6872      	ldr	r2, [r6, #4]
 8000bd8:	4629      	mov	r1, r5
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f000 f822 	bl	8000c24 <arm_radix8_butterfly_f32>
        break;
 8000be0:	e7e3      	b.n	8000baa <arm_cfft_f32+0x60>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8000be2:	68b2      	ldr	r2, [r6, #8]
 8000be4:	89b1      	ldrh	r1, [r6, #12]
 8000be6:	4620      	mov	r0, r4
 8000be8:	f7ff fb0a 	bl	8000200 <arm_bitreversal_32>
 8000bec:	e7e0      	b.n	8000bb0 <arm_cfft_f32+0x66>
        invL = 1.0f/(float32_t)L;
 8000bee:	ee07 5a90 	vmov	s15, r5
 8000bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        for(l=0; l<L; l++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e00d      	b.n	8000c1e <arm_cfft_f32+0xd4>
            *pSrc++ *=   invL ;
 8000c02:	edd4 7a00 	vldr	s15, [r4]
 8000c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c0a:	edc4 7a00 	vstr	s15, [r4]
            *pSrc  = -(*pSrc) * invL;
 8000c0e:	edd4 7a01 	vldr	s15, [r4, #4]
 8000c12:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8000c16:	edc4 7a01 	vstr	s15, [r4, #4]
            pSrc++;
 8000c1a:	3408      	adds	r4, #8
        for(l=0; l<L; l++)
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	42ab      	cmp	r3, r5
 8000c20:	d3ef      	bcc.n	8000c02 <arm_cfft_f32+0xb8>
 8000c22:	e7c7      	b.n	8000bb4 <arm_cfft_f32+0x6a>

08000c24 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8000c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c28:	ed2d 8b0e 	vpush	{d8-d14}
 8000c2c:	b08d      	sub	sp, #52	@ 0x34
 8000c2e:	9106      	str	r1, [sp, #24]
 8000c30:	4615      	mov	r5, r2
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;

   n2 = fftLen;
 8000c32:	9105      	str	r1, [sp, #20]
 8000c34:	4681      	mov	r9, r0
 8000c36:	930a      	str	r3, [sp, #40]	@ 0x28

   do
   {
      n1 = n2;
      n2 = n2 >> 3;
 8000c38:	9b05      	ldr	r3, [sp, #20]
 8000c3a:	08da      	lsrs	r2, r3, #3
 8000c3c:	920b      	str	r2, [sp, #44]	@ 0x2c
      i1 = 0;
 8000c3e:	f04f 0e00 	mov.w	lr, #0
 8000c42:	9509      	str	r5, [sp, #36]	@ 0x24

      do
      {
         i2 = i1 + n2;
 8000c44:	eb0e 0002 	add.w	r0, lr, r2
         i3 = i2 + n2;
 8000c48:	eb0e 0342 	add.w	r3, lr, r2, lsl #1
         i4 = i3 + n2;
 8000c4c:	18d6      	adds	r6, r2, r3
         i5 = i4 + n2;
 8000c4e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
         i6 = i5 + n2;
 8000c52:	1857      	adds	r7, r2, r1
         i7 = i6 + n2;
 8000c54:	eb01 0c42 	add.w	ip, r1, r2, lsl #1
         i8 = i7 + n2;
 8000c58:	eb02 0b0c 	add.w	fp, r2, ip
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000c5c:	ea4f 0ace 	mov.w	sl, lr, lsl #3
 8000c60:	eb09 04ce 	add.w	r4, r9, lr, lsl #3
 8000c64:	ed94 7a00 	vldr	s14, [r4]
 8000c68:	ea4f 08c1 	mov.w	r8, r1, lsl #3
 8000c6c:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 8000c70:	edd1 7a00 	vldr	s15, [r1]
 8000c74:	ee77 6a27 	vadd.f32	s13, s14, s15
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8000c78:	ee37 7a67 	vsub.f32	s14, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000c7c:	00c5      	lsls	r5, r0, #3
 8000c7e:	9500      	str	r5, [sp, #0]
 8000c80:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
 8000c84:	9001      	str	r0, [sp, #4]
 8000c86:	ed90 6a00 	vldr	s12, [r0]
 8000c8a:	00f8      	lsls	r0, r7, #3
 8000c8c:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8000c90:	9702      	str	r7, [sp, #8]
 8000c92:	edd7 7a00 	vldr	s15, [r7]
 8000c96:	ee76 5a27 	vadd.f32	s11, s12, s15
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8000c9a:	ee36 6a67 	vsub.f32	s12, s12, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000c9e:	00df      	lsls	r7, r3, #3
 8000ca0:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8000ca4:	edd3 7a00 	vldr	s15, [r3]
 8000ca8:	ea4f 05cc 	mov.w	r5, ip, lsl #3
 8000cac:	9503      	str	r5, [sp, #12]
 8000cae:	eb09 0ccc 	add.w	ip, r9, ip, lsl #3
 8000cb2:	ed9c 5a00 	vldr	s10, [ip]
 8000cb6:	ee77 4a85 	vadd.f32	s9, s15, s10
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8000cba:	ee77 7ac5 	vsub.f32	s15, s15, s10
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8000cbe:	00f5      	lsls	r5, r6, #3
 8000cc0:	9504      	str	r5, [sp, #16]
 8000cc2:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8000cc6:	9607      	str	r6, [sp, #28]
 8000cc8:	edd6 3a00 	vldr	s7, [r6]
 8000ccc:	ea4f 05cb 	mov.w	r5, fp, lsl #3
 8000cd0:	9508      	str	r5, [sp, #32]
 8000cd2:	eb09 0bcb 	add.w	fp, r9, fp, lsl #3
 8000cd6:	ed9b 4a00 	vldr	s8, [fp]
 8000cda:	ee33 5a84 	vadd.f32	s10, s7, s8
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8000cde:	ee73 3ac4 	vsub.f32	s7, s7, s8
         t1 = r1 - r3;
 8000ce2:	ee76 0ae4 	vsub.f32	s1, s13, s9
         r1 = r1 + r3;
 8000ce6:	ee76 6aa4 	vadd.f32	s13, s13, s9
         r3 = r2 - r4;
 8000cea:	ee35 1ac5 	vsub.f32	s2, s11, s10
         r2 = r2 + r4;
 8000cee:	ee75 5a85 	vadd.f32	s11, s11, s10
         pSrc[2 * i1] = r1 + r2;
 8000cf2:	ee36 5aa5 	vadd.f32	s10, s13, s11
 8000cf6:	ed84 5a00 	vstr	s10, [r4]
         pSrc[2 * i5] = r1 - r2;
 8000cfa:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8000cfe:	edc1 6a00 	vstr	s13, [r1]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000d02:	f10a 0a04 	add.w	sl, sl, #4
 8000d06:	44ca      	add	sl, r9
 8000d08:	ed9a 5a00 	vldr	s10, [sl]
 8000d0c:	f108 0804 	add.w	r8, r8, #4
 8000d10:	44c8      	add	r8, r9
 8000d12:	edd8 6a00 	vldr	s13, [r8]
 8000d16:	ee75 5a26 	vadd.f32	s11, s10, s13
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8000d1a:	ee35 5a66 	vsub.f32	s10, s10, s13
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000d1e:	9d00      	ldr	r5, [sp, #0]
 8000d20:	3504      	adds	r5, #4
 8000d22:	444d      	add	r5, r9
 8000d24:	edd5 6a00 	vldr	s13, [r5]
 8000d28:	3004      	adds	r0, #4
 8000d2a:	4448      	add	r0, r9
 8000d2c:	edd0 4a00 	vldr	s9, [r0]
 8000d30:	ee36 3aa4 	vadd.f32	s6, s13, s9
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8000d34:	ee76 6ae4 	vsub.f32	s13, s13, s9
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000d38:	3704      	adds	r7, #4
 8000d3a:	444f      	add	r7, r9
 8000d3c:	edd7 4a00 	vldr	s9, [r7]
 8000d40:	9903      	ldr	r1, [sp, #12]
 8000d42:	1d0e      	adds	r6, r1, #4
 8000d44:	444e      	add	r6, r9
 8000d46:	ed96 4a00 	vldr	s8, [r6]
 8000d4a:	ee34 2a84 	vadd.f32	s4, s9, s8
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8000d4e:	ee74 4ac4 	vsub.f32	s9, s9, s8
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8000d52:	9904      	ldr	r1, [sp, #16]
 8000d54:	3104      	adds	r1, #4
 8000d56:	4449      	add	r1, r9
 8000d58:	ed91 4a00 	vldr	s8, [r1]
 8000d5c:	9c08      	ldr	r4, [sp, #32]
 8000d5e:	3404      	adds	r4, #4
 8000d60:	444c      	add	r4, r9
 8000d62:	edd4 2a00 	vldr	s5, [r4]
 8000d66:	ee74 1a22 	vadd.f32	s3, s8, s5
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8000d6a:	ee34 4a62 	vsub.f32	s8, s8, s5
         t2 = r1 - s3;
 8000d6e:	ee75 2ac2 	vsub.f32	s5, s11, s4
         r1 = r1 + s3;
 8000d72:	ee75 5a82 	vadd.f32	s11, s11, s4
         s3 = r2 - r4;
 8000d76:	ee33 2a61 	vsub.f32	s4, s6, s3
         r2 = r2 + r4;
 8000d7a:	ee33 3a21 	vadd.f32	s6, s6, s3
         pSrc[2 * i1 + 1] = r1 + r2;
 8000d7e:	ee75 1a83 	vadd.f32	s3, s11, s6
 8000d82:	edca 1a00 	vstr	s3, [sl]
         pSrc[2 * i5 + 1] = r1 - r2;
 8000d86:	ee75 5ac3 	vsub.f32	s11, s11, s6
 8000d8a:	edc8 5a00 	vstr	s11, [r8]
         pSrc[2 * i3]     = t1 + s3;
 8000d8e:	ee70 5a82 	vadd.f32	s11, s1, s4
 8000d92:	edc3 5a00 	vstr	s11, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8000d96:	ee30 3ac2 	vsub.f32	s6, s1, s4
 8000d9a:	ed8c 3a00 	vstr	s6, [ip]
         pSrc[2 * i3 + 1] = t2 - r3;
 8000d9e:	ee72 5ac1 	vsub.f32	s11, s5, s2
 8000da2:	edc7 5a00 	vstr	s11, [r7]
         pSrc[2 * i7 + 1] = t2 + r3;
 8000da6:	ee71 5a22 	vadd.f32	s11, s2, s5
 8000daa:	edc6 5a00 	vstr	s11, [r6]
         r1 = (r6 - r8) * C81;
 8000dae:	ee76 5a63 	vsub.f32	s11, s12, s7
 8000db2:	ed9f 3af3 	vldr	s6, [pc, #972]	@ 8001180 <arm_radix8_butterfly_f32+0x55c>
 8000db6:	ee65 5a83 	vmul.f32	s11, s11, s6
         r6 = (r6 + r8) * C81;
 8000dba:	ee36 6a23 	vadd.f32	s12, s12, s7
 8000dbe:	ee26 6a03 	vmul.f32	s12, s12, s6
         r2 = (s6 - s8) * C81;
 8000dc2:	ee76 3ac4 	vsub.f32	s7, s13, s8
 8000dc6:	ee63 3a83 	vmul.f32	s7, s7, s6
         s6 = (s6 + s8) * C81;
 8000dca:	ee76 6a84 	vadd.f32	s13, s13, s8
 8000dce:	ee66 6a83 	vmul.f32	s13, s13, s6
         t1 = r5 - r1;
 8000dd2:	ee37 4a65 	vsub.f32	s8, s14, s11
         r5 = r5 + r1;
 8000dd6:	ee37 7a25 	vadd.f32	s14, s14, s11
         r8 = r7 - r6;
 8000dda:	ee77 5ac6 	vsub.f32	s11, s15, s12
         r7 = r7 + r6;
 8000dde:	ee77 7a86 	vadd.f32	s15, s15, s12
         t2 = s5 - r2;
 8000de2:	ee35 3a63 	vsub.f32	s6, s10, s7
         s5 = s5 + r2;
 8000de6:	ee35 6a23 	vadd.f32	s12, s10, s7
         s8 = s7 - s6;
 8000dea:	ee34 5ae6 	vsub.f32	s10, s9, s13
         s7 = s7 + s6;
 8000dee:	ee74 6aa6 	vadd.f32	s13, s9, s13
         pSrc[2 * i2]     = r5 + s7;
 8000df2:	ee77 4a26 	vadd.f32	s9, s14, s13
 8000df6:	9b01      	ldr	r3, [sp, #4]
 8000df8:	edc3 4a00 	vstr	s9, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8000dfc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000e00:	ed8b 7a00 	vstr	s14, [fp]
         pSrc[2 * i6]     = t1 + s8;
 8000e04:	ee34 7a05 	vadd.f32	s14, s8, s10
 8000e08:	9f02      	ldr	r7, [sp, #8]
 8000e0a:	ed87 7a00 	vstr	s14, [r7]
         pSrc[2 * i4]     = t1 - s8;
 8000e0e:	ee34 4a45 	vsub.f32	s8, s8, s10
 8000e12:	9e07      	ldr	r6, [sp, #28]
 8000e14:	ed86 4a00 	vstr	s8, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
 8000e18:	ee36 7a67 	vsub.f32	s14, s12, s15
 8000e1c:	ed85 7a00 	vstr	s14, [r5]
         pSrc[2 * i8 + 1] = s5 + r7;
 8000e20:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000e24:	edc4 7a00 	vstr	s15, [r4]
         pSrc[2 * i6 + 1] = t2 - r8;
 8000e28:	ee73 7a65 	vsub.f32	s15, s6, s11
 8000e2c:	edc0 7a00 	vstr	s15, [r0]
         pSrc[2 * i4 + 1] = t2 + r8;
 8000e30:	ee75 5a83 	vadd.f32	s11, s11, s6
 8000e34:	edc1 5a00 	vstr	s11, [r1]

         i1 += n1;
 8000e38:	9b05      	ldr	r3, [sp, #20]
 8000e3a:	449e      	add	lr, r3
      } while (i1 < fftLen);
 8000e3c:	9b06      	ldr	r3, [sp, #24]
 8000e3e:	4573      	cmp	r3, lr
 8000e40:	f63f af00 	bhi.w	8000c44 <arm_radix8_butterfly_f32+0x20>

      if (n2 < 8)
 8000e44:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000e46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8000e48:	2a07      	cmp	r2, #7
 8000e4a:	f240 81bb 	bls.w	80011c4 <arm_radix8_butterfly_f32+0x5a0>
         break;

      ia1 = 0;
      j = 1;
 8000e4e:	f04f 0801 	mov.w	r8, #1
      ia1 = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	46cb      	mov	fp, r9
 8000e56:	46c1      	mov	r9, r8
 8000e58:	4690      	mov	r8, r2

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8000e5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000e5c:	4413      	add	r3, r2
         ia1 = id;
         ia2 = ia1 + id;
         ia3 = ia2 + id;
 8000e5e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
         ia4 = ia3 + id;
         ia5 = ia4 + id;
 8000e62:	eb03 0283 	add.w	r2, r3, r3, lsl #2
         ia6 = ia5 + id;
 8000e66:	eb03 0e02 	add.w	lr, r3, r2
         ia7 = ia6 + id;
 8000e6a:	eb02 0c43 	add.w	ip, r2, r3, lsl #1

         co2 = pCoef[2 * ia1];
 8000e6e:	00df      	lsls	r7, r3, #3
 8000e70:	eb05 00c3 	add.w	r0, r5, r3, lsl #3
 8000e74:	edd0 8a00 	vldr	s17, [r0]
         co3 = pCoef[2 * ia2];
 8000e78:	011e      	lsls	r6, r3, #4
 8000e7a:	eb05 1003 	add.w	r0, r5, r3, lsl #4
 8000e7e:	ed90 8a00 	vldr	s16, [r0]
         co4 = pCoef[2 * ia3];
 8000e82:	00cc      	lsls	r4, r1, #3
 8000e84:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8000e88:	ed91 0a00 	vldr	s0, [r1]
         co5 = pCoef[2 * ia4];
 8000e8c:	0158      	lsls	r0, r3, #5
 8000e8e:	eb05 1143 	add.w	r1, r5, r3, lsl #5
 8000e92:	edd1 0a00 	vldr	s1, [r1]
         co6 = pCoef[2 * ia5];
 8000e96:	00d1      	lsls	r1, r2, #3
 8000e98:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000e9c:	ed92 1a00 	vldr	s2, [r2]
         co7 = pCoef[2 * ia6];
 8000ea0:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 8000ea4:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 8000ea8:	edde 1a00 	vldr	s3, [lr]
         co8 = pCoef[2 * ia7];
 8000eac:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 8000eb0:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8000eb4:	ed9c 2a00 	vldr	s4, [ip]
         si2 = pCoef[2 * ia1 + 1];
 8000eb8:	3704      	adds	r7, #4
 8000eba:	442f      	add	r7, r5
 8000ebc:	edd7 2a00 	vldr	s5, [r7]
         si3 = pCoef[2 * ia2 + 1];
 8000ec0:	3604      	adds	r6, #4
 8000ec2:	442e      	add	r6, r5
 8000ec4:	ed96 3a00 	vldr	s6, [r6]
         si4 = pCoef[2 * ia3 + 1];
 8000ec8:	3404      	adds	r4, #4
 8000eca:	442c      	add	r4, r5
 8000ecc:	edd4 3a00 	vldr	s7, [r4]
         si5 = pCoef[2 * ia4 + 1];
 8000ed0:	3004      	adds	r0, #4
 8000ed2:	4428      	add	r0, r5
 8000ed4:	ed90 4a00 	vldr	s8, [r0]
         si6 = pCoef[2 * ia5 + 1];
 8000ed8:	3104      	adds	r1, #4
 8000eda:	4429      	add	r1, r5
 8000edc:	edd1 4a00 	vldr	s9, [r1]
         si7 = pCoef[2 * ia6 + 1];
 8000ee0:	3204      	adds	r2, #4
 8000ee2:	442a      	add	r2, r5
 8000ee4:	ed92 5a00 	vldr	s10, [r2]
         si8 = pCoef[2 * ia7 + 1];
 8000ee8:	f10e 0e04 	add.w	lr, lr, #4
 8000eec:	44ae      	add	lr, r5
 8000eee:	edde 5a00 	vldr	s11, [lr]

         i1 = j;
 8000ef2:	9307      	str	r3, [sp, #28]
 8000ef4:	f8cd 9020 	str.w	r9, [sp, #32]
 8000ef8:	9509      	str	r5, [sp, #36]	@ 0x24

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8000efa:	eb09 0008 	add.w	r0, r9, r8
            i3 = i2 + n2;
 8000efe:	eb09 0348 	add.w	r3, r9, r8, lsl #1
            i4 = i3 + n2;
 8000f02:	eb08 0403 	add.w	r4, r8, r3
            i5 = i4 + n2;
 8000f06:	eb03 0248 	add.w	r2, r3, r8, lsl #1
            i6 = i5 + n2;
 8000f0a:	eb08 0602 	add.w	r6, r8, r2
            i7 = i6 + n2;
 8000f0e:	eb02 0148 	add.w	r1, r2, r8, lsl #1
            i8 = i7 + n2;
 8000f12:	eb08 0a01 	add.w	sl, r8, r1
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000f16:	ea4f 0ec9 	mov.w	lr, r9, lsl #3
 8000f1a:	eb0b 05c9 	add.w	r5, fp, r9, lsl #3
 8000f1e:	ed95 7a00 	vldr	s14, [r5]
 8000f22:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8000f26:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8000f2a:	edd2 7a00 	vldr	s15, [r2]
 8000f2e:	ee77 6a27 	vadd.f32	s13, s14, s15
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8000f32:	ee37 aa67 	vsub.f32	s20, s14, s15
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000f36:	00c7      	lsls	r7, r0, #3
 8000f38:	9700      	str	r7, [sp, #0]
 8000f3a:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8000f3e:	9001      	str	r0, [sp, #4]
 8000f40:	ed90 6a00 	vldr	s12, [r0]
 8000f44:	00f0      	lsls	r0, r6, #3
 8000f46:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
 8000f4a:	9602      	str	r6, [sp, #8]
 8000f4c:	edd6 7a00 	vldr	s15, [r6]
 8000f50:	ee36 7a27 	vadd.f32	s14, s12, s15
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8000f54:	ee36 6a67 	vsub.f32	s12, s12, s15
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000f58:	00df      	lsls	r7, r3, #3
 8000f5a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8000f5e:	edd3 7a00 	vldr	s15, [r3]
 8000f62:	00ce      	lsls	r6, r1, #3
 8000f64:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8000f68:	9103      	str	r1, [sp, #12]
 8000f6a:	ed91 9a00 	vldr	s18, [r1]
 8000f6e:	ee77 9a89 	vadd.f32	s19, s15, s18
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8000f72:	ee77 7ac9 	vsub.f32	s15, s15, s18
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8000f76:	00e1      	lsls	r1, r4, #3
 8000f78:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8000f7c:	9404      	str	r4, [sp, #16]
 8000f7e:	ed94 ca00 	vldr	s24, [r4]
 8000f82:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8000f86:	eb0b 0aca 	add.w	sl, fp, sl, lsl #3
 8000f8a:	edda aa00 	vldr	s21, [sl]
 8000f8e:	ee3c 9a2a 	vadd.f32	s18, s24, s21
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8000f92:	ee3c ca6a 	vsub.f32	s24, s24, s21
            t1 = r1 - r3;
 8000f96:	ee76 cae9 	vsub.f32	s25, s13, s19
            r1 = r1 + r3;
 8000f9a:	ee76 6aa9 	vadd.f32	s13, s13, s19
            r3 = r2 - r4;
 8000f9e:	ee77 da49 	vsub.f32	s27, s14, s18
            r2 = r2 + r4;
 8000fa2:	ee37 7a09 	vadd.f32	s14, s14, s18
            pSrc[2 * i1] = r1 + r2;
 8000fa6:	ee36 9a87 	vadd.f32	s18, s13, s14
 8000faa:	ed85 9a00 	vstr	s18, [r5]
            r2 = r1 - r2;
 8000fae:	ee36 eac7 	vsub.f32	s28, s13, s14
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000fb2:	f10e 0e04 	add.w	lr, lr, #4
 8000fb6:	44de      	add	lr, fp
 8000fb8:	ed9e ba00 	vldr	s22, [lr]
 8000fbc:	f10c 0c04 	add.w	ip, ip, #4
 8000fc0:	44dc      	add	ip, fp
 8000fc2:	eddc 6a00 	vldr	s13, [ip]
 8000fc6:	ee3b 7a26 	vadd.f32	s14, s22, s13
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8000fca:	ee3b ba66 	vsub.f32	s22, s22, s13
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000fce:	9d00      	ldr	r5, [sp, #0]
 8000fd0:	3504      	adds	r5, #4
 8000fd2:	445d      	add	r5, fp
 8000fd4:	edd5 6a00 	vldr	s13, [r5]
 8000fd8:	3004      	adds	r0, #4
 8000fda:	4458      	add	r0, fp
 8000fdc:	ed90 9a00 	vldr	s18, [r0]
 8000fe0:	ee76 9a89 	vadd.f32	s19, s13, s18
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8000fe4:	ee76 6ac9 	vsub.f32	s13, s13, s18
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000fe8:	3704      	adds	r7, #4
 8000fea:	445f      	add	r7, fp
 8000fec:	edd7 aa00 	vldr	s21, [r7]
 8000ff0:	3604      	adds	r6, #4
 8000ff2:	445e      	add	r6, fp
 8000ff4:	ed96 9a00 	vldr	s18, [r6]
 8000ff8:	ee7a ea89 	vadd.f32	s29, s21, s18
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8000ffc:	ee7a aac9 	vsub.f32	s21, s21, s18
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8001000:	3104      	adds	r1, #4
 8001002:	4459      	add	r1, fp
 8001004:	edd1 ba00 	vldr	s23, [r1]
 8001008:	3404      	adds	r4, #4
 800100a:	445c      	add	r4, fp
 800100c:	ed94 9a00 	vldr	s18, [r4]
 8001010:	ee3b da89 	vadd.f32	s26, s23, s18
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8001014:	ee7b bac9 	vsub.f32	s23, s23, s18
            t2 = s1 - s3;
 8001018:	ee37 9a6e 	vsub.f32	s18, s14, s29
            s1 = s1 + s3;
 800101c:	ee37 7a2e 	vadd.f32	s14, s14, s29
            s3 = s2 - s4;
 8001020:	ee79 eacd 	vsub.f32	s29, s19, s26
            s2 = s2 + s4;
 8001024:	ee79 9a8d 	vadd.f32	s19, s19, s26
            r1 = t1 + s3;
 8001028:	ee3c daae 	vadd.f32	s26, s25, s29
            t1 = t1 - s3;
 800102c:	ee7c caee 	vsub.f32	s25, s25, s29
            pSrc[2 * i1 + 1] = s1 + s2;
 8001030:	ee77 ea29 	vadd.f32	s29, s14, s19
 8001034:	edce ea00 	vstr	s29, [lr]
            s2 = s1 - s2;
 8001038:	ee37 7a69 	vsub.f32	s14, s14, s19
            s1 = t2 - r3;
 800103c:	ee79 9a6d 	vsub.f32	s19, s18, s27
            t2 = t2 + r3;
 8001040:	ee3d 9a89 	vadd.f32	s18, s27, s18
            p1 = co5 * r2;
 8001044:	ee60 da8e 	vmul.f32	s27, s1, s28
            p2 = si5 * s2;
 8001048:	ee64 ea07 	vmul.f32	s29, s8, s14
            p3 = co5 * s2;
 800104c:	ee20 7a87 	vmul.f32	s14, s1, s14
            p4 = si5 * r2;
 8001050:	ee24 ea0e 	vmul.f32	s28, s8, s28
            pSrc[2 * i5]     = p1 + p2;
 8001054:	ee7d daae 	vadd.f32	s27, s27, s29
 8001058:	edc2 da00 	vstr	s27, [r2]
            pSrc[2 * i5 + 1] = p3 - p4;
 800105c:	ee37 7a4e 	vsub.f32	s14, s14, s28
 8001060:	ed8c 7a00 	vstr	s14, [ip]
            p1 = co3 * r1;
 8001064:	ee28 7a0d 	vmul.f32	s14, s16, s26
            p2 = si3 * s1;
 8001068:	ee63 da29 	vmul.f32	s27, s6, s19
            p3 = co3 * s1;
 800106c:	ee68 9a29 	vmul.f32	s19, s16, s19
            p4 = si3 * r1;
 8001070:	ee23 da0d 	vmul.f32	s26, s6, s26
            pSrc[2 * i3]     = p1 + p2;
 8001074:	ee37 7a2d 	vadd.f32	s14, s14, s27
 8001078:	ed83 7a00 	vstr	s14, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800107c:	ee79 9acd 	vsub.f32	s19, s19, s26
 8001080:	edc7 9a00 	vstr	s19, [r7]
            p1 = co7 * t1;
 8001084:	ee21 7aac 	vmul.f32	s14, s3, s25
            p2 = si7 * t2;
 8001088:	ee65 9a09 	vmul.f32	s19, s10, s18
            p3 = co7 * t2;
 800108c:	ee21 9a89 	vmul.f32	s18, s3, s18
            p4 = si7 * t1;
 8001090:	ee65 ca2c 	vmul.f32	s25, s10, s25
            pSrc[2 * i7]     = p1 + p2;
 8001094:	ee37 7a29 	vadd.f32	s14, s14, s19
 8001098:	9a03      	ldr	r2, [sp, #12]
 800109a:	ed82 7a00 	vstr	s14, [r2]
            pSrc[2 * i7 + 1] = p3 - p4;
 800109e:	ee39 9a6c 	vsub.f32	s18, s18, s25
 80010a2:	ed86 9a00 	vstr	s18, [r6]
            r1 = (r6 - r8) * C81;
 80010a6:	ee36 9a4c 	vsub.f32	s18, s12, s24
 80010aa:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001180 <arm_radix8_butterfly_f32+0x55c>
 80010ae:	ee29 9a07 	vmul.f32	s18, s18, s14
            r6 = (r6 + r8) * C81;
 80010b2:	ee36 6a0c 	vadd.f32	s12, s12, s24
 80010b6:	ee26 6a07 	vmul.f32	s12, s12, s14
            s1 = (s6 - s8) * C81;
 80010ba:	ee36 caeb 	vsub.f32	s24, s13, s23
 80010be:	ee2c ca07 	vmul.f32	s24, s24, s14
            s6 = (s6 + s8) * C81;
 80010c2:	ee76 6aab 	vadd.f32	s13, s13, s23
 80010c6:	ee66 6a87 	vmul.f32	s13, s13, s14
            t1 = r5 - r1;
 80010ca:	ee7a 9a49 	vsub.f32	s19, s20, s18
            r5 = r5 + r1;
 80010ce:	ee3a 7a09 	vadd.f32	s14, s20, s18
            r8 = r7 - r6;
 80010d2:	ee37 9ac6 	vsub.f32	s18, s15, s12
            r7 = r7 + r6;
 80010d6:	ee77 7a86 	vadd.f32	s15, s15, s12
            t2 = s5 - s1;
 80010da:	ee7b ba4c 	vsub.f32	s23, s22, s24
            s5 = s5 + s1;
 80010de:	ee3b 6a0c 	vadd.f32	s12, s22, s24
            s8 = s7 - s6;
 80010e2:	ee3a aae6 	vsub.f32	s20, s21, s13
            s7 = s7 + s6;
 80010e6:	ee7a 6aa6 	vadd.f32	s13, s21, s13
            r1 = r5 + s7;
 80010ea:	ee37 ba26 	vadd.f32	s22, s14, s13
            r5 = r5 - s7;
 80010ee:	ee37 7a66 	vsub.f32	s14, s14, s13
            r6 = t1 + s8;
 80010f2:	ee79 aa8a 	vadd.f32	s21, s19, s20
            t1 = t1 - s8;
 80010f6:	ee79 9aca 	vsub.f32	s19, s19, s20
            s1 = s5 - r7;
 80010fa:	ee76 6a67 	vsub.f32	s13, s12, s15
            s5 = s5 + r7;
 80010fe:	ee77 7a86 	vadd.f32	s15, s15, s12
            s6 = t2 - r8;
 8001102:	ee3b aac9 	vsub.f32	s20, s23, s18
            t2 = t2 + r8;
 8001106:	ee39 9a2b 	vadd.f32	s18, s18, s23
            p1 = co2 * r1;
 800110a:	ee28 6a8b 	vmul.f32	s12, s17, s22
            p2 = si2 * s1;
 800110e:	ee62 baa6 	vmul.f32	s23, s5, s13
            p3 = co2 * s1;
 8001112:	ee68 6aa6 	vmul.f32	s13, s17, s13
            p4 = si2 * r1;
 8001116:	ee22 ba8b 	vmul.f32	s22, s5, s22
            pSrc[2 * i2]     = p1 + p2;
 800111a:	ee36 6a2b 	vadd.f32	s12, s12, s23
 800111e:	9b01      	ldr	r3, [sp, #4]
 8001120:	ed83 6a00 	vstr	s12, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8001124:	ee76 6acb 	vsub.f32	s13, s13, s22
 8001128:	edc5 6a00 	vstr	s13, [r5]
            p1 = co8 * r5;
 800112c:	ee62 6a07 	vmul.f32	s13, s4, s14
            p2 = si8 * s5;
 8001130:	ee25 baa7 	vmul.f32	s22, s11, s15
            p3 = co8 * s5;
 8001134:	ee62 7a27 	vmul.f32	s15, s4, s15
            p4 = si8 * r5;
 8001138:	ee25 6a87 	vmul.f32	s12, s11, s14
            pSrc[2 * i8]     = p1 + p2;
 800113c:	ee36 7a8b 	vadd.f32	s14, s13, s22
 8001140:	ed8a 7a00 	vstr	s14, [sl]
            pSrc[2 * i8 + 1] = p3 - p4;
 8001144:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001148:	edc4 7a00 	vstr	s15, [r4]
            p1 = co6 * r6;
 800114c:	ee61 7a2a 	vmul.f32	s15, s2, s21
            p2 = si6 * s6;
 8001150:	ee24 6a8a 	vmul.f32	s12, s9, s20
            p3 = co6 * s6;
 8001154:	ee21 7a0a 	vmul.f32	s14, s2, s20
            p4 = si6 * r6;
 8001158:	ee64 6aaa 	vmul.f32	s13, s9, s21
            pSrc[2 * i6]     = p1 + p2;
 800115c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001160:	9e02      	ldr	r6, [sp, #8]
 8001162:	edc6 7a00 	vstr	s15, [r6]
            pSrc[2 * i6 + 1] = p3 - p4;
 8001166:	ee37 7a66 	vsub.f32	s14, s14, s13
 800116a:	ed80 7a00 	vstr	s14, [r0]
            p1 = co4 * t1;
 800116e:	ee60 6a29 	vmul.f32	s13, s0, s19
            p2 = si4 * t2;
 8001172:	ee23 6a89 	vmul.f32	s12, s7, s18
            p3 = co4 * t2;
 8001176:	ee60 7a09 	vmul.f32	s15, s0, s18
            p4 = si4 * t1;
 800117a:	ee23 7aa9 	vmul.f32	s14, s7, s19
 800117e:	e001      	b.n	8001184 <arm_radix8_butterfly_f32+0x560>
 8001180:	3f3504f3 	.word	0x3f3504f3
            pSrc[2 * i4]     = p1 + p2;
 8001184:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001188:	9c04      	ldr	r4, [sp, #16]
 800118a:	edc4 6a00 	vstr	s13, [r4]
            pSrc[2 * i4 + 1] = p3 - p4;
 800118e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001192:	edc1 7a00 	vstr	s15, [r1]

            i1 += n1;
 8001196:	9b05      	ldr	r3, [sp, #20]
 8001198:	4499      	add	r9, r3
         } while (i1 < fftLen);
 800119a:	9b06      	ldr	r3, [sp, #24]
 800119c:	454b      	cmp	r3, r9
 800119e:	f63f aeac 	bhi.w	8000efa <arm_radix8_butterfly_f32+0x2d6>

         j++;
 80011a2:	9b07      	ldr	r3, [sp, #28]
 80011a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80011a8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80011aa:	f109 0901 	add.w	r9, r9, #1
      } while (j < n2);
 80011ae:	45c8      	cmp	r8, r9
 80011b0:	f63f ae53 	bhi.w	8000e5a <arm_radix8_butterfly_f32+0x236>

      twidCoefModifier <<= 3;
 80011b4:	46d9      	mov	r9, fp
 80011b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	930a      	str	r3, [sp, #40]	@ 0x28
      n2 = n2 >> 3;
 80011be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80011c0:	9305      	str	r3, [sp, #20]
 80011c2:	e539      	b.n	8000c38 <arm_radix8_butterfly_f32+0x14>
   } while (n2 > 7);
}
 80011c4:	b00d      	add	sp, #52	@ 0x34
 80011c6:	ecbd 8b0e 	vpop	{d8-d14}
 80011ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011ce:	bf00      	nop

080011d0 <arm_cmplx_mag_squared_f32>:
  float32_t mul1, mul2, mul3, mul4;              /* Temporary variables */
  float32_t mul5, mul6, mul7, mul8;              /* Temporary variables */
  float32_t out1, out2, out3, out4;              /* Temporary variables to hold output values */

  /*loop Unrolling */
  blkCnt = numSamples >> 2U;
 80011d0:	0893      	lsrs	r3, r2, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80011d2:	e032      	b.n	800123a <arm_cmplx_mag_squared_f32+0x6a>
  {
    /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
    /* read real input sample from source buffer */
    real1 = pSrc[0];
 80011d4:	edd0 7a00 	vldr	s15, [r0]
    /* read imaginary input sample from source buffer */
    imag1 = pSrc[1];
 80011d8:	ed90 7a01 	vldr	s14, [r0, #4]

    /* calculate power of real value */
    mul1 = real1 * real1;
 80011dc:	ee27 6aa7 	vmul.f32	s12, s15, s15

    /* read real input sample from source buffer */
    real2 = pSrc[2];
 80011e0:	edd0 7a02 	vldr	s15, [r0, #8]

    /* calculate power of imaginary value */
    mul2 = imag1 * imag1;
 80011e4:	ee27 4a07 	vmul.f32	s8, s14, s14

    /* read imaginary input sample from source buffer */
    imag2 = pSrc[3];
 80011e8:	ed90 7a03 	vldr	s14, [r0, #12]

    /* calculate power of real value */
    mul3 = real2 * real2;
 80011ec:	ee67 6aa7 	vmul.f32	s13, s15, s15

    /* read real input sample from source buffer */
    real3 = pSrc[4];
 80011f0:	edd0 7a04 	vldr	s15, [r0, #16]

    /* calculate power of imaginary value */
    mul4 = imag2 * imag2;
 80011f4:	ee67 4a07 	vmul.f32	s9, s14, s14

    /* read imaginary input sample from source buffer */
    imag3 = pSrc[5];
 80011f8:	edd0 5a05 	vldr	s11, [r0, #20]

    /* calculate power of real value */
    mul5 = real3 * real3;
 80011fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
    /* calculate power of imaginary value */
    mul6 = imag3 * imag3;
 8001200:	ee25 5aa5 	vmul.f32	s10, s11, s11

    /* read real input sample from source buffer */
    real4 = pSrc[6];
 8001204:	edd0 7a06 	vldr	s15, [r0, #24]

    /* accumulate real and imaginary powers */
    out1 = mul1 + mul2;
 8001208:	ee36 6a04 	vadd.f32	s12, s12, s8

    /* read imaginary input sample from source buffer */
    imag4 = pSrc[7];
 800120c:	edd0 5a07 	vldr	s11, [r0, #28]

    /* accumulate real and imaginary powers */
    out2 = mul3 + mul4;
 8001210:	ee76 6aa4 	vadd.f32	s13, s13, s9

    /* calculate power of real value */
    mul7 = real4 * real4;
 8001214:	ee67 7aa7 	vmul.f32	s15, s15, s15
    /* calculate power of imaginary value */
    mul8 = imag4 * imag4;
 8001218:	ee65 5aa5 	vmul.f32	s11, s11, s11

    /* store output to destination */
    pDst[0] = out1;
 800121c:	ed81 6a00 	vstr	s12, [r1]

    /* accumulate real and imaginary powers */
    out3 = mul5 + mul6;
 8001220:	ee37 7a05 	vadd.f32	s14, s14, s10

    /* store output to destination */
    pDst[1] = out2;
 8001224:	edc1 6a01 	vstr	s13, [r1, #4]

    /* accumulate real and imaginary powers */
    out4 = mul7 + mul8;
 8001228:	ee77 7aa5 	vadd.f32	s15, s15, s11

    /* store output to destination */
    pDst[2] = out3;
 800122c:	ed81 7a02 	vstr	s14, [r1, #8]

    /* increment destination pointer by 8 to process next samples */
    pSrc += 8U;
 8001230:	3020      	adds	r0, #32

    /* store output to destination */
    pDst[3] = out4;
 8001232:	edc1 7a03 	vstr	s15, [r1, #12]

    /* increment destination pointer by 4 to process next samples */
    pDst += 4U;
 8001236:	3110      	adds	r1, #16

    /* Decrement the loop counter */
    blkCnt--;
 8001238:	3b01      	subs	r3, #1
  while (blkCnt > 0U)
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1ca      	bne.n	80011d4 <arm_cmplx_mag_squared_f32+0x4>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 800123e:	f002 0203 	and.w	r2, r2, #3

  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8001242:	e00f      	b.n	8001264 <arm_cmplx_mag_squared_f32+0x94>
  {
    /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
    real = *pSrc++;
 8001244:	4603      	mov	r3, r0
 8001246:	3308      	adds	r3, #8
 8001248:	edd0 7a00 	vldr	s15, [r0]
    imag = *pSrc++;
 800124c:	ed90 7a01 	vldr	s14, [r0, #4]

    /* out = (real * real) + (imag * imag) */
    /* store the result in the destination buffer. */
    *pDst++ = (real * real) + (imag * imag);
 8001250:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001254:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001258:	ee77 7a87 	vadd.f32	s15, s15, s14
 800125c:	ece1 7a01 	vstmia	r1!, {s15}

    /* Decrement the loop counter */
    blkCnt--;
 8001260:	3a01      	subs	r2, #1
    imag = *pSrc++;
 8001262:	4618      	mov	r0, r3
  while (blkCnt > 0U)
 8001264:	2a00      	cmp	r2, #0
 8001266:	d1ed      	bne.n	8001244 <arm_cmplx_mag_squared_f32+0x74>
  }
}
 8001268:	4770      	bx	lr

0800126a <arm_copy_q15>:

void arm_copy_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 800126a:	b430      	push	{r4, r5}
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 800126c:	0894      	lsrs	r4, r2, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800126e:	e00a      	b.n	8001286 <arm_copy_q15+0x1c>
  {
    /* C = A */
    /* Read two inputs */
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8001270:	4603      	mov	r3, r0
 8001272:	f853 5b08 	ldr.w	r5, [r3], #8
 8001276:	468c      	mov	ip, r1
 8001278:	f84c 5b08 	str.w	r5, [ip], #8
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 800127c:	6840      	ldr	r0, [r0, #4]
 800127e:	6048      	str	r0, [r1, #4]

    /* Decrement the loop counter */
    blkCnt--;
 8001280:	3c01      	subs	r4, #1
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8001282:	4661      	mov	r1, ip
 8001284:	4618      	mov	r0, r3
  while (blkCnt > 0U)
 8001286:	2c00      	cmp	r4, #0
 8001288:	d1f2      	bne.n	8001270 <arm_copy_q15+0x6>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 800128a:	f002 0203 	and.w	r2, r2, #3
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 800128e:	e004      	b.n	800129a <arm_copy_q15+0x30>
  {
    /* C = A */
    /* Copy and then store the value in the destination buffer */
    *pDst++ = *pSrc++;
 8001290:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8001294:	f821 3b02 	strh.w	r3, [r1], #2

    /* Decrement the loop counter */
    blkCnt--;
 8001298:	3a01      	subs	r2, #1
  while (blkCnt > 0U)
 800129a:	2a00      	cmp	r2, #0
 800129c:	d1f8      	bne.n	8001290 <arm_copy_q15+0x26>
  }
}
 800129e:	bc30      	pop	{r4, r5}
 80012a0:	4770      	bx	lr
	...

080012a4 <arm_mean_f32>:
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 80012a4:	088b      	lsrs	r3, r1, #2
  float32_t sum = 0.0f;                          /* Temporary result storage */
 80012a6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80012fc <arm_mean_f32+0x58>

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80012aa:	e011      	b.n	80012d0 <arm_mean_f32+0x2c>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    in1 = *pSrc++;
 80012ac:	edd0 5a00 	vldr	s11, [r0]
    in2 = *pSrc++;
 80012b0:	edd0 6a01 	vldr	s13, [r0, #4]
    in3 = *pSrc++;
 80012b4:	ed90 7a02 	vldr	s14, [r0, #8]
    in4 = *pSrc++;
 80012b8:	ed90 6a03 	vldr	s12, [r0, #12]

    sum += in1;
 80012bc:	ee77 7aa5 	vadd.f32	s15, s15, s11
    sum += in2;
 80012c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
    sum += in3;
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
    sum += in4;
 80012c8:	ee76 7a27 	vadd.f32	s15, s12, s15

    /* Decrement the loop counter */
    blkCnt--;
 80012cc:	3b01      	subs	r3, #1
    in4 = *pSrc++;
 80012ce:	3010      	adds	r0, #16
  while (blkCnt > 0U)
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1eb      	bne.n	80012ac <arm_mean_f32+0x8>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80012d4:	f001 0303 	and.w	r3, r1, #3
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 80012d8:	e004      	b.n	80012e4 <arm_mean_f32+0x40>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 80012da:	ecb0 7a01 	vldmia	r0!, {s14}
 80012de:	ee77 7a87 	vadd.f32	s15, s15, s14

    /* Decrement the loop counter */
    blkCnt--;
 80012e2:	3b01      	subs	r3, #1
  while (blkCnt > 0U)
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f8      	bne.n	80012da <arm_mean_f32+0x36>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 80012e8:	ee07 1a10 	vmov	s14, r1
 80012ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80012f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012f4:	edc2 6a00 	vstr	s13, [r2]
}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	00000000 	.word	0x00000000

08001300 <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 8001300:	b500      	push	{lr}
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 8001302:	6943      	ldr	r3, [r0, #20]
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;
 8001304:	f8b0 c000 	ldrh.w	ip, [r0]
 8001308:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800130c:	edd1 7a00 	vldr	s15, [r1]
   xBI = pB[1];
 8001310:	ed91 7a01 	vldr	s14, [r1, #4]
   xAR = pA[0];
   xAI = pA[1];

   twR = *pCoeff++ ;
   twI = *pCoeff++ ;
 8001314:	f103 0008 	add.w	r0, r3, #8

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8001318:	ee77 7aa7 	vadd.f32	s15, s15, s15

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800131c:	ee37 7a07 	vadd.f32	s14, s14, s14

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8001320:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001324:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8001328:	ee66 6a86 	vmul.f32	s13, s13, s12
 800132c:	4613      	mov	r3, r2
 800132e:	3308      	adds	r3, #8
 8001330:	edc2 6a00 	vstr	s13, [r2]
   *pOut++ = 0.5f * ( t1a - t1b );
 8001334:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001338:	ee67 7a86 	vmul.f32	s15, s15, s12
 800133c:	edc2 7a01 	vstr	s15, [r2, #4]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8001340:	eb01 0ecc 	add.w	lr, r1, ip, lsl #3
   pA += 2;
 8001344:	3108      	adds	r1, #8
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8001346:	ed9e 5a01 	vldr	s10, [lr, #4]
      xBR = pB[0];
 800134a:	4672      	mov	r2, lr
 800134c:	f1ae 0e08 	sub.w	lr, lr, #8
 8001350:	ed92 7a00 	vldr	s14, [r2]
      xAR = pA[0];
 8001354:	edd1 4a00 	vldr	s9, [r1]
      xAI = pA[1];
 8001358:	edd1 7a01 	vldr	s15, [r1, #4]

      twR = *pCoeff++;
 800135c:	edd0 6a00 	vldr	s13, [r0]
      twI = *pCoeff++;
 8001360:	edd0 5a01 	vldr	s11, [r0, #4]
 8001364:	3008      	adds	r0, #8

      t1a = xBR - xAR ;
 8001366:	ee37 6a64 	vsub.f32	s12, s14, s9
      t1b = xBI + xAI ;
 800136a:	ee35 4a27 	vadd.f32	s8, s10, s15

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800136e:	ee66 3a86 	vmul.f32	s7, s13, s12
      p1 = twI * t1a;
 8001372:	ee25 6a86 	vmul.f32	s12, s11, s12
      p2 = twR * t1b;
 8001376:	ee66 6a84 	vmul.f32	s13, s13, s8
      p3 = twI * t1b;
 800137a:	ee65 5a84 	vmul.f32	s11, s11, s8

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800137e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8001382:	ee37 7a23 	vadd.f32	s14, s14, s7
 8001386:	ee37 7a25 	vadd.f32	s14, s14, s11
 800138a:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800138e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8001392:	ed83 7a00 	vstr	s14, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8001396:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800139a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800139e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80013a2:	461a      	mov	r2, r3
 80013a4:	3308      	adds	r3, #8
 80013a6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80013aa:	edc2 7a01 	vstr	s15, [r2, #4]

      pA += 2;
 80013ae:	3108      	adds	r1, #8
      pB -= 2;
      k--;
   } while (k > 0U);
 80013b0:	f1bc 0c01 	subs.w	ip, ip, #1
 80013b4:	d1c7      	bne.n	8001346 <stage_rfft_f32+0x46>
}
 80013b6:	f85d fb04 	ldr.w	pc, [sp], #4

080013ba <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 80013ba:	b510      	push	{r4, lr}
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 80013bc:	6943      	ldr	r3, [r0, #20]
   float32_t *pA = p;						/* increasing pointer               */
   float32_t *pB = p;						/* decreasing pointer               */
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;
 80013be:	8800      	ldrh	r0, [r0, #0]
 80013c0:	3801      	subs	r0, #1

   xAR = pA[0];
 80013c2:	edd1 7a00 	vldr	s15, [r1]
   xAI = pA[1];
 80013c6:	ed91 6a01 	vldr	s12, [r1, #4]

   pCoeff += 2 ;
 80013ca:	f103 0e08 	add.w	lr, r3, #8

   *pOut++ = 0.5f * ( xAR + xAI );
 80013ce:	ee37 7a86 	vadd.f32	s14, s15, s12
 80013d2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80013d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80013da:	f102 0c08 	add.w	ip, r2, #8
 80013de:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( xAR - xAI );
 80013e2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80013e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013ea:	edc2 7a01 	vstr	s15, [r2, #4]

   pB  =  p + 2*k ;
 80013ee:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
   pA +=  2	   ;
 80013f2:	3108      	adds	r1, #8

   while (k > 0U)
 80013f4:	e037      	b.n	8001466 <merge_rfft_f32+0xac>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80013f6:	ed94 5a01 	vldr	s10, [r4, #4]
      xBR =   pB[0]    ;
 80013fa:	4623      	mov	r3, r4
 80013fc:	3c08      	subs	r4, #8
 80013fe:	ed93 7a00 	vldr	s14, [r3]
      xAR =  pA[0];
 8001402:	edd1 5a00 	vldr	s11, [r1]
      xAI =  pA[1];
 8001406:	edd1 7a01 	vldr	s15, [r1, #4]

      twR = *pCoeff++;
 800140a:	4672      	mov	r2, lr
 800140c:	3208      	adds	r2, #8
 800140e:	edde 6a00 	vldr	s13, [lr]
      twI = *pCoeff++;
 8001412:	ed9e 6a01 	vldr	s12, [lr, #4]

      t1a = xAR - xBR ;
 8001416:	ee35 4ac7 	vsub.f32	s8, s11, s14
      t1b = xAI + xBI ;
 800141a:	ee75 4a27 	vadd.f32	s9, s10, s15

      r = twR * t1a;
 800141e:	ee26 3a84 	vmul.f32	s6, s13, s8
      s = twI * t1b;
 8001422:	ee66 3a24 	vmul.f32	s7, s12, s9
      t = twI * t1a;
 8001426:	ee26 6a04 	vmul.f32	s12, s12, s8
      u = twR * t1b;
 800142a:	ee66 6aa4 	vmul.f32	s13, s13, s9

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800142e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8001432:	ee37 7a43 	vsub.f32	s14, s14, s6
 8001436:	ee37 7a63 	vsub.f32	s14, s14, s7
 800143a:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800143e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8001442:	4663      	mov	r3, ip
 8001444:	3308      	adds	r3, #8
 8001446:	ed8c 7a00 	vstr	s14, [ip]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800144a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800144e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001452:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001456:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800145a:	edcc 7a01 	vstr	s15, [ip, #4]

      pA += 2;
 800145e:	3108      	adds	r1, #8
      pB -= 2;
      k--;
 8001460:	3801      	subs	r0, #1
      twI = *pCoeff++;
 8001462:	4696      	mov	lr, r2
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8001464:	469c      	mov	ip, r3
   while (k > 0U)
 8001466:	2800      	cmp	r0, #0
 8001468:	d1c5      	bne.n	80013f6 <merge_rfft_f32+0x3c>
   }

}
 800146a:	bd10      	pop	{r4, pc}

0800146c <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 800146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146e:	4604      	mov	r4, r0
 8001470:	460d      	mov	r5, r1
 8001472:	4616      	mov	r6, r2
   arm_cfft_instance_f32 * Sint = &(S->Sint);
   Sint->fftLen = S->fftLenRFFT / 2;
 8001474:	8a02      	ldrh	r2, [r0, #16]
 8001476:	0852      	lsrs	r2, r2, #1
 8001478:	8002      	strh	r2, [r0, #0]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800147a:	461f      	mov	r7, r3
 800147c:	b14b      	cbz	r3, 8001492 <arm_rfft_fast_f32+0x26>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800147e:	4632      	mov	r2, r6
 8001480:	f7ff ff9b 	bl	80013ba <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8001484:	2301      	movs	r3, #1
 8001486:	463a      	mov	r2, r7
 8001488:	4631      	mov	r1, r6
 800148a:	4620      	mov	r0, r4
 800148c:	f7ff fb5d 	bl	8000b4a <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8001490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8001492:	2301      	movs	r3, #1
 8001494:	463a      	mov	r2, r7
 8001496:	f7ff fb58 	bl	8000b4a <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800149a:	4632      	mov	r2, r6
 800149c:	4629      	mov	r1, r5
 800149e:	4620      	mov	r0, r4
 80014a0:	f7ff ff2e 	bl	8001300 <stage_rfft_f32>
}
 80014a4:	e7f4      	b.n	8001490 <arm_rfft_fast_f32+0x24>
	...

080014a8 <arm_rfft_fast_init_f32>:
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
  Sint->fftLen = fftLen/2;
 80014a8:	084b      	lsrs	r3, r1, #1
 80014aa:	8003      	strh	r3, [r0, #0]
  S->fftLenRFFT = fftLen;
 80014ac:	8201      	strh	r1, [r0, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 80014ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014b2:	d050      	beq.n	8001556 <arm_rfft_fast_init_f32+0xae>
 80014b4:	d822      	bhi.n	80014fc <arm_rfft_fast_init_f32+0x54>
 80014b6:	2b40      	cmp	r3, #64	@ 0x40
 80014b8:	d058      	beq.n	800156c <arm_rfft_fast_init_f32+0xc4>
 80014ba:	d810      	bhi.n	80014de <arm_rfft_fast_init_f32+0x36>
 80014bc:	2b10      	cmp	r3, #16
 80014be:	d05f      	beq.n	8001580 <arm_rfft_fast_init_f32+0xd8>
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	d109      	bne.n	80014d8 <arm_rfft_fast_init_f32+0x30>
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
    break;
  case 32U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_32_TABLE_LENGTH;
 80014c4:	2330      	movs	r3, #48	@ 0x30
 80014c6:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 80014c8:	4b32      	ldr	r3, [pc, #200]	@ (8001594 <arm_rfft_fast_init_f32+0xec>)
 80014ca:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 80014cc:	4b32      	ldr	r3, [pc, #200]	@ (8001598 <arm_rfft_fast_init_f32+0xf0>)
 80014ce:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80014d0:	4b32      	ldr	r3, [pc, #200]	@ (800159c <arm_rfft_fast_init_f32+0xf4>)
 80014d2:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 80014d4:	2000      	movs	r0, #0
    break;
 80014d6:	4770      	bx	lr
  switch (Sint->fftLen)
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014dc:	4770      	bx	lr
 80014de:	2b80      	cmp	r3, #128	@ 0x80
 80014e0:	d109      	bne.n	80014f6 <arm_rfft_fast_init_f32+0x4e>
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 80014e2:	23d0      	movs	r3, #208	@ 0xd0
 80014e4:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 80014e6:	4b2e      	ldr	r3, [pc, #184]	@ (80015a0 <arm_rfft_fast_init_f32+0xf8>)
 80014e8:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 80014ea:	4b2e      	ldr	r3, [pc, #184]	@ (80015a4 <arm_rfft_fast_init_f32+0xfc>)
 80014ec:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 80014ee:	4b2e      	ldr	r3, [pc, #184]	@ (80015a8 <arm_rfft_fast_init_f32+0x100>)
 80014f0:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 80014f2:	2000      	movs	r0, #0
    break;
 80014f4:	4770      	bx	lr
  switch (Sint->fftLen)
 80014f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014fa:	4770      	bx	lr
 80014fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001500:	d01e      	beq.n	8001540 <arm_rfft_fast_init_f32+0x98>
 8001502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001506:	d010      	beq.n	800152a <arm_rfft_fast_init_f32+0x82>
 8001508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800150c:	d10a      	bne.n	8001524 <arm_rfft_fast_init_f32+0x7c>
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 800150e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001512:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 8001514:	4b25      	ldr	r3, [pc, #148]	@ (80015ac <arm_rfft_fast_init_f32+0x104>)
 8001516:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8001518:	4b25      	ldr	r3, [pc, #148]	@ (80015b0 <arm_rfft_fast_init_f32+0x108>)
 800151a:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800151c:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <arm_rfft_fast_init_f32+0x10c>)
 800151e:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 8001520:	2000      	movs	r0, #0
    break;
 8001522:	4770      	bx	lr
  switch (Sint->fftLen)
 8001524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001528:	4770      	bx	lr
    Sint->bitRevLength = ARMBITREVINDEXTABLE_2048_TABLE_LENGTH;
 800152a:	f44f 636e 	mov.w	r3, #3808	@ 0xee0
 800152e:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 8001530:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <arm_rfft_fast_init_f32+0x110>)
 8001532:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 8001534:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <arm_rfft_fast_init_f32+0x114>)
 8001536:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8001538:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <arm_rfft_fast_init_f32+0x118>)
 800153a:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 800153c:	2000      	movs	r0, #0
    break;
 800153e:	4770      	bx	lr
    Sint->bitRevLength = ARMBITREVINDEXTABLE_1024_TABLE_LENGTH;
 8001540:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001544:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 8001546:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <arm_rfft_fast_init_f32+0x11c>)
 8001548:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 800154a:	4b1f      	ldr	r3, [pc, #124]	@ (80015c8 <arm_rfft_fast_init_f32+0x120>)
 800154c:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800154e:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <arm_rfft_fast_init_f32+0x124>)
 8001550:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 8001552:	2000      	movs	r0, #0
    break;
 8001554:	4770      	bx	lr
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 8001556:	f44f 73dc 	mov.w	r3, #440	@ 0x1b8
 800155a:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 800155c:	4b1c      	ldr	r3, [pc, #112]	@ (80015d0 <arm_rfft_fast_init_f32+0x128>)
 800155e:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 8001560:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <arm_rfft_fast_init_f32+0x12c>)
 8001562:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <arm_rfft_fast_init_f32+0x130>)
 8001566:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 8001568:	2000      	movs	r0, #0
    break;
 800156a:	4770      	bx	lr
    Sint->bitRevLength = ARMBITREVINDEXTABLE_64_TABLE_LENGTH;
 800156c:	2338      	movs	r3, #56	@ 0x38
 800156e:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <arm_rfft_fast_init_f32+0x134>)
 8001572:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <arm_rfft_fast_init_f32+0x138>)
 8001576:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <arm_rfft_fast_init_f32+0x13c>)
 800157a:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 800157c:	2000      	movs	r0, #0
    break;
 800157e:	4770      	bx	lr
  case 16U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_16_TABLE_LENGTH;
 8001580:	2314      	movs	r3, #20
 8001582:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 8001584:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <arm_rfft_fast_init_f32+0x140>)
 8001586:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <arm_rfft_fast_init_f32+0x144>)
 800158a:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <arm_rfft_fast_init_f32+0x148>)
 800158e:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 8001590:	2000      	movs	r0, #0
    status = ARM_MATH_ARGUMENT_ERROR;
    break;
  }

  return (status);
}
 8001592:	4770      	bx	lr
 8001594:	0801db6c 	.word	0x0801db6c
 8001598:	080259f4 	.word	0x080259f4
 800159c:	0801a51c 	.word	0x0801a51c
 80015a0:	0801d95c 	.word	0x0801d95c
 80015a4:	080253f4 	.word	0x080253f4
 80015a8:	08019f1c 	.word	0x08019f1c
 80015ac:	0801d26c 	.word	0x0801d26c
 80015b0:	08023bf4 	.word	0x08023bf4
 80015b4:	0801871c 	.word	0x0801871c
 80015b8:	0801a69c 	.word	0x0801a69c
 80015bc:	0801dbf4 	.word	0x0801dbf4
 80015c0:	0801271c 	.word	0x0801271c
 80015c4:	0801c45c 	.word	0x0801c45c
 80015c8:	08021bf4 	.word	0x08021bf4
 80015cc:	0801671c 	.word	0x0801671c
 80015d0:	0801d5ec 	.word	0x0801d5ec
 80015d4:	08024bf4 	.word	0x08024bf4
 80015d8:	0801971c 	.word	0x0801971c
 80015dc:	0801dafc 	.word	0x0801dafc
 80015e0:	080257f4 	.word	0x080257f4
 80015e4:	0801a31c 	.word	0x0801a31c
 80015e8:	0801dbcc 	.word	0x0801dbcc
 80015ec:	08025af4 	.word	0x08025af4
 80015f0:	0801a61c 	.word	0x0801a61c

080015f4 <arm_std_f32>:

void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 80015f4:	b510      	push	{r4, lr}
 80015f6:	4614      	mov	r4, r2
#else
  float32_t squareOfSum;                         /* Square of Sum */
  float32_t var;                                 /* Temporary varaince storage */
#endif

  if (blockSize == 1U)
 80015f8:	2901      	cmp	r1, #1
 80015fa:	d005      	beq.n	8001608 <arm_std_f32+0x14>

#if defined (ARM_MATH_DSP)
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 80015fc:	088b      	lsrs	r3, r1, #2
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 80015fe:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80016b4 <arm_std_f32+0xc0>
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8001602:	eeb0 7a67 	vmov.f32	s14, s15

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8001606:	e024      	b.n	8001652 <arm_std_f32+0x5e>
    *pResult = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	6013      	str	r3, [r2, #0]
    return;
 800160c:	e04e      	b.n	80016ac <arm_std_f32+0xb8>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 800160e:	edd0 6a00 	vldr	s13, [r0]
    sum += in;
 8001612:	ee37 7a26 	vadd.f32	s14, s14, s13
    sumOfSquares += in * in;
 8001616:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800161a:	ee76 6aa7 	vadd.f32	s13, s13, s15
    in = *pSrc++;
 800161e:	edd0 7a01 	vldr	s15, [r0, #4]
    sum += in;
 8001622:	ee37 7a27 	vadd.f32	s14, s14, s15
    sumOfSquares += in * in;
 8001626:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800162a:	ee77 6aa6 	vadd.f32	s13, s15, s13
    in = *pSrc++;
 800162e:	edd0 7a02 	vldr	s15, [r0, #8]
    sum += in;
 8001632:	ee37 7a27 	vadd.f32	s14, s14, s15
    sumOfSquares += in * in;
 8001636:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800163a:	ee77 6aa6 	vadd.f32	s13, s15, s13
    in = *pSrc++;
 800163e:	edd0 7a03 	vldr	s15, [r0, #12]
    sum += in;
 8001642:	ee37 7a27 	vadd.f32	s14, s14, s15
    sumOfSquares += in * in;
 8001646:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800164a:	ee77 7aa6 	vadd.f32	s15, s15, s13

    /* Decrement the loop counter */
    blkCnt--;
 800164e:	3b01      	subs	r3, #1
    in = *pSrc++;
 8001650:	3010      	adds	r0, #16
  while (blkCnt > 0U)
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1db      	bne.n	800160e <arm_std_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8001656:	f001 0303 	and.w	r3, r1, #3

  while (blkCnt > 0U)
 800165a:	e008      	b.n	800166e <arm_std_f32+0x7a>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 800165c:	ecf0 6a01 	vldmia	r0!, {s13}
    sum += in;
 8001660:	ee37 7a26 	vadd.f32	s14, s14, s13
    sumOfSquares += in * in;
 8001664:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8001668:	ee77 7aa6 	vadd.f32	s15, s15, s13

    /* Decrement the loop counter */
    blkCnt--;
 800166c:	3b01      	subs	r3, #1
  while (blkCnt > 0U)
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f4      	bne.n	800165c <arm_std_f32+0x68>
  }

  /* Compute Mean of squares of the input samples
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8001672:	ee06 1a90 	vmov	s13, r1
 8001676:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800167a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800167e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8001682:	ee87 0a86 	vdiv.f32	s0, s15, s12

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8001686:	eec7 7a26 	vdiv.f32	s15, s14, s13

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 800168a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800168e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8001692:	ee67 7a87 	vmul.f32	s15, s15, s14
                                  ((float32_t) blockSize - 1.0f));

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 8001696:	ee30 0a67 	vsub.f32	s0, s0, s15
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
      float32_t in,
      float32_t *pOut)
  {
    if (in >= 0.0f)
 800169a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	db04      	blt.n	80016ae <arm_std_f32+0xba>
#if (__FPU_USED == 1) && defined(__CC_ARM)
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
    *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
    *pOut = __builtin_sqrtf(in);
 80016a4:	f010 fd0c 	bl	80120c0 <sqrtf>
 80016a8:	ed84 0a00 	vstr	s0, [r4]

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32(var, pResult);

#endif /* #if defined (ARM_MATH_DSP) */
}
 80016ac:	bd10      	pop	{r4, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80016ae:	2300      	movs	r3, #0
 80016b0:	6023      	str	r3, [r4, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80016b2:	e7fb      	b.n	80016ac <arm_std_f32+0xb8>
 80016b4:	00000000 	.word	0x00000000

080016b8 <audio_classifier_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool audio_classifier_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	4604      	mov	r4, r0
 80016bc:	460a      	mov	r2, r1
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_audio_classifier_weights_map, 1, params)) {
 80016be:	2101      	movs	r1, #1
 80016c0:	483c      	ldr	r0, [pc, #240]	@ (80017b4 <audio_classifier_configure_weights+0xfc>)
 80016c2:	f00d f91d 	bl	800e900 <ai_platform_get_weights_map>
 80016c6:	4605      	mov	r5, r0
 80016c8:	2800      	cmp	r0, #0
 80016ca:	d06d      	beq.n	80017a8 <audio_classifier_configure_weights+0xf0>
    /* Updating weights (byte) offsets */
    
    _conv1_conv1_0_Conv_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80016cc:	4a3a      	ldr	r2, [pc, #232]	@ (80017b8 <audio_classifier_configure_weights+0x100>)
 80016ce:	6813      	ldr	r3, [r2, #0]
 80016d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80016d4:	6013      	str	r3, [r2, #0]
    _conv1_conv1_0_Conv_output_0_weights_array.data = AI_PTR(g_audio_classifier_weights_map[0] + 0);
 80016d6:	4b37      	ldr	r3, [pc, #220]	@ (80017b4 <audio_classifier_configure_weights+0xfc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6093      	str	r3, [r2, #8]
    _conv1_conv1_0_Conv_output_0_weights_array.data_start = AI_PTR(g_audio_classifier_weights_map[0] + 0);
 80016dc:	60d3      	str	r3, [r2, #12]
    _conv1_conv1_0_Conv_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80016de:	4a37      	ldr	r2, [pc, #220]	@ (80017bc <audio_classifier_configure_weights+0x104>)
 80016e0:	6811      	ldr	r1, [r2, #0]
 80016e2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80016e6:	6011      	str	r1, [r2, #0]
    _conv1_conv1_0_Conv_output_0_bias_array.data = AI_PTR(g_audio_classifier_weights_map[0] + 144);
 80016e8:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80016ec:	6091      	str	r1, [r2, #8]
    _conv1_conv1_0_Conv_output_0_bias_array.data_start = AI_PTR(g_audio_classifier_weights_map[0] + 144);
 80016ee:	60d1      	str	r1, [r2, #12]
    _conv2_conv2_0_Conv_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80016f0:	4a33      	ldr	r2, [pc, #204]	@ (80017c0 <audio_classifier_configure_weights+0x108>)
 80016f2:	6811      	ldr	r1, [r2, #0]
 80016f4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80016f8:	6011      	str	r1, [r2, #0]
    _conv2_conv2_0_Conv_output_0_weights_array.data = AI_PTR(g_audio_classifier_weights_map[0] + 160);
 80016fa:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 80016fe:	6091      	str	r1, [r2, #8]
    _conv2_conv2_0_Conv_output_0_weights_array.data_start = AI_PTR(g_audio_classifier_weights_map[0] + 160);
 8001700:	60d1      	str	r1, [r2, #12]
    _conv2_conv2_0_Conv_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8001702:	4a30      	ldr	r2, [pc, #192]	@ (80017c4 <audio_classifier_configure_weights+0x10c>)
 8001704:	6811      	ldr	r1, [r2, #0]
 8001706:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800170a:	6011      	str	r1, [r2, #0]
    _conv2_conv2_0_Conv_output_0_bias_array.data = AI_PTR(g_audio_classifier_weights_map[0] + 2464);
 800170c:	f503 611a 	add.w	r1, r3, #2464	@ 0x9a0
 8001710:	6091      	str	r1, [r2, #8]
    _conv2_conv2_0_Conv_output_0_bias_array.data_start = AI_PTR(g_audio_classifier_weights_map[0] + 2464);
 8001712:	60d1      	str	r1, [r2, #12]
    _fc1_fc1_0_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8001714:	4a2c      	ldr	r2, [pc, #176]	@ (80017c8 <audio_classifier_configure_weights+0x110>)
 8001716:	6811      	ldr	r1, [r2, #0]
 8001718:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800171c:	6011      	str	r1, [r2, #0]
    _fc1_fc1_0_Gemm_output_0_weights_array.data = AI_PTR(g_audio_classifier_weights_map[0] + 2528);
 800171e:	f503 611e 	add.w	r1, r3, #2528	@ 0x9e0
 8001722:	6091      	str	r1, [r2, #8]
    _fc1_fc1_0_Gemm_output_0_weights_array.data_start = AI_PTR(g_audio_classifier_weights_map[0] + 2528);
 8001724:	60d1      	str	r1, [r2, #12]
    _fc1_fc1_0_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8001726:	4a29      	ldr	r2, [pc, #164]	@ (80017cc <audio_classifier_configure_weights+0x114>)
 8001728:	6811      	ldr	r1, [r2, #0]
 800172a:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800172e:	6011      	str	r1, [r2, #0]
    _fc1_fc1_0_Gemm_output_0_bias_array.data = AI_PTR(g_audio_classifier_weights_map[0] + 145888);
 8001730:	4927      	ldr	r1, [pc, #156]	@ (80017d0 <audio_classifier_configure_weights+0x118>)
 8001732:	4419      	add	r1, r3
 8001734:	6091      	str	r1, [r2, #8]
    _fc1_fc1_0_Gemm_output_0_bias_array.data_start = AI_PTR(g_audio_classifier_weights_map[0] + 145888);
 8001736:	60d1      	str	r1, [r2, #12]
    _fc2_fc2_0_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8001738:	4a26      	ldr	r2, [pc, #152]	@ (80017d4 <audio_classifier_configure_weights+0x11c>)
 800173a:	6811      	ldr	r1, [r2, #0]
 800173c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001740:	6011      	str	r1, [r2, #0]
    _fc2_fc2_0_Gemm_output_0_weights_array.data = AI_PTR(g_audio_classifier_weights_map[0] + 146048);
 8001742:	4925      	ldr	r1, [pc, #148]	@ (80017d8 <audio_classifier_configure_weights+0x120>)
 8001744:	4419      	add	r1, r3
 8001746:	6091      	str	r1, [r2, #8]
    _fc2_fc2_0_Gemm_output_0_weights_array.data_start = AI_PTR(g_audio_classifier_weights_map[0] + 146048);
 8001748:	60d1      	str	r1, [r2, #12]
    _fc2_fc2_0_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800174a:	4a24      	ldr	r2, [pc, #144]	@ (80017dc <audio_classifier_configure_weights+0x124>)
 800174c:	6811      	ldr	r1, [r2, #0]
 800174e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001752:	6011      	str	r1, [r2, #0]
    _fc2_fc2_0_Gemm_output_0_bias_array.data = AI_PTR(g_audio_classifier_weights_map[0] + 151168);
 8001754:	4922      	ldr	r1, [pc, #136]	@ (80017e0 <audio_classifier_configure_weights+0x128>)
 8001756:	4419      	add	r1, r3
 8001758:	6091      	str	r1, [r2, #8]
    _fc2_fc2_0_Gemm_output_0_bias_array.data_start = AI_PTR(g_audio_classifier_weights_map[0] + 151168);
 800175a:	60d1      	str	r1, [r2, #12]
    _fc3_fc3_0_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800175c:	4a21      	ldr	r2, [pc, #132]	@ (80017e4 <audio_classifier_configure_weights+0x12c>)
 800175e:	6811      	ldr	r1, [r2, #0]
 8001760:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001764:	6011      	str	r1, [r2, #0]
    _fc3_fc3_0_Gemm_output_0_weights_array.data = AI_PTR(g_audio_classifier_weights_map[0] + 151296);
 8001766:	4920      	ldr	r1, [pc, #128]	@ (80017e8 <audio_classifier_configure_weights+0x130>)
 8001768:	4419      	add	r1, r3
 800176a:	6091      	str	r1, [r2, #8]
    _fc3_fc3_0_Gemm_output_0_weights_array.data_start = AI_PTR(g_audio_classifier_weights_map[0] + 151296);
 800176c:	60d1      	str	r1, [r2, #12]
    _fc3_fc3_0_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800176e:	4a1f      	ldr	r2, [pc, #124]	@ (80017ec <audio_classifier_configure_weights+0x134>)
 8001770:	6811      	ldr	r1, [r2, #0]
 8001772:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001776:	6011      	str	r1, [r2, #0]
    _fc3_fc3_0_Gemm_output_0_bias_array.data = AI_PTR(g_audio_classifier_weights_map[0] + 152320);
 8001778:	491d      	ldr	r1, [pc, #116]	@ (80017f0 <audio_classifier_configure_weights+0x138>)
 800177a:	4419      	add	r1, r3
 800177c:	6091      	str	r1, [r2, #8]
    _fc3_fc3_0_Gemm_output_0_bias_array.data_start = AI_PTR(g_audio_classifier_weights_map[0] + 152320);
 800177e:	60d1      	str	r1, [r2, #12]
    _fc4_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8001780:	4a1c      	ldr	r2, [pc, #112]	@ (80017f4 <audio_classifier_configure_weights+0x13c>)
 8001782:	6811      	ldr	r1, [r2, #0]
 8001784:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8001788:	6011      	str	r1, [r2, #0]
    _fc4_Gemm_output_0_weights_array.data = AI_PTR(g_audio_classifier_weights_map[0] + 152352);
 800178a:	491b      	ldr	r1, [pc, #108]	@ (80017f8 <audio_classifier_configure_weights+0x140>)
 800178c:	4419      	add	r1, r3
 800178e:	6091      	str	r1, [r2, #8]
    _fc4_Gemm_output_0_weights_array.data_start = AI_PTR(g_audio_classifier_weights_map[0] + 152352);
 8001790:	60d1      	str	r1, [r2, #12]
    _fc4_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8001792:	4a1a      	ldr	r2, [pc, #104]	@ (80017fc <audio_classifier_configure_weights+0x144>)
 8001794:	6811      	ldr	r1, [r2, #0]
 8001796:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800179a:	6011      	str	r1, [r2, #0]
    _fc4_Gemm_output_0_bias_array.data = AI_PTR(g_audio_classifier_weights_map[0] + 152480);
 800179c:	4918      	ldr	r1, [pc, #96]	@ (8001800 <audio_classifier_configure_weights+0x148>)
 800179e:	4419      	add	r1, r3
 80017a0:	6091      	str	r1, [r2, #8]
    _fc4_Gemm_output_0_bias_array.data_start = AI_PTR(g_audio_classifier_weights_map[0] + 152480);
 80017a2:	60d1      	str	r1, [r2, #12]
    return true;
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
  return false;
}
 80017a4:	4628      	mov	r0, r5
 80017a6:	bd38      	pop	{r3, r4, r5, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80017a8:	2212      	movs	r2, #18
 80017aa:	2130      	movs	r1, #48	@ 0x30
 80017ac:	4620      	mov	r0, r4
 80017ae:	f00d f97d 	bl	800eaac <ai_platform_network_set_error>
  return false;
 80017b2:	e7f7      	b.n	80017a4 <audio_classifier_configure_weights+0xec>
 80017b4:	20006e98 	.word	0x20006e98
 80017b8:	20000f08 	.word	0x20000f08
 80017bc:	20000ef8 	.word	0x20000ef8
 80017c0:	20000ee8 	.word	0x20000ee8
 80017c4:	20000ed8 	.word	0x20000ed8
 80017c8:	20000ec8 	.word	0x20000ec8
 80017cc:	20000eb8 	.word	0x20000eb8
 80017d0:	000239e0 	.word	0x000239e0
 80017d4:	20000ea8 	.word	0x20000ea8
 80017d8:	00023a80 	.word	0x00023a80
 80017dc:	20000e98 	.word	0x20000e98
 80017e0:	00024e80 	.word	0x00024e80
 80017e4:	20000e88 	.word	0x20000e88
 80017e8:	00024f00 	.word	0x00024f00
 80017ec:	20000e78 	.word	0x20000e78
 80017f0:	00025300 	.word	0x00025300
 80017f4:	20000e68 	.word	0x20000e68
 80017f8:	00025320 	.word	0x00025320
 80017fc:	20000e58 	.word	0x20000e58
 8001800:	000253a0 	.word	0x000253a0

08001804 <audio_classifier_configure_activations>:
{
 8001804:	b538      	push	{r3, r4, r5, lr}
 8001806:	4604      	mov	r4, r0
 8001808:	460a      	mov	r2, r1
  if (ai_platform_get_activations_map(g_audio_classifier_activations_map, 1, params)) {
 800180a:	2101      	movs	r1, #1
 800180c:	482a      	ldr	r0, [pc, #168]	@ (80018b8 <audio_classifier_configure_activations+0xb4>)
 800180e:	f00d f8cf 	bl	800e9b0 <ai_platform_get_activations_map>
 8001812:	4605      	mov	r5, r0
 8001814:	2800      	cmp	r0, #0
 8001816:	d048      	beq.n	80018aa <audio_classifier_configure_activations+0xa6>
    input_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 8001818:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <audio_classifier_configure_activations+0xb4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a27      	ldr	r2, [pc, #156]	@ (80018bc <audio_classifier_configure_activations+0xb8>)
 800181e:	6093      	str	r3, [r2, #8]
    input_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 8001820:	60d3      	str	r3, [r2, #12]
    _conv1_conv1_0_Conv_output_0_scratch0_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 3840);
 8001822:	f503 6270 	add.w	r2, r3, #3840	@ 0xf00
 8001826:	4926      	ldr	r1, [pc, #152]	@ (80018c0 <audio_classifier_configure_activations+0xbc>)
 8001828:	608a      	str	r2, [r1, #8]
    _conv1_conv1_0_Conv_output_0_scratch0_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 3840);
 800182a:	60ca      	str	r2, [r1, #12]
    _conv1_conv1_0_Conv_output_0_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 3876);
 800182c:	f603 7124 	addw	r1, r3, #3876	@ 0xf24
 8001830:	4824      	ldr	r0, [pc, #144]	@ (80018c4 <audio_classifier_configure_activations+0xc0>)
 8001832:	6081      	str	r1, [r0, #8]
    _conv1_conv1_0_Conv_output_0_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 3876);
 8001834:	60c1      	str	r1, [r0, #12]
    _conv1_conv1_1_Relu_output_0_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 3876);
 8001836:	4824      	ldr	r0, [pc, #144]	@ (80018c8 <audio_classifier_configure_activations+0xc4>)
 8001838:	6081      	str	r1, [r0, #8]
    _conv1_conv1_1_Relu_output_0_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 3876);
 800183a:	60c1      	str	r1, [r0, #12]
    _conv1_conv1_2_MaxPool_output_0_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 800183c:	4923      	ldr	r1, [pc, #140]	@ (80018cc <audio_classifier_configure_activations+0xc8>)
 800183e:	608b      	str	r3, [r1, #8]
    _conv1_conv1_2_MaxPool_output_0_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 8001840:	60cb      	str	r3, [r1, #12]
    _conv2_conv2_0_Conv_output_0_scratch0_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 3840);
 8001842:	4923      	ldr	r1, [pc, #140]	@ (80018d0 <audio_classifier_configure_activations+0xcc>)
 8001844:	608a      	str	r2, [r1, #8]
    _conv2_conv2_0_Conv_output_0_scratch0_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 3840);
 8001846:	60ca      	str	r2, [r1, #12]
    _conv2_conv2_0_Conv_output_0_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 3984);
 8001848:	f503 6279 	add.w	r2, r3, #3984	@ 0xf90
 800184c:	4921      	ldr	r1, [pc, #132]	@ (80018d4 <audio_classifier_configure_activations+0xd0>)
 800184e:	608a      	str	r2, [r1, #8]
    _conv2_conv2_0_Conv_output_0_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 3984);
 8001850:	60ca      	str	r2, [r1, #12]
    _conv2_conv2_1_Relu_output_0_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 3984);
 8001852:	4921      	ldr	r1, [pc, #132]	@ (80018d8 <audio_classifier_configure_activations+0xd4>)
 8001854:	608a      	str	r2, [r1, #8]
    _conv2_conv2_1_Relu_output_0_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 3984);
 8001856:	60ca      	str	r2, [r1, #12]
    _conv2_conv2_2_MaxPool_output_0_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 8001858:	4a20      	ldr	r2, [pc, #128]	@ (80018dc <audio_classifier_configure_activations+0xd8>)
 800185a:	6093      	str	r3, [r2, #8]
    _conv2_conv2_2_MaxPool_output_0_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 800185c:	60d3      	str	r3, [r2, #12]
    _flatten_Flatten_output_0_to_chlast_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 3584);
 800185e:	f503 6160 	add.w	r1, r3, #3584	@ 0xe00
 8001862:	4a1f      	ldr	r2, [pc, #124]	@ (80018e0 <audio_classifier_configure_activations+0xdc>)
 8001864:	6091      	str	r1, [r2, #8]
    _flatten_Flatten_output_0_to_chlast_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 3584);
 8001866:	60d1      	str	r1, [r2, #12]
    _fc1_fc1_0_Gemm_output_0_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 8001868:	4a1e      	ldr	r2, [pc, #120]	@ (80018e4 <audio_classifier_configure_activations+0xe0>)
 800186a:	6093      	str	r3, [r2, #8]
    _fc1_fc1_0_Gemm_output_0_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 800186c:	60d3      	str	r3, [r2, #12]
    _fc1_fc1_1_Relu_output_0_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 160);
 800186e:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 8001872:	4a1d      	ldr	r2, [pc, #116]	@ (80018e8 <audio_classifier_configure_activations+0xe4>)
 8001874:	6091      	str	r1, [r2, #8]
    _fc1_fc1_1_Relu_output_0_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 160);
 8001876:	60d1      	str	r1, [r2, #12]
    _fc2_fc2_0_Gemm_output_0_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 8001878:	4a1c      	ldr	r2, [pc, #112]	@ (80018ec <audio_classifier_configure_activations+0xe8>)
 800187a:	6093      	str	r3, [r2, #8]
    _fc2_fc2_0_Gemm_output_0_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 800187c:	60d3      	str	r3, [r2, #12]
    _fc2_fc2_1_Relu_output_0_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 128);
 800187e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8001882:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <audio_classifier_configure_activations+0xec>)
 8001884:	6091      	str	r1, [r2, #8]
    _fc2_fc2_1_Relu_output_0_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 128);
 8001886:	60d1      	str	r1, [r2, #12]
    _fc3_fc3_0_Gemm_output_0_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 8001888:	4a1a      	ldr	r2, [pc, #104]	@ (80018f4 <audio_classifier_configure_activations+0xf0>)
 800188a:	6093      	str	r3, [r2, #8]
    _fc3_fc3_0_Gemm_output_0_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 800188c:	60d3      	str	r3, [r2, #12]
    _fc3_fc3_1_Relu_output_0_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 32);
 800188e:	f103 0120 	add.w	r1, r3, #32
 8001892:	4a19      	ldr	r2, [pc, #100]	@ (80018f8 <audio_classifier_configure_activations+0xf4>)
 8001894:	6091      	str	r1, [r2, #8]
    _fc3_fc3_1_Relu_output_0_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 32);
 8001896:	60d1      	str	r1, [r2, #12]
    _fc4_Gemm_output_0_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 8001898:	4a18      	ldr	r2, [pc, #96]	@ (80018fc <audio_classifier_configure_activations+0xf8>)
 800189a:	6093      	str	r3, [r2, #8]
    _fc4_Gemm_output_0_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 0);
 800189c:	60d3      	str	r3, [r2, #12]
    output_output_array.data = AI_PTR(g_audio_classifier_activations_map[0] + 16);
 800189e:	3310      	adds	r3, #16
 80018a0:	4a17      	ldr	r2, [pc, #92]	@ (8001900 <audio_classifier_configure_activations+0xfc>)
 80018a2:	6093      	str	r3, [r2, #8]
    output_output_array.data_start = AI_PTR(g_audio_classifier_activations_map[0] + 16);
 80018a4:	60d3      	str	r3, [r2, #12]
}
 80018a6:	4628      	mov	r0, r5
 80018a8:	bd38      	pop	{r3, r4, r5, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80018aa:	2213      	movs	r2, #19
 80018ac:	2130      	movs	r1, #48	@ 0x30
 80018ae:	4620      	mov	r0, r4
 80018b0:	f00d f8fc 	bl	800eaac <ai_platform_network_set_error>
  return false;
 80018b4:	e7f7      	b.n	80018a6 <audio_classifier_configure_activations+0xa2>
 80018b6:	bf00      	nop
 80018b8:	20006e9c 	.word	0x20006e9c
 80018bc:	20001008 	.word	0x20001008
 80018c0:	20000e48 	.word	0x20000e48
 80018c4:	20000ff8 	.word	0x20000ff8
 80018c8:	20000fe8 	.word	0x20000fe8
 80018cc:	20000fd8 	.word	0x20000fd8
 80018d0:	20000e38 	.word	0x20000e38
 80018d4:	20000fc8 	.word	0x20000fc8
 80018d8:	20000fb8 	.word	0x20000fb8
 80018dc:	20000fa8 	.word	0x20000fa8
 80018e0:	20000f98 	.word	0x20000f98
 80018e4:	20000f88 	.word	0x20000f88
 80018e8:	20000f78 	.word	0x20000f78
 80018ec:	20000f68 	.word	0x20000f68
 80018f0:	20000f58 	.word	0x20000f58
 80018f4:	20000f48 	.word	0x20000f48
 80018f8:	20000f38 	.word	0x20000f38
 80018fc:	20000f28 	.word	0x20000f28
 8001900:	20000f18 	.word	0x20000f18

08001904 <ai_audio_classifier_get_error>:
}


AI_API_ENTRY
ai_error ai_audio_classifier_get_error(ai_handle network)
{
 8001904:	b508      	push	{r3, lr}
  return ai_platform_network_get_error(network);
 8001906:	f00d f8c5 	bl	800ea94 <ai_platform_network_get_error>
}
 800190a:	bd08      	pop	{r3, pc}

0800190c <ai_audio_classifier_create>:


AI_API_ENTRY
ai_error ai_audio_classifier_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800190c:	b500      	push	{lr}
 800190e:	b083      	sub	sp, #12
  return ai_platform_network_create(
 8001910:	2300      	movs	r3, #0
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	2305      	movs	r3, #5
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2301      	movs	r3, #1
 800191a:	4a03      	ldr	r2, [pc, #12]	@ (8001928 <ai_audio_classifier_create+0x1c>)
 800191c:	f00d f9ba 	bl	800ec94 <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8001920:	b003      	add	sp, #12
 8001922:	f85d fb04 	ldr.w	pc, [sp], #4
 8001926:	bf00      	nop
 8001928:	20000004 	.word	0x20000004

0800192c <ai_audio_classifier_inputs_get>:
}


AI_API_ENTRY
ai_buffer* ai_audio_classifier_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800192c:	b508      	push	{r3, lr}
  if (network == AI_HANDLE_NULL) {
 800192e:	b110      	cbz	r0, 8001936 <ai_audio_classifier_inputs_get+0xa>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_inputs_get(network, n_buffer);
 8001930:	f00d f8c2 	bl	800eab8 <ai_platform_inputs_get>
}
 8001934:	bd08      	pop	{r3, pc}
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001936:	4802      	ldr	r0, [pc, #8]	@ (8001940 <ai_audio_classifier_inputs_get+0x14>)
 8001938:	4b02      	ldr	r3, [pc, #8]	@ (8001944 <ai_audio_classifier_inputs_get+0x18>)
 800193a:	6003      	str	r3, [r0, #0]
 800193c:	e7f8      	b.n	8001930 <ai_audio_classifier_inputs_get+0x4>
 800193e:	bf00      	nop
 8001940:	20000004 	.word	0x20000004
 8001944:	a1c00100 	.word	0xa1c00100

08001948 <ai_audio_classifier_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_audio_classifier_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8001948:	b508      	push	{r3, lr}
  if (network == AI_HANDLE_NULL) {
 800194a:	b110      	cbz	r0, 8001952 <ai_audio_classifier_outputs_get+0xa>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
  }
  return ai_platform_outputs_get(network, n_buffer);
 800194c:	f00d f92c 	bl	800eba8 <ai_platform_outputs_get>
}
 8001950:	bd08      	pop	{r3, pc}
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001952:	4802      	ldr	r0, [pc, #8]	@ (800195c <ai_audio_classifier_outputs_get+0x14>)
 8001954:	4b02      	ldr	r3, [pc, #8]	@ (8001960 <ai_audio_classifier_outputs_get+0x18>)
 8001956:	6003      	str	r3, [r0, #0]
 8001958:	e7f8      	b.n	800194c <ai_audio_classifier_outputs_get+0x4>
 800195a:	bf00      	nop
 800195c:	20000004 	.word	0x20000004
 8001960:	a1c00100 	.word	0xa1c00100

08001964 <ai_audio_classifier_init>:


AI_API_ENTRY
ai_bool ai_audio_classifier_init(
  ai_handle network, const ai_network_params* params)
{
 8001964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001966:	4606      	mov	r6, r0
 8001968:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800196a:	f00d f9d5 	bl	800ed18 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 800196e:	b178      	cbz	r0, 8001990 <ai_audio_classifier_init+0x2c>
 8001970:	4607      	mov	r7, r0
  ok &= audio_classifier_configure_weights(net_ctx, params);
 8001972:	4629      	mov	r1, r5
 8001974:	f7ff fea0 	bl	80016b8 <audio_classifier_configure_weights>
 8001978:	4604      	mov	r4, r0
  ok &= audio_classifier_configure_activations(net_ctx, params);
 800197a:	4629      	mov	r1, r5
 800197c:	4638      	mov	r0, r7
 800197e:	f7ff ff41 	bl	8001804 <audio_classifier_configure_activations>
 8001982:	4004      	ands	r4, r0
 8001984:	b2e4      	uxtb	r4, r4

  ok &= ai_platform_network_post_init(network);
 8001986:	4630      	mov	r0, r6
 8001988:	f00d fa86 	bl	800ee98 <ai_platform_network_post_init>
 800198c:	4020      	ands	r0, r4

  return ok;
}
 800198e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!net_ctx) return false;
 8001990:	2000      	movs	r0, #0
 8001992:	e7fc      	b.n	800198e <ai_audio_classifier_init+0x2a>

08001994 <ai_audio_classifier_create_and_init>:
{
 8001994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001998:	b08e      	sub	sp, #56	@ 0x38
 800199a:	4680      	mov	r8, r0
 800199c:	460e      	mov	r6, r1
 800199e:	4615      	mov	r5, r2
  err = ai_audio_classifier_create(network, AI_AUDIO_CLASSIFIER_DATA_CONFIG);
 80019a0:	2100      	movs	r1, #0
 80019a2:	f7ff ffb3 	bl	800190c <ai_audio_classifier_create>
 80019a6:	4607      	mov	r7, r0
  if (err.type != AI_ERROR_NONE) {
 80019a8:	f010 0fff 	tst.w	r0, #255	@ 0xff
 80019ac:	d002      	beq.n	80019b4 <ai_audio_classifier_create_and_init+0x20>
}
 80019ae:	b00e      	add	sp, #56	@ 0x38
 80019b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ai_audio_classifier_data_params_get(&params) != true) {
 80019b4:	4668      	mov	r0, sp
 80019b6:	f000 f835 	bl	8001a24 <ai_audio_classifier_data_params_get>
 80019ba:	b108      	cbz	r0, 80019c0 <ai_audio_classifier_create_and_init+0x2c>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80019bc:	2400      	movs	r4, #0
 80019be:	e00c      	b.n	80019da <ai_audio_classifier_create_and_init+0x46>
    err = ai_audio_classifier_get_error(*network);
 80019c0:	f8d8 0000 	ldr.w	r0, [r8]
 80019c4:	f7ff ff9e 	bl	8001904 <ai_audio_classifier_get_error>
    return err;
 80019c8:	e7f1      	b.n	80019ae <ai_audio_classifier_create_and_init+0x1a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80019ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80019ce:	4621      	mov	r1, r4
 80019d0:	a803      	add	r0, sp, #12
 80019d2:	f00c ff85 	bl	800e8e0 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80019d6:	3401      	adds	r4, #1
 80019d8:	b2a4      	uxth	r4, r4
 80019da:	b1d6      	cbz	r6, 8001a12 <ai_audio_classifier_create_and_init+0x7e>
 80019dc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80019e0:	42a3      	cmp	r3, r4
 80019e2:	d8f2      	bhi.n	80019ca <ai_audio_classifier_create_and_init+0x36>
 80019e4:	2400      	movs	r4, #0
 80019e6:	e007      	b.n	80019f8 <ai_audio_classifier_create_and_init+0x64>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80019e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80019ec:	4621      	mov	r1, r4
 80019ee:	a801      	add	r0, sp, #4
 80019f0:	f00c ff76 	bl	800e8e0 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80019f4:	3401      	adds	r4, #1
 80019f6:	b2a4      	uxth	r4, r4
 80019f8:	b11d      	cbz	r5, 8001a02 <ai_audio_classifier_create_and_init+0x6e>
 80019fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80019fe:	42a3      	cmp	r3, r4
 8001a00:	d8f2      	bhi.n	80019e8 <ai_audio_classifier_create_and_init+0x54>
  if (ai_audio_classifier_init(*network, &params) != true) {
 8001a02:	4669      	mov	r1, sp
 8001a04:	f8d8 0000 	ldr.w	r0, [r8]
 8001a08:	f7ff ffac 	bl	8001964 <ai_audio_classifier_init>
 8001a0c:	b118      	cbz	r0, 8001a16 <ai_audio_classifier_create_and_init+0x82>
  return err;
 8001a0e:	4638      	mov	r0, r7
 8001a10:	e7cd      	b.n	80019ae <ai_audio_classifier_create_and_init+0x1a>
 8001a12:	2400      	movs	r4, #0
 8001a14:	e7f0      	b.n	80019f8 <ai_audio_classifier_create_and_init+0x64>
    err = ai_audio_classifier_get_error(*network);
 8001a16:	f8d8 0000 	ldr.w	r0, [r8]
 8001a1a:	f7ff ff73 	bl	8001904 <ai_audio_classifier_get_error>
 8001a1e:	4607      	mov	r7, r0
 8001a20:	e7f5      	b.n	8001a0e <ai_audio_classifier_create_and_init+0x7a>
	...

08001a24 <ai_audio_classifier_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_audio_classifier_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 8001a24:	b1b0      	cbz	r0, 8001a54 <ai_audio_classifier_data_params_get+0x30>
{
 8001a26:	b500      	push	{lr}
 8001a28:	b085      	sub	sp, #20
 8001a2a:	4686      	mov	lr, r0
  
  const ai_buffer_array map_activations = 
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <ai_audio_classifier_data_params_get+0x34>)
 8001a2e:	aa02      	add	r2, sp, #8
 8001a30:	f103 0120 	add.w	r1, r3, #32
 8001a34:	c903      	ldmia	r1, {r0, r1}
 8001a36:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_AUDIO_CLASSIFIER_DATA_ACTIVATIONS_COUNT, g_audio_classifier_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8001a3a:	46ec      	mov	ip, sp
 8001a3c:	3328      	adds	r3, #40	@ 0x28
 8001a3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a42:	e88c 0003 	stmia.w	ip, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_AUDIO_CLASSIFIER_DATA_WEIGHTS_COUNT, g_audio_classifier_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8001a46:	4661      	mov	r1, ip
 8001a48:	4670      	mov	r0, lr
 8001a4a:	f00d f809 	bl	800ea60 <ai_platform_bind_network_params>
}
 8001a4e:	b005      	add	sp, #20
 8001a50:	f85d fb04 	ldr.w	pc, [sp], #4
  if (!params) return false;
 8001a54:	2000      	movs	r0, #0
}
 8001a56:	4770      	bx	lr
 8001a58:	080123e0 	.word	0x080123e0

08001a5c <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8001a5c:	b500      	push	{lr}
 8001a5e:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8001a66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a6a:	4807      	ldr	r0, [pc, #28]	@ (8001a88 <BSP_SD_IsDetected+0x2c>)
 8001a6c:	f007 fc86 	bl	800937c <HAL_GPIO_ReadPin>
 8001a70:	2801      	cmp	r0, #1
 8001a72:	d004      	beq.n	8001a7e <BSP_SD_IsDetected+0x22>
  {
    status = SD_NOT_PRESENT;
  }

  return status;
 8001a74:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8001a78:	b003      	add	sp, #12
 8001a7a:	f85d fb04 	ldr.w	pc, [sp], #4
    status = SD_NOT_PRESENT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f88d 3007 	strb.w	r3, [sp, #7]
 8001a84:	e7f6      	b.n	8001a74 <BSP_SD_IsDetected+0x18>
 8001a86:	bf00      	nop
 8001a88:	40022000 	.word	0x40022000

08001a8c <BSP_SD_ReadBlocks>:
 * @param  NumOfBlocks: Number of SD blocks to read
 * @param  Timeout: Timeout for read operation
 * @retval SD status
 */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8001a8c:	b500      	push	{lr}
 8001a8e:	b083      	sub	sp, #12
  if (HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	4613      	mov	r3, r2
 8001a94:	460a      	mov	r2, r1
 8001a96:	4601      	mov	r1, r0
 8001a98:	4803      	ldr	r0, [pc, #12]	@ (8001aa8 <BSP_SD_ReadBlocks+0x1c>)
 8001a9a:	f00a f917 	bl	800bccc <HAL_SD_ReadBlocks>
 8001a9e:	b100      	cbz	r0, 8001aa2 <BSP_SD_ReadBlocks+0x16>
  {
    return MSD_ERROR;
 8001aa0:	2001      	movs	r0, #1
  }
  else
  {
    return MSD_OK;
  }
}
 8001aa2:	b003      	add	sp, #12
 8001aa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aa8:	20006ea0 	.word	0x20006ea0

08001aac <BSP_SD_WriteBlocks>:
 * @param  NumOfBlocks: Number of SD blocks to write
 * @param  Timeout: Timeout for write operation
 * @retval SD status
 */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8001aac:	b500      	push	{lr}
 8001aae:	b083      	sub	sp, #12
  if (HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	4803      	ldr	r0, [pc, #12]	@ (8001ac8 <BSP_SD_WriteBlocks+0x1c>)
 8001aba:	f00a fa2b 	bl	800bf14 <HAL_SD_WriteBlocks>
 8001abe:	b100      	cbz	r0, 8001ac2 <BSP_SD_WriteBlocks+0x16>
  {
    return MSD_ERROR;
 8001ac0:	2001      	movs	r0, #1
  }
  else
  {
    return MSD_OK;
  }
}
 8001ac2:	b003      	add	sp, #12
 8001ac4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ac8:	20006ea0 	.word	0x20006ea0

08001acc <BSP_SD_MspInit>:
 * @brief  Initializes the SD MSP.
 * @param  hsd: SD handle
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8001acc:	b500      	push	{lr}
 8001ace:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDMMC2 clock */
  __HAL_RCC_SDMMC2_CLK_ENABLE();
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b7c <BSP_SD_MspInit+0xb0>)
 8001ad2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ad4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ad8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ada:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001adc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001ae0:	9200      	str	r2, [sp, #0]
 8001ae2:	9a00      	ldr	r2, [sp, #0]

  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 8001ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae6:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001aea:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aee:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8001af2:	9201      	str	r2, [sp, #4]
 8001af4:	9a01      	ldr	r2, [sp, #4]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001af8:	f042 0202 	orr.w	r2, r2, #2
 8001afc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b00:	f002 0202 	and.w	r2, r2, #2
 8001b04:	9202      	str	r2, [sp, #8]
 8001b06:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b0a:	f042 0208 	orr.w	r2, r2, #8
 8001b0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b12:	f002 0208 	and.w	r2, r2, #8
 8001b16:	9203      	str	r2, [sp, #12]
 8001b18:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b20:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b28:	9304      	str	r3, [sp, #16]
 8001b2a:	9b04      	ldr	r3, [sp, #16]

  /* Common GPIO configuration */
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	9308      	str	r3, [sp, #32]

  /* GPIOB configuration */
  gpio_init_structure.Alternate = GPIO_AF10_SDMMC2;
 8001b38:	230a      	movs	r3, #10
 8001b3a:	9309      	str	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Pin = GPIO_PIN_3 | GPIO_PIN_4;
 8001b3c:	2318      	movs	r3, #24
 8001b3e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 8001b40:	a905      	add	r1, sp, #20
 8001b42:	480f      	ldr	r0, [pc, #60]	@ (8001b80 <BSP_SD_MspInit+0xb4>)
 8001b44:	f007 fb18 	bl	8009178 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Alternate = GPIO_AF11_SDMMC2;
 8001b48:	230b      	movs	r3, #11
 8001b4a:	9309      	str	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001b4c:	23c0      	movs	r3, #192	@ 0xc0
 8001b4e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001b50:	a905      	add	r1, sp, #20
 8001b52:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <BSP_SD_MspInit+0xb8>)
 8001b54:	f007 fb10 	bl	8009178 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8001b58:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b5c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001b5e:	a905      	add	r1, sp, #20
 8001b60:	4809      	ldr	r0, [pc, #36]	@ (8001b88 <BSP_SD_MspInit+0xbc>)
 8001b62:	f007 fb09 	bl	8009178 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC2 interrupts */
  HAL_NVIC_SetPriority(SDMMC2_IRQn, 0x0E, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	210e      	movs	r1, #14
 8001b6a:	2067      	movs	r0, #103	@ 0x67
 8001b6c:	f006 f860 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8001b70:	2067      	movs	r0, #103	@ 0x67
 8001b72:	f006 f86d 	bl	8007c50 <HAL_NVIC_EnableIRQ>
}
 8001b76:	b00b      	add	sp, #44	@ 0x2c
 8001b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40021800 	.word	0x40021800

08001b8c <BSP_SD_Detect_MspInit>:
 * @param  hsd: SD handle
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 * @retval None
 */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8001b8c:	b500      	push	{lr}
 8001b8e:	b087      	sub	sp, #28
  GPIO_InitTypeDef gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <BSP_SD_Detect_MspInit+0x38>)
 8001b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b98:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	9b00      	ldr	r3, [sp, #0]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin = SD_DETECT_PIN;
 8001ba4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ba8:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001baa:	2300      	movs	r3, #0
 8001bac:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8001bb6:	a901      	add	r1, sp, #4
 8001bb8:	4803      	ldr	r0, [pc, #12]	@ (8001bc8 <BSP_SD_Detect_MspInit+0x3c>)
 8001bba:	f007 fadd 	bl	8009178 <HAL_GPIO_Init>
}
 8001bbe:	b007      	add	sp, #28
 8001bc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40022000 	.word	0x40022000

08001bcc <BSP_SD_Init>:
{
 8001bcc:	b538      	push	{r3, r4, r5, lr}
  uSdHandle.Instance = SDMMC2;
 8001bce:	4814      	ldr	r0, [pc, #80]	@ (8001c20 <BSP_SD_Init+0x54>)
 8001bd0:	4b14      	ldr	r3, [pc, #80]	@ (8001c24 <BSP_SD_Init+0x58>)
 8001bd2:	6003      	str	r3, [r0, #0]
  uSdHandle.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	6041      	str	r1, [r0, #4]
  uSdHandle.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001bd8:	6081      	str	r1, [r0, #8]
  uSdHandle.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001bda:	60c1      	str	r1, [r0, #12]
  uSdHandle.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001bdc:	6101      	str	r1, [r0, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8001bde:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001be2:	6143      	str	r3, [r0, #20]
  uSdHandle.Init.ClockDiv = SDMMC_TRANSFER_CLK_DIV;
 8001be4:	6181      	str	r1, [r0, #24]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8001be6:	f7ff ffd1 	bl	8001b8c <BSP_SD_Detect_MspInit>
  if (BSP_SD_IsDetected() != SD_PRESENT) /* Check if SD card is present */
 8001bea:	f7ff ff37 	bl	8001a5c <BSP_SD_IsDetected>
 8001bee:	2801      	cmp	r0, #1
 8001bf0:	d002      	beq.n	8001bf8 <BSP_SD_Init+0x2c>
    return MSD_ERROR_SD_NOT_PRESENT;
 8001bf2:	2402      	movs	r4, #2
}
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	bd38      	pop	{r3, r4, r5, pc}
 8001bf8:	4604      	mov	r4, r0
  BSP_SD_MspInit(&uSdHandle, NULL);
 8001bfa:	4d09      	ldr	r5, [pc, #36]	@ (8001c20 <BSP_SD_Init+0x54>)
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4628      	mov	r0, r5
 8001c00:	f7ff ff64 	bl	8001acc <BSP_SD_MspInit>
  if (HAL_SD_Init(&uSdHandle) != HAL_OK)
 8001c04:	4628      	mov	r0, r5
 8001c06:	f00a fc35 	bl	800c474 <HAL_SD_Init>
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	d1f2      	bne.n	8001bf4 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001c0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c12:	4628      	mov	r0, r5
 8001c14:	f00a fc5c 	bl	800c4d0 <HAL_SD_ConfigWideBusOperation>
 8001c18:	2800      	cmp	r0, #0
 8001c1a:	d1eb      	bne.n	8001bf4 <BSP_SD_Init+0x28>
      sd_state = MSD_OK;
 8001c1c:	4604      	mov	r4, r0
 8001c1e:	e7e9      	b.n	8001bf4 <BSP_SD_Init+0x28>
 8001c20:	20006ea0 	.word	0x20006ea0
 8001c24:	40011c00 	.word	0x40011c00

08001c28 <BSP_SD_GetCardState>:
 *          This value can be one of the following values:
 *            @arg  SD_TRANSFER_OK: No data transfer is acting
 *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
 */
uint8_t BSP_SD_GetCardState(void)
{
 8001c28:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8001c2a:	4803      	ldr	r0, [pc, #12]	@ (8001c38 <BSP_SD_GetCardState+0x10>)
 8001c2c:	f00a fcb0 	bl	800c590 <HAL_SD_GetCardState>
}
 8001c30:	3804      	subs	r0, #4
 8001c32:	bf18      	it	ne
 8001c34:	2001      	movne	r0, #1
 8001c36:	bd08      	pop	{r3, pc}
 8001c38:	20006ea0 	.word	0x20006ea0

08001c3c <BSP_SD_GetCardInfo>:
 * @brief  Get SD information about specific SD card.
 * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
 * @retval None
 */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8001c3c:	b508      	push	{r3, lr}
 8001c3e:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8001c40:	4801      	ldr	r0, [pc, #4]	@ (8001c48 <BSP_SD_GetCardInfo+0xc>)
 8001c42:	f00a fc32 	bl	800c4aa <HAL_SD_GetCardInfo>
}
 8001c46:	bd08      	pop	{r3, pc}
 8001c48:	20006ea0 	.word	0x20006ea0

08001c4c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001c4c:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001c4e:	4808      	ldr	r0, [pc, #32]	@ (8001c70 <MX_CRC_Init+0x24>)
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <MX_CRC_Init+0x28>)
 8001c52:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001c58:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001c5a:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001c5c:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001c62:	f006 f803 	bl	8007c6c <HAL_CRC_Init>
 8001c66:	b900      	cbnz	r0, 8001c6a <MX_CRC_Init+0x1e>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001c68:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c6a:	f002 fb43 	bl	80042f4 <Error_Handler>
}
 8001c6e:	e7fb      	b.n	8001c68 <MX_CRC_Init+0x1c>
 8001c70:	20006f24 	.word	0x20006f24
 8001c74:	40023000 	.word	0x40023000

08001c78 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001c78:	6802      	ldr	r2, [r0, #0]
 8001c7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <HAL_CRC_MspInit+0x28>)
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d000      	beq.n	8001c82 <HAL_CRC_MspInit+0xa>
 8001c80:	4770      	bx	lr
{
 8001c82:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001c8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001c9a:	b002      	add	sp, #8
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023000 	.word	0x40023000

08001ca4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8001ca4:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8001ca6:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <disk_status+0x14>)
 8001ca8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001cac:	6852      	ldr	r2, [r2, #4]
 8001cae:	6852      	ldr	r2, [r2, #4]
 8001cb0:	4403      	add	r3, r0
 8001cb2:	7a18      	ldrb	r0, [r3, #8]
 8001cb4:	4790      	blx	r2
  return stat;
}
 8001cb6:	bd08      	pop	{r3, pc}
 8001cb8:	20007610 	.word	0x20007610

08001cbc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8001cbc:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8001cbe:	4b08      	ldr	r3, [pc, #32]	@ (8001ce0 <disk_initialize+0x24>)
 8001cc0:	5c1b      	ldrb	r3, [r3, r0]
 8001cc2:	b953      	cbnz	r3, 8001cda <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <disk_initialize+0x24>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8001cca:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001cce:	6852      	ldr	r2, [r2, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	4403      	add	r3, r0
 8001cd4:	7a18      	ldrb	r0, [r3, #8]
 8001cd6:	4790      	blx	r2
  }
  return stat;
}
 8001cd8:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8001cda:	2000      	movs	r0, #0
 8001cdc:	e7fc      	b.n	8001cd8 <disk_initialize+0x1c>
 8001cde:	bf00      	nop
 8001ce0:	20007610 	.word	0x20007610

08001ce4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8001ce4:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8001ce6:	4c04      	ldr	r4, [pc, #16]	@ (8001cf8 <disk_read+0x14>)
 8001ce8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001cec:	686d      	ldr	r5, [r5, #4]
 8001cee:	68ad      	ldr	r5, [r5, #8]
 8001cf0:	4404      	add	r4, r0
 8001cf2:	7a20      	ldrb	r0, [r4, #8]
 8001cf4:	47a8      	blx	r5
  return res;
}
 8001cf6:	bd38      	pop	{r3, r4, r5, pc}
 8001cf8:	20007610 	.word	0x20007610

08001cfc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8001cfc:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8001cfe:	4c04      	ldr	r4, [pc, #16]	@ (8001d10 <disk_write+0x14>)
 8001d00:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001d04:	686d      	ldr	r5, [r5, #4]
 8001d06:	68ed      	ldr	r5, [r5, #12]
 8001d08:	4404      	add	r4, r0
 8001d0a:	7a20      	ldrb	r0, [r4, #8]
 8001d0c:	47a8      	blx	r5
  return res;
}
 8001d0e:	bd38      	pop	{r3, r4, r5, pc}
 8001d10:	20007610 	.word	0x20007610

08001d14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8001d14:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8001d16:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <disk_ioctl+0x14>)
 8001d18:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8001d1c:	6864      	ldr	r4, [r4, #4]
 8001d1e:	6924      	ldr	r4, [r4, #16]
 8001d20:	4403      	add	r3, r0
 8001d22:	7a18      	ldrb	r0, [r3, #8]
 8001d24:	47a0      	blx	r4
  return res;
}
 8001d26:	bd10      	pop	{r4, pc}
 8001d28:	20007610 	.word	0x20007610

08001d2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8001d2c:	b508      	push	{r3, lr}
  if (BSP_SD_Init() == MSD_ERROR)
 8001d2e:	f7ff ff4d 	bl	8001bcc <BSP_SD_Init>
 8001d32:	2801      	cmp	r0, #1
 8001d34:	d009      	beq.n	8001d4a <MX_FATFS_Init+0x1e>
  {
    printf("\rError initializing SD card\n\r");
  }
  printf("\rSD card initialized\n\r");
 8001d36:	4807      	ldr	r0, [pc, #28]	@ (8001d54 <MX_FATFS_Init+0x28>)
 8001d38:	f00f f8f6 	bl	8010f28 <iprintf>

  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8001d3c:	4906      	ldr	r1, [pc, #24]	@ (8001d58 <MX_FATFS_Init+0x2c>)
 8001d3e:	4807      	ldr	r0, [pc, #28]	@ (8001d5c <MX_FATFS_Init+0x30>)
 8001d40:	f001 ff62 	bl	8003c08 <FATFS_LinkDriver>
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <MX_FATFS_Init+0x34>)
 8001d46:	7018      	strb	r0, [r3, #0]
}
 8001d48:	bd08      	pop	{r3, pc}
    printf("\rError initializing SD card\n\r");
 8001d4a:	4806      	ldr	r0, [pc, #24]	@ (8001d64 <MX_FATFS_Init+0x38>)
 8001d4c:	f00f f8ec 	bl	8010f28 <iprintf>
 8001d50:	e7f1      	b.n	8001d36 <MX_FATFS_Init+0xa>
 8001d52:	bf00      	nop
 8001d54:	0801250c 	.word	0x0801250c
 8001d58:	200075e0 	.word	0x200075e0
 8001d5c:	0804c1c0 	.word	0x0804c1c0
 8001d60:	200075e4 	.word	0x200075e4
 8001d64:	080124ec 	.word	0x080124ec

08001d68 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8001d68:	2000      	movs	r0, #0
 8001d6a:	4770      	bx	lr

08001d6c <WriteBufferFile_F32>:
  f_mount(0, SDPath, 1);
  printf("Data written to file\n");
}

FRESULT WriteBufferFile_F32(float *pIn, uint32_t size, char *filename)
{
 8001d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6e:	4607      	mov	r7, r0
 8001d70:	460e      	mov	r6, r1
 8001d72:	4614      	mov	r4, r2
  FRESULT res = FR_OK; // Variable pour stocker les résultats des fonctions FATFS

  retSD = f_mount(&SDFatFS, SDPath, 1);
 8001d74:	2201      	movs	r2, #1
 8001d76:	493a      	ldr	r1, [pc, #232]	@ (8001e60 <WriteBufferFile_F32+0xf4>)
 8001d78:	483a      	ldr	r0, [pc, #232]	@ (8001e64 <WriteBufferFile_F32+0xf8>)
 8001d7a:	f001 f951 	bl	8003020 <f_mount>
 8001d7e:	4605      	mov	r5, r0
 8001d80:	4b39      	ldr	r3, [pc, #228]	@ (8001e68 <WriteBufferFile_F32+0xfc>)
 8001d82:	7018      	strb	r0, [r3, #0]
  if (retSD != FR_OK)
 8001d84:	b108      	cbz	r0, 8001d8a <WriteBufferFile_F32+0x1e>

  // Démonter le système de fichiers
  f_mount(0, SDPath, 1);
  printf("Data written to file\r\n");
  return FR_OK;
}
 8001d86:	4628      	mov	r0, r5
 8001d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  res = f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8001d8a:	220a      	movs	r2, #10
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	4837      	ldr	r0, [pc, #220]	@ (8001e6c <WriteBufferFile_F32+0x100>)
 8001d90:	f001 f976 	bl	8003080 <f_open>
  if (res != FR_OK)
 8001d94:	4605      	mov	r5, r0
 8001d96:	b908      	cbnz	r0, 8001d9c <WriteBufferFile_F32+0x30>
  for (uint32_t i = 0; i < size; i++)
 8001d98:	2400      	movs	r4, #0
 8001d9a:	e020      	b.n	8001dde <WriteBufferFile_F32+0x72>
    f_mount(0, SDPath, 1); // Démonter le système de fichiers
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4930      	ldr	r1, [pc, #192]	@ (8001e60 <WriteBufferFile_F32+0xf4>)
 8001da0:	2000      	movs	r0, #0
 8001da2:	f001 f93d 	bl	8003020 <f_mount>
    return res;
 8001da6:	e7ee      	b.n	8001d86 <WriteBufferFile_F32+0x1a>
      res = f_printf(&SDFile, "%d.%06d\n", (int)pIn[i], abs((int)((pIn[i] - (int)pIn[i]) * 1000000)));
 8001da8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001dac:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001db0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001db4:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8001e70 <WriteBufferFile_F32+0x104>
 8001db8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc0:	ee17 3a90 	vmov	r3, s15
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bfb8      	it	lt
 8001dc8:	425b      	neglt	r3, r3
 8001dca:	ee17 2a10 	vmov	r2, s14
 8001dce:	4929      	ldr	r1, [pc, #164]	@ (8001e74 <WriteBufferFile_F32+0x108>)
 8001dd0:	4826      	ldr	r0, [pc, #152]	@ (8001e6c <WriteBufferFile_F32+0x100>)
 8001dd2:	f001 fdcd 	bl	8003970 <f_printf>
 8001dd6:	b2c0      	uxtb	r0, r0
    if (res < 0 || res == 255)
 8001dd8:	28ff      	cmp	r0, #255	@ 0xff
 8001dda:	d027      	beq.n	8001e2c <WriteBufferFile_F32+0xc0>
  for (uint32_t i = 0; i < size; i++)
 8001ddc:	3401      	adds	r4, #1
 8001dde:	42b4      	cmp	r4, r6
 8001de0:	d232      	bcs.n	8001e48 <WriteBufferFile_F32+0xdc>
    if (pIn[i] < 0)
 8001de2:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	d5d9      	bpl.n	8001da8 <WriteBufferFile_F32+0x3c>
      res = f_printf(&SDFile, "-%d.%06d\n", (int)abs(pIn[i]), abs((int)((pIn[i] - (int)pIn[i]) * 1000000)));
 8001df4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001df8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001dfc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001e00:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001e70 <WriteBufferFile_F32+0x104>
 8001e04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e0c:	ee17 3a90 	vmov	r3, s15
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bfb8      	it	lt
 8001e14:	425b      	neglt	r3, r3
 8001e16:	ee17 2a10 	vmov	r2, s14
 8001e1a:	2a00      	cmp	r2, #0
 8001e1c:	bfb8      	it	lt
 8001e1e:	4252      	neglt	r2, r2
 8001e20:	4915      	ldr	r1, [pc, #84]	@ (8001e78 <WriteBufferFile_F32+0x10c>)
 8001e22:	4812      	ldr	r0, [pc, #72]	@ (8001e6c <WriteBufferFile_F32+0x100>)
 8001e24:	f001 fda4 	bl	8003970 <f_printf>
 8001e28:	b2c0      	uxtb	r0, r0
 8001e2a:	e7d5      	b.n	8001dd8 <WriteBufferFile_F32+0x6c>
      printf("Erreur lors de l'écriture des données: %d\n", res);
 8001e2c:	4601      	mov	r1, r0
 8001e2e:	4813      	ldr	r0, [pc, #76]	@ (8001e7c <WriteBufferFile_F32+0x110>)
 8001e30:	f00f f87a 	bl	8010f28 <iprintf>
      f_close(&SDFile);      // Fermer le fichier
 8001e34:	480d      	ldr	r0, [pc, #52]	@ (8001e6c <WriteBufferFile_F32+0x100>)
 8001e36:	f001 fbc2 	bl	80035be <f_close>
      f_mount(0, SDPath, 1); // Démonter le système de fichiers
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4908      	ldr	r1, [pc, #32]	@ (8001e60 <WriteBufferFile_F32+0xf4>)
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f001 f8ee 	bl	8003020 <f_mount>
      return FR_DENIED;
 8001e44:	2507      	movs	r5, #7
 8001e46:	e79e      	b.n	8001d86 <WriteBufferFile_F32+0x1a>
  f_close(&SDFile);
 8001e48:	4808      	ldr	r0, [pc, #32]	@ (8001e6c <WriteBufferFile_F32+0x100>)
 8001e4a:	f001 fbb8 	bl	80035be <f_close>
  f_mount(0, SDPath, 1);
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4903      	ldr	r1, [pc, #12]	@ (8001e60 <WriteBufferFile_F32+0xf4>)
 8001e52:	2000      	movs	r0, #0
 8001e54:	f001 f8e4 	bl	8003020 <f_mount>
  printf("Data written to file\r\n");
 8001e58:	4809      	ldr	r0, [pc, #36]	@ (8001e80 <WriteBufferFile_F32+0x114>)
 8001e5a:	f00f f8cd 	bl	8010ff8 <puts>
  return FR_OK;
 8001e5e:	e792      	b.n	8001d86 <WriteBufferFile_F32+0x1a>
 8001e60:	200075e0 	.word	0x200075e0
 8001e64:	200073b0 	.word	0x200073b0
 8001e68:	200075e4 	.word	0x200075e4
 8001e6c:	20007180 	.word	0x20007180
 8001e70:	49742400 	.word	0x49742400
 8001e74:	08012530 	.word	0x08012530
 8001e78:	08012524 	.word	0x08012524
 8001e7c:	0801253c 	.word	0x0801253c
 8001e80:	0801256c 	.word	0x0801256c

08001e84 <WriteWAVFile>:
    return res;
  }
  return res;
}
FRESULT WriteWAVFile(const uint8_t *audioData, uint32_t dataSize, uint8_t finalize)
{
 8001e84:	b570      	push	{r4, r5, r6, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	460c      	mov	r4, r1
 8001e8a:	4616      	mov	r6, r2

  FRESULT res = FR_OK;
  UINT bytesWritten;

  // Écrire les données audio
  res = f_write(&file, audioData, dataSize, &bytesWritten);
 8001e8c:	ab03      	add	r3, sp, #12
 8001e8e:	460a      	mov	r2, r1
 8001e90:	4601      	mov	r1, r0
 8001e92:	4826      	ldr	r0, [pc, #152]	@ (8001f2c <WriteWAVFile+0xa8>)
 8001e94:	f001 fa05 	bl	80032a2 <f_write>
  if (res != FR_OK || bytesWritten != dataSize)
 8001e98:	4605      	mov	r5, r0
 8001e9a:	b910      	cbnz	r0, 8001ea2 <WriteWAVFile+0x1e>
 8001e9c:	9b03      	ldr	r3, [sp, #12]
 8001e9e:	42a3      	cmp	r3, r4
 8001ea0:	d00a      	beq.n	8001eb8 <WriteWAVFile+0x34>
  {
    f_close(&file);
 8001ea2:	4822      	ldr	r0, [pc, #136]	@ (8001f2c <WriteWAVFile+0xa8>)
 8001ea4:	f001 fb8b 	bl	80035be <f_close>
    f_mount(0, SDPath, 1); // Démonter le système de fichiers
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4921      	ldr	r1, [pc, #132]	@ (8001f30 <WriteWAVFile+0xac>)
 8001eac:	2000      	movs	r0, #0
 8001eae:	f001 f8b7 	bl	8003020 <f_mount>
    f_mount(0, SDPath, 1); // Démonter le système de fichiers
    fileOpened = 0;
    totalDataSize = 0;
  }
  return res;
}
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	b004      	add	sp, #16
 8001eb6:	bd70      	pop	{r4, r5, r6, pc}
  totalDataSize += dataSize;
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f34 <WriteWAVFile+0xb0>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4414      	add	r4, r2
 8001ebe:	601c      	str	r4, [r3, #0]
  if (finalize)
 8001ec0:	2e00      	cmp	r6, #0
 8001ec2:	d0f6      	beq.n	8001eb2 <WriteWAVFile+0x2e>
    uint32_t chunkSize = 36 + totalDataSize;
 8001ec4:	f104 0324 	add.w	r3, r4, #36	@ 0x24
 8001ec8:	9301      	str	r3, [sp, #4]
    uint32_t dataSize = totalDataSize;
 8001eca:	9402      	str	r4, [sp, #8]
    f_lseek(&file, offsetof(WAVHeader, chunkSize));
 8001ecc:	4c17      	ldr	r4, [pc, #92]	@ (8001f2c <WriteWAVFile+0xa8>)
 8001ece:	2104      	movs	r1, #4
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f001 fb89 	bl	80035e8 <f_lseek>
    res = f_write(&file, &chunkSize, sizeof(chunkSize), &bytesWritten);
 8001ed6:	ab03      	add	r3, sp, #12
 8001ed8:	2204      	movs	r2, #4
 8001eda:	eb0d 0102 	add.w	r1, sp, r2
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f001 f9df 	bl	80032a2 <f_write>
    if (res != FR_OK || bytesWritten != sizeof(chunkSize))
 8001ee4:	4605      	mov	r5, r0
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d1e3      	bne.n	8001eb2 <WriteWAVFile+0x2e>
 8001eea:	9b03      	ldr	r3, [sp, #12]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d1e0      	bne.n	8001eb2 <WriteWAVFile+0x2e>
    f_lseek(&file, offsetof(WAVHeader, dataSize));
 8001ef0:	2128      	movs	r1, #40	@ 0x28
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f001 fb78 	bl	80035e8 <f_lseek>
    res = f_write(&file, &dataSize, sizeof(dataSize), &bytesWritten);
 8001ef8:	ab03      	add	r3, sp, #12
 8001efa:	2204      	movs	r2, #4
 8001efc:	a902      	add	r1, sp, #8
 8001efe:	4620      	mov	r0, r4
 8001f00:	f001 f9cf 	bl	80032a2 <f_write>
    if (res != FR_OK || bytesWritten != sizeof(dataSize))
 8001f04:	4605      	mov	r5, r0
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d1d3      	bne.n	8001eb2 <WriteWAVFile+0x2e>
 8001f0a:	9b03      	ldr	r3, [sp, #12]
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d1d0      	bne.n	8001eb2 <WriteWAVFile+0x2e>
    f_close(&file);
 8001f10:	4620      	mov	r0, r4
 8001f12:	f001 fb54 	bl	80035be <f_close>
    f_mount(0, SDPath, 1); // Démonter le système de fichiers
 8001f16:	2201      	movs	r2, #1
 8001f18:	4905      	ldr	r1, [pc, #20]	@ (8001f30 <WriteWAVFile+0xac>)
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f001 f880 	bl	8003020 <f_mount>
    fileOpened = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	4a05      	ldr	r2, [pc, #20]	@ (8001f38 <WriteWAVFile+0xb4>)
 8001f24:	7013      	strb	r3, [r2, #0]
    totalDataSize = 0;
 8001f26:	4a03      	ldr	r2, [pc, #12]	@ (8001f34 <WriteWAVFile+0xb0>)
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e7c2      	b.n	8001eb2 <WriteWAVFile+0x2e>
 8001f2c:	20006f50 	.word	0x20006f50
 8001f30:	200075e0 	.word	0x200075e0
 8001f34:	20006f4c 	.word	0x20006f4c
 8001f38:	20006f48 	.word	0x20006f48

08001f3c <GenerateUniqueFilename>:

FRESULT GenerateUniqueFilename(char *filename)
{
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	b094      	sub	sp, #80	@ 0x50
 8001f40:	4606      	mov	r6, r0
  DIR dir;
  FILINFO fno;
  int maxNumber = 0;

  // Ouvrir le répertoire racine
  res = f_opendir(&dir, "/");
 8001f42:	4916      	ldr	r1, [pc, #88]	@ (8001f9c <GenerateUniqueFilename+0x60>)
 8001f44:	a808      	add	r0, sp, #32
 8001f46:	f001 fc93 	bl	8003870 <f_opendir>
  if (res != FR_OK)
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	b9a8      	cbnz	r0, 8001f7a <GenerateUniqueFilename+0x3e>
  int maxNumber = 0;
 8001f4e:	2500      	movs	r5, #0
 8001f50:	e004      	b.n	8001f5c <GenerateUniqueFilename+0x20>
  {

    res = f_readdir(&dir, &fno);
    if (fno.fname[0] == 'S' && fno.fname[1] == 'A')
    {
      maxNumber++;
 8001f52:	3501      	adds	r5, #1
    }
    if (res != FR_OK)
 8001f54:	b974      	cbnz	r4, 8001f74 <GenerateUniqueFilename+0x38>
    {
      f_closedir(&dir);
      return res;
    }
    if (fno.fname[0] == 0)
 8001f56:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001f5a:	b18b      	cbz	r3, 8001f80 <GenerateUniqueFilename+0x44>
    res = f_readdir(&dir, &fno);
 8001f5c:	a902      	add	r1, sp, #8
 8001f5e:	a808      	add	r0, sp, #32
 8001f60:	f001 fcdf 	bl	8003922 <f_readdir>
 8001f64:	4604      	mov	r4, r0
    if (fno.fname[0] == 'S' && fno.fname[1] == 'A')
 8001f66:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <GenerateUniqueFilename+0x64>)
 8001f68:	9a04      	ldr	r2, [sp, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <GenerateUniqueFilename+0x68>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d1f0      	bne.n	8001f54 <GenerateUniqueFilename+0x18>
 8001f72:	e7ee      	b.n	8001f52 <GenerateUniqueFilename+0x16>
      f_closedir(&dir);
 8001f74:	a808      	add	r0, sp, #32
 8001f76:	f001 fcc2 	bl	80038fe <f_closedir>
  f_closedir(&dir);

  // Générer le prochain nom de fichier unique
  snprintf(filename, MAX_FILENAME_LENGTH, "%s%03d%s", "samp_", maxNumber, ".wav");
  return res;
}
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	b014      	add	sp, #80	@ 0x50
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
  f_closedir(&dir);
 8001f80:	a808      	add	r0, sp, #32
 8001f82:	f001 fcbc 	bl	80038fe <f_closedir>
  snprintf(filename, MAX_FILENAME_LENGTH, "%s%03d%s", "samp_", maxNumber, ".wav");
 8001f86:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <GenerateUniqueFilename+0x6c>)
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	9500      	str	r5, [sp, #0]
 8001f8c:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <GenerateUniqueFilename+0x70>)
 8001f8e:	4a08      	ldr	r2, [pc, #32]	@ (8001fb0 <GenerateUniqueFilename+0x74>)
 8001f90:	210e      	movs	r1, #14
 8001f92:	4630      	mov	r0, r6
 8001f94:	f00e fe96 	bl	8010cc4 <sniprintf>
  return res;
 8001f98:	e7ef      	b.n	8001f7a <GenerateUniqueFilename+0x3e>
 8001f9a:	bf00      	nop
 8001f9c:	08012584 	.word	0x08012584
 8001fa0:	00ffff00 	.word	0x00ffff00
 8001fa4:	00415300 	.word	0x00415300
 8001fa8:	0801259c 	.word	0x0801259c
 8001fac:	08012588 	.word	0x08012588
 8001fb0:	08012590 	.word	0x08012590

08001fb4 <OpenWavFile>:
{
 8001fb4:	b530      	push	{r4, r5, lr}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	4605      	mov	r5, r0
  res = f_mount(&SDFatFS, SDPath, 1);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	491f      	ldr	r1, [pc, #124]	@ (800203c <OpenWavFile+0x88>)
 8001fbe:	4820      	ldr	r0, [pc, #128]	@ (8002040 <OpenWavFile+0x8c>)
 8001fc0:	f001 f82e 	bl	8003020 <f_mount>
  if (res != FR_OK)
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	b110      	cbz	r0, 8001fce <OpenWavFile+0x1a>
}
 8001fc8:	4620      	mov	r0, r4
 8001fca:	b003      	add	sp, #12
 8001fcc:	bd30      	pop	{r4, r5, pc}
  res = GenerateUniqueFilename(filename);
 8001fce:	481d      	ldr	r0, [pc, #116]	@ (8002044 <OpenWavFile+0x90>)
 8001fd0:	f7ff ffb4 	bl	8001f3c <GenerateUniqueFilename>
  if (res != FR_OK)
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	b9e0      	cbnz	r0, 8002012 <OpenWavFile+0x5e>
  res = f_open(&file, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8001fd8:	220a      	movs	r2, #10
 8001fda:	491a      	ldr	r1, [pc, #104]	@ (8002044 <OpenWavFile+0x90>)
 8001fdc:	481a      	ldr	r0, [pc, #104]	@ (8002048 <OpenWavFile+0x94>)
 8001fde:	f001 f84f 	bl	8003080 <f_open>
  if (res != FR_OK)
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	b9d8      	cbnz	r0, 800201e <OpenWavFile+0x6a>
  if (type == MONO_WAV)
 8001fe6:	2d01      	cmp	r5, #1
 8001fe8:	d01f      	beq.n	800202a <OpenWavFile+0x76>
    res = f_write(&file, &headerStereo, sizeof(WAVHeader), &bytesWritten);
 8001fea:	ab01      	add	r3, sp, #4
 8001fec:	222c      	movs	r2, #44	@ 0x2c
 8001fee:	4917      	ldr	r1, [pc, #92]	@ (800204c <OpenWavFile+0x98>)
 8001ff0:	4815      	ldr	r0, [pc, #84]	@ (8002048 <OpenWavFile+0x94>)
 8001ff2:	f001 f956 	bl	80032a2 <f_write>
 8001ff6:	4604      	mov	r4, r0
  if (res != FR_OK || bytesWritten != sizeof(WAVHeader))
 8001ff8:	b914      	cbnz	r4, 8002000 <OpenWavFile+0x4c>
 8001ffa:	9b01      	ldr	r3, [sp, #4]
 8001ffc:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ffe:	d0e3      	beq.n	8001fc8 <OpenWavFile+0x14>
    f_close(&file);
 8002000:	4811      	ldr	r0, [pc, #68]	@ (8002048 <OpenWavFile+0x94>)
 8002002:	f001 fadc 	bl	80035be <f_close>
    f_mount(0, SDPath, 1); // Démonter le système de fichiers
 8002006:	2201      	movs	r2, #1
 8002008:	490c      	ldr	r1, [pc, #48]	@ (800203c <OpenWavFile+0x88>)
 800200a:	2000      	movs	r0, #0
 800200c:	f001 f808 	bl	8003020 <f_mount>
    return res;
 8002010:	e7da      	b.n	8001fc8 <OpenWavFile+0x14>
    f_mount(0, SDPath, 1); // Démonter le système de fichiers
 8002012:	2201      	movs	r2, #1
 8002014:	4909      	ldr	r1, [pc, #36]	@ (800203c <OpenWavFile+0x88>)
 8002016:	2000      	movs	r0, #0
 8002018:	f001 f802 	bl	8003020 <f_mount>
    return res;
 800201c:	e7d4      	b.n	8001fc8 <OpenWavFile+0x14>
    f_mount(0, SDPath, 1); // Démonter le système de fichiers
 800201e:	2201      	movs	r2, #1
 8002020:	4906      	ldr	r1, [pc, #24]	@ (800203c <OpenWavFile+0x88>)
 8002022:	2000      	movs	r0, #0
 8002024:	f000 fffc 	bl	8003020 <f_mount>
    return res;
 8002028:	e7ce      	b.n	8001fc8 <OpenWavFile+0x14>
    res = f_write(&file, &headerMono, sizeof(WAVHeader), &bytesWritten);
 800202a:	ab01      	add	r3, sp, #4
 800202c:	222c      	movs	r2, #44	@ 0x2c
 800202e:	4908      	ldr	r1, [pc, #32]	@ (8002050 <OpenWavFile+0x9c>)
 8002030:	4805      	ldr	r0, [pc, #20]	@ (8002048 <OpenWavFile+0x94>)
 8002032:	f001 f936 	bl	80032a2 <f_write>
 8002036:	4604      	mov	r4, r0
 8002038:	e7de      	b.n	8001ff8 <OpenWavFile+0x44>
 800203a:	bf00      	nop
 800203c:	200075e0 	.word	0x200075e0
 8002040:	200073b0 	.word	0x200073b0
 8002044:	200010c8 	.word	0x200010c8
 8002048:	20006f50 	.word	0x20006f50
 800204c:	2000109c 	.word	0x2000109c
 8002050:	20001070 	.word	0x20001070

08002054 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8002054:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8002056:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8002058:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800205c:	4770      	bx	lr

0800205e <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800205e:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 8002060:	7882      	ldrb	r2, [r0, #2]
 8002062:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 8002066:	7843      	ldrb	r3, [r0, #1]
 8002068:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800206c:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800206e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002072:	4770      	bx	lr

08002074 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8002074:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8002076:	0a09      	lsrs	r1, r1, #8
 8002078:	7041      	strb	r1, [r0, #1]
}
 800207a:	4770      	bx	lr

0800207c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800207c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800207e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8002082:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8002084:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8002088:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800208a:	0e09      	lsrs	r1, r1, #24
 800208c:	70c1      	strb	r1, [r0, #3]
}
 800208e:	4770      	bx	lr

08002090 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8002090:	4694      	mov	ip, r2
 8002092:	b132      	cbz	r2, 80020a2 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8002094:	780a      	ldrb	r2, [r1, #0]
 8002096:	3101      	adds	r1, #1
 8002098:	7002      	strb	r2, [r0, #0]
 800209a:	3001      	adds	r0, #1
		} while (--cnt);
 800209c:	f1bc 0c01 	subs.w	ip, ip, #1
 80020a0:	d1f8      	bne.n	8002094 <mem_cpy+0x4>
	}
}
 80020a2:	4770      	bx	lr

080020a4 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80020a4:	7001      	strb	r1, [r0, #0]
 80020a6:	3001      	adds	r0, #1
	} while (--cnt);
 80020a8:	3a01      	subs	r2, #1
 80020aa:	d1fb      	bne.n	80020a4 <mem_set>
}
 80020ac:	4770      	bx	lr

080020ae <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80020ae:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 80020b0:	f89c 0000 	ldrb.w	r0, [ip]
 80020b4:	f10c 0c01 	add.w	ip, ip, #1
 80020b8:	780b      	ldrb	r3, [r1, #0]
 80020ba:	3101      	adds	r1, #1
 80020bc:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 80020be:	3a01      	subs	r2, #1
 80020c0:	d001      	beq.n	80020c6 <mem_cmp+0x18>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d0f4      	beq.n	80020b0 <mem_cmp+0x2>

	return r;
}
 80020c6:	4770      	bx	lr

080020c8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80020c8:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 80020ca:	e000      	b.n	80020ce <chk_chr+0x6>
 80020cc:	3301      	adds	r3, #1
 80020ce:	7818      	ldrb	r0, [r3, #0]
 80020d0:	b108      	cbz	r0, 80020d6 <chk_chr+0xe>
 80020d2:	4288      	cmp	r0, r1
 80020d4:	d1fa      	bne.n	80020cc <chk_chr+0x4>
	return *str;
}
 80020d6:	4770      	bx	lr

080020d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80020d8:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80020da:	f04f 0c00 	mov.w	ip, #0
 80020de:	4663      	mov	r3, ip
 80020e0:	e002      	b.n	80020e8 <chk_lock+0x10>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 80020e2:	f04f 0c01 	mov.w	ip, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80020e6:	3301      	adds	r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d815      	bhi.n	8002118 <chk_lock+0x40>
		if (Files[i].fs) {	/* Existing entry */
 80020ec:	011a      	lsls	r2, r3, #4
 80020ee:	4c18      	ldr	r4, [pc, #96]	@ (8002150 <chk_lock+0x78>)
 80020f0:	58a2      	ldr	r2, [r4, r2]
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	d0f5      	beq.n	80020e2 <chk_lock+0xa>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80020f6:	6804      	ldr	r4, [r0, #0]
 80020f8:	42a2      	cmp	r2, r4
 80020fa:	d1f4      	bne.n	80020e6 <chk_lock+0xe>
				Files[i].clu == dp->obj.sclust &&
 80020fc:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <chk_lock+0x78>)
 80020fe:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002102:	6854      	ldr	r4, [r2, #4]
 8002104:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002106:	4294      	cmp	r4, r2
 8002108:	d1ed      	bne.n	80020e6 <chk_lock+0xe>
				Files[i].ofs == dp->dptr) break;
 800210a:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <chk_lock+0x78>)
 800210c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002110:	6894      	ldr	r4, [r2, #8]
 8002112:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8002114:	4294      	cmp	r4, r2
 8002116:	d1e6      	bne.n	80020e6 <chk_lock+0xe>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002118:	2b02      	cmp	r3, #2
 800211a:	d00b      	beq.n	8002134 <chk_lock+0x5c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800211c:	b9b1      	cbnz	r1, 800214c <chk_lock+0x74>
 800211e:	4a0c      	ldr	r2, [pc, #48]	@ (8002150 <chk_lock+0x78>)
 8002120:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002124:	899b      	ldrh	r3, [r3, #12]
 8002126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800212a:	d00d      	beq.n	8002148 <chk_lock+0x70>
 800212c:	2000      	movs	r0, #0
}
 800212e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002132:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002134:	2902      	cmp	r1, #2
 8002136:	bf14      	ite	ne
 8002138:	4663      	movne	r3, ip
 800213a:	f04c 0301 	orreq.w	r3, ip, #1
 800213e:	b10b      	cbz	r3, 8002144 <chk_lock+0x6c>
 8002140:	2000      	movs	r0, #0
 8002142:	e7f4      	b.n	800212e <chk_lock+0x56>
 8002144:	2012      	movs	r0, #18
 8002146:	e7f2      	b.n	800212e <chk_lock+0x56>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002148:	2010      	movs	r0, #16
 800214a:	e7f0      	b.n	800212e <chk_lock+0x56>
 800214c:	2010      	movs	r0, #16
 800214e:	e7ee      	b.n	800212e <chk_lock+0x56>
 8002150:	200075e8 	.word	0x200075e8

08002154 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002154:	2000      	movs	r0, #0
 8002156:	e000      	b.n	800215a <enq_lock+0x6>
 8002158:	3001      	adds	r0, #1
 800215a:	2801      	cmp	r0, #1
 800215c:	d804      	bhi.n	8002168 <enq_lock+0x14>
 800215e:	0103      	lsls	r3, r0, #4
 8002160:	4a03      	ldr	r2, [pc, #12]	@ (8002170 <enq_lock+0x1c>)
 8002162:	58d3      	ldr	r3, [r2, r3]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f7      	bne.n	8002158 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8002168:	3802      	subs	r0, #2
 800216a:	bf18      	it	ne
 800216c:	2001      	movne	r0, #1
 800216e:	4770      	bx	lr
 8002170:	200075e8 	.word	0x200075e8

08002174 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002174:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <inc_lock+0x8>
 800217a:	3301      	adds	r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d813      	bhi.n	80021a8 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 8002180:	011a      	lsls	r2, r3, #4
 8002182:	4c23      	ldr	r4, [pc, #140]	@ (8002210 <inc_lock+0x9c>)
 8002184:	58a4      	ldr	r4, [r4, r2]
 8002186:	6802      	ldr	r2, [r0, #0]
 8002188:	4294      	cmp	r4, r2
 800218a:	d1f6      	bne.n	800217a <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 800218c:	4a20      	ldr	r2, [pc, #128]	@ (8002210 <inc_lock+0x9c>)
 800218e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002192:	6854      	ldr	r4, [r2, #4]
 8002194:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002196:	4294      	cmp	r4, r2
 8002198:	d1ef      	bne.n	800217a <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 800219a:	4a1d      	ldr	r2, [pc, #116]	@ (8002210 <inc_lock+0x9c>)
 800219c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80021a0:	6894      	ldr	r4, [r2, #8]
 80021a2:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 80021a4:	4294      	cmp	r4, r2
 80021a6:	d1e8      	bne.n	800217a <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d008      	beq.n	80021be <inc_lock+0x4a>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80021ac:	b1f9      	cbz	r1, 80021ee <inc_lock+0x7a>
 80021ae:	4a18      	ldr	r2, [pc, #96]	@ (8002210 <inc_lock+0x9c>)
 80021b0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80021b4:	8992      	ldrh	r2, [r2, #12]
 80021b6:	bb4a      	cbnz	r2, 800220c <inc_lock+0x98>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80021b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021bc:	e01d      	b.n	80021fa <inc_lock+0x86>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80021be:	2300      	movs	r3, #0
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d805      	bhi.n	80021d0 <inc_lock+0x5c>
 80021c4:	011a      	lsls	r2, r3, #4
 80021c6:	4c12      	ldr	r4, [pc, #72]	@ (8002210 <inc_lock+0x9c>)
 80021c8:	58a2      	ldr	r2, [r4, r2]
 80021ca:	b10a      	cbz	r2, 80021d0 <inc_lock+0x5c>
 80021cc:	3301      	adds	r3, #1
 80021ce:	e7f7      	b.n	80021c0 <inc_lock+0x4c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d019      	beq.n	8002208 <inc_lock+0x94>
		Files[i].fs = dp->obj.fs;
 80021d4:	4d0e      	ldr	r5, [pc, #56]	@ (8002210 <inc_lock+0x9c>)
 80021d6:	011c      	lsls	r4, r3, #4
 80021d8:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 80021dc:	6806      	ldr	r6, [r0, #0]
 80021de:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 80021e0:	6884      	ldr	r4, [r0, #8]
 80021e2:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 80021e4:	6940      	ldr	r0, [r0, #20]
 80021e6:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 80021e8:	2000      	movs	r0, #0
 80021ea:	8190      	strh	r0, [r2, #12]
 80021ec:	e7de      	b.n	80021ac <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80021ee:	4a08      	ldr	r2, [pc, #32]	@ (8002210 <inc_lock+0x9c>)
 80021f0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80021f4:	8992      	ldrh	r2, [r2, #12]
 80021f6:	3201      	adds	r2, #1
 80021f8:	b292      	uxth	r2, r2
 80021fa:	4905      	ldr	r1, [pc, #20]	@ (8002210 <inc_lock+0x9c>)
 80021fc:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8002200:	818a      	strh	r2, [r1, #12]

	return i + 1;
 8002202:	1c58      	adds	r0, r3, #1
}
 8002204:	bc70      	pop	{r4, r5, r6}
 8002206:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002208:	2000      	movs	r0, #0
 800220a:	e7fb      	b.n	8002204 <inc_lock+0x90>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800220c:	2000      	movs	r0, #0
 800220e:	e7f9      	b.n	8002204 <inc_lock+0x90>
 8002210:	200075e8 	.word	0x200075e8

08002214 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002214:	3801      	subs	r0, #1
 8002216:	2801      	cmp	r0, #1
 8002218:	d815      	bhi.n	8002246 <dec_lock+0x32>
		n = Files[i].ctr;
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <dec_lock+0x3c>)
 800221c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8002220:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002226:	d003      	beq.n	8002230 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8002228:	b143      	cbz	r3, 800223c <dec_lock+0x28>
 800222a:	3b01      	subs	r3, #1
 800222c:	b29b      	uxth	r3, r3
 800222e:	e000      	b.n	8002232 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002230:	2300      	movs	r3, #0
		Files[i].ctr = n;
 8002232:	4a07      	ldr	r2, [pc, #28]	@ (8002250 <dec_lock+0x3c>)
 8002234:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8002238:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800223a:	b933      	cbnz	r3, 800224a <dec_lock+0x36>
 800223c:	0103      	lsls	r3, r0, #4
 800223e:	2000      	movs	r0, #0
 8002240:	4a03      	ldr	r2, [pc, #12]	@ (8002250 <dec_lock+0x3c>)
 8002242:	50d0      	str	r0, [r2, r3]
 8002244:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002246:	2002      	movs	r0, #2
 8002248:	4770      	bx	lr
		res = FR_OK;
 800224a:	2000      	movs	r0, #0
	}
	return res;
}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	200075e8 	.word	0x200075e8

08002254 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002254:	2300      	movs	r3, #0
 8002256:	e003      	b.n	8002260 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8002258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800225c:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 800225e:	3301      	adds	r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d811      	bhi.n	8002288 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002264:	011a      	lsls	r2, r3, #4
 8002266:	4909      	ldr	r1, [pc, #36]	@ (800228c <clear_lock+0x38>)
 8002268:	588a      	ldr	r2, [r1, r2]
 800226a:	4282      	cmp	r2, r0
 800226c:	d1f7      	bne.n	800225e <clear_lock+0xa>
{
 800226e:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002270:	011a      	lsls	r2, r3, #4
 8002272:	2400      	movs	r4, #0
 8002274:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8002276:	3301      	adds	r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d8ed      	bhi.n	8002258 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800227c:	011a      	lsls	r2, r3, #4
 800227e:	4903      	ldr	r1, [pc, #12]	@ (800228c <clear_lock+0x38>)
 8002280:	588a      	ldr	r2, [r1, r2]
 8002282:	4282      	cmp	r2, r0
 8002284:	d1f7      	bne.n	8002276 <clear_lock+0x22>
 8002286:	e7f3      	b.n	8002270 <clear_lock+0x1c>
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	200075e8 	.word	0x200075e8

08002290 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8002290:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002292:	6943      	ldr	r3, [r0, #20]
 8002294:	3b02      	subs	r3, #2
 8002296:	428b      	cmp	r3, r1
 8002298:	d904      	bls.n	80022a4 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 800229a:	8943      	ldrh	r3, [r0, #10]
 800229c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800229e:	fb01 0003 	mla	r0, r1, r3, r0
 80022a2:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80022a4:	2000      	movs	r0, #0
}
 80022a6:	4770      	bx	lr

080022a8 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80022a8:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80022aa:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80022ac:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80022ae:	0a49      	lsrs	r1, r1, #9
 80022b0:	8952      	ldrh	r2, [r2, #10]
 80022b2:	fbb1 f1f2 	udiv	r1, r1, r2
 80022b6:	e001      	b.n	80022bc <clmt_clust+0x14>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 80022b8:	1a09      	subs	r1, r1, r0
 80022ba:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80022bc:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80022be:	b118      	cbz	r0, 80022c8 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 80022c0:	4281      	cmp	r1, r0
 80022c2:	d2f9      	bcs.n	80022b8 <clmt_clust+0x10>
	}
	return cl + *tbl;	/* Return the cluster number */
 80022c4:	6858      	ldr	r0, [r3, #4]
 80022c6:	4408      	add	r0, r1
}
 80022c8:	4770      	bx	lr

080022ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80022ca:	b570      	push	{r4, r5, r6, lr}
 80022cc:	4606      	mov	r6, r0
 80022ce:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80022d0:	f101 001a 	add.w	r0, r1, #26
 80022d4:	f7ff febe 	bl	8002054 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 80022d8:	7833      	ldrb	r3, [r6, #0]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d000      	beq.n	80022e0 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 80022de:	bd70      	pop	{r4, r5, r6, pc}
 80022e0:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80022e2:	f105 0014 	add.w	r0, r5, #20
 80022e6:	f7ff feb5 	bl	8002054 <ld_word>
 80022ea:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 80022ee:	e7f6      	b.n	80022de <ld_clust+0x14>

080022f0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80022f0:	b570      	push	{r4, r5, r6, lr}
 80022f2:	4606      	mov	r6, r0
 80022f4:	460c      	mov	r4, r1
 80022f6:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80022f8:	b291      	uxth	r1, r2
 80022fa:	f104 001a 	add.w	r0, r4, #26
 80022fe:	f7ff feb9 	bl	8002074 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8002302:	7833      	ldrb	r3, [r6, #0]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d000      	beq.n	800230a <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8002308:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800230a:	0c29      	lsrs	r1, r5, #16
 800230c:	f104 0014 	add.w	r0, r4, #20
 8002310:	f7ff feb0 	bl	8002074 <st_word>
}
 8002314:	e7f8      	b.n	8002308 <st_clust+0x18>

08002316 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8002316:	b538      	push	{r3, r4, r5, lr}
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8002318:	2300      	movs	r3, #0
 800231a:	724b      	strb	r3, [r1, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800231c:	69c3      	ldr	r3, [r0, #28]
 800231e:	b373      	cbz	r3, 800237e <get_fileinfo+0x68>
 8002320:	4605      	mov	r5, r0
 8002322:	460c      	mov	r4, r1
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8002324:	2200      	movs	r2, #0
 8002326:	4613      	mov	r3, r2
 8002328:	e006      	b.n	8002338 <get_fileinfo+0x22>
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800232a:	f1bc 0f09 	cmp.w	ip, #9
 800232e:	d00f      	beq.n	8002350 <get_fileinfo+0x3a>
		fno->fname[j++] = c;
 8002330:	18a1      	adds	r1, r4, r2
 8002332:	724b      	strb	r3, [r1, #9]
 8002334:	3201      	adds	r2, #1
 8002336:	4663      	mov	r3, ip
	while (i < 11) {		/* Copy name body and extension */
 8002338:	2b0a      	cmp	r3, #10
 800233a:	d80e      	bhi.n	800235a <get_fileinfo+0x44>
		c = (TCHAR)dp->dir[i++];
 800233c:	f103 0c01 	add.w	ip, r3, #1
 8002340:	6a29      	ldr	r1, [r5, #32]
 8002342:	5ccb      	ldrb	r3, [r1, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 8002344:	2b20      	cmp	r3, #32
 8002346:	d0f6      	beq.n	8002336 <get_fileinfo+0x20>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8002348:	2b05      	cmp	r3, #5
 800234a:	d1ee      	bne.n	800232a <get_fileinfo+0x14>
 800234c:	23e5      	movs	r3, #229	@ 0xe5
 800234e:	e7ec      	b.n	800232a <get_fileinfo+0x14>
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8002350:	18a1      	adds	r1, r4, r2
 8002352:	202e      	movs	r0, #46	@ 0x2e
 8002354:	7248      	strb	r0, [r1, #9]
 8002356:	3201      	adds	r2, #1
 8002358:	e7ea      	b.n	8002330 <get_fileinfo+0x1a>
	}
	fno->fname[j] = 0;
 800235a:	4422      	add	r2, r4
 800235c:	2300      	movs	r3, #0
 800235e:	7253      	strb	r3, [r2, #9]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8002360:	6a2b      	ldr	r3, [r5, #32]
 8002362:	7adb      	ldrb	r3, [r3, #11]
 8002364:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8002366:	6a28      	ldr	r0, [r5, #32]
 8002368:	301c      	adds	r0, #28
 800236a:	f7ff fe78 	bl	800205e <ld_dword>
 800236e:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8002370:	6a28      	ldr	r0, [r5, #32]
 8002372:	3016      	adds	r0, #22
 8002374:	f7ff fe73 	bl	800205e <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8002378:	80e0      	strh	r0, [r4, #6]
 800237a:	0c00      	lsrs	r0, r0, #16
 800237c:	80a0      	strh	r0, [r4, #4]
}
 800237e:	bd38      	pop	{r3, r4, r5, pc}

08002380 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8002380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002384:	4681      	mov	r9, r0
 8002386:	468a      	mov	sl, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8002388:	f8d1 8000 	ldr.w	r8, [r1]
 800238c:	f100 0b24 	add.w	fp, r0, #36	@ 0x24
	mem_set(sfn, ' ', 11);
 8002390:	220b      	movs	r2, #11
 8002392:	2120      	movs	r1, #32
 8002394:	4658      	mov	r0, fp
 8002396:	f7ff fe85 	bl	80020a4 <mem_set>
	si = i = 0; ni = 8;
 800239a:	2500      	movs	r5, #0
 800239c:	462b      	mov	r3, r5
 800239e:	2708      	movs	r7, #8
 80023a0:	e029      	b.n	80023f6 <create_name+0x76>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80023a2:	3601      	adds	r6, #1
 80023a4:	f818 3006 	ldrb.w	r3, [r8, r6]
 80023a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80023aa:	d0fa      	beq.n	80023a2 <create_name+0x22>
 80023ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80023ae:	d0f8      	beq.n	80023a2 <create_name+0x22>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80023b0:	4446      	add	r6, r8
 80023b2:	f8ca 6000 	str.w	r6, [sl]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80023b6:	2d00      	cmp	r5, #0
 80023b8:	d044      	beq.n	8002444 <create_name+0xc4>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80023ba:	f899 3024 	ldrb.w	r3, [r9, #36]	@ 0x24
 80023be:	2be5      	cmp	r3, #229	@ 0xe5
 80023c0:	d035      	beq.n	800242e <create_name+0xae>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80023c2:	2c20      	cmp	r4, #32
 80023c4:	d837      	bhi.n	8002436 <create_name+0xb6>
 80023c6:	2304      	movs	r3, #4
 80023c8:	f889 302f 	strb.w	r3, [r9, #47]	@ 0x2f

	return FR_OK;
 80023cc:	2000      	movs	r0, #0
 80023ce:	e035      	b.n	800243c <create_name+0xbc>
		if (c >= 0x80) {				/* Extended character? */
 80023d0:	f014 0f80 	tst.w	r4, #128	@ 0x80
 80023d4:	d127      	bne.n	8002426 <create_name+0xa6>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80023d6:	4621      	mov	r1, r4
 80023d8:	481b      	ldr	r0, [pc, #108]	@ (8002448 <create_name+0xc8>)
 80023da:	f7ff fe75 	bl	80020c8 <chk_chr>
 80023de:	bb78      	cbnz	r0, 8002440 <create_name+0xc0>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80023e0:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b19      	cmp	r3, #25
 80023e8:	d801      	bhi.n	80023ee <create_name+0x6e>
 80023ea:	3c20      	subs	r4, #32
 80023ec:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 80023ee:	f80b 4005 	strb.w	r4, [fp, r5]
 80023f2:	3501      	adds	r5, #1
 80023f4:	4633      	mov	r3, r6
		c = (BYTE)p[si++];
 80023f6:	1c5e      	adds	r6, r3, #1
 80023f8:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80023fc:	2c20      	cmp	r4, #32
 80023fe:	d9d7      	bls.n	80023b0 <create_name+0x30>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002400:	2c5c      	cmp	r4, #92	@ 0x5c
 8002402:	bf18      	it	ne
 8002404:	2c2f      	cmpne	r4, #47	@ 0x2f
 8002406:	d0cd      	beq.n	80023a4 <create_name+0x24>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8002408:	2c2e      	cmp	r4, #46	@ 0x2e
 800240a:	bf18      	it	ne
 800240c:	42af      	cmpne	r7, r5
 800240e:	d8df      	bhi.n	80023d0 <create_name+0x50>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8002410:	3c2e      	subs	r4, #46	@ 0x2e
 8002412:	bf18      	it	ne
 8002414:	2401      	movne	r4, #1
 8002416:	2f0b      	cmp	r7, #11
 8002418:	bf08      	it	eq
 800241a:	f044 0401 	orreq.w	r4, r4, #1
 800241e:	b964      	cbnz	r4, 800243a <create_name+0xba>
			i = 8; ni = 11;				/* Goto extension */
 8002420:	2508      	movs	r5, #8
 8002422:	270b      	movs	r7, #11
 8002424:	e7e6      	b.n	80023f4 <create_name+0x74>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8002426:	3c80      	subs	r4, #128	@ 0x80
 8002428:	4b08      	ldr	r3, [pc, #32]	@ (800244c <create_name+0xcc>)
 800242a:	5d1c      	ldrb	r4, [r3, r4]
 800242c:	e7d3      	b.n	80023d6 <create_name+0x56>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800242e:	2305      	movs	r3, #5
 8002430:	f889 3024 	strb.w	r3, [r9, #36]	@ 0x24
 8002434:	e7c5      	b.n	80023c2 <create_name+0x42>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002436:	2300      	movs	r3, #0
 8002438:	e7c6      	b.n	80023c8 <create_name+0x48>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800243a:	2006      	movs	r0, #6
#endif /* _USE_LFN != 0 */
}
 800243c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8002440:	2006      	movs	r0, #6
 8002442:	e7fb      	b.n	800243c <create_name+0xbc>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002444:	2006      	movs	r0, #6
 8002446:	e7f9      	b.n	800243c <create_name+0xbc>
 8002448:	080125a4 	.word	0x080125a4
 800244c:	0804afb0 	.word	0x0804afb0

08002450 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8002450:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002452:	6800      	ldr	r0, [r0, #0]
 8002454:	b108      	cbz	r0, 800245a <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002456:	4602      	mov	r2, r0
 8002458:	e003      	b.n	8002462 <get_ldnumber+0x12>
	int vol = -1;
 800245a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800245e:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002460:	3201      	adds	r2, #1
 8002462:	7813      	ldrb	r3, [r2, #0]
 8002464:	2b20      	cmp	r3, #32
 8002466:	d901      	bls.n	800246c <get_ldnumber+0x1c>
 8002468:	2b3a      	cmp	r3, #58	@ 0x3a
 800246a:	d1f9      	bne.n	8002460 <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800246c:	2b3a      	cmp	r3, #58	@ 0x3a
 800246e:	d001      	beq.n	8002474 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002470:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8002472:	4770      	bx	lr
			i = *tp++ - '0';
 8002474:	4603      	mov	r3, r0
 8002476:	f813 0b01 	ldrb.w	r0, [r3], #1
 800247a:	3830      	subs	r0, #48	@ 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800247c:	2809      	cmp	r0, #9
 800247e:	bf98      	it	ls
 8002480:	429a      	cmpls	r2, r3
 8002482:	d103      	bne.n	800248c <get_ldnumber+0x3c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002484:	b928      	cbnz	r0, 8002492 <get_ldnumber+0x42>
					*path = ++tt;
 8002486:	3201      	adds	r2, #1
 8002488:	600a      	str	r2, [r1, #0]
 800248a:	4770      	bx	lr
	int vol = -1;
 800248c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002490:	4770      	bx	lr
 8002492:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return vol;
 8002496:	4770      	bx	lr

08002498 <putc_init>:
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
 8002498:	6001      	str	r1, [r0, #0]
	pb->nchr = pb->idx = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	6043      	str	r3, [r0, #4]
 800249e:	6083      	str	r3, [r0, #8]
}
 80024a0:	4770      	bx	lr

080024a2 <validate>:
{
 80024a2:	b538      	push	{r3, r4, r5, lr}
 80024a4:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80024a6:	4604      	mov	r4, r0
 80024a8:	b198      	cbz	r0, 80024d2 <validate+0x30>
 80024aa:	6803      	ldr	r3, [r0, #0]
 80024ac:	b19b      	cbz	r3, 80024d6 <validate+0x34>
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	b1a2      	cbz	r2, 80024dc <validate+0x3a>
 80024b2:	8881      	ldrh	r1, [r0, #4]
 80024b4:	88da      	ldrh	r2, [r3, #6]
 80024b6:	4291      	cmp	r1, r2
 80024b8:	d003      	beq.n	80024c2 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 80024ba:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80024bc:	2400      	movs	r4, #0
 80024be:	602c      	str	r4, [r5, #0]
}
 80024c0:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80024c2:	7858      	ldrb	r0, [r3, #1]
 80024c4:	f7ff fbee 	bl	8001ca4 <disk_status>
 80024c8:	f010 0001 	ands.w	r0, r0, #1
 80024cc:	d109      	bne.n	80024e2 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80024ce:	6824      	ldr	r4, [r4, #0]
 80024d0:	e7f5      	b.n	80024be <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80024d2:	2009      	movs	r0, #9
 80024d4:	e7f3      	b.n	80024be <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80024d6:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 80024d8:	2009      	movs	r0, #9
 80024da:	e7f0      	b.n	80024be <validate+0x1c>
 80024dc:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80024de:	2400      	movs	r4, #0
 80024e0:	e7ed      	b.n	80024be <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80024e2:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80024e4:	2400      	movs	r4, #0
 80024e6:	e7ea      	b.n	80024be <validate+0x1c>

080024e8 <sync_window>:
{
 80024e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80024ec:	78c5      	ldrb	r5, [r0, #3]
 80024ee:	b915      	cbnz	r5, 80024f6 <sync_window+0xe>
}
 80024f0:	4628      	mov	r0, r5
 80024f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024f6:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 80024f8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80024fa:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80024fe:	2301      	movs	r3, #1
 8002500:	463a      	mov	r2, r7
 8002502:	4641      	mov	r1, r8
 8002504:	7840      	ldrb	r0, [r0, #1]
 8002506:	f7ff fbf9 	bl	8001cfc <disk_write>
 800250a:	4605      	mov	r5, r0
 800250c:	b9a0      	cbnz	r0, 8002538 <sync_window+0x50>
			fs->wflag = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002512:	6a23      	ldr	r3, [r4, #32]
 8002514:	1afb      	subs	r3, r7, r3
 8002516:	69a2      	ldr	r2, [r4, #24]
 8002518:	4293      	cmp	r3, r2
 800251a:	d2e9      	bcs.n	80024f0 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800251c:	78a6      	ldrb	r6, [r4, #2]
 800251e:	e008      	b.n	8002532 <sync_window+0x4a>
					wsect += fs->fsize;
 8002520:	69a3      	ldr	r3, [r4, #24]
 8002522:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002524:	2301      	movs	r3, #1
 8002526:	463a      	mov	r2, r7
 8002528:	4641      	mov	r1, r8
 800252a:	7860      	ldrb	r0, [r4, #1]
 800252c:	f7ff fbe6 	bl	8001cfc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002530:	3e01      	subs	r6, #1
 8002532:	2e01      	cmp	r6, #1
 8002534:	d8f4      	bhi.n	8002520 <sync_window+0x38>
 8002536:	e7db      	b.n	80024f0 <sync_window+0x8>
			res = FR_DISK_ERR;
 8002538:	2501      	movs	r5, #1
 800253a:	e7d9      	b.n	80024f0 <sync_window+0x8>

0800253c <move_window>:
{
 800253c:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800253e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002540:	428b      	cmp	r3, r1
 8002542:	d102      	bne.n	800254a <move_window+0xe>
	FRESULT res = FR_OK;
 8002544:	2600      	movs	r6, #0
}
 8002546:	4630      	mov	r0, r6
 8002548:	bd70      	pop	{r4, r5, r6, pc}
 800254a:	4604      	mov	r4, r0
 800254c:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800254e:	f7ff ffcb 	bl	80024e8 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002552:	4606      	mov	r6, r0
 8002554:	2800      	cmp	r0, #0
 8002556:	d1f6      	bne.n	8002546 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002558:	2301      	movs	r3, #1
 800255a:	462a      	mov	r2, r5
 800255c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8002560:	7860      	ldrb	r0, [r4, #1]
 8002562:	f7ff fbbf 	bl	8001ce4 <disk_read>
 8002566:	b110      	cbz	r0, 800256e <move_window+0x32>
				res = FR_DISK_ERR;
 8002568:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800256a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
			fs->winsect = sector;
 800256e:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8002570:	e7e9      	b.n	8002546 <move_window+0xa>
	...

08002574 <check_fs>:
{
 8002574:	b538      	push	{r3, r4, r5, lr}
 8002576:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002578:	2300      	movs	r3, #0
 800257a:	70c3      	strb	r3, [r0, #3]
 800257c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002580:	62c3      	str	r3, [r0, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002582:	f7ff ffdb 	bl	800253c <move_window>
 8002586:	bb30      	cbnz	r0, 80025d6 <check_fs+0x62>
 8002588:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800258a:	f204 202e 	addw	r0, r4, #558	@ 0x22e
 800258e:	f7ff fd61 	bl	8002054 <ld_word>
 8002592:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8002596:	4298      	cmp	r0, r3
 8002598:	d11f      	bne.n	80025da <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800259a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800259e:	2be9      	cmp	r3, #233	@ 0xe9
 80025a0:	d007      	beq.n	80025b2 <check_fs+0x3e>
 80025a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80025a4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80025a8:	4a0d      	ldr	r2, [pc, #52]	@ (80025e0 <check_fs+0x6c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d001      	beq.n	80025b2 <check_fs+0x3e>
	return 2;
 80025ae:	2502      	movs	r5, #2
 80025b0:	e014      	b.n	80025dc <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80025b2:	f104 0066 	add.w	r0, r4, #102	@ 0x66
 80025b6:	f7ff fd52 	bl	800205e <ld_dword>
 80025ba:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80025be:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <check_fs+0x70>)
 80025c0:	4298      	cmp	r0, r3
 80025c2:	d00b      	beq.n	80025dc <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80025c4:	f104 0082 	add.w	r0, r4, #130	@ 0x82
 80025c8:	f7ff fd49 	bl	800205e <ld_dword>
 80025cc:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <check_fs+0x74>)
 80025ce:	4298      	cmp	r0, r3
 80025d0:	d004      	beq.n	80025dc <check_fs+0x68>
	return 2;
 80025d2:	2502      	movs	r5, #2
 80025d4:	e002      	b.n	80025dc <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80025d6:	2504      	movs	r5, #4
 80025d8:	e000      	b.n	80025dc <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80025da:	2503      	movs	r5, #3
}
 80025dc:	4628      	mov	r0, r5
 80025de:	bd38      	pop	{r3, r4, r5, pc}
 80025e0:	009000eb 	.word	0x009000eb
 80025e4:	00544146 	.word	0x00544146
 80025e8:	33544146 	.word	0x33544146

080025ec <find_volume>:
{
 80025ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f0:	b085      	sub	sp, #20
 80025f2:	460d      	mov	r5, r1
 80025f4:	4616      	mov	r6, r2
	*rfs = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80025fa:	f7ff ff29 	bl	8002450 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80025fe:	1e07      	subs	r7, r0, #0
 8002600:	f2c0 8143 	blt.w	800288a <find_volume+0x29e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002604:	4bb4      	ldr	r3, [pc, #720]	@ (80028d8 <find_volume+0x2ec>)
 8002606:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800260a:	2c00      	cmp	r4, #0
 800260c:	f000 8142 	beq.w	8002894 <find_volume+0x2a8>
	*rfs = fs;							/* Return pointer to the file system object */
 8002610:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002612:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002616:	7823      	ldrb	r3, [r4, #0]
 8002618:	b173      	cbz	r3, 8002638 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 800261a:	7860      	ldrb	r0, [r4, #1]
 800261c:	f7ff fb42 	bl	8001ca4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002620:	f010 0501 	ands.w	r5, r0, #1
 8002624:	d108      	bne.n	8002638 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002626:	2e00      	cmp	r6, #0
 8002628:	f000 8130 	beq.w	800288c <find_volume+0x2a0>
 800262c:	f010 0f04 	tst.w	r0, #4
 8002630:	f000 812c 	beq.w	800288c <find_volume+0x2a0>
				return FR_WRITE_PROTECTED;
 8002634:	250a      	movs	r5, #10
 8002636:	e129      	b.n	800288c <find_volume+0x2a0>
	fs->fs_type = 0;					/* Clear the file system object */
 8002638:	2300      	movs	r3, #0
 800263a:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800263c:	b2f8      	uxtb	r0, r7
 800263e:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002640:	f7ff fb3c 	bl	8001cbc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002644:	f010 0501 	ands.w	r5, r0, #1
 8002648:	f040 8126 	bne.w	8002898 <find_volume+0x2ac>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800264c:	b11e      	cbz	r6, 8002656 <find_volume+0x6a>
 800264e:	f010 0f04 	tst.w	r0, #4
 8002652:	f040 8123 	bne.w	800289c <find_volume+0x2b0>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002656:	2100      	movs	r1, #0
 8002658:	4620      	mov	r0, r4
 800265a:	f7ff ff8b 	bl	8002574 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800265e:	2802      	cmp	r0, #2
 8002660:	d07e      	beq.n	8002760 <find_volume+0x174>
	bsect = 0;
 8002662:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002664:	2804      	cmp	r0, #4
 8002666:	f000 811b 	beq.w	80028a0 <find_volume+0x2b4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800266a:	2801      	cmp	r0, #1
 800266c:	f200 811a 	bhi.w	80028a4 <find_volume+0x2b8>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002670:	f104 003b 	add.w	r0, r4, #59	@ 0x3b
 8002674:	f7ff fcee 	bl	8002054 <ld_word>
 8002678:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800267c:	f040 8114 	bne.w	80028a8 <find_volume+0x2bc>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002680:	f104 0046 	add.w	r0, r4, #70	@ 0x46
 8002684:	f7ff fce6 	bl	8002054 <ld_word>
 8002688:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800268a:	b920      	cbnz	r0, 8002696 <find_volume+0xaa>
 800268c:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8002690:	f7ff fce5 	bl	800205e <ld_dword>
 8002694:	4606      	mov	r6, r0
		fs->fsize = fasize;
 8002696:	61a6      	str	r6, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002698:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 800269c:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800269e:	1e53      	subs	r3, r2, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	f200 8102 	bhi.w	80028ac <find_volume+0x2c0>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80026a8:	fb06 f802 	mul.w	r8, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80026ac:	f894 903d 	ldrb.w	r9, [r4, #61]	@ 0x3d
 80026b0:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80026b4:	f1b9 0f00 	cmp.w	r9, #0
 80026b8:	f000 80fa 	beq.w	80028b0 <find_volume+0x2c4>
 80026bc:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
 80026c0:	ea19 0f03 	tst.w	r9, r3
 80026c4:	f040 80f6 	bne.w	80028b4 <find_volume+0x2c8>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80026c8:	f104 0041 	add.w	r0, r4, #65	@ 0x41
 80026cc:	f7ff fcc2 	bl	8002054 <ld_word>
 80026d0:	4682      	mov	sl, r0
 80026d2:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80026d4:	f010 0f0f 	tst.w	r0, #15
 80026d8:	f040 80ee 	bne.w	80028b8 <find_volume+0x2cc>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80026dc:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 80026e0:	f7ff fcb8 	bl	8002054 <ld_word>
 80026e4:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80026e6:	b920      	cbnz	r0, 80026f2 <find_volume+0x106>
 80026e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80026ec:	f7ff fcb7 	bl	800205e <ld_dword>
 80026f0:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80026f2:	f104 003e 	add.w	r0, r4, #62	@ 0x3e
 80026f6:	f7ff fcad 	bl	8002054 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80026fa:	4602      	mov	r2, r0
 80026fc:	2800      	cmp	r0, #0
 80026fe:	f000 80dd 	beq.w	80028bc <find_volume+0x2d0>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002702:	eb00 0308 	add.w	r3, r0, r8
 8002706:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800270a:	459b      	cmp	fp, r3
 800270c:	f0c0 80d8 	bcc.w	80028c0 <find_volume+0x2d4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002710:	ebab 0b03 	sub.w	fp, fp, r3
 8002714:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002718:	45cb      	cmp	fp, r9
 800271a:	f0c0 80d3 	bcc.w	80028c4 <find_volume+0x2d8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800271e:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 8002722:	4281      	cmp	r1, r0
 8002724:	d834      	bhi.n	8002790 <find_volume+0x1a4>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002726:	f640 70f5 	movw	r0, #4085	@ 0xff5
 800272a:	4281      	cmp	r1, r0
 800272c:	d967      	bls.n	80027fe <find_volume+0x212>
 800272e:	f04f 0b02 	mov.w	fp, #2
 8002732:	e02f      	b.n	8002794 <find_volume+0x1a8>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002734:	2000      	movs	r0, #0
 8002736:	ab04      	add	r3, sp, #16
 8002738:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800273c:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002740:	3601      	adds	r6, #1
 8002742:	2e03      	cmp	r6, #3
 8002744:	d80e      	bhi.n	8002764 <find_volume+0x178>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002746:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800274a:	0133      	lsls	r3, r6, #4
 800274c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8002750:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002752:	7903      	ldrb	r3, [r0, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ed      	beq.n	8002734 <find_volume+0x148>
 8002758:	3008      	adds	r0, #8
 800275a:	f7ff fc80 	bl	800205e <ld_dword>
 800275e:	e7ea      	b.n	8002736 <find_volume+0x14a>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002760:	2600      	movs	r6, #0
 8002762:	e7ee      	b.n	8002742 <find_volume+0x156>
 8002764:	2600      	movs	r6, #0
 8002766:	e00a      	b.n	800277e <find_volume+0x192>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002768:	4639      	mov	r1, r7
 800276a:	4620      	mov	r0, r4
 800276c:	f7ff ff02 	bl	8002574 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002770:	2801      	cmp	r0, #1
 8002772:	f67f af77 	bls.w	8002664 <find_volume+0x78>
 8002776:	3601      	adds	r6, #1
 8002778:	2e03      	cmp	r6, #3
 800277a:	f63f af73 	bhi.w	8002664 <find_volume+0x78>
			bsect = br[i];
 800277e:	ab04      	add	r3, sp, #16
 8002780:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002784:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002788:	2f00      	cmp	r7, #0
 800278a:	d1ed      	bne.n	8002768 <find_volume+0x17c>
 800278c:	2003      	movs	r0, #3
 800278e:	e7f2      	b.n	8002776 <find_volume+0x18a>
		fmt = FS_FAT32;
 8002790:	f04f 0b03 	mov.w	fp, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002794:	f101 0902 	add.w	r9, r1, #2
 8002798:	f8c4 9014 	str.w	r9, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800279c:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800279e:	443a      	add	r2, r7
 80027a0:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80027a2:	443b      	add	r3, r7
 80027a4:	62a3      	str	r3, [r4, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80027a6:	f1bb 0f03 	cmp.w	fp, #3
 80027aa:	d02b      	beq.n	8002804 <find_volume+0x218>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80027ac:	f1ba 0f00 	cmp.w	sl, #0
 80027b0:	f000 808e 	beq.w	80028d0 <find_volume+0x2e4>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80027b4:	4442      	add	r2, r8
 80027b6:	6262      	str	r2, [r4, #36]	@ 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80027b8:	f1bb 0f02 	cmp.w	fp, #2
 80027bc:	d033      	beq.n	8002826 <find_volume+0x23a>
 80027be:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80027c2:	f009 0901 	and.w	r9, r9, #1
 80027c6:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80027ca:	f209 19ff 	addw	r9, r9, #511	@ 0x1ff
 80027ce:	ebb6 2f59 	cmp.w	r6, r9, lsr #9
 80027d2:	d37f      	bcc.n	80028d4 <find_volume+0x2e8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027d8:	6123      	str	r3, [r4, #16]
 80027da:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 80027dc:	2380      	movs	r3, #128	@ 0x80
 80027de:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80027e0:	f1bb 0f03 	cmp.w	fp, #3
 80027e4:	d022      	beq.n	800282c <find_volume+0x240>
	fs->fs_type = fmt;		/* FAT sub-type */
 80027e6:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 80027ea:	4a3c      	ldr	r2, [pc, #240]	@ (80028dc <find_volume+0x2f0>)
 80027ec:	8813      	ldrh	r3, [r2, #0]
 80027ee:	3301      	adds	r3, #1
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	8013      	strh	r3, [r2, #0]
 80027f4:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7ff fd2c 	bl	8002254 <clear_lock>
	return FR_OK;
 80027fc:	e046      	b.n	800288c <find_volume+0x2a0>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80027fe:	f04f 0b01 	mov.w	fp, #1
 8002802:	e7c7      	b.n	8002794 <find_volume+0x1a8>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002804:	f104 005a 	add.w	r0, r4, #90	@ 0x5a
 8002808:	f7ff fc24 	bl	8002054 <ld_word>
 800280c:	2800      	cmp	r0, #0
 800280e:	d15b      	bne.n	80028c8 <find_volume+0x2dc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002810:	f1ba 0f00 	cmp.w	sl, #0
 8002814:	d15a      	bne.n	80028cc <find_volume+0x2e0>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002816:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800281a:	f7ff fc20 	bl	800205e <ld_dword>
 800281e:	6260      	str	r0, [r4, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002820:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8002824:	e7d1      	b.n	80027ca <find_volume+0x1de>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002826:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800282a:	e7ce      	b.n	80027ca <find_volume+0x1de>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800282c:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8002830:	f7ff fc10 	bl	8002054 <ld_word>
 8002834:	2801      	cmp	r0, #1
 8002836:	d1d6      	bne.n	80027e6 <find_volume+0x1fa>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002838:	1c79      	adds	r1, r7, #1
 800283a:	4620      	mov	r0, r4
 800283c:	f7ff fe7e 	bl	800253c <move_window>
 8002840:	2800      	cmp	r0, #0
 8002842:	d1d0      	bne.n	80027e6 <find_volume+0x1fa>
			fs->fsi_flag = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002848:	f204 202e 	addw	r0, r4, #558	@ 0x22e
 800284c:	f7ff fc02 	bl	8002054 <ld_word>
 8002850:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8002854:	4298      	cmp	r0, r3
 8002856:	d1c6      	bne.n	80027e6 <find_volume+0x1fa>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002858:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800285c:	f7ff fbff 	bl	800205e <ld_dword>
 8002860:	4b1f      	ldr	r3, [pc, #124]	@ (80028e0 <find_volume+0x2f4>)
 8002862:	4298      	cmp	r0, r3
 8002864:	d1bf      	bne.n	80027e6 <find_volume+0x1fa>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002866:	f504 7005 	add.w	r0, r4, #532	@ 0x214
 800286a:	f7ff fbf8 	bl	800205e <ld_dword>
 800286e:	4b1d      	ldr	r3, [pc, #116]	@ (80028e4 <find_volume+0x2f8>)
 8002870:	4298      	cmp	r0, r3
 8002872:	d1b8      	bne.n	80027e6 <find_volume+0x1fa>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8002874:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 8002878:	f7ff fbf1 	bl	800205e <ld_dword>
 800287c:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800287e:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8002882:	f7ff fbec 	bl	800205e <ld_dword>
 8002886:	60e0      	str	r0, [r4, #12]
 8002888:	e7ad      	b.n	80027e6 <find_volume+0x1fa>
	if (vol < 0) return FR_INVALID_DRIVE;
 800288a:	250b      	movs	r5, #11
}
 800288c:	4628      	mov	r0, r5
 800288e:	b005      	add	sp, #20
 8002890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002894:	250c      	movs	r5, #12
 8002896:	e7f9      	b.n	800288c <find_volume+0x2a0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002898:	2503      	movs	r5, #3
 800289a:	e7f7      	b.n	800288c <find_volume+0x2a0>
		return FR_WRITE_PROTECTED;
 800289c:	250a      	movs	r5, #10
 800289e:	e7f5      	b.n	800288c <find_volume+0x2a0>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80028a0:	2501      	movs	r5, #1
 80028a2:	e7f3      	b.n	800288c <find_volume+0x2a0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80028a4:	250d      	movs	r5, #13
 80028a6:	e7f1      	b.n	800288c <find_volume+0x2a0>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80028a8:	250d      	movs	r5, #13
 80028aa:	e7ef      	b.n	800288c <find_volume+0x2a0>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80028ac:	250d      	movs	r5, #13
 80028ae:	e7ed      	b.n	800288c <find_volume+0x2a0>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80028b0:	250d      	movs	r5, #13
 80028b2:	e7eb      	b.n	800288c <find_volume+0x2a0>
 80028b4:	250d      	movs	r5, #13
 80028b6:	e7e9      	b.n	800288c <find_volume+0x2a0>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80028b8:	250d      	movs	r5, #13
 80028ba:	e7e7      	b.n	800288c <find_volume+0x2a0>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80028bc:	250d      	movs	r5, #13
 80028be:	e7e5      	b.n	800288c <find_volume+0x2a0>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80028c0:	250d      	movs	r5, #13
 80028c2:	e7e3      	b.n	800288c <find_volume+0x2a0>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80028c4:	250d      	movs	r5, #13
 80028c6:	e7e1      	b.n	800288c <find_volume+0x2a0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80028c8:	250d      	movs	r5, #13
 80028ca:	e7df      	b.n	800288c <find_volume+0x2a0>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80028cc:	250d      	movs	r5, #13
 80028ce:	e7dd      	b.n	800288c <find_volume+0x2a0>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80028d0:	250d      	movs	r5, #13
 80028d2:	e7db      	b.n	800288c <find_volume+0x2a0>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80028d4:	250d      	movs	r5, #13
 80028d6:	e7d9      	b.n	800288c <find_volume+0x2a0>
 80028d8:	2000760c 	.word	0x2000760c
 80028dc:	20007608 	.word	0x20007608
 80028e0:	41615252 	.word	0x41615252
 80028e4:	61417272 	.word	0x61417272

080028e8 <put_fat>:
{
 80028e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80028ec:	2901      	cmp	r1, #1
 80028ee:	d975      	bls.n	80029dc <put_fat+0xf4>
 80028f0:	4607      	mov	r7, r0
 80028f2:	460c      	mov	r4, r1
 80028f4:	4616      	mov	r6, r2
 80028f6:	6943      	ldr	r3, [r0, #20]
 80028f8:	428b      	cmp	r3, r1
 80028fa:	d973      	bls.n	80029e4 <put_fat+0xfc>
		switch (fs->fs_type) {
 80028fc:	7803      	ldrb	r3, [r0, #0]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d03e      	beq.n	8002980 <put_fat+0x98>
 8002902:	2b03      	cmp	r3, #3
 8002904:	d04f      	beq.n	80029a6 <put_fat+0xbe>
 8002906:	2b01      	cmp	r3, #1
 8002908:	d16e      	bne.n	80029e8 <put_fat+0x100>
			bc = (UINT)clst; bc += bc / 2;
 800290a:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800290e:	6a01      	ldr	r1, [r0, #32]
 8002910:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8002914:	f7ff fe12 	bl	800253c <move_window>
			if (res != FR_OK) break;
 8002918:	4605      	mov	r5, r0
 800291a:	2800      	cmp	r0, #0
 800291c:	d15f      	bne.n	80029de <put_fat+0xf6>
			p = fs->win + bc++ % SS(fs);
 800291e:	f107 0a30 	add.w	sl, r7, #48	@ 0x30
 8002922:	f108 0901 	add.w	r9, r8, #1
 8002926:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800292a:	f014 0401 	ands.w	r4, r4, #1
 800292e:	d01d      	beq.n	800296c <put_fat+0x84>
 8002930:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002946:	6a39      	ldr	r1, [r7, #32]
 8002948:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800294c:	4638      	mov	r0, r7
 800294e:	f7ff fdf5 	bl	800253c <move_window>
			if (res != FR_OK) break;
 8002952:	4605      	mov	r5, r0
 8002954:	2800      	cmp	r0, #0
 8002956:	d142      	bne.n	80029de <put_fat+0xf6>
			p = fs->win + bc % SS(fs);
 8002958:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800295c:	b144      	cbz	r4, 8002970 <put_fat+0x88>
 800295e:	f3c6 1307 	ubfx	r3, r6, #4, #8
 8002962:	f80a 3009 	strb.w	r3, [sl, r9]
			fs->wflag = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	70fb      	strb	r3, [r7, #3]
			break;
 800296a:	e038      	b.n	80029de <put_fat+0xf6>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800296c:	b2f3      	uxtb	r3, r6
 800296e:	e7e6      	b.n	800293e <put_fat+0x56>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002970:	f81a 3009 	ldrb.w	r3, [sl, r9]
 8002974:	f3c6 2203 	ubfx	r2, r6, #8, #4
 8002978:	f023 030f 	bic.w	r3, r3, #15
 800297c:	4313      	orrs	r3, r2
 800297e:	e7f0      	b.n	8002962 <put_fat+0x7a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002980:	6a01      	ldr	r1, [r0, #32]
 8002982:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8002986:	f7ff fdd9 	bl	800253c <move_window>
			if (res != FR_OK) break;
 800298a:	4605      	mov	r5, r0
 800298c:	bb38      	cbnz	r0, 80029de <put_fat+0xf6>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800298e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002992:	0064      	lsls	r4, r4, #1
 8002994:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 8002998:	b2b1      	uxth	r1, r6
 800299a:	4420      	add	r0, r4
 800299c:	f7ff fb6a 	bl	8002074 <st_word>
			fs->wflag = 1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	70fb      	strb	r3, [r7, #3]
			break;
 80029a4:	e01b      	b.n	80029de <put_fat+0xf6>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80029a6:	6a01      	ldr	r1, [r0, #32]
 80029a8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80029ac:	f7ff fdc6 	bl	800253c <move_window>
			if (res != FR_OK) break;
 80029b0:	4605      	mov	r5, r0
 80029b2:	b9a0      	cbnz	r0, 80029de <put_fat+0xf6>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80029b4:	f026 4670 	bic.w	r6, r6, #4026531840	@ 0xf0000000
 80029b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80029bc:	00a4      	lsls	r4, r4, #2
 80029be:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 80029c2:	441c      	add	r4, r3
 80029c4:	4620      	mov	r0, r4
 80029c6:	f7ff fb4a 	bl	800205e <ld_dword>
 80029ca:	f000 4170 	and.w	r1, r0, #4026531840	@ 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80029ce:	4331      	orrs	r1, r6
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7ff fb53 	bl	800207c <st_dword>
			fs->wflag = 1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	70fb      	strb	r3, [r7, #3]
			break;
 80029da:	e000      	b.n	80029de <put_fat+0xf6>
	FRESULT res = FR_INT_ERR;
 80029dc:	2502      	movs	r5, #2
}
 80029de:	4628      	mov	r0, r5
 80029e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
 80029e4:	2502      	movs	r5, #2
 80029e6:	e7fa      	b.n	80029de <put_fat+0xf6>
		switch (fs->fs_type) {
 80029e8:	2502      	movs	r5, #2
 80029ea:	e7f8      	b.n	80029de <put_fat+0xf6>

080029ec <get_fat>:
{
 80029ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 80029ee:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80029f0:	2901      	cmp	r1, #1
 80029f2:	d954      	bls.n	8002a9e <get_fat+0xb2>
 80029f4:	460c      	mov	r4, r1
 80029f6:	696b      	ldr	r3, [r5, #20]
 80029f8:	428b      	cmp	r3, r1
 80029fa:	d952      	bls.n	8002aa2 <get_fat+0xb6>
		switch (fs->fs_type) {
 80029fc:	782b      	ldrb	r3, [r5, #0]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d02b      	beq.n	8002a5a <get_fat+0x6e>
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d039      	beq.n	8002a7a <get_fat+0x8e>
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d14d      	bne.n	8002aa6 <get_fat+0xba>
			bc = (UINT)clst; bc += bc / 2;
 8002a0a:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a0e:	6a29      	ldr	r1, [r5, #32]
 8002a10:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8002a14:	4628      	mov	r0, r5
 8002a16:	f7ff fd91 	bl	800253c <move_window>
 8002a1a:	b110      	cbz	r0, 8002a22 <get_fat+0x36>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a20:	e03e      	b.n	8002aa0 <get_fat+0xb4>
			wc = fs->win[bc++ % SS(fs)];
 8002a22:	1c77      	adds	r7, r6, #1
 8002a24:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8002a28:	442e      	add	r6, r5
 8002a2a:	f896 6030 	ldrb.w	r6, [r6, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a2e:	6a29      	ldr	r1, [r5, #32]
 8002a30:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8002a34:	4628      	mov	r0, r5
 8002a36:	f7ff fd81 	bl	800253c <move_window>
 8002a3a:	bbb0      	cbnz	r0, 8002aaa <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002a3c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8002a40:	442f      	add	r7, r5
 8002a42:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002a46:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002a4a:	f014 0f01 	tst.w	r4, #1
 8002a4e:	d001      	beq.n	8002a54 <get_fat+0x68>
 8002a50:	0900      	lsrs	r0, r0, #4
 8002a52:	e025      	b.n	8002aa0 <get_fat+0xb4>
 8002a54:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002a58:	e022      	b.n	8002aa0 <get_fat+0xb4>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002a5a:	6a29      	ldr	r1, [r5, #32]
 8002a5c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8002a60:	4628      	mov	r0, r5
 8002a62:	f7ff fd6b 	bl	800253c <move_window>
 8002a66:	bb18      	cbnz	r0, 8002ab0 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002a68:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8002a6c:	0064      	lsls	r4, r4, #1
 8002a6e:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 8002a72:	4420      	add	r0, r4
 8002a74:	f7ff faee 	bl	8002054 <ld_word>
			break;
 8002a78:	e012      	b.n	8002aa0 <get_fat+0xb4>
			FRESULT res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002a7a:	6a29      	ldr	r1, [r5, #32]
 8002a7c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8002a80:	4628      	mov	r0, r5
 8002a82:	f7ff fd5b 	bl	800253c <move_window>
			if ( res != FR_OK){ break;}
 8002a86:	b9b0      	cbnz	r0, 8002ab6 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002a88:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8002a8c:	00a4      	lsls	r4, r4, #2
 8002a8e:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 8002a92:	4420      	add	r0, r4
 8002a94:	f7ff fae3 	bl	800205e <ld_dword>
 8002a98:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 8002a9c:	e000      	b.n	8002aa0 <get_fat+0xb4>
		val = 1;	/* Internal error */
 8002a9e:	2001      	movs	r0, #1
}
 8002aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	e7fc      	b.n	8002aa0 <get_fat+0xb4>
		switch (fs->fs_type) {
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	e7fa      	b.n	8002aa0 <get_fat+0xb4>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002aaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002aae:	e7f7      	b.n	8002aa0 <get_fat+0xb4>
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ab4:	e7f4      	b.n	8002aa0 <get_fat+0xb4>
 8002ab6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	return val;
 8002aba:	e7f1      	b.n	8002aa0 <get_fat+0xb4>

08002abc <dir_sdi>:
{
 8002abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8002ac0:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002ac4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8002ac8:	d23f      	bcs.n	8002b4a <dir_sdi+0x8e>
 8002aca:	4607      	mov	r7, r0
 8002acc:	460e      	mov	r6, r1
 8002ace:	f011 0f1f 	tst.w	r1, #31
 8002ad2:	d13d      	bne.n	8002b50 <dir_sdi+0x94>
	dp->dptr = ofs;				/* Set current offset */
 8002ad4:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002ad6:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002ad8:	b9e4      	cbnz	r4, 8002b14 <dir_sdi+0x58>
 8002ada:	f898 3000 	ldrb.w	r3, [r8]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <dir_sdi+0x2a>
		clst = fs->dirbase;
 8002ae2:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002ae6:	b9ac      	cbnz	r4, 8002b14 <dir_sdi+0x58>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002ae8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8002aec:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 8002af0:	d930      	bls.n	8002b54 <dir_sdi+0x98>
		dp->sect = fs->dirbase;
 8002af2:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 8002af6:	61fb      	str	r3, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 8002af8:	61bc      	str	r4, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	b393      	cbz	r3, 8002b64 <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002afe:	eb03 2356 	add.w	r3, r3, r6, lsr #9
 8002b02:	61fb      	str	r3, [r7, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002b04:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 8002b08:	f3c6 0108 	ubfx	r1, r6, #0, #9
 8002b0c:	4441      	add	r1, r8
 8002b0e:	6239      	str	r1, [r7, #32]
	return FR_OK;
 8002b10:	2000      	movs	r0, #0
 8002b12:	e01b      	b.n	8002b4c <dir_sdi+0x90>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002b14:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8002b18:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8002b1a:	42ae      	cmp	r6, r5
 8002b1c:	d30f      	bcc.n	8002b3e <dir_sdi+0x82>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002b1e:	4621      	mov	r1, r4
 8002b20:	4638      	mov	r0, r7
 8002b22:	f7ff ff63 	bl	80029ec <get_fat>
 8002b26:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002b28:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8002b2c:	d014      	beq.n	8002b58 <dir_sdi+0x9c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002b2e:	2801      	cmp	r0, #1
 8002b30:	d914      	bls.n	8002b5c <dir_sdi+0xa0>
 8002b32:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002b36:	4283      	cmp	r3, r0
 8002b38:	d912      	bls.n	8002b60 <dir_sdi+0xa4>
			ofs -= csz;
 8002b3a:	1b76      	subs	r6, r6, r5
 8002b3c:	e7ed      	b.n	8002b1a <dir_sdi+0x5e>
		dp->sect = clust2sect(fs, clst);
 8002b3e:	4621      	mov	r1, r4
 8002b40:	4640      	mov	r0, r8
 8002b42:	f7ff fba5 	bl	8002290 <clust2sect>
 8002b46:	61f8      	str	r0, [r7, #28]
 8002b48:	e7d6      	b.n	8002af8 <dir_sdi+0x3c>
		return FR_INT_ERR;
 8002b4a:	2002      	movs	r0, #2
}
 8002b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 8002b50:	2002      	movs	r0, #2
 8002b52:	e7fb      	b.n	8002b4c <dir_sdi+0x90>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002b54:	2002      	movs	r0, #2
 8002b56:	e7f9      	b.n	8002b4c <dir_sdi+0x90>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002b58:	2001      	movs	r0, #1
 8002b5a:	e7f7      	b.n	8002b4c <dir_sdi+0x90>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	e7f5      	b.n	8002b4c <dir_sdi+0x90>
 8002b60:	2002      	movs	r0, #2
 8002b62:	e7f3      	b.n	8002b4c <dir_sdi+0x90>
	if (!dp->sect) return FR_INT_ERR;
 8002b64:	2002      	movs	r0, #2
 8002b66:	e7f1      	b.n	8002b4c <dir_sdi+0x90>

08002b68 <create_chain>:
{
 8002b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b6c:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8002b6e:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8002b70:	460f      	mov	r7, r1
 8002b72:	b951      	cbnz	r1, 8002b8a <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8002b74:	f8d6 800c 	ldr.w	r8, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002b78:	f1b8 0f00 	cmp.w	r8, #0
 8002b7c:	d012      	beq.n	8002ba4 <create_chain+0x3c>
 8002b7e:	6973      	ldr	r3, [r6, #20]
 8002b80:	4543      	cmp	r3, r8
 8002b82:	d811      	bhi.n	8002ba8 <create_chain+0x40>
 8002b84:	f04f 0801 	mov.w	r8, #1
 8002b88:	e00e      	b.n	8002ba8 <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002b8a:	f7ff ff2f 	bl	80029ec <get_fat>
 8002b8e:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002b90:	2801      	cmp	r0, #1
 8002b92:	d94c      	bls.n	8002c2e <create_chain+0xc6>
		if (cs == 0xFFFFFFFF) {return cs;}	/* A disk error occurred */
 8002b94:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8002b98:	d04e      	beq.n	8002c38 <create_chain+0xd0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002b9a:	6972      	ldr	r2, [r6, #20]
 8002b9c:	4282      	cmp	r2, r0
 8002b9e:	d84b      	bhi.n	8002c38 <create_chain+0xd0>
		scl = clst;
 8002ba0:	46b8      	mov	r8, r7
 8002ba2:	e001      	b.n	8002ba8 <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002ba4:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 8002ba8:	4644      	mov	r4, r8
 8002baa:	e00c      	b.n	8002bc6 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002bac:	4621      	mov	r1, r4
 8002bae:	4628      	mov	r0, r5
 8002bb0:	f7ff ff1c 	bl	80029ec <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	b178      	cbz	r0, 8002bd8 <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) {return cs;}	/* An error occurred */
 8002bb8:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8002bbc:	bf18      	it	ne
 8002bbe:	2801      	cmpne	r0, #1
 8002bc0:	d03a      	beq.n	8002c38 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 8002bc2:	4544      	cmp	r4, r8
 8002bc4:	d037      	beq.n	8002c36 <create_chain+0xce>
			ncl++;							/* Next cluster */
 8002bc6:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002bc8:	6973      	ldr	r3, [r6, #20]
 8002bca:	42a3      	cmp	r3, r4
 8002bcc:	d8ee      	bhi.n	8002bac <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 8002bce:	f1b8 0f01 	cmp.w	r8, #1
 8002bd2:	d92e      	bls.n	8002c32 <create_chain+0xca>
				ncl = 2;
 8002bd4:	2402      	movs	r4, #2
 8002bd6:	e7e9      	b.n	8002bac <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bdc:	4621      	mov	r1, r4
 8002bde:	4630      	mov	r0, r6
 8002be0:	f7ff fe82 	bl	80028e8 <put_fat>
		if (res == FR_OK && clst != 0) {
 8002be4:	4602      	mov	r2, r0
 8002be6:	fab0 f080 	clz	r0, r0
 8002bea:	0940      	lsrs	r0, r0, #5
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	bf08      	it	eq
 8002bf0:	2000      	moveq	r0, #0
 8002bf2:	b970      	cbnz	r0, 8002c12 <create_chain+0xaa>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002bf4:	b9a2      	cbnz	r2, 8002c20 <create_chain+0xb8>
		fs->last_clst = ncl;
 8002bf6:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002bf8:	6932      	ldr	r2, [r6, #16]
 8002bfa:	6973      	ldr	r3, [r6, #20]
 8002bfc:	3b02      	subs	r3, #2
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d801      	bhi.n	8002c06 <create_chain+0x9e>
 8002c02:	3a01      	subs	r2, #1
 8002c04:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
 8002c06:	7933      	ldrb	r3, [r6, #4]
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	7133      	strb	r3, [r6, #4]
 8002c0e:	4623      	mov	r3, r4
 8002c10:	e012      	b.n	8002c38 <create_chain+0xd0>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8002c12:	4622      	mov	r2, r4
 8002c14:	4639      	mov	r1, r7
 8002c16:	4630      	mov	r0, r6
 8002c18:	f7ff fe66 	bl	80028e8 <put_fat>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	e7e9      	b.n	8002bf4 <create_chain+0x8c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002c20:	2a01      	cmp	r2, #1
 8002c22:	d001      	beq.n	8002c28 <create_chain+0xc0>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e007      	b.n	8002c38 <create_chain+0xd0>
 8002c28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c2c:	e004      	b.n	8002c38 <create_chain+0xd0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e002      	b.n	8002c38 <create_chain+0xd0>
				if (ncl > scl) return 0;	/* No free cluster */
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c3e <remove_chain>:
{
 8002c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c40:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8002c42:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002c44:	2901      	cmp	r1, #1
 8002c46:	d92e      	bls.n	8002ca6 <remove_chain+0x68>
 8002c48:	4606      	mov	r6, r0
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	696b      	ldr	r3, [r5, #20]
 8002c4e:	42a3      	cmp	r3, r4
 8002c50:	d92b      	bls.n	8002caa <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002c52:	b14a      	cbz	r2, 8002c68 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002c54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f7ff fe45 	bl	80028e8 <put_fat>
		if (res != FR_OK) return res;
 8002c5e:	4607      	mov	r7, r0
 8002c60:	b110      	cbz	r0, 8002c68 <remove_chain+0x2a>
 8002c62:	e023      	b.n	8002cac <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002c64:	42a2      	cmp	r2, r4
 8002c66:	d921      	bls.n	8002cac <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002c68:	4627      	mov	r7, r4
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	f7ff febd 	bl	80029ec <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8002c72:	4604      	mov	r4, r0
 8002c74:	b1e0      	cbz	r0, 8002cb0 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002c76:	2801      	cmp	r0, #1
 8002c78:	d01c      	beq.n	8002cb4 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002c7a:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8002c7e:	d01b      	beq.n	8002cb8 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002c80:	2200      	movs	r2, #0
 8002c82:	4639      	mov	r1, r7
 8002c84:	4628      	mov	r0, r5
 8002c86:	f7ff fe2f 	bl	80028e8 <put_fat>
			if (res != FR_OK) return res;
 8002c8a:	4607      	mov	r7, r0
 8002c8c:	b970      	cbnz	r0, 8002cac <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002c8e:	692b      	ldr	r3, [r5, #16]
 8002c90:	696a      	ldr	r2, [r5, #20]
 8002c92:	1e91      	subs	r1, r2, #2
 8002c94:	428b      	cmp	r3, r1
 8002c96:	d2e5      	bcs.n	8002c64 <remove_chain+0x26>
			fs->free_clst++;
 8002c98:	3301      	adds	r3, #1
 8002c9a:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8002c9c:	792b      	ldrb	r3, [r5, #4]
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	712b      	strb	r3, [r5, #4]
 8002ca4:	e7de      	b.n	8002c64 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002ca6:	2702      	movs	r7, #2
 8002ca8:	e000      	b.n	8002cac <remove_chain+0x6e>
 8002caa:	2702      	movs	r7, #2
}
 8002cac:	4638      	mov	r0, r7
 8002cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8002cb0:	2700      	movs	r7, #0
 8002cb2:	e7fb      	b.n	8002cac <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002cb4:	2702      	movs	r7, #2
 8002cb6:	e7f9      	b.n	8002cac <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002cb8:	2701      	movs	r7, #1
 8002cba:	e7f7      	b.n	8002cac <remove_chain+0x6e>

08002cbc <dir_next>:
{
 8002cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 8002cc0:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002cc2:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002cc4:	69c3      	ldr	r3, [r0, #28]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d06c      	beq.n	8002da4 <dir_next+0xe8>
 8002cca:	4604      	mov	r4, r0
 8002ccc:	4688      	mov	r8, r1
 8002cce:	3520      	adds	r5, #32
 8002cd0:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 8002cd4:	d268      	bcs.n	8002da8 <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002cd6:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8002cda:	b93f      	cbnz	r7, 8002cec <dir_next+0x30>
		dp->sect++;				/* Next sector */
 8002cdc:	3301      	adds	r3, #1
 8002cde:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8002ce0:	6981      	ldr	r1, [r0, #24]
 8002ce2:	b979      	cbnz	r1, 8002d04 <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002ce4:	8933      	ldrh	r3, [r6, #8]
 8002ce6:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8002cea:	d907      	bls.n	8002cfc <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 8002cec:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002cee:	f106 0330 	add.w	r3, r6, #48	@ 0x30
 8002cf2:	443b      	add	r3, r7
 8002cf4:	6223      	str	r3, [r4, #32]
	return FR_OK;
 8002cf6:	2000      	movs	r0, #0
}
 8002cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61c3      	str	r3, [r0, #28]
 8002d00:	2004      	movs	r0, #4
 8002d02:	e7f9      	b.n	8002cf8 <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8002d04:	8973      	ldrh	r3, [r6, #10]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 8002d0c:	d1ee      	bne.n	8002cec <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8002d0e:	f7ff fe6d 	bl	80029ec <get_fat>
 8002d12:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8002d14:	2801      	cmp	r0, #1
 8002d16:	d949      	bls.n	8002dac <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8002d18:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8002d1c:	d048      	beq.n	8002db0 <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8002d1e:	6973      	ldr	r3, [r6, #20]
 8002d20:	4283      	cmp	r3, r0
 8002d22:	d837      	bhi.n	8002d94 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 8002d24:	f1b8 0f00 	cmp.w	r8, #0
 8002d28:	d011      	beq.n	8002d4e <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002d2a:	69a1      	ldr	r1, [r4, #24]
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff ff1b 	bl	8002b68 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002d32:	4682      	mov	sl, r0
 8002d34:	2800      	cmp	r0, #0
 8002d36:	d03d      	beq.n	8002db4 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8002d38:	2801      	cmp	r0, #1
 8002d3a:	d03d      	beq.n	8002db8 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002d3c:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8002d40:	d03c      	beq.n	8002dbc <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002d42:	4630      	mov	r0, r6
 8002d44:	f7ff fbd0 	bl	80024e8 <sync_window>
 8002d48:	b128      	cbz	r0, 8002d56 <dir_next+0x9a>
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	e7d4      	b.n	8002cf8 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61e3      	str	r3, [r4, #28]
 8002d52:	2004      	movs	r0, #4
 8002d54:	e7d0      	b.n	8002cf8 <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8002d56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 8002d60:	f7ff f9a0 	bl	80020a4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8002d64:	4651      	mov	r1, sl
 8002d66:	4630      	mov	r0, r6
 8002d68:	f7ff fa92 	bl	8002290 <clust2sect>
 8002d6c:	62f0      	str	r0, [r6, #44]	@ 0x2c
 8002d6e:	8973      	ldrh	r3, [r6, #10]
 8002d70:	4599      	cmp	r9, r3
 8002d72:	d20b      	bcs.n	8002d8c <dir_next+0xd0>
						fs->wflag = 1;
 8002d74:	2301      	movs	r3, #1
 8002d76:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8002d78:	4630      	mov	r0, r6
 8002d7a:	f7ff fbb5 	bl	80024e8 <sync_window>
 8002d7e:	b9f8      	cbnz	r0, 8002dc0 <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8002d80:	f109 0901 	add.w	r9, r9, #1
 8002d84:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8002d86:	3301      	adds	r3, #1
 8002d88:	62f3      	str	r3, [r6, #44]	@ 0x2c
 8002d8a:	e7f0      	b.n	8002d6e <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 8002d8c:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8002d8e:	eba3 0309 	sub.w	r3, r3, r9
 8002d92:	62f3      	str	r3, [r6, #44]	@ 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8002d94:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 8002d98:	4651      	mov	r1, sl
 8002d9a:	4630      	mov	r0, r6
 8002d9c:	f7ff fa78 	bl	8002290 <clust2sect>
 8002da0:	61e0      	str	r0, [r4, #28]
 8002da2:	e7a3      	b.n	8002cec <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002da4:	2004      	movs	r0, #4
 8002da6:	e7a7      	b.n	8002cf8 <dir_next+0x3c>
 8002da8:	2004      	movs	r0, #4
 8002daa:	e7a5      	b.n	8002cf8 <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8002dac:	2002      	movs	r0, #2
 8002dae:	e7a3      	b.n	8002cf8 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8002db0:	2001      	movs	r0, #1
 8002db2:	e7a1      	b.n	8002cf8 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002db4:	2007      	movs	r0, #7
 8002db6:	e79f      	b.n	8002cf8 <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8002db8:	2002      	movs	r0, #2
 8002dba:	e79d      	b.n	8002cf8 <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	e79b      	b.n	8002cf8 <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	e799      	b.n	8002cf8 <dir_next+0x3c>

08002dc4 <dir_find>:
{
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8002dc8:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002dca:	2100      	movs	r1, #0
 8002dcc:	f7ff fe76 	bl	8002abc <dir_sdi>
	if (res != FR_OK) return res;
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	b140      	cbz	r0, 8002de6 <dir_find+0x22>
}
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7ff ff6e 	bl	8002cbc <dir_next>
	} while (res == FR_OK);
 8002de0:	4605      	mov	r5, r0
 8002de2:	2800      	cmp	r0, #0
 8002de4:	d1f6      	bne.n	8002dd4 <dir_find+0x10>
		res = move_window(fs, dp->sect);
 8002de6:	69e1      	ldr	r1, [r4, #28]
 8002de8:	4630      	mov	r0, r6
 8002dea:	f7ff fba7 	bl	800253c <move_window>
		if (res != FR_OK) break;
 8002dee:	4605      	mov	r5, r0
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d1ef      	bne.n	8002dd4 <dir_find+0x10>
		c = dp->dir[DIR_Name];
 8002df4:	6a20      	ldr	r0, [r4, #32]
 8002df6:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002df8:	b17b      	cbz	r3, 8002e1a <dir_find+0x56>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002dfa:	7ac3      	ldrb	r3, [r0, #11]
 8002dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e00:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002e02:	7ac3      	ldrb	r3, [r0, #11]
 8002e04:	f013 0f08 	tst.w	r3, #8
 8002e08:	d1e6      	bne.n	8002dd8 <dir_find+0x14>
 8002e0a:	220b      	movs	r2, #11
 8002e0c:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 8002e10:	f7ff f94d 	bl	80020ae <mem_cmp>
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d1df      	bne.n	8002dd8 <dir_find+0x14>
 8002e18:	e7dc      	b.n	8002dd4 <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002e1a:	2504      	movs	r5, #4
 8002e1c:	e7da      	b.n	8002dd4 <dir_find+0x10>

08002e1e <follow_path>:
{
 8002e1e:	b530      	push	{r4, r5, lr}
 8002e20:	b083      	sub	sp, #12
 8002e22:	4604      	mov	r4, r0
 8002e24:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8002e26:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002e28:	e001      	b.n	8002e2e <follow_path+0x10>
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	9b01      	ldr	r3, [sp, #4]
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	2a2f      	cmp	r2, #47	@ 0x2f
 8002e34:	d0f9      	beq.n	8002e2a <follow_path+0xc>
 8002e36:	2a5c      	cmp	r2, #92	@ 0x5c
 8002e38:	d0f7      	beq.n	8002e2a <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b1f      	cmp	r3, #31
 8002e42:	d91e      	bls.n	8002e82 <follow_path+0x64>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002e44:	a901      	add	r1, sp, #4
 8002e46:	4620      	mov	r0, r4
 8002e48:	f7ff fa9a 	bl	8002380 <create_name>
			if (res != FR_OK) break;
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	bb00      	cbnz	r0, 8002e92 <follow_path+0x74>
			res = dir_find(dp);				/* Find an object with the segment name */
 8002e50:	4620      	mov	r0, r4
 8002e52:	f7ff ffb7 	bl	8002dc4 <dir_find>
			ns = dp->fn[NSFLAG];
 8002e56:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	b9e0      	cbnz	r0, 8002e98 <follow_path+0x7a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002e5e:	f012 0f04 	tst.w	r2, #4
 8002e62:	d116      	bne.n	8002e92 <follow_path+0x74>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002e64:	79a3      	ldrb	r3, [r4, #6]
 8002e66:	f013 0f10 	tst.w	r3, #16
 8002e6a:	d01c      	beq.n	8002ea6 <follow_path+0x88>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002e6c:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 8002e70:	6963      	ldr	r3, [r4, #20]
 8002e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e76:	4419      	add	r1, r3
 8002e78:	4628      	mov	r0, r5
 8002e7a:	f7ff fa26 	bl	80022ca <ld_clust>
 8002e7e:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002e80:	e7e0      	b.n	8002e44 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 8002e82:	2380      	movs	r3, #128	@ 0x80
 8002e84:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7ff fe16 	bl	8002abc <dir_sdi>
 8002e90:	4603      	mov	r3, r0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	b003      	add	sp, #12
 8002e96:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002e98:	2804      	cmp	r0, #4
 8002e9a:	d1fa      	bne.n	8002e92 <follow_path+0x74>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002e9c:	f012 0f04 	tst.w	r2, #4
 8002ea0:	d1f7      	bne.n	8002e92 <follow_path+0x74>
 8002ea2:	2305      	movs	r3, #5
 8002ea4:	e7f5      	b.n	8002e92 <follow_path+0x74>
				res = FR_NO_PATH; break;
 8002ea6:	2305      	movs	r3, #5
 8002ea8:	e7f3      	b.n	8002e92 <follow_path+0x74>

08002eaa <dir_alloc>:
{
 8002eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eac:	4604      	mov	r4, r0
 8002eae:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 8002eb0:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	f7ff fe02 	bl	8002abc <dir_sdi>
	if (res == FR_OK) {
 8002eb8:	4602      	mov	r2, r0
 8002eba:	b9b8      	cbnz	r0, 8002eec <dir_alloc+0x42>
		n = 0;
 8002ebc:	2500      	movs	r5, #0
 8002ebe:	e006      	b.n	8002ece <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 8002ec0:	2500      	movs	r5, #0
			res = dir_next(dp, 1);
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f7ff fef9 	bl	8002cbc <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002eca:	4602      	mov	r2, r0
 8002ecc:	b970      	cbnz	r0, 8002eec <dir_alloc+0x42>
			res = move_window(fs, dp->sect);
 8002ece:	69e1      	ldr	r1, [r4, #28]
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	f7ff fb33 	bl	800253c <move_window>
			if (res != FR_OK) break;
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	b940      	cbnz	r0, 8002eec <dir_alloc+0x42>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002eda:	6a23      	ldr	r3, [r4, #32]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	bf18      	it	ne
 8002ee2:	2be5      	cmpne	r3, #229	@ 0xe5
 8002ee4:	d1ec      	bne.n	8002ec0 <dir_alloc+0x16>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002ee6:	3501      	adds	r5, #1
 8002ee8:	42b5      	cmp	r5, r6
 8002eea:	d1ea      	bne.n	8002ec2 <dir_alloc+0x18>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002eec:	2a04      	cmp	r2, #4
 8002eee:	d001      	beq.n	8002ef4 <dir_alloc+0x4a>
}
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002ef4:	2207      	movs	r2, #7
 8002ef6:	e7fb      	b.n	8002ef0 <dir_alloc+0x46>

08002ef8 <dir_register>:
{
 8002ef8:	b570      	push	{r4, r5, r6, lr}
 8002efa:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8002efc:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8002efe:	2101      	movs	r1, #1
 8002f00:	f7ff ffd3 	bl	8002eaa <dir_alloc>
	if (res == FR_OK) {
 8002f04:	4605      	mov	r5, r0
 8002f06:	b108      	cbz	r0, 8002f0c <dir_register+0x14>
}
 8002f08:	4628      	mov	r0, r5
 8002f0a:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 8002f0c:	69e1      	ldr	r1, [r4, #28]
 8002f0e:	4630      	mov	r0, r6
 8002f10:	f7ff fb14 	bl	800253c <move_window>
		if (res == FR_OK) {
 8002f14:	4605      	mov	r5, r0
 8002f16:	2800      	cmp	r0, #0
 8002f18:	d1f6      	bne.n	8002f08 <dir_register+0x10>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	6a20      	ldr	r0, [r4, #32]
 8002f20:	f7ff f8c0 	bl	80020a4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8002f24:	220b      	movs	r2, #11
 8002f26:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 8002f2a:	6a20      	ldr	r0, [r4, #32]
 8002f2c:	f7ff f8b0 	bl	8002090 <mem_cpy>
			fs->wflag = 1;
 8002f30:	2301      	movs	r3, #1
 8002f32:	70f3      	strb	r3, [r6, #3]
 8002f34:	e7e8      	b.n	8002f08 <dir_register+0x10>

08002f36 <dir_read>:
{
 8002f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f38:	4604      	mov	r4, r0
 8002f3a:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 8002f3c:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
 8002f3e:	2704      	movs	r7, #4
	while (dp->sect) {
 8002f40:	e005      	b.n	8002f4e <dir_read+0x18>
		res = dir_next(dp, 0);		/* Next entry */
 8002f42:	2100      	movs	r1, #0
 8002f44:	4620      	mov	r0, r4
 8002f46:	f7ff feb9 	bl	8002cbc <dir_next>
		if (res != FR_OK) break;
 8002f4a:	4607      	mov	r7, r0
 8002f4c:	b9e8      	cbnz	r0, 8002f8a <dir_read+0x54>
	while (dp->sect) {
 8002f4e:	69e1      	ldr	r1, [r4, #28]
 8002f50:	b1d9      	cbz	r1, 8002f8a <dir_read+0x54>
		res = move_window(fs, dp->sect);
 8002f52:	4628      	mov	r0, r5
 8002f54:	f7ff faf2 	bl	800253c <move_window>
		if (res != FR_OK) break;
 8002f58:	4607      	mov	r7, r0
 8002f5a:	b9b0      	cbnz	r0, 8002f8a <dir_read+0x54>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8002f5c:	6a23      	ldr	r3, [r4, #32]
 8002f5e:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 8002f60:	b192      	cbz	r2, 8002f88 <dir_read+0x52>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8002f62:	7adb      	ldrb	r3, [r3, #11]
 8002f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f68:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8002f6a:	2ae5      	cmp	r2, #229	@ 0xe5
 8002f6c:	bf18      	it	ne
 8002f6e:	2a2e      	cmpne	r2, #46	@ 0x2e
 8002f70:	d0e7      	beq.n	8002f42 <dir_read+0xc>
 8002f72:	2b0f      	cmp	r3, #15
 8002f74:	d0e5      	beq.n	8002f42 <dir_read+0xc>
 8002f76:	f023 0320 	bic.w	r3, r3, #32
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	bf14      	ite	ne
 8002f7e:	2300      	movne	r3, #0
 8002f80:	2301      	moveq	r3, #1
 8002f82:	42b3      	cmp	r3, r6
 8002f84:	d1dd      	bne.n	8002f42 <dir_read+0xc>
 8002f86:	e000      	b.n	8002f8a <dir_read+0x54>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8002f88:	2704      	movs	r7, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8002f8a:	b10f      	cbz	r7, 8002f90 <dir_read+0x5a>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61e3      	str	r3, [r4, #28]
}
 8002f90:	4638      	mov	r0, r7
 8002f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f94 <sync_fs>:
{
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	4604      	mov	r4, r0
	res = sync_window(fs);
 8002f98:	f7ff faa6 	bl	80024e8 <sync_window>
	if (res == FR_OK) {
 8002f9c:	4605      	mov	r5, r0
 8002f9e:	b948      	cbnz	r0, 8002fb4 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002fa0:	7823      	ldrb	r3, [r4, #0]
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d008      	beq.n	8002fb8 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4611      	mov	r1, r2
 8002faa:	7860      	ldrb	r0, [r4, #1]
 8002fac:	f7fe feb2 	bl	8001d14 <disk_ioctl>
 8002fb0:	b100      	cbz	r0, 8002fb4 <sync_fs+0x20>
 8002fb2:	2501      	movs	r5, #1
}
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002fb8:	7923      	ldrb	r3, [r4, #4]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d1f3      	bne.n	8002fa6 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8002fbe:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8002fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4630      	mov	r0, r6
 8002fca:	f7ff f86b 	bl	80020a4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8002fce:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8002fd2:	f204 202e 	addw	r0, r4, #558	@ 0x22e
 8002fd6:	f7ff f84d 	bl	8002074 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8002fda:	490f      	ldr	r1, [pc, #60]	@ (8003018 <sync_fs+0x84>)
 8002fdc:	4630      	mov	r0, r6
 8002fde:	f7ff f84d 	bl	800207c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8002fe2:	490e      	ldr	r1, [pc, #56]	@ (800301c <sync_fs+0x88>)
 8002fe4:	f504 7005 	add.w	r0, r4, #532	@ 0x214
 8002fe8:	f7ff f848 	bl	800207c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002fec:	6921      	ldr	r1, [r4, #16]
 8002fee:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 8002ff2:	f7ff f843 	bl	800207c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002ff6:	68e1      	ldr	r1, [r4, #12]
 8002ff8:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8002ffc:	f7ff f83e 	bl	800207c <st_dword>
			fs->winsect = fs->volbase + 1;
 8003000:	69e2      	ldr	r2, [r4, #28]
 8003002:	3201      	adds	r2, #1
 8003004:	62e2      	str	r2, [r4, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003006:	2301      	movs	r3, #1
 8003008:	4631      	mov	r1, r6
 800300a:	7860      	ldrb	r0, [r4, #1]
 800300c:	f7fe fe76 	bl	8001cfc <disk_write>
			fs->fsi_flag = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	7123      	strb	r3, [r4, #4]
 8003014:	e7c7      	b.n	8002fa6 <sync_fs+0x12>
 8003016:	bf00      	nop
 8003018:	41615252 	.word	0x41615252
 800301c:	61417272 	.word	0x61417272

08003020 <f_mount>:
{
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	9001      	str	r0, [sp, #4]
 8003026:	9100      	str	r1, [sp, #0]
 8003028:	4616      	mov	r6, r2
	const TCHAR *rp = path;
 800302a:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 800302c:	a803      	add	r0, sp, #12
 800302e:	f7ff fa0f 	bl	8002450 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003032:	1e04      	subs	r4, r0, #0
 8003034:	db20      	blt.n	8003078 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003036:	4b11      	ldr	r3, [pc, #68]	@ (800307c <f_mount+0x5c>)
 8003038:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (cfs) {
 800303c:	b125      	cbz	r5, 8003048 <f_mount+0x28>
		clear_lock(cfs);
 800303e:	4628      	mov	r0, r5
 8003040:	f7ff f908 	bl	8002254 <clear_lock>
		cfs->fs_type = 0;				/* Clear old fs object */
 8003044:	2300      	movs	r3, #0
 8003046:	702b      	strb	r3, [r5, #0]
	if (fs) {
 8003048:	9b01      	ldr	r3, [sp, #4]
 800304a:	b10b      	cbz	r3, 8003050 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8003050:	9b01      	ldr	r3, [sp, #4]
 8003052:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <f_mount+0x5c>)
 8003054:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003058:	1e72      	subs	r2, r6, #1
 800305a:	bf18      	it	ne
 800305c:	2201      	movne	r2, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf08      	it	eq
 8003062:	f042 0201 	orreq.w	r2, r2, #1
 8003066:	b112      	cbz	r2, 800306e <f_mount+0x4e>
 8003068:	2000      	movs	r0, #0
}
 800306a:	b004      	add	sp, #16
 800306c:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800306e:	a901      	add	r1, sp, #4
 8003070:	4668      	mov	r0, sp
 8003072:	f7ff fabb 	bl	80025ec <find_volume>
	LEAVE_FF(fs, res);
 8003076:	e7f8      	b.n	800306a <f_mount+0x4a>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003078:	200b      	movs	r0, #11
 800307a:	e7f6      	b.n	800306a <f_mount+0x4a>
 800307c:	2000760c 	.word	0x2000760c

08003080 <f_open>:
{
 8003080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003084:	b091      	sub	sp, #68	@ 0x44
 8003086:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8003088:	2800      	cmp	r0, #0
 800308a:	f000 8108 	beq.w	800329e <f_open+0x21e>
 800308e:	4614      	mov	r4, r2
 8003090:	4606      	mov	r6, r0
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003092:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 8003096:	463a      	mov	r2, r7
 8003098:	a903      	add	r1, sp, #12
 800309a:	a801      	add	r0, sp, #4
 800309c:	f7ff faa6 	bl	80025ec <find_volume>
	if (res == FR_OK) {
 80030a0:	4605      	mov	r5, r0
 80030a2:	b128      	cbz	r0, 80030b0 <f_open+0x30>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80030a4:	2300      	movs	r3, #0
 80030a6:	6033      	str	r3, [r6, #0]
}
 80030a8:	4628      	mov	r0, r5
 80030aa:	b011      	add	sp, #68	@ 0x44
 80030ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 80030b0:	9b03      	ldr	r3, [sp, #12]
 80030b2:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80030b4:	9901      	ldr	r1, [sp, #4]
 80030b6:	a804      	add	r0, sp, #16
 80030b8:	f7ff feb1 	bl	8002e1e <follow_path>
		if (res == FR_OK) {
 80030bc:	4605      	mov	r5, r0
 80030be:	b960      	cbnz	r0, 80030da <f_open+0x5a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80030c0:	f99d 303f 	ldrsb.w	r3, [sp, #63]	@ 0x3f
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	db52      	blt.n	800316e <f_open+0xee>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80030c8:	f014 0f3e 	tst.w	r4, #62	@ 0x3e
 80030cc:	bf14      	ite	ne
 80030ce:	2101      	movne	r1, #1
 80030d0:	2100      	moveq	r1, #0
 80030d2:	a804      	add	r0, sp, #16
 80030d4:	f7ff f800 	bl	80020d8 <chk_lock>
 80030d8:	4605      	mov	r5, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80030da:	f014 0f1c 	tst.w	r4, #28
 80030de:	d05c      	beq.n	800319a <f_open+0x11a>
			if (res != FR_OK) {					/* No file, create new */
 80030e0:	2d00      	cmp	r5, #0
 80030e2:	d050      	beq.n	8003186 <f_open+0x106>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80030e4:	2d04      	cmp	r5, #4
 80030e6:	d044      	beq.n	8003172 <f_open+0xf2>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80030e8:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80030ec:	2d00      	cmp	r5, #0
 80030ee:	d1d9      	bne.n	80030a4 <f_open+0x24>
 80030f0:	f017 0f08 	tst.w	r7, #8
 80030f4:	d061      	beq.n	80031ba <f_open+0x13a>
				dw = GET_FATTIME();
 80030f6:	f7fe fe37 	bl	8001d68 <get_fattime>
 80030fa:	4604      	mov	r4, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80030fc:	4601      	mov	r1, r0
 80030fe:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003100:	300e      	adds	r0, #14
 8003102:	f7fe ffbb 	bl	800207c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003106:	4621      	mov	r1, r4
 8003108:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800310a:	3016      	adds	r0, #22
 800310c:	f7fe ffb6 	bl	800207c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003110:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003112:	2220      	movs	r2, #32
 8003114:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003116:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800311a:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800311e:	4649      	mov	r1, r9
 8003120:	4640      	mov	r0, r8
 8003122:	f7ff f8d2 	bl	80022ca <ld_clust>
 8003126:	4604      	mov	r4, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003128:	2200      	movs	r2, #0
 800312a:	4649      	mov	r1, r9
 800312c:	4640      	mov	r0, r8
 800312e:	f7ff f8df 	bl	80022f0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003132:	2100      	movs	r1, #0
 8003134:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003136:	301c      	adds	r0, #28
 8003138:	f7fe ffa0 	bl	800207c <st_dword>
					fs->wflag = 1;
 800313c:	9b03      	ldr	r3, [sp, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8003142:	2c00      	cmp	r4, #0
 8003144:	d039      	beq.n	80031ba <f_open+0x13a>
						dw = fs->winsect;
 8003146:	9b03      	ldr	r3, [sp, #12]
 8003148:	f8d3 802c 	ldr.w	r8, [r3, #44]	@ 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 800314c:	2200      	movs	r2, #0
 800314e:	4621      	mov	r1, r4
 8003150:	a804      	add	r0, sp, #16
 8003152:	f7ff fd74 	bl	8002c3e <remove_chain>
						if (res == FR_OK) {
 8003156:	4605      	mov	r5, r0
 8003158:	2800      	cmp	r0, #0
 800315a:	d1a3      	bne.n	80030a4 <f_open+0x24>
							res = move_window(fs, dw);
 800315c:	4641      	mov	r1, r8
 800315e:	9803      	ldr	r0, [sp, #12]
 8003160:	f7ff f9ec 	bl	800253c <move_window>
 8003164:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003166:	3c01      	subs	r4, #1
 8003168:	9b03      	ldr	r3, [sp, #12]
 800316a:	60dc      	str	r4, [r3, #12]
 800316c:	e025      	b.n	80031ba <f_open+0x13a>
				res = FR_INVALID_NAME;
 800316e:	2506      	movs	r5, #6
 8003170:	e7b3      	b.n	80030da <f_open+0x5a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003172:	f7fe ffef 	bl	8002154 <enq_lock>
 8003176:	b908      	cbnz	r0, 800317c <f_open+0xfc>
 8003178:	2512      	movs	r5, #18
 800317a:	e7b5      	b.n	80030e8 <f_open+0x68>
 800317c:	a804      	add	r0, sp, #16
 800317e:	f7ff febb 	bl	8002ef8 <dir_register>
 8003182:	4605      	mov	r5, r0
 8003184:	e7b0      	b.n	80030e8 <f_open+0x68>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003186:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800318a:	f013 0f11 	tst.w	r3, #17
 800318e:	d113      	bne.n	80031b8 <f_open+0x138>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003190:	f014 0f04 	tst.w	r4, #4
 8003194:	d0aa      	beq.n	80030ec <f_open+0x6c>
 8003196:	2508      	movs	r5, #8
 8003198:	e784      	b.n	80030a4 <f_open+0x24>
			if (res == FR_OK) {					/* Following succeeded */
 800319a:	2d00      	cmp	r5, #0
 800319c:	d182      	bne.n	80030a4 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800319e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80031a2:	f013 0f10 	tst.w	r3, #16
 80031a6:	d176      	bne.n	8003296 <f_open+0x216>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80031a8:	f014 0f02 	tst.w	r4, #2
 80031ac:	d005      	beq.n	80031ba <f_open+0x13a>
 80031ae:	f013 0f01 	tst.w	r3, #1
 80031b2:	d002      	beq.n	80031ba <f_open+0x13a>
						res = FR_DENIED;
 80031b4:	2507      	movs	r5, #7
 80031b6:	e775      	b.n	80030a4 <f_open+0x24>
					res = FR_DENIED;
 80031b8:	2507      	movs	r5, #7
		if (res == FR_OK) {
 80031ba:	2d00      	cmp	r5, #0
 80031bc:	f47f af72 	bne.w	80030a4 <f_open+0x24>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80031c0:	f017 0f08 	tst.w	r7, #8
 80031c4:	d001      	beq.n	80031ca <f_open+0x14a>
				mode |= FA_MODIFIED;
 80031c6:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80031ca:	9b03      	ldr	r3, [sp, #12]
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	6273      	str	r3, [r6, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80031d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80031d2:	62b3      	str	r3, [r6, #40]	@ 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80031d4:	2f01      	cmp	r7, #1
 80031d6:	bf94      	ite	ls
 80031d8:	2100      	movls	r1, #0
 80031da:	2101      	movhi	r1, #1
 80031dc:	a804      	add	r0, sp, #16
 80031de:	f7fe ffc9 	bl	8002174 <inc_lock>
 80031e2:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80031e4:	b908      	cbnz	r0, 80031ea <f_open+0x16a>
 80031e6:	2502      	movs	r5, #2
 80031e8:	e75c      	b.n	80030a4 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80031ea:	9c03      	ldr	r4, [sp, #12]
 80031ec:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80031f0:	4641      	mov	r1, r8
 80031f2:	4620      	mov	r0, r4
 80031f4:	f7ff f869 	bl	80022ca <ld_clust>
 80031f8:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80031fa:	f108 001c 	add.w	r0, r8, #28
 80031fe:	f7fe ff2e 	bl	800205e <ld_dword>
 8003202:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003204:	2100      	movs	r1, #0
 8003206:	62f1      	str	r1, [r6, #44]	@ 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003208:	6034      	str	r4, [r6, #0]
			fp->obj.id = fs->id;
 800320a:	88e3      	ldrh	r3, [r4, #6]
 800320c:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800320e:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 8003210:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8003212:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003214:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003216:	f106 0830 	add.w	r8, r6, #48	@ 0x30
 800321a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800321e:	4640      	mov	r0, r8
 8003220:	f7fe ff40 	bl	80020a4 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003224:	f017 0f20 	tst.w	r7, #32
 8003228:	d031      	beq.n	800328e <f_open+0x20e>
 800322a:	68f4      	ldr	r4, [r6, #12]
 800322c:	b37c      	cbz	r4, 800328e <f_open+0x20e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800322e:	61b4      	str	r4, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003230:	9b03      	ldr	r3, [sp, #12]
 8003232:	895f      	ldrh	r7, [r3, #10]
 8003234:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003236:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003238:	e001      	b.n	800323e <f_open+0x1be>
					if (clst <= 1) res = FR_INT_ERR;
 800323a:	2502      	movs	r5, #2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800323c:	1be4      	subs	r4, r4, r7
 800323e:	42bc      	cmp	r4, r7
 8003240:	bf94      	ite	ls
 8003242:	2300      	movls	r3, #0
 8003244:	2301      	movhi	r3, #1
 8003246:	b95d      	cbnz	r5, 8003260 <f_open+0x1e0>
 8003248:	b153      	cbz	r3, 8003260 <f_open+0x1e0>
					clst = get_fat(&fp->obj, clst);
 800324a:	4630      	mov	r0, r6
 800324c:	f7ff fbce 	bl	80029ec <get_fat>
 8003250:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8003252:	2801      	cmp	r0, #1
 8003254:	d9f1      	bls.n	800323a <f_open+0x1ba>
					if (clst == 0xFFFFFFFF) {res = FR_DISK_ERR;}
 8003256:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800325a:	d1ef      	bne.n	800323c <f_open+0x1bc>
 800325c:	2501      	movs	r5, #1
 800325e:	e7ed      	b.n	800323c <f_open+0x1bc>
				fp->clust = clst;
 8003260:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003262:	2d00      	cmp	r5, #0
 8003264:	f47f af1e 	bne.w	80030a4 <f_open+0x24>
 8003268:	f3c4 0308 	ubfx	r3, r4, #0, #9
 800326c:	b17b      	cbz	r3, 800328e <f_open+0x20e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800326e:	9f03      	ldr	r7, [sp, #12]
 8003270:	4638      	mov	r0, r7
 8003272:	f7ff f80d 	bl	8002290 <clust2sect>
 8003276:	b908      	cbnz	r0, 800327c <f_open+0x1fc>
						res = FR_INT_ERR;
 8003278:	2502      	movs	r5, #2
 800327a:	e713      	b.n	80030a4 <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800327c:	eb00 2254 	add.w	r2, r0, r4, lsr #9
 8003280:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {res = FR_DISK_ERR;}
 8003282:	2301      	movs	r3, #1
 8003284:	4641      	mov	r1, r8
 8003286:	7878      	ldrb	r0, [r7, #1]
 8003288:	f7fe fd2c 	bl	8001ce4 <disk_read>
 800328c:	b928      	cbnz	r0, 800329a <f_open+0x21a>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800328e:	2d00      	cmp	r5, #0
 8003290:	f43f af0a 	beq.w	80030a8 <f_open+0x28>
 8003294:	e706      	b.n	80030a4 <f_open+0x24>
					res = FR_NO_FILE;
 8003296:	2504      	movs	r5, #4
 8003298:	e704      	b.n	80030a4 <f_open+0x24>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {res = FR_DISK_ERR;}
 800329a:	2501      	movs	r5, #1
 800329c:	e702      	b.n	80030a4 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800329e:	2509      	movs	r5, #9
 80032a0:	e702      	b.n	80030a8 <f_open+0x28>

080032a2 <f_write>:
{
 80032a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a6:	b085      	sub	sp, #20
 80032a8:	4604      	mov	r4, r0
 80032aa:	460e      	mov	r6, r1
 80032ac:	4615      	mov	r5, r2
 80032ae:	4698      	mov	r8, r3
	*bw = 0;	/* Clear write byte counter */
 80032b0:	2300      	movs	r3, #0
 80032b2:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80032b6:	a903      	add	r1, sp, #12
 80032b8:	f7ff f8f3 	bl	80024a2 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80032bc:	9001      	str	r0, [sp, #4]
 80032be:	2800      	cmp	r0, #0
 80032c0:	d149      	bne.n	8003356 <f_write+0xb4>
 80032c2:	7d63      	ldrb	r3, [r4, #21]
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d145      	bne.n	8003356 <f_write+0xb4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80032ca:	7d23      	ldrb	r3, [r4, #20]
 80032cc:	f013 0f02 	tst.w	r3, #2
 80032d0:	f000 80e2 	beq.w	8003498 <f_write+0x1f6>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80032d4:	69a3      	ldr	r3, [r4, #24]
 80032d6:	42eb      	cmn	r3, r5
 80032d8:	f0c0 80b0 	bcc.w	800343c <f_write+0x19a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80032dc:	43dd      	mvns	r5, r3
 80032de:	e0ad      	b.n	800343c <f_write+0x19a>
					if (fp->cltbl) {
 80032e0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d03b      	beq.n	800335e <f_write+0xbc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7fe ffde 	bl	80022a8 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80032ec:	2800      	cmp	r0, #0
 80032ee:	f000 80ce 	beq.w	800348e <f_write+0x1ec>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80032f2:	2801      	cmp	r0, #1
 80032f4:	d038      	beq.n	8003368 <f_write+0xc6>
				if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR);}
 80032f6:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80032fa:	d03c      	beq.n	8003376 <f_write+0xd4>
				fp->clust = clst;			/* Update current cluster */
 80032fc:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80032fe:	68a3      	ldr	r3, [r4, #8]
 8003300:	b903      	cbnz	r3, 8003304 <f_write+0x62>
 8003302:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8003304:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8003308:	2b00      	cmp	r3, #0
 800330a:	db3b      	blt.n	8003384 <f_write+0xe2>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800330c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003310:	69e1      	ldr	r1, [r4, #28]
 8003312:	4658      	mov	r0, fp
 8003314:	f7fe ffbc 	bl	8002290 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003318:	4681      	mov	r9, r0
 800331a:	2800      	cmp	r0, #0
 800331c:	d047      	beq.n	80033ae <f_write+0x10c>
			sect += csect;
 800331e:	44b9      	add	r9, r7
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8003320:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {						/* Write maximum contiguous sectors directly */
 8003324:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8003328:	d35d      	bcc.n	80033e6 <f_write+0x144>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800332a:	eb07 030a 	add.w	r3, r7, sl
 800332e:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <f_write+0x98>
					cc = fs->csize - csect;
 8003336:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK){ ABORT(fs, FR_DISK_ERR);}
 800333a:	4653      	mov	r3, sl
 800333c:	464a      	mov	r2, r9
 800333e:	4631      	mov	r1, r6
 8003340:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8003344:	f7fe fcda 	bl	8001cfc <disk_write>
 8003348:	b3c0      	cbz	r0, 80033bc <f_write+0x11a>
 800334a:	f04f 0a01 	mov.w	sl, #1
 800334e:	f884 a015 	strb.w	sl, [r4, #21]
 8003352:	f8cd a004 	str.w	sl, [sp, #4]
}
 8003356:	9801      	ldr	r0, [sp, #4]
 8003358:	b005      	add	sp, #20
 800335a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800335e:	69e1      	ldr	r1, [r4, #28]
 8003360:	4620      	mov	r0, r4
 8003362:	f7ff fc01 	bl	8002b68 <create_chain>
 8003366:	e7c1      	b.n	80032ec <f_write+0x4a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003368:	f04f 0a02 	mov.w	sl, #2
 800336c:	f884 a015 	strb.w	sl, [r4, #21]
 8003370:	f8cd a004 	str.w	sl, [sp, #4]
 8003374:	e7ef      	b.n	8003356 <f_write+0xb4>
				if (clst == 0xFFFFFFFF) { ABORT(fs, FR_DISK_ERR);}
 8003376:	f04f 0a01 	mov.w	sl, #1
 800337a:	f884 a015 	strb.w	sl, [r4, #21]
 800337e:	f8cd a004 	str.w	sl, [sp, #4]
 8003382:	e7e8      	b.n	8003356 <f_write+0xb4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {  ABORT(fs, FR_DISK_ERR);}
 8003384:	2301      	movs	r3, #1
 8003386:	6a22      	ldr	r2, [r4, #32]
 8003388:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800338c:	9803      	ldr	r0, [sp, #12]
 800338e:	7840      	ldrb	r0, [r0, #1]
 8003390:	f7fe fcb4 	bl	8001cfc <disk_write>
 8003394:	b920      	cbnz	r0, 80033a0 <f_write+0xfe>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003396:	7d23      	ldrb	r3, [r4, #20]
 8003398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800339c:	7523      	strb	r3, [r4, #20]
 800339e:	e7b5      	b.n	800330c <f_write+0x6a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {  ABORT(fs, FR_DISK_ERR);}
 80033a0:	f04f 0a01 	mov.w	sl, #1
 80033a4:	f884 a015 	strb.w	sl, [r4, #21]
 80033a8:	f8cd a004 	str.w	sl, [sp, #4]
 80033ac:	e7d3      	b.n	8003356 <f_write+0xb4>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80033ae:	f04f 0a02 	mov.w	sl, #2
 80033b2:	f884 a015 	strb.w	sl, [r4, #21]
 80033b6:	f8cd a004 	str.w	sl, [sp, #4]
 80033ba:	e7cc      	b.n	8003356 <f_write+0xb4>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80033bc:	6a21      	ldr	r1, [r4, #32]
 80033be:	eba1 0109 	sub.w	r1, r1, r9
 80033c2:	4551      	cmp	r1, sl
 80033c4:	d302      	bcc.n	80033cc <f_write+0x12a>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80033c6:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 80033ca:	e028      	b.n	800341e <f_write+0x17c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80033cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033d0:	eb06 2141 	add.w	r1, r6, r1, lsl #9
 80033d4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80033d8:	f7fe fe5a 	bl	8002090 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80033dc:	7d23      	ldrb	r3, [r4, #20]
 80033de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033e2:	7523      	strb	r3, [r4, #20]
 80033e4:	e7ef      	b.n	80033c6 <f_write+0x124>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80033e6:	6a23      	ldr	r3, [r4, #32]
 80033e8:	454b      	cmp	r3, r9
 80033ea:	d003      	beq.n	80033f4 <f_write+0x152>
				fp->fptr < fp->obj.objsize &&
 80033ec:	69a2      	ldr	r2, [r4, #24]
 80033ee:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d33b      	bcc.n	800346c <f_write+0x1ca>
			fp->sect = sect;
 80033f4:	f8c4 9020 	str.w	r9, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80033f8:	69a3      	ldr	r3, [r4, #24]
 80033fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fe:	f5c3 7700 	rsb	r7, r3, #512	@ 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8003402:	42bd      	cmp	r5, r7
 8003404:	d200      	bcs.n	8003408 <f_write+0x166>
 8003406:	462f      	mov	r7, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8003408:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800340c:	463a      	mov	r2, r7
 800340e:	4631      	mov	r1, r6
 8003410:	4418      	add	r0, r3
 8003412:	f7fe fe3d 	bl	8002090 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8003416:	7d23      	ldrb	r3, [r4, #20]
 8003418:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800341c:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800341e:	443e      	add	r6, r7
 8003420:	69a3      	ldr	r3, [r4, #24]
 8003422:	443b      	add	r3, r7
 8003424:	61a3      	str	r3, [r4, #24]
 8003426:	68e2      	ldr	r2, [r4, #12]
 8003428:	4293      	cmp	r3, r2
 800342a:	bf38      	it	cc
 800342c:	4613      	movcc	r3, r2
 800342e:	60e3      	str	r3, [r4, #12]
 8003430:	f8d8 3000 	ldr.w	r3, [r8]
 8003434:	443b      	add	r3, r7
 8003436:	f8c8 3000 	str.w	r3, [r8]
 800343a:	1bed      	subs	r5, r5, r7
	for ( ;  btw;							/* Repeat until all data written */
 800343c:	b33d      	cbz	r5, 800348e <f_write+0x1ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800343e:	69a1      	ldr	r1, [r4, #24]
 8003440:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1d7      	bne.n	80033f8 <f_write+0x156>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8003448:	9b03      	ldr	r3, [sp, #12]
 800344a:	895f      	ldrh	r7, [r3, #10]
 800344c:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800344e:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8003452:	f47f af57 	bne.w	8003304 <f_write+0x62>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8003456:	2900      	cmp	r1, #0
 8003458:	f47f af42 	bne.w	80032e0 <f_write+0x3e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800345c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800345e:	2800      	cmp	r0, #0
 8003460:	f47f af47 	bne.w	80032f2 <f_write+0x50>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8003464:	4620      	mov	r0, r4
 8003466:	f7ff fb7f 	bl	8002b68 <create_chain>
 800346a:	e73f      	b.n	80032ec <f_write+0x4a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800346c:	2301      	movs	r3, #1
 800346e:	464a      	mov	r2, r9
 8003470:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8003474:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8003478:	f7fe fc34 	bl	8001ce4 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800347c:	2800      	cmp	r0, #0
 800347e:	d0b9      	beq.n	80033f4 <f_write+0x152>
					ABORT(fs, FR_DISK_ERR);
 8003480:	f04f 0a01 	mov.w	sl, #1
 8003484:	f884 a015 	strb.w	sl, [r4, #21]
 8003488:	f8cd a004 	str.w	sl, [sp, #4]
 800348c:	e763      	b.n	8003356 <f_write+0xb4>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800348e:	7d23      	ldrb	r3, [r4, #20]
 8003490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003494:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8003496:	e75e      	b.n	8003356 <f_write+0xb4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003498:	2307      	movs	r3, #7
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	e75b      	b.n	8003356 <f_write+0xb4>

0800349e <putc_bfd>:
{
 800349e:	b570      	push	{r4, r5, r6, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	4604      	mov	r4, r0
 80034a4:	460d      	mov	r5, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80034a6:	290a      	cmp	r1, #10
 80034a8:	d00d      	beq.n	80034c6 <putc_bfd+0x28>
	i = pb->idx;		/* Write index of pb->buf[] */
 80034aa:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	db08      	blt.n	80034c2 <putc_bfd+0x24>
	pb->buf[i++] = (BYTE)c;
 80034b0:	1c5e      	adds	r6, r3, #1
 80034b2:	4423      	add	r3, r4
 80034b4:	731d      	strb	r5, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80034b6:	2e3c      	cmp	r6, #60	@ 0x3c
 80034b8:	dc09      	bgt.n	80034ce <putc_bfd+0x30>
	pb->idx = i;
 80034ba:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 80034bc:	68a3      	ldr	r3, [r4, #8]
 80034be:	3301      	adds	r3, #1
 80034c0:	60a3      	str	r3, [r4, #8]
}
 80034c2:	b002      	add	sp, #8
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 80034c6:	210d      	movs	r1, #13
 80034c8:	f7ff ffe9 	bl	800349e <putc_bfd>
 80034cc:	e7ed      	b.n	80034aa <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80034ce:	4621      	mov	r1, r4
 80034d0:	f851 0b0c 	ldr.w	r0, [r1], #12
 80034d4:	ab01      	add	r3, sp, #4
 80034d6:	4632      	mov	r2, r6
 80034d8:	f7ff fee3 	bl	80032a2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80034dc:	9b01      	ldr	r3, [sp, #4]
 80034de:	429e      	cmp	r6, r3
 80034e0:	d002      	beq.n	80034e8 <putc_bfd+0x4a>
 80034e2:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80034e6:	e7e8      	b.n	80034ba <putc_bfd+0x1c>
 80034e8:	2600      	movs	r6, #0
 80034ea:	e7e6      	b.n	80034ba <putc_bfd+0x1c>

080034ec <putc_flush>:
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80034ec:	6842      	ldr	r2, [r0, #4]
 80034ee:	2a00      	cmp	r2, #0
 80034f0:	db10      	blt.n	8003514 <putc_flush+0x28>
{
 80034f2:	b510      	push	{r4, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	4604      	mov	r4, r0
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80034f8:	4601      	mov	r1, r0
 80034fa:	f851 0b0c 	ldr.w	r0, [r1], #12
 80034fe:	ab01      	add	r3, sp, #4
 8003500:	f7ff fecf 	bl	80032a2 <f_write>
 8003504:	b948      	cbnz	r0, 800351a <putc_flush+0x2e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8003506:	6862      	ldr	r2, [r4, #4]
 8003508:	9b01      	ldr	r3, [sp, #4]
 800350a:	429a      	cmp	r2, r3
 800350c:	d108      	bne.n	8003520 <putc_flush+0x34>
 800350e:	68a0      	ldr	r0, [r4, #8]
}
 8003510:	b002      	add	sp, #8
 8003512:	bd10      	pop	{r4, pc}
	return EOF;
 8003514:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8003518:	4770      	bx	lr
	return EOF;
 800351a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800351e:	e7f7      	b.n	8003510 <putc_flush+0x24>
 8003520:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003524:	e7f4      	b.n	8003510 <putc_flush+0x24>

08003526 <f_sync>:
{
 8003526:	b570      	push	{r4, r5, r6, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800352c:	a901      	add	r1, sp, #4
 800352e:	f7fe ffb8 	bl	80024a2 <validate>
	if (res == FR_OK) {
 8003532:	b970      	cbnz	r0, 8003552 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003534:	7d23      	ldrb	r3, [r4, #20]
 8003536:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800353a:	d00a      	beq.n	8003552 <f_sync+0x2c>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800353c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003540:	d109      	bne.n	8003556 <f_sync+0x30>
			tm = GET_FATTIME();				/* Modified time */
 8003542:	f7fe fc11 	bl	8001d68 <get_fattime>
 8003546:	4605      	mov	r5, r0
				res = move_window(fs, fp->dir_sect);
 8003548:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800354a:	9801      	ldr	r0, [sp, #4]
 800354c:	f7fe fff6 	bl	800253c <move_window>
				if (res == FR_OK) {
 8003550:	b178      	cbz	r0, 8003572 <f_sync+0x4c>
}
 8003552:	b002      	add	sp, #8
 8003554:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003556:	2301      	movs	r3, #1
 8003558:	6a22      	ldr	r2, [r4, #32]
 800355a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800355e:	9801      	ldr	r0, [sp, #4]
 8003560:	7840      	ldrb	r0, [r0, #1]
 8003562:	f7fe fbcb 	bl	8001cfc <disk_write>
 8003566:	bb40      	cbnz	r0, 80035ba <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003568:	7d23      	ldrb	r3, [r4, #20]
 800356a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800356e:	7523      	strb	r3, [r4, #20]
 8003570:	e7e7      	b.n	8003542 <f_sync+0x1c>
					dir = fp->dir_ptr;
 8003572:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8003574:	7af3      	ldrb	r3, [r6, #11]
 8003576:	f043 0320 	orr.w	r3, r3, #32
 800357a:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800357c:	68a2      	ldr	r2, [r4, #8]
 800357e:	4631      	mov	r1, r6
 8003580:	6820      	ldr	r0, [r4, #0]
 8003582:	f7fe feb5 	bl	80022f0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003586:	68e1      	ldr	r1, [r4, #12]
 8003588:	f106 001c 	add.w	r0, r6, #28
 800358c:	f7fe fd76 	bl	800207c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003590:	4629      	mov	r1, r5
 8003592:	f106 0016 	add.w	r0, r6, #22
 8003596:	f7fe fd71 	bl	800207c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800359a:	2100      	movs	r1, #0
 800359c:	f106 0012 	add.w	r0, r6, #18
 80035a0:	f7fe fd68 	bl	8002074 <st_word>
					fs->wflag = 1;
 80035a4:	9b01      	ldr	r3, [sp, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80035aa:	9801      	ldr	r0, [sp, #4]
 80035ac:	f7ff fcf2 	bl	8002f94 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80035b0:	7d23      	ldrb	r3, [r4, #20]
 80035b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035b6:	7523      	strb	r3, [r4, #20]
 80035b8:	e7cb      	b.n	8003552 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80035ba:	2001      	movs	r0, #1
 80035bc:	e7c9      	b.n	8003552 <f_sync+0x2c>

080035be <f_close>:
{
 80035be:	b510      	push	{r4, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 80035c4:	f7ff ffaf 	bl	8003526 <f_sync>
	if (res == FR_OK)
 80035c8:	b108      	cbz	r0, 80035ce <f_close+0x10>
}
 80035ca:	b002      	add	sp, #8
 80035cc:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80035ce:	a901      	add	r1, sp, #4
 80035d0:	4620      	mov	r0, r4
 80035d2:	f7fe ff66 	bl	80024a2 <validate>
		if (res == FR_OK) {
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d1f7      	bne.n	80035ca <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80035da:	6920      	ldr	r0, [r4, #16]
 80035dc:	f7fe fe1a 	bl	8002214 <dec_lock>
			if (res == FR_OK)
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d1f2      	bne.n	80035ca <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 80035e4:	6020      	str	r0, [r4, #0]
 80035e6:	e7f0      	b.n	80035ca <f_close+0xc>

080035e8 <f_lseek>:
{
 80035e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ec:	b083      	sub	sp, #12
 80035ee:	4604      	mov	r4, r0
 80035f0:	460d      	mov	r5, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80035f2:	a901      	add	r1, sp, #4
 80035f4:	f7fe ff55 	bl	80024a2 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 80035f8:	4606      	mov	r6, r0
 80035fa:	b978      	cbnz	r0, 800361c <f_lseek+0x34>
 80035fc:	7d66      	ldrb	r6, [r4, #21]
	if (res != FR_OK) LEAVE_FF(fs, res);
 80035fe:	b96e      	cbnz	r6, 800361c <f_lseek+0x34>
	if (fp->cltbl) {	/* Fast seek */
 8003600:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8089 	beq.w	800371a <f_lseek+0x132>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8003608:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800360c:	d00a      	beq.n	8003624 <f_lseek+0x3c>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800360e:	68e7      	ldr	r7, [r4, #12]
 8003610:	42af      	cmp	r7, r5
 8003612:	d300      	bcc.n	8003616 <f_lseek+0x2e>
 8003614:	462f      	mov	r7, r5
			fp->fptr = ofs;				/* Set file pointer */
 8003616:	61a7      	str	r7, [r4, #24]
			if (ofs) {
 8003618:	2f00      	cmp	r7, #0
 800361a:	d13f      	bne.n	800369c <f_lseek+0xb4>
}
 800361c:	4630      	mov	r0, r6
 800361e:	b003      	add	sp, #12
 8003620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8003624:	4698      	mov	r8, r3
 8003626:	f858 bb04 	ldr.w	fp, [r8], #4
			cl = fp->obj.sclust;		/* Origin of the chain */
 800362a:	f8d4 a008 	ldr.w	sl, [r4, #8]
			if (cl) {
 800362e:	f1ba 0f00 	cmp.w	sl, #0
 8003632:	d027      	beq.n	8003684 <f_lseek+0x9c>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8003634:	f04f 0902 	mov.w	r9, #2
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8003638:	f109 0902 	add.w	r9, r9, #2
 800363c:	4651      	mov	r1, sl
 800363e:	2700      	movs	r7, #0
						pcl = cl; ncl++;
 8003640:	3701      	adds	r7, #1
						cl = get_fat(&fp->obj, cl);
 8003642:	460d      	mov	r5, r1
 8003644:	4620      	mov	r0, r4
 8003646:	f7ff f9d1 	bl	80029ec <get_fat>
 800364a:	4601      	mov	r1, r0
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800364c:	2801      	cmp	r0, #1
 800364e:	d913      	bls.n	8003678 <f_lseek+0x90>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003650:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8003654:	d013      	beq.n	800367e <f_lseek+0x96>
					} while (cl == pcl + 1);
 8003656:	3501      	adds	r5, #1
 8003658:	4285      	cmp	r5, r0
 800365a:	d0f1      	beq.n	8003640 <f_lseek+0x58>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800365c:	45cb      	cmp	fp, r9
 800365e:	d305      	bcc.n	800366c <f_lseek+0x84>
						*tbl++ = ncl; *tbl++ = tcl;
 8003660:	4643      	mov	r3, r8
 8003662:	f843 7b08 	str.w	r7, [r3], #8
 8003666:	f8c8 a004 	str.w	sl, [r8, #4]
 800366a:	4698      	mov	r8, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800366c:	9b01      	ldr	r3, [sp, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	428b      	cmp	r3, r1
 8003672:	d909      	bls.n	8003688 <f_lseek+0xa0>
						cl = get_fat(&fp->obj, cl);
 8003674:	468a      	mov	sl, r1
 8003676:	e7df      	b.n	8003638 <f_lseek+0x50>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8003678:	2602      	movs	r6, #2
 800367a:	7566      	strb	r6, [r4, #21]
 800367c:	e7ce      	b.n	800361c <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800367e:	2601      	movs	r6, #1
 8003680:	7566      	strb	r6, [r4, #21]
 8003682:	e7cb      	b.n	800361c <f_lseek+0x34>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8003684:	f04f 0902 	mov.w	r9, #2
			*fp->cltbl = ulen;	/* Number of items used */
 8003688:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800368a:	f8c3 9000 	str.w	r9, [r3]
			if (ulen <= tlen) {
 800368e:	45d9      	cmp	r9, fp
 8003690:	f200 80ec 	bhi.w	800386c <f_lseek+0x284>
				*tbl = 0;		/* Terminate table */
 8003694:	2300      	movs	r3, #0
 8003696:	f8c8 3000 	str.w	r3, [r8]
 800369a:	e7bf      	b.n	800361c <f_lseek+0x34>
				fp->clust = clmt_clust(fp, ofs - 1);
 800369c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80036a0:	4641      	mov	r1, r8
 80036a2:	4620      	mov	r0, r4
 80036a4:	f7fe fe00 	bl	80022a8 <clmt_clust>
 80036a8:	4601      	mov	r1, r0
 80036aa:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
 80036ac:	9d01      	ldr	r5, [sp, #4]
 80036ae:	4628      	mov	r0, r5
 80036b0:	f7fe fdee 	bl	8002290 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80036b4:	b1e0      	cbz	r0, 80036f0 <f_lseek+0x108>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80036b6:	8969      	ldrh	r1, [r5, #10]
 80036b8:	3901      	subs	r1, #1
 80036ba:	ea01 2158 	and.w	r1, r1, r8, lsr #9
 80036be:	eb01 0800 	add.w	r8, r1, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80036c2:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80036c6:	2f00      	cmp	r7, #0
 80036c8:	d0a8      	beq.n	800361c <f_lseek+0x34>
 80036ca:	6a22      	ldr	r2, [r4, #32]
 80036cc:	4542      	cmp	r2, r8
 80036ce:	d0a5      	beq.n	800361c <f_lseek+0x34>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80036d0:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	db0e      	blt.n	80036f6 <f_lseek+0x10e>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80036d8:	2301      	movs	r3, #1
 80036da:	4642      	mov	r2, r8
 80036dc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80036e0:	9801      	ldr	r0, [sp, #4]
 80036e2:	7840      	ldrb	r0, [r0, #1]
 80036e4:	f7fe fafe 	bl	8001ce4 <disk_read>
 80036e8:	b9a0      	cbnz	r0, 8003714 <f_lseek+0x12c>
					fp->sect = dsc;
 80036ea:	f8c4 8020 	str.w	r8, [r4, #32]
 80036ee:	e795      	b.n	800361c <f_lseek+0x34>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80036f0:	2602      	movs	r6, #2
 80036f2:	7566      	strb	r6, [r4, #21]
 80036f4:	e792      	b.n	800361c <f_lseek+0x34>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80036f6:	2301      	movs	r3, #1
 80036f8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80036fc:	7868      	ldrb	r0, [r5, #1]
 80036fe:	f7fe fafd 	bl	8001cfc <disk_write>
 8003702:	b920      	cbnz	r0, 800370e <f_lseek+0x126>
						fp->flag &= (BYTE)~FA_DIRTY;
 8003704:	7d23      	ldrb	r3, [r4, #20]
 8003706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800370a:	7523      	strb	r3, [r4, #20]
 800370c:	e7e4      	b.n	80036d8 <f_lseek+0xf0>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800370e:	2601      	movs	r6, #1
 8003710:	7566      	strb	r6, [r4, #21]
 8003712:	e783      	b.n	800361c <f_lseek+0x34>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8003714:	2601      	movs	r6, #1
 8003716:	7566      	strb	r6, [r4, #21]
 8003718:	e780      	b.n	800361c <f_lseek+0x34>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800371a:	68e3      	ldr	r3, [r4, #12]
 800371c:	42ab      	cmp	r3, r5
 800371e:	d204      	bcs.n	800372a <f_lseek+0x142>
 8003720:	7d22      	ldrb	r2, [r4, #20]
 8003722:	f012 0f02 	tst.w	r2, #2
 8003726:	d100      	bne.n	800372a <f_lseek+0x142>
			ofs = fp->obj.objsize;
 8003728:	461d      	mov	r5, r3
		ifptr = fp->fptr;
 800372a:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 800372c:	2200      	movs	r2, #0
 800372e:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 8003730:	b1dd      	cbz	r5, 800376a <f_lseek+0x182>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8003732:	9a01      	ldr	r2, [sp, #4]
 8003734:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 8003738:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 800373c:	b173      	cbz	r3, 800375c <f_lseek+0x174>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800373e:	1e6a      	subs	r2, r5, #1
 8003740:	fbb2 f2f8 	udiv	r2, r2, r8
 8003744:	3b01      	subs	r3, #1
 8003746:	fbb3 f1f8 	udiv	r1, r3, r8
			if (ifptr > 0 &&
 800374a:	428a      	cmp	r2, r1
 800374c:	d306      	bcc.n	800375c <f_lseek+0x174>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800374e:	f1c8 0200 	rsb	r2, r8, #0
 8003752:	4013      	ands	r3, r2
 8003754:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 8003756:	1aef      	subs	r7, r5, r3
				clst = fp->clust;
 8003758:	69e5      	ldr	r5, [r4, #28]
 800375a:	e004      	b.n	8003766 <f_lseek+0x17e>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800375c:	68a0      	ldr	r0, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800375e:	b330      	cbz	r0, 80037ae <f_lseek+0x1c6>
				fp->clust = clst;
 8003760:	61e0      	str	r0, [r4, #28]
 8003762:	462f      	mov	r7, r5
 8003764:	4605      	mov	r5, r0
			if (clst != 0) {
 8003766:	2d00      	cmp	r5, #0
 8003768:	d141      	bne.n	80037ee <f_lseek+0x206>
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800376a:	69a3      	ldr	r3, [r4, #24]
 800376c:	68e2      	ldr	r2, [r4, #12]
 800376e:	4293      	cmp	r3, r2
 8003770:	d904      	bls.n	800377c <f_lseek+0x194>
			fp->obj.objsize = fp->fptr;
 8003772:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 8003774:	7d22      	ldrb	r2, [r4, #20]
 8003776:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800377a:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800377c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003780:	2b00      	cmp	r3, #0
 8003782:	f43f af4b 	beq.w	800361c <f_lseek+0x34>
 8003786:	6a22      	ldr	r2, [r4, #32]
 8003788:	42aa      	cmp	r2, r5
 800378a:	f43f af47 	beq.w	800361c <f_lseek+0x34>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800378e:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8003792:	2b00      	cmp	r3, #0
 8003794:	db57      	blt.n	8003846 <f_lseek+0x25e>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003796:	2301      	movs	r3, #1
 8003798:	462a      	mov	r2, r5
 800379a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800379e:	9801      	ldr	r0, [sp, #4]
 80037a0:	7840      	ldrb	r0, [r0, #1]
 80037a2:	f7fe fa9f 	bl	8001ce4 <disk_read>
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d15d      	bne.n	8003866 <f_lseek+0x27e>
			fp->sect = nsect;
 80037aa:	6225      	str	r5, [r4, #32]
 80037ac:	e736      	b.n	800361c <f_lseek+0x34>
					clst = create_chain(&fp->obj, 0);
 80037ae:	2100      	movs	r1, #0
 80037b0:	4620      	mov	r0, r4
 80037b2:	f7ff f9d9 	bl	8002b68 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80037b6:	2801      	cmp	r0, #1
 80037b8:	d004      	beq.n	80037c4 <f_lseek+0x1dc>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80037ba:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80037be:	d004      	beq.n	80037ca <f_lseek+0x1e2>
					fp->obj.sclust = clst;
 80037c0:	60a0      	str	r0, [r4, #8]
 80037c2:	e7cd      	b.n	8003760 <f_lseek+0x178>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80037c4:	2602      	movs	r6, #2
 80037c6:	7566      	strb	r6, [r4, #21]
 80037c8:	e728      	b.n	800361c <f_lseek+0x34>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80037ca:	2601      	movs	r6, #1
 80037cc:	7566      	strb	r6, [r4, #21]
 80037ce:	e725      	b.n	800361c <f_lseek+0x34>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80037d0:	4629      	mov	r1, r5
 80037d2:	4620      	mov	r0, r4
 80037d4:	f7ff f90a 	bl	80029ec <get_fat>
 80037d8:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80037da:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80037de:	d027      	beq.n	8003830 <f_lseek+0x248>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80037e0:	2d01      	cmp	r5, #1
 80037e2:	d928      	bls.n	8003836 <f_lseek+0x24e>
 80037e4:	9b01      	ldr	r3, [sp, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	42ab      	cmp	r3, r5
 80037ea:	d924      	bls.n	8003836 <f_lseek+0x24e>
					fp->clust = clst;
 80037ec:	61e5      	str	r5, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80037ee:	4547      	cmp	r7, r8
 80037f0:	d910      	bls.n	8003814 <f_lseek+0x22c>
					ofs -= bcs; fp->fptr += bcs;
 80037f2:	eba7 0708 	sub.w	r7, r7, r8
 80037f6:	69a3      	ldr	r3, [r4, #24]
 80037f8:	4443      	add	r3, r8
 80037fa:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80037fc:	7d23      	ldrb	r3, [r4, #20]
 80037fe:	f013 0f02 	tst.w	r3, #2
 8003802:	d0e5      	beq.n	80037d0 <f_lseek+0x1e8>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8003804:	4629      	mov	r1, r5
 8003806:	4620      	mov	r0, r4
 8003808:	f7ff f9ae 	bl	8002b68 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800380c:	4605      	mov	r5, r0
 800380e:	2800      	cmp	r0, #0
 8003810:	d1e3      	bne.n	80037da <f_lseek+0x1f2>
							ofs = 0; break;
 8003812:	4607      	mov	r7, r0
				fp->fptr += ofs;
 8003814:	69a3      	ldr	r3, [r4, #24]
 8003816:	443b      	add	r3, r7
 8003818:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800381a:	f3c7 0308 	ubfx	r3, r7, #0, #9
 800381e:	b183      	cbz	r3, 8003842 <f_lseek+0x25a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8003820:	4629      	mov	r1, r5
 8003822:	9801      	ldr	r0, [sp, #4]
 8003824:	f7fe fd34 	bl	8002290 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8003828:	b140      	cbz	r0, 800383c <f_lseek+0x254>
					nsect += (DWORD)(ofs / SS(fs));
 800382a:	eb00 2557 	add.w	r5, r0, r7, lsr #9
 800382e:	e79c      	b.n	800376a <f_lseek+0x182>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003830:	2601      	movs	r6, #1
 8003832:	7566      	strb	r6, [r4, #21]
 8003834:	e6f2      	b.n	800361c <f_lseek+0x34>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8003836:	2602      	movs	r6, #2
 8003838:	7566      	strb	r6, [r4, #21]
 800383a:	e6ef      	b.n	800361c <f_lseek+0x34>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800383c:	2602      	movs	r6, #2
 800383e:	7566      	strb	r6, [r4, #21]
 8003840:	e6ec      	b.n	800361c <f_lseek+0x34>
		fp->fptr = nsect = 0;
 8003842:	461d      	mov	r5, r3
 8003844:	e791      	b.n	800376a <f_lseek+0x182>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003846:	2301      	movs	r3, #1
 8003848:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800384c:	9801      	ldr	r0, [sp, #4]
 800384e:	7840      	ldrb	r0, [r0, #1]
 8003850:	f7fe fa54 	bl	8001cfc <disk_write>
 8003854:	b920      	cbnz	r0, 8003860 <f_lseek+0x278>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003856:	7d23      	ldrb	r3, [r4, #20]
 8003858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800385c:	7523      	strb	r3, [r4, #20]
 800385e:	e79a      	b.n	8003796 <f_lseek+0x1ae>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003860:	2601      	movs	r6, #1
 8003862:	7566      	strb	r6, [r4, #21]
 8003864:	e6da      	b.n	800361c <f_lseek+0x34>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003866:	2601      	movs	r6, #1
 8003868:	7566      	strb	r6, [r4, #21]
 800386a:	e6d7      	b.n	800361c <f_lseek+0x34>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800386c:	2611      	movs	r6, #17
 800386e:	e6d5      	b.n	800361c <f_lseek+0x34>

08003870 <f_opendir>:
{
 8003870:	b530      	push	{r4, r5, lr}
 8003872:	b085      	sub	sp, #20
 8003874:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8003876:	2800      	cmp	r0, #0
 8003878:	d03f      	beq.n	80038fa <f_opendir+0x8a>
 800387a:	4605      	mov	r5, r0
	res = find_volume(&path, &fs, 0);
 800387c:	2200      	movs	r2, #0
 800387e:	a903      	add	r1, sp, #12
 8003880:	a801      	add	r0, sp, #4
 8003882:	f7fe feb3 	bl	80025ec <find_volume>
	if (res == FR_OK) {
 8003886:	4604      	mov	r4, r0
 8003888:	b120      	cbz	r0, 8003894 <f_opendir+0x24>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800388a:	2300      	movs	r3, #0
 800388c:	602b      	str	r3, [r5, #0]
}
 800388e:	4620      	mov	r0, r4
 8003890:	b005      	add	sp, #20
 8003892:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 8003894:	9b03      	ldr	r3, [sp, #12]
 8003896:	602b      	str	r3, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8003898:	9901      	ldr	r1, [sp, #4]
 800389a:	4628      	mov	r0, r5
 800389c:	f7ff fabf 	bl	8002e1e <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 80038a0:	4604      	mov	r4, r0
 80038a2:	bb18      	cbnz	r0, 80038ec <f_opendir+0x7c>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80038a4:	f995 302f 	ldrsb.w	r3, [r5, #47]	@ 0x2f
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	db08      	blt.n	80038be <f_opendir+0x4e>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80038ac:	79ab      	ldrb	r3, [r5, #6]
 80038ae:	f013 0f10 	tst.w	r3, #16
 80038b2:	d01a      	beq.n	80038ea <f_opendir+0x7a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80038b4:	6a29      	ldr	r1, [r5, #32]
 80038b6:	9803      	ldr	r0, [sp, #12]
 80038b8:	f7fe fd07 	bl	80022ca <ld_clust>
 80038bc:	60a8      	str	r0, [r5, #8]
				obj->id = fs->id;
 80038be:	9b03      	ldr	r3, [sp, #12]
 80038c0:	88db      	ldrh	r3, [r3, #6]
 80038c2:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80038c4:	2100      	movs	r1, #0
 80038c6:	4628      	mov	r0, r5
 80038c8:	f7ff f8f8 	bl	8002abc <dir_sdi>
				if (res == FR_OK) {
 80038cc:	4604      	mov	r4, r0
 80038ce:	b968      	cbnz	r0, 80038ec <f_opendir+0x7c>
					if (obj->sclust) {
 80038d0:	68ab      	ldr	r3, [r5, #8]
 80038d2:	b913      	cbnz	r3, 80038da <f_opendir+0x6a>
						obj->lockid = 0;	/* Root directory need not to be locked */
 80038d4:	2300      	movs	r3, #0
 80038d6:	612b      	str	r3, [r5, #16]
 80038d8:	e008      	b.n	80038ec <f_opendir+0x7c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80038da:	2100      	movs	r1, #0
 80038dc:	4628      	mov	r0, r5
 80038de:	f7fe fc49 	bl	8002174 <inc_lock>
 80038e2:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80038e4:	b910      	cbnz	r0, 80038ec <f_opendir+0x7c>
 80038e6:	2412      	movs	r4, #18
 80038e8:	e002      	b.n	80038f0 <f_opendir+0x80>
					res = FR_NO_PATH;
 80038ea:	2405      	movs	r4, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80038ec:	2c04      	cmp	r4, #4
 80038ee:	d002      	beq.n	80038f6 <f_opendir+0x86>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80038f0:	2c00      	cmp	r4, #0
 80038f2:	d0cc      	beq.n	800388e <f_opendir+0x1e>
 80038f4:	e7c9      	b.n	800388a <f_opendir+0x1a>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80038f6:	2405      	movs	r4, #5
 80038f8:	e7c7      	b.n	800388a <f_opendir+0x1a>
	if (!dp) return FR_INVALID_OBJECT;
 80038fa:	2409      	movs	r4, #9
 80038fc:	e7c7      	b.n	800388e <f_opendir+0x1e>

080038fe <f_closedir>:
{
 80038fe:	b510      	push	{r4, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8003904:	a901      	add	r1, sp, #4
 8003906:	f7fe fdcc 	bl	80024a2 <validate>
	if (res == FR_OK) {
 800390a:	b920      	cbnz	r0, 8003916 <f_closedir+0x18>
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800390c:	6923      	ldr	r3, [r4, #16]
 800390e:	b923      	cbnz	r3, 800391a <f_closedir+0x1c>
		if (res == FR_OK)
 8003910:	b908      	cbnz	r0, 8003916 <f_closedir+0x18>
			dp->obj.fs = 0;			/* Invalidate directory object */
 8003912:	2300      	movs	r3, #0
 8003914:	6023      	str	r3, [r4, #0]
}
 8003916:	b002      	add	sp, #8
 8003918:	bd10      	pop	{r4, pc}
			res = dec_lock(dp->obj.lockid);
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fc7a 	bl	8002214 <dec_lock>
 8003920:	e7f6      	b.n	8003910 <f_closedir+0x12>

08003922 <f_readdir>:
{
 8003922:	b570      	push	{r4, r5, r6, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	4604      	mov	r4, r0
 8003928:	460d      	mov	r5, r1
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800392a:	a901      	add	r1, sp, #4
 800392c:	f7fe fdb9 	bl	80024a2 <validate>
	if (res == FR_OK) {
 8003930:	4606      	mov	r6, r0
 8003932:	b9c0      	cbnz	r0, 8003966 <f_readdir+0x44>
		if (!fno) {
 8003934:	b195      	cbz	r5, 800395c <f_readdir+0x3a>
			res = dir_read(dp, 0);			/* Read an item */
 8003936:	2100      	movs	r1, #0
 8003938:	4620      	mov	r0, r4
 800393a:	f7ff fafc 	bl	8002f36 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800393e:	2804      	cmp	r0, #4
 8003940:	d000      	beq.n	8003944 <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
 8003942:	b998      	cbnz	r0, 800396c <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8003944:	4629      	mov	r1, r5
 8003946:	4620      	mov	r0, r4
 8003948:	f7fe fce5 	bl	8002316 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800394c:	2100      	movs	r1, #0
 800394e:	4620      	mov	r0, r4
 8003950:	f7ff f9b4 	bl	8002cbc <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8003954:	2804      	cmp	r0, #4
 8003956:	d006      	beq.n	8003966 <f_readdir+0x44>
				res = dir_next(dp, 0);		/* Increment index for next */
 8003958:	4606      	mov	r6, r0
 800395a:	e004      	b.n	8003966 <f_readdir+0x44>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800395c:	2100      	movs	r1, #0
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff f8ac 	bl	8002abc <dir_sdi>
 8003964:	4606      	mov	r6, r0
}
 8003966:	4630      	mov	r0, r6
 8003968:	b002      	add	sp, #8
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	4606      	mov	r6, r0
 800396e:	e7fa      	b.n	8003966 <f_readdir+0x44>

08003970 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8003970:	b40e      	push	{r1, r2, r3}
 8003972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003976:	b09d      	sub	sp, #116	@ 0x74
 8003978:	4601      	mov	r1, r0
 800397a:	ac25      	add	r4, sp, #148	@ 0x94
 800397c:	f854 5b04 	ldr.w	r5, [r4], #4
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8003980:	a808      	add	r0, sp, #32
 8003982:	f7fe fd89 	bl	8002498 <putc_init>

	va_start(arp, fmt);
 8003986:	941b      	str	r4, [sp, #108]	@ 0x6c

	for (;;) {
		c = *fmt++;
 8003988:	462c      	mov	r4, r5
 800398a:	f814 1b01 	ldrb.w	r1, [r4], #1
		if (c == 0) break;			/* End of string */
 800398e:	2900      	cmp	r1, #0
 8003990:	f000 8108 	beq.w	8003ba4 <f_printf+0x234>
		if (c != '%') {				/* Non escape character */
 8003994:	2925      	cmp	r1, #37	@ 0x25
 8003996:	d004      	beq.n	80039a2 <f_printf+0x32>
			putc_bfd(&pb, c);
 8003998:	a808      	add	r0, sp, #32
 800399a:	f7ff fd80 	bl	800349e <putc_bfd>
		c = *fmt++;
 800399e:	4625      	mov	r5, r4
			continue;
 80039a0:	e7f2      	b.n	8003988 <f_printf+0x18>
		}
		w = f = 0;
		c = *fmt++;
 80039a2:	1cab      	adds	r3, r5, #2
 80039a4:	7821      	ldrb	r1, [r4, #0]
		if (c == '0') {				/* Flag: '0' padding */
 80039a6:	2930      	cmp	r1, #48	@ 0x30
 80039a8:	d005      	beq.n	80039b6 <f_printf+0x46>
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 80039aa:	292d      	cmp	r1, #45	@ 0x2d
 80039ac:	d007      	beq.n	80039be <f_printf+0x4e>
		c = *fmt++;
 80039ae:	461d      	mov	r5, r3
		w = f = 0;
 80039b0:	2600      	movs	r6, #0
			f = 1; c = *fmt++;
 80039b2:	2400      	movs	r4, #0
 80039b4:	e00e      	b.n	80039d4 <f_printf+0x64>
 80039b6:	3503      	adds	r5, #3
 80039b8:	7861      	ldrb	r1, [r4, #1]
 80039ba:	2601      	movs	r6, #1
 80039bc:	e7f9      	b.n	80039b2 <f_printf+0x42>
				f = 2; c = *fmt++;
 80039be:	3503      	adds	r5, #3
 80039c0:	7861      	ldrb	r1, [r4, #1]
 80039c2:	2602      	movs	r6, #2
 80039c4:	e7f5      	b.n	80039b2 <f_printf+0x42>
			}
		}
		while (IsDigit(c)) {		/* Precision */
			w = w * 10 + c - '0';
 80039c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80039ca:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 80039ce:	3c30      	subs	r4, #48	@ 0x30
			c = *fmt++;
 80039d0:	f815 1b01 	ldrb.w	r1, [r5], #1
		while (IsDigit(c)) {		/* Precision */
 80039d4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b09      	cmp	r3, #9
 80039dc:	d9f3      	bls.n	80039c6 <f_printf+0x56>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80039de:	294c      	cmp	r1, #76	@ 0x4c
 80039e0:	bf18      	it	ne
 80039e2:	296c      	cmpne	r1, #108	@ 0x6c
 80039e4:	d103      	bne.n	80039ee <f_printf+0x7e>
			f |= 4; c = *fmt++;
 80039e6:	f046 0604 	orr.w	r6, r6, #4
 80039ea:	f815 1b01 	ldrb.w	r1, [r5], #1
		}
		if (!c) break;
 80039ee:	2900      	cmp	r1, #0
 80039f0:	f000 80d8 	beq.w	8003ba4 <f_printf+0x234>
		d = c;
		if (IsLower(d)) d -= 0x20;
 80039f4:	f1a1 0361 	sub.w	r3, r1, #97	@ 0x61
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b19      	cmp	r3, #25
 80039fc:	d814      	bhi.n	8003a28 <f_printf+0xb8>
 80039fe:	f1a1 0320 	sub.w	r3, r1, #32
 8003a02:	b2db      	uxtb	r3, r3
		switch (d) {				/* Type is... */
 8003a04:	f1a3 0242 	sub.w	r2, r3, #66	@ 0x42
 8003a08:	2a16      	cmp	r2, #22
 8003a0a:	d85d      	bhi.n	8003ac8 <f_printf+0x158>
 8003a0c:	e8df f002 	tbb	[pc, r2]
 8003a10:	5c453d60 	.word	0x5c453d60
 8003a14:	5c5c5c5c 	.word	0x5c5c5c5c
 8003a18:	5c5c5c5c 	.word	0x5c5c5c5c
 8003a1c:	5c5c625c 	.word	0x5c5c625c
 8003a20:	455c0e5c 	.word	0x455c0e5c
 8003a24:	5c5c      	.short	0x5c5c
 8003a26:	5a          	.byte	0x5a
 8003a27:	00          	.byte	0x00
		d = c;
 8003a28:	460b      	mov	r3, r1
 8003a2a:	e7eb      	b.n	8003a04 <f_printf+0x94>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8003a2c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8003a2e:	1d1a      	adds	r2, r3, #4
 8003a30:	921b      	str	r2, [sp, #108]	@ 0x6c
 8003a32:	f8d3 8000 	ldr.w	r8, [r3]
			for (j = 0; p[j]; j++) ;
 8003a36:	2700      	movs	r7, #0
 8003a38:	e000      	b.n	8003a3c <f_printf+0xcc>
 8003a3a:	3701      	adds	r7, #1
 8003a3c:	f818 3007 	ldrb.w	r3, [r8, r7]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1fa      	bne.n	8003a3a <f_printf+0xca>
			if (!(f & 2)) {
 8003a44:	f016 0f02 	tst.w	r6, #2
 8003a48:	d110      	bne.n	8003a6c <f_printf+0xfc>
 8003a4a:	e005      	b.n	8003a58 <f_printf+0xe8>
				while (j++ < w) putc_bfd(&pb, ' ');
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	eb0d 0001 	add.w	r0, sp, r1
 8003a52:	f7ff fd24 	bl	800349e <putc_bfd>
 8003a56:	4637      	mov	r7, r6
 8003a58:	1c7e      	adds	r6, r7, #1
 8003a5a:	42a7      	cmp	r7, r4
 8003a5c:	d3f6      	bcc.n	8003a4c <f_printf+0xdc>
 8003a5e:	4637      	mov	r7, r6
 8003a60:	e004      	b.n	8003a6c <f_printf+0xfc>
			}
			while (*p) putc_bfd(&pb, *p++);
 8003a62:	f108 0801 	add.w	r8, r8, #1
 8003a66:	a808      	add	r0, sp, #32
 8003a68:	f7ff fd19 	bl	800349e <putc_bfd>
 8003a6c:	f898 1000 	ldrb.w	r1, [r8]
 8003a70:	2900      	cmp	r1, #0
 8003a72:	d1f6      	bne.n	8003a62 <f_printf+0xf2>
 8003a74:	e005      	b.n	8003a82 <f_printf+0x112>
			while (j++ < w) putc_bfd(&pb, ' ');
 8003a76:	2120      	movs	r1, #32
 8003a78:	eb0d 0001 	add.w	r0, sp, r1
 8003a7c:	f7ff fd0f 	bl	800349e <putc_bfd>
 8003a80:	4637      	mov	r7, r6
 8003a82:	1c7e      	adds	r6, r7, #1
 8003a84:	42a7      	cmp	r7, r4
 8003a86:	d3f6      	bcc.n	8003a76 <f_printf+0x106>
 8003a88:	e77e      	b.n	8003988 <f_printf+0x18>
			continue;

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8003a8a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8003a8c:	1d1a      	adds	r2, r3, #4
 8003a8e:	921b      	str	r2, [sp, #108]	@ 0x6c
 8003a90:	7819      	ldrb	r1, [r3, #0]
 8003a92:	a808      	add	r0, sp, #32
 8003a94:	f7ff fd03 	bl	800349e <putc_bfd>
 8003a98:	e776      	b.n	8003988 <f_printf+0x18>
		case 'O' :					/* Octal */
			r = 8; break;

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8003a9a:	200a      	movs	r0, #10
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8003a9c:	f016 0f04 	tst.w	r6, #4
 8003aa0:	d01a      	beq.n	8003ad8 <f_printf+0x168>
 8003aa2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8003aa4:	1d17      	adds	r7, r2, #4
 8003aa6:	971b      	str	r7, [sp, #108]	@ 0x6c
 8003aa8:	6812      	ldr	r2, [r2, #0]
		if (d == 'D' && (v & 0x80000000)) {
 8003aaa:	0fd7      	lsrs	r7, r2, #31
 8003aac:	2b44      	cmp	r3, #68	@ 0x44
 8003aae:	bf14      	ite	ne
 8003ab0:	2700      	movne	r7, #0
 8003ab2:	f007 0701 	andeq.w	r7, r7, #1
 8003ab6:	b117      	cbz	r7, 8003abe <f_printf+0x14e>
			v = 0 - v;
 8003ab8:	4252      	negs	r2, r2
			f |= 8;
 8003aba:	f046 0608 	orr.w	r6, r6, #8
		}
		i = 0;
 8003abe:	f04f 0c00 	mov.w	ip, #0
 8003ac2:	e028      	b.n	8003b16 <f_printf+0x1a6>
			r = 16; break;
 8003ac4:	2010      	movs	r0, #16
 8003ac6:	e7e9      	b.n	8003a9c <f_printf+0x12c>
			putc_bfd(&pb, c); continue;
 8003ac8:	a808      	add	r0, sp, #32
 8003aca:	f7ff fce8 	bl	800349e <putc_bfd>
 8003ace:	e75b      	b.n	8003988 <f_printf+0x18>
		switch (d) {				/* Type is... */
 8003ad0:	2002      	movs	r0, #2
 8003ad2:	e7e3      	b.n	8003a9c <f_printf+0x12c>
			r = 8; break;
 8003ad4:	2008      	movs	r0, #8
 8003ad6:	e7e1      	b.n	8003a9c <f_printf+0x12c>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8003ad8:	2b44      	cmp	r3, #68	@ 0x44
 8003ada:	d004      	beq.n	8003ae6 <f_printf+0x176>
 8003adc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8003ade:	1d17      	adds	r7, r2, #4
 8003ae0:	971b      	str	r7, [sp, #108]	@ 0x6c
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	e7e1      	b.n	8003aaa <f_printf+0x13a>
 8003ae6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8003ae8:	1d17      	adds	r7, r2, #4
 8003aea:	971b      	str	r7, [sp, #108]	@ 0x6c
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	e7dc      	b.n	8003aaa <f_printf+0x13a>
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8003af0:	2727      	movs	r7, #39	@ 0x27
 8003af2:	443b      	add	r3, r7
 8003af4:	b2db      	uxtb	r3, r3
			str[i++] = d + '0';
 8003af6:	f10c 0701 	add.w	r7, ip, #1
 8003afa:	3330      	adds	r3, #48	@ 0x30
 8003afc:	f10c 0970 	add.w	r9, ip, #112	@ 0x70
 8003b00:	44e9      	add	r9, sp
 8003b02:	f809 3c70 	strb.w	r3, [r9, #-112]
		} while (v && i < sizeof str / sizeof str[0]);
 8003b06:	2f1f      	cmp	r7, #31
 8003b08:	bf8c      	ite	hi
 8003b0a:	2300      	movhi	r3, #0
 8003b0c:	2301      	movls	r3, #1
 8003b0e:	45c6      	cmp	lr, r8
 8003b10:	d80f      	bhi.n	8003b32 <f_printf+0x1c2>
 8003b12:	b173      	cbz	r3, 8003b32 <f_printf+0x1c2>
			str[i++] = d + '0';
 8003b14:	46bc      	mov	ip, r7
			d = (TCHAR)(v % r); v /= r;
 8003b16:	4686      	mov	lr, r0
 8003b18:	fbb2 f7f0 	udiv	r7, r2, r0
 8003b1c:	fb00 2317 	mls	r3, r0, r7, r2
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	4690      	mov	r8, r2
 8003b24:	463a      	mov	r2, r7
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8003b26:	2b09      	cmp	r3, #9
 8003b28:	d9e5      	bls.n	8003af6 <f_printf+0x186>
 8003b2a:	2978      	cmp	r1, #120	@ 0x78
 8003b2c:	d0e0      	beq.n	8003af0 <f_printf+0x180>
 8003b2e:	2707      	movs	r7, #7
 8003b30:	e7df      	b.n	8003af2 <f_printf+0x182>
		if (f & 8) str[i++] = '-';
 8003b32:	f016 0f08 	tst.w	r6, #8
 8003b36:	d008      	beq.n	8003b4a <f_printf+0x1da>
 8003b38:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003b3c:	eb0d 0703 	add.w	r7, sp, r3
 8003b40:	232d      	movs	r3, #45	@ 0x2d
 8003b42:	f807 3c70 	strb.w	r3, [r7, #-112]
 8003b46:	f10c 0702 	add.w	r7, ip, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8003b4a:	f016 0f01 	tst.w	r6, #1
 8003b4e:	d003      	beq.n	8003b58 <f_printf+0x1e8>
 8003b50:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8003b54:	46b8      	mov	r8, r7
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8003b56:	e007      	b.n	8003b68 <f_printf+0x1f8>
		j = i; d = (f & 1) ? '0' : ' ';
 8003b58:	f04f 0a20 	mov.w	sl, #32
 8003b5c:	e7fa      	b.n	8003b54 <f_printf+0x1e4>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8003b5e:	4651      	mov	r1, sl
 8003b60:	a808      	add	r0, sp, #32
 8003b62:	f7ff fc9c 	bl	800349e <putc_bfd>
 8003b66:	46c8      	mov	r8, r9
 8003b68:	f016 0f02 	tst.w	r6, #2
 8003b6c:	d104      	bne.n	8003b78 <f_printf+0x208>
 8003b6e:	f108 0901 	add.w	r9, r8, #1
 8003b72:	45a0      	cmp	r8, r4
 8003b74:	d3f3      	bcc.n	8003b5e <f_printf+0x1ee>
 8003b76:	46c8      	mov	r8, r9
		do {
			putc_bfd(&pb, str[--i]);
 8003b78:	3f01      	subs	r7, #1
 8003b7a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003b7e:	446b      	add	r3, sp
 8003b80:	f813 1c70 	ldrb.w	r1, [r3, #-112]
 8003b84:	a808      	add	r0, sp, #32
 8003b86:	f7ff fc8a 	bl	800349e <putc_bfd>
		} while (i);
 8003b8a:	2f00      	cmp	r7, #0
 8003b8c:	d1f4      	bne.n	8003b78 <f_printf+0x208>
		while (j++ < w) putc_bfd(&pb, d);
 8003b8e:	f108 0601 	add.w	r6, r8, #1
 8003b92:	45a0      	cmp	r8, r4
 8003b94:	f4bf aef8 	bcs.w	8003988 <f_printf+0x18>
 8003b98:	4651      	mov	r1, sl
 8003b9a:	a808      	add	r0, sp, #32
 8003b9c:	f7ff fc7f 	bl	800349e <putc_bfd>
 8003ba0:	46b0      	mov	r8, r6
 8003ba2:	e7f4      	b.n	8003b8e <f_printf+0x21e>
	}

	va_end(arp);

	return putc_flush(&pb);
 8003ba4:	a808      	add	r0, sp, #32
 8003ba6:	f7ff fca1 	bl	80034ec <putc_flush>
}
 8003baa:	b01d      	add	sp, #116	@ 0x74
 8003bac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb0:	b003      	add	sp, #12
 8003bb2:	4770      	bx	lr

08003bb4 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8003bb4:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <FATFS_LinkDriverEx+0x50>)
 8003bb6:	7a5b      	ldrb	r3, [r3, #9]
 8003bb8:	bb13      	cbnz	r3, 8003c00 <FATFS_LinkDriverEx+0x4c>
{
 8003bba:	b510      	push	{r4, lr}
 8003bbc:	4604      	mov	r4, r0
 8003bbe:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8003bc2:	4b10      	ldr	r3, [pc, #64]	@ (8003c04 <FATFS_LinkDriverEx+0x50>)
 8003bc4:	f893 c009 	ldrb.w	ip, [r3, #9]
 8003bc8:	fa5f fc8c 	uxtb.w	ip, ip
 8003bcc:	f04f 0e00 	mov.w	lr, #0
 8003bd0:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8003bd4:	f893 c009 	ldrb.w	ip, [r3, #9]
 8003bd8:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8003bdc:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8003be0:	7a5c      	ldrb	r4, [r3, #9]
 8003be2:	441c      	add	r4, r3
 8003be4:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8003be6:	7a5a      	ldrb	r2, [r3, #9]
 8003be8:	1c54      	adds	r4, r2, #1
 8003bea:	b2e4      	uxtb	r4, r4
 8003bec:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8003bee:	3230      	adds	r2, #48	@ 0x30
 8003bf0:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8003bf2:	233a      	movs	r3, #58	@ 0x3a
 8003bf4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8003bf6:	232f      	movs	r3, #47	@ 0x2f
 8003bf8:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8003bfa:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8003bfe:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8003c00:	2001      	movs	r0, #1
}
 8003c02:	4770      	bx	lr
 8003c04:	20007610 	.word	0x20007610

08003c08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003c08:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f7ff ffd2 	bl	8003bb4 <FATFS_LinkDriverEx>
}
 8003c10:	bd08      	pop	{r3, pc}

08003c12 <StereoToMono>:

uint8_t StereoToMono(int16_t *pOut, int16_t *pIn, uint32_t size)
{
    uint32_t i = 0;

    if (pIn == NULL || pOut == NULL || size == 0)
 8003c12:	2800      	cmp	r0, #0
 8003c14:	bf18      	it	ne
 8003c16:	2900      	cmpne	r1, #0
 8003c18:	d011      	beq.n	8003c3e <StereoToMono+0x2c>
{
 8003c1a:	b500      	push	{lr}
 8003c1c:	468e      	mov	lr, r1
 8003c1e:	4684      	mov	ip, r0
    if (pIn == NULL || pOut == NULL || size == 0)
 8003c20:	b17a      	cbz	r2, 8003c42 <StereoToMono+0x30>
    {
        return STEREO_TO_MONO_ERROR;
    }

    for (i = 0; i < size; i += 2)
 8003c22:	2300      	movs	r3, #0
 8003c24:	e006      	b.n	8003c34 <StereoToMono+0x22>
    {
        pOut[i / 2] = pIn[i];
 8003c26:	f023 0101 	bic.w	r1, r3, #1
 8003c2a:	f93e 0013 	ldrsh.w	r0, [lr, r3, lsl #1]
 8003c2e:	f82c 0001 	strh.w	r0, [ip, r1]
    for (i = 0; i < size; i += 2)
 8003c32:	3302      	adds	r3, #2
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d3f6      	bcc.n	8003c26 <StereoToMono+0x14>
    }

    return STEREO_TO_MONO_OK;
 8003c38:	2001      	movs	r0, #1
}
 8003c3a:	f85d fb04 	ldr.w	pc, [sp], #4
        return STEREO_TO_MONO_ERROR;
 8003c3e:	2000      	movs	r0, #0
}
 8003c40:	4770      	bx	lr
        return STEREO_TO_MONO_ERROR;
 8003c42:	2000      	movs	r0, #0
 8003c44:	e7f9      	b.n	8003c3a <StereoToMono+0x28>
	...

08003c48 <Hanning_window>:
}

uint8_t Hanning_window(float32_t *pOut, int16_t *pIn, uint32_t size, uint8_t signal_input_type)
{

    if (pIn == NULL || pOut == NULL)
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	bf18      	it	ne
 8003c4c:	2900      	cmpne	r1, #0
 8003c4e:	d02f      	beq.n	8003cb0 <Hanning_window+0x68>
{
 8003c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4614      	mov	r4, r2
 8003c58:	468c      	mov	ip, r1
 8003c5a:	4605      	mov	r5, r0
    {
        return HANNING_FILTER_ERROR;
    }
    int16_t *pIn_tmp = pIn;

    if (signal_input_type == STEREO)
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d001      	beq.n	8003c64 <Hanning_window+0x1c>
    {
        int16_t tmpSteroBff[size];
        StereoToMono(tmpSteroBff, pIn, size * 2);
        pIn_tmp = tmpSteroBff;
    }
    for (uint32_t i = 0; i < size; i++)
 8003c60:	2300      	movs	r3, #0
 8003c62:	e01f      	b.n	8003ca4 <Hanning_window+0x5c>
    {
 8003c64:	46e8      	mov	r8, sp
        int16_t tmpSteroBff[size];
 8003c66:	0052      	lsls	r2, r2, #1
 8003c68:	1dd3      	adds	r3, r2, #7
 8003c6a:	f023 0307 	bic.w	r3, r3, #7
 8003c6e:	ebad 0d03 	sub.w	sp, sp, r3
 8003c72:	466e      	mov	r6, sp
        StereoToMono(tmpSteroBff, pIn, size * 2);
 8003c74:	4630      	mov	r0, r6
 8003c76:	f7ff ffcc 	bl	8003c12 <StereoToMono>
        pIn_tmp = tmpSteroBff;
 8003c7a:	46c5      	mov	sp, r8
 8003c7c:	46b4      	mov	ip, r6
 8003c7e:	e7ef      	b.n	8003c60 <Hanning_window+0x18>
    {
        pOut[i] = (hanningWindow[i] * (float)pIn_tmp[i]);
 8003c80:	480c      	ldr	r0, [pc, #48]	@ (8003cb4 <Hanning_window+0x6c>)
 8003c82:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003c86:	edd0 7a00 	vldr	s15, [r0]
 8003c8a:	f93c 2013 	ldrsh.w	r2, [ip, r3, lsl #1]
 8003c8e:	ee07 2a10 	vmov	s14, r2
 8003c92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003c96:	eb05 0083 	add.w	r0, r5, r3, lsl #2
 8003c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c9e:	edc0 7a00 	vstr	s15, [r0]
    for (uint32_t i = 0; i < size; i++)
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	42a3      	cmp	r3, r4
 8003ca6:	d3eb      	bcc.n	8003c80 <Hanning_window+0x38>
    }
    return HANNING_FILTER_OK;
 8003ca8:	2001      	movs	r0, #1
}
 8003caa:	46bd      	mov	sp, r7
 8003cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HANNING_FILTER_ERROR;
 8003cb0:	2000      	movs	r0, #0
}
 8003cb2:	4770      	bx	lr
 8003cb4:	200010dc 	.word	0x200010dc

08003cb8 <FFT_init>:

uint8_t FFT_init(uint32_t size)
{
 8003cb8:	b508      	push	{r3, lr}
    if (arm_rfft_fast_init_f32(&FFT_struct, size) != ARM_MATH_SUCCESS)
 8003cba:	b281      	uxth	r1, r0
 8003cbc:	4805      	ldr	r0, [pc, #20]	@ (8003cd4 <FFT_init+0x1c>)
 8003cbe:	f7fd fbf3 	bl	80014a8 <arm_rfft_fast_init_f32>
 8003cc2:	b108      	cbz	r0, 8003cc8 <FFT_init+0x10>
    {
        return FILTER_CALCULATION_ERROR;
 8003cc4:	2000      	movs	r0, #0
    }
    OpenWavFile(MONO_WAV);
    return FILTER_CALCULATION_OK;
}
 8003cc6:	bd08      	pop	{r3, pc}
    OpenWavFile(MONO_WAV);
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f7fe f973 	bl	8001fb4 <OpenWavFile>
    return FILTER_CALCULATION_OK;
 8003cce:	2001      	movs	r0, #1
 8003cd0:	e7f9      	b.n	8003cc6 <FFT_init+0xe>
 8003cd2:	bf00      	nop
 8003cd4:	2001a628 	.word	0x2001a628

08003cd8 <FFT_Calculation>:

uint8_t FFT_Calculation(float32_t *pOut, float32_t *pIn)
{
    if (pIn == NULL || pOut == NULL)
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	bf18      	it	ne
 8003cdc:	2900      	cmpne	r1, #0
 8003cde:	d101      	bne.n	8003ce4 <FFT_Calculation+0xc>
    {
        return FILTER_CALCULATION_ERROR;
 8003ce0:	2000      	movs	r0, #0
    }

    arm_rfft_fast_f32(&FFT_struct, pIn, pOut, 0);

    return FILTER_CALCULATION_OK;
}
 8003ce2:	4770      	bx	lr
{
 8003ce4:	b508      	push	{r3, lr}
 8003ce6:	4602      	mov	r2, r0
    arm_rfft_fast_f32(&FFT_struct, pIn, pOut, 0);
 8003ce8:	2300      	movs	r3, #0
 8003cea:	4802      	ldr	r0, [pc, #8]	@ (8003cf4 <FFT_Calculation+0x1c>)
 8003cec:	f7fd fbbe 	bl	800146c <arm_rfft_fast_f32>
    return FILTER_CALCULATION_OK;
 8003cf0:	2001      	movs	r0, #1
}
 8003cf2:	bd08      	pop	{r3, pc}
 8003cf4:	2001a628 	.word	0x2001a628

08003cf8 <DSE_Calculation>:

uint8_t DSE_Calculation(float32_t *pOut, float32_t *pIn)
{
    if (pIn == NULL || pOut == NULL)
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	bf18      	it	ne
 8003cfc:	2900      	cmpne	r1, #0
 8003cfe:	d101      	bne.n	8003d04 <DSE_Calculation+0xc>
    {
        return FILTER_CALCULATION_ERROR;
 8003d00:	2000      	movs	r0, #0
    // Traiter les deux premières valeurs spéciales
    pOut[0] = pIn[0] * pIn[0];    // Coefficient DC
    pOut[size] = pIn[1] * pIn[1]; // Coefficient de la fréquence de Nyquist

    return FILTER_CALCULATION_OK;
}
 8003d02:	4770      	bx	lr
{
 8003d04:	b570      	push	{r4, r5, r6, lr}
 8003d06:	460d      	mov	r5, r1
 8003d08:	4604      	mov	r4, r0
    uint32_t size = FFT_struct.fftLenRFFT / 2;
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <DSE_Calculation+0x44>)
 8003d0c:	8a1e      	ldrh	r6, [r3, #16]
 8003d0e:	0876      	lsrs	r6, r6, #1
    arm_cmplx_mag_squared_f32(pIn + 2, pOut + 1, size - 1);
 8003d10:	1e72      	subs	r2, r6, #1
 8003d12:	1d01      	adds	r1, r0, #4
 8003d14:	f105 0008 	add.w	r0, r5, #8
 8003d18:	f7fd fa5a 	bl	80011d0 <arm_cmplx_mag_squared_f32>
    pOut[0] = pIn[0] * pIn[0];    // Coefficient DC
 8003d1c:	edd5 7a00 	vldr	s15, [r5]
 8003d20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d24:	edc4 7a00 	vstr	s15, [r4]
    pOut[size] = pIn[1] * pIn[1]; // Coefficient de la fréquence de Nyquist
 8003d28:	edd5 7a01 	vldr	s15, [r5, #4]
 8003d2c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8003d30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d34:	edc4 7a00 	vstr	s15, [r4]
    return FILTER_CALCULATION_OK;
 8003d38:	2001      	movs	r0, #1
}
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
 8003d3c:	2001a628 	.word	0x2001a628

08003d40 <MEL_Calculation>:

uint8_t MEL_Calculation(float32_t *pOut, float32_t *pIn)
{
    if (pIn == NULL || pOut == NULL)
 8003d40:	2800      	cmp	r0, #0
 8003d42:	bf18      	it	ne
 8003d44:	2900      	cmpne	r1, #0
 8003d46:	d035      	beq.n	8003db4 <MEL_Calculation+0x74>
{
 8003d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d4c:	460d      	mov	r5, r1
 8003d4e:	4607      	mov	r7, r0
    {
        return FILTER_CALCULATION_ERROR;
    }

    int start_data = 0;
    for (int i = 0; i < N_MELS; i++)
 8003d50:	2600      	movs	r6, #0
    int start_data = 0;
 8003d52:	4633      	mov	r3, r6
 8003d54:	e020      	b.n	8003d98 <MEL_Calculation+0x58>
        float sum = 0.0;
        int end_data = mel_filters_num_non_zero[i] + start_data;
        int start_segment = mel_filters_zeros_before[i];
        for (int j = start_data, x = start_segment; j < end_data; j++, x++)
        {
            sum += pIn[x] * mel_filters_non_zero_data[j];
 8003d56:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8003d5a:	edd2 7a00 	vldr	s15, [r2]
 8003d5e:	4a18      	ldr	r2, [pc, #96]	@ (8003dc0 <MEL_Calculation+0x80>)
 8003d60:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003d64:	ed92 7a00 	vldr	s14, [r2]
 8003d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d6c:	ee30 0a27 	vadd.f32	s0, s0, s15
        for (int j = start_data, x = start_segment; j < end_data; j++, x++)
 8003d70:	3301      	adds	r3, #1
 8003d72:	3101      	adds	r1, #1
 8003d74:	42a3      	cmp	r3, r4
 8003d76:	dbee      	blt.n	8003d56 <MEL_Calculation+0x16>
        }
        start_data = end_data;

        pOut[i] = logf(sum + 1e-10);
 8003d78:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8003d7c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8003db8 <MEL_Calculation+0x78>
 8003d80:	ee30 0b07 	vadd.f64	d0, d0, d7
 8003d84:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 8003d88:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8003d8c:	f00e f8e2 	bl	8011f54 <logf>
 8003d90:	ed88 0a00 	vstr	s0, [r8]
    for (int i = 0; i < N_MELS; i++)
 8003d94:	3601      	adds	r6, #1
        start_data = end_data;
 8003d96:	4623      	mov	r3, r4
    for (int i = 0; i < N_MELS; i++)
 8003d98:	2e1d      	cmp	r6, #29
 8003d9a:	dc08      	bgt.n	8003dae <MEL_Calculation+0x6e>
        int end_data = mel_filters_num_non_zero[i] + start_data;
 8003d9c:	4a09      	ldr	r2, [pc, #36]	@ (8003dc4 <MEL_Calculation+0x84>)
 8003d9e:	5d94      	ldrb	r4, [r2, r6]
 8003da0:	441c      	add	r4, r3
        int start_segment = mel_filters_zeros_before[i];
 8003da2:	4a09      	ldr	r2, [pc, #36]	@ (8003dc8 <MEL_Calculation+0x88>)
 8003da4:	f932 1016 	ldrsh.w	r1, [r2, r6, lsl #1]
        float sum = 0.0;
 8003da8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003dcc <MEL_Calculation+0x8c>
        for (int j = start_data, x = start_segment; j < end_data; j++, x++)
 8003dac:	e7e2      	b.n	8003d74 <MEL_Calculation+0x34>
    }
    return FILTER_CALCULATION_OK;
 8003dae:	2001      	movs	r0, #1
}
 8003db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return FILTER_CALCULATION_ERROR;
 8003db4:	2000      	movs	r0, #0
}
 8003db6:	4770      	bx	lr
 8003db8:	d9d7bdbb 	.word	0xd9d7bdbb
 8003dbc:	3ddb7cdf 	.word	0x3ddb7cdf
 8003dc0:	0804b08c 	.word	0x0804b08c
 8003dc4:	0804b030 	.word	0x0804b030
 8003dc8:	0804b050 	.word	0x0804b050
 8003dcc:	00000000 	.word	0x00000000

08003dd0 <ZScore_Calculation>:
    }
}

uint8_t ZScore_Calculation(float32_t *pIn, uint32_t size)
{
    if (pIn == NULL)
 8003dd0:	b308      	cbz	r0, 8003e16 <ZScore_Calculation+0x46>
{
 8003dd2:	b530      	push	{r4, r5, lr}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	4605      	mov	r5, r0
    }

    float32_t mean;
    float32_t std;

    arm_mean_f32(pIn, size, &mean);
 8003dda:	aa01      	add	r2, sp, #4
 8003ddc:	f7fd fa62 	bl	80012a4 <arm_mean_f32>
    arm_std_f32(pIn, size, &std);
 8003de0:	466a      	mov	r2, sp
 8003de2:	4621      	mov	r1, r4
 8003de4:	4628      	mov	r0, r5
 8003de6:	f7fd fc05 	bl	80015f4 <arm_std_f32>

    for (int i = 0; i < size; i++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	e00e      	b.n	8003e0c <ZScore_Calculation+0x3c>
    {
        pIn[i] = (pIn[i] - mean) / std;
 8003dee:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8003df2:	edd2 7a00 	vldr	s15, [r2]
 8003df6:	ed9d 7a01 	vldr	s14, [sp, #4]
 8003dfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dfe:	eddd 6a00 	vldr	s13, [sp]
 8003e02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e06:	ed82 7a00 	vstr	s14, [r2]
    for (int i = 0; i < size; i++)
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	42a3      	cmp	r3, r4
 8003e0e:	d3ee      	bcc.n	8003dee <ZScore_Calculation+0x1e>
    }

    return FILTER_CALCULATION_OK;
 8003e10:	2001      	movs	r0, #1
}
 8003e12:	b003      	add	sp, #12
 8003e14:	bd30      	pop	{r4, r5, pc}
        return FILTER_CALCULATION_ERROR;
 8003e16:	2000      	movs	r0, #0
}
 8003e18:	4770      	bx	lr
	...

08003e1c <DMA_Config>:

uint8_t DMA_Config(void)
{
 8003e1c:	b500      	push	{lr}
 8003e1e:	b083      	sub	sp, #12
    __HAL_RCC_DMA2_CLK_ENABLE();
 8003e20:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <DMA_Config+0x5c>)
 8003e22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e24:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003e28:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	9b01      	ldr	r3, [sp, #4]

    hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 8003e34:	4811      	ldr	r0, [pc, #68]	@ (8003e7c <DMA_Config+0x60>)
 8003e36:	4b12      	ldr	r3, [pc, #72]	@ (8003e80 <DMA_Config+0x64>)
 8003e38:	6003      	str	r3, [r0, #0]
    hdma_memtomem_dma2_stream2.Init.Channel = DMA_CHANNEL_0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6043      	str	r3, [r0, #4]
    hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8003e3e:	2280      	movs	r2, #128	@ 0x80
 8003e40:	6082      	str	r2, [r0, #8]
    hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 8003e42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e46:	60c2      	str	r2, [r0, #12]
    hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 8003e48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e4c:	6102      	str	r2, [r0, #16]
    hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e52:	6142      	str	r2, [r0, #20]
    hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e58:	6182      	str	r2, [r0, #24]
    hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 8003e5a:	61c3      	str	r3, [r0, #28]
    hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_HIGH;
 8003e5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e60:	6202      	str	r2, [r0, #32]
    hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e62:	6243      	str	r3, [r0, #36]	@ 0x24

    if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 8003e64:	f004 fa02 	bl	800826c <HAL_DMA_Init>
 8003e68:	b918      	cbnz	r0, 8003e72 <DMA_Config+0x56>
    {
        return FILTER_CALCULATION_ERROR;
    }
    return FILTER_CALCULATION_OK;
 8003e6a:	2001      	movs	r0, #1
}
 8003e6c:	b003      	add	sp, #12
 8003e6e:	f85d fb04 	ldr.w	pc, [sp], #4
        return FILTER_CALCULATION_ERROR;
 8003e72:	2000      	movs	r0, #0
 8003e74:	e7fa      	b.n	8003e6c <DMA_Config+0x50>
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	2001a640 	.word	0x2001a640
 8003e80:	40026440 	.word	0x40026440

08003e84 <Feature_Export>:

uint8_t Feature_Export(float32_t *pOut, int16_t *pIn, uint8_t bufferState)
{
 8003e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e88:	4680      	mov	r8, r0
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	4617      	mov	r7, r2
    if (bufferState == BUFFER_HALF)
 8003e8e:	2a01      	cmp	r2, #1
 8003e90:	d005      	beq.n	8003e9e <Feature_Export+0x1a>
        ZScore_Calculation(&pOut[mel_indice * N_MELS], N_MELS);
        buffer_run = BUFFER_HALF_NONE;
        mel_indice++;
        arm_copy_q15(rawPCMdata, &sd_wav_cache[FILTRAGE_SIZE * wav_indice++], FILTRAGE_SIZE);
    }
    else if (bufferState == BUFFER_FULL)
 8003e92:	2a02      	cmp	r2, #2
 8003e94:	f000 80b8 	beq.w	8004008 <Feature_Export+0x184>
        ZScore_Calculation(&pOut[mel_indice * N_MELS], N_MELS);
        mel_indice++;
        arm_copy_q15(rawPCMdata, &sd_wav_cache[FILTRAGE_SIZE * wav_indice++], FILTRAGE_SIZE);
    }

    return FEATURE_EXPORT_PROGRESS;
 8003e98:	2001      	movs	r0, #1
}
 8003e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (buffer_run != BUFFER_HALF_FIRST)
 8003e9e:	4bb1      	ldr	r3, [pc, #708]	@ (8004164 <Feature_Export+0x2e0>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d042      	beq.n	8003f2c <Feature_Export+0xa8>
            cReadIndex = 3 * FILTRAGE_SIZE;
 8003ea6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003eaa:	4aaf      	ldr	r2, [pc, #700]	@ (8004168 <Feature_Export+0x2e4>)
 8003eac:	6013      	str	r3, [r2, #0]
    rOffset = *readOffset;

    dst_end = (int32_t)(dst_base + dst_length);

    /* Loop over the blockSize */
    i = blockSize;
 8003eae:	f44f 6080 	mov.w	r0, #1024	@ 0x400

    while (i > 0U)
 8003eb2:	49ae      	ldr	r1, [pc, #696]	@ (800416c <Feature_Export+0x2e8>)
 8003eb4:	e004      	b.n	8003ec0 <Feature_Export+0x3c>
      /* Update the input pointer */
      dst += dstInc;

      if (dst == (q15_t *)dst_end)
      {
        dst = dst_base;
 8003eb6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8003eba:	e009      	b.n	8003ed0 <Feature_Export+0x4c>
      {
        rOffset -= L;
      }

      /* Decrement the loop counter */
      i--;
 8003ebc:	3801      	subs	r0, #1
 8003ebe:	4613      	mov	r3, r2
    while (i > 0U)
 8003ec0:	b168      	cbz	r0, 8003ede <Feature_Export+0x5a>
      *dst = circBuffer[rOffset];
 8003ec2:	f934 2013 	ldrsh.w	r2, [r4, r3, lsl #1]
 8003ec6:	f821 2b02 	strh.w	r2, [r1], #2
      if (dst == (q15_t *)dst_end)
 8003eca:	4aa9      	ldr	r2, [pc, #676]	@ (8004170 <Feature_Export+0x2ec>)
 8003ecc:	4291      	cmp	r1, r2
 8003ece:	d0f2      	beq.n	8003eb6 <Feature_Export+0x32>
      rOffset += bufferInc;
 8003ed0:	1c9a      	adds	r2, r3, #2
      if (rOffset >= L)
 8003ed2:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8003ed6:	dbf1      	blt.n	8003ebc <Feature_Export+0x38>
        rOffset -= L;
 8003ed8:	f6a3 72fe 	subw	r2, r3, #4094	@ 0xffe
 8003edc:	e7ee      	b.n	8003ebc <Feature_Export+0x38>
    }

    /* Update the index pointer */
    *readOffset = rOffset;
 8003ede:	4aa2      	ldr	r2, [pc, #648]	@ (8004168 <Feature_Export+0x2e4>)
 8003ee0:	6013      	str	r3, [r2, #0]
            Hanning_window(tmp_buf_1, rawPCMdata, FILTRAGE_SIZE, MONO);
 8003ee2:	4ea4      	ldr	r6, [pc, #656]	@ (8004174 <Feature_Export+0x2f0>)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eea:	49a0      	ldr	r1, [pc, #640]	@ (800416c <Feature_Export+0x2e8>)
 8003eec:	4630      	mov	r0, r6
 8003eee:	f7ff feab 	bl	8003c48 <Hanning_window>
            FFT_Calculation(tmp_buf_2, tmp_buf_1);
 8003ef2:	4da1      	ldr	r5, [pc, #644]	@ (8004178 <Feature_Export+0x2f4>)
 8003ef4:	4631      	mov	r1, r6
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f7ff feee 	bl	8003cd8 <FFT_Calculation>
            DSE_Calculation(tmp_buf_1, tmp_buf_2);
 8003efc:	4629      	mov	r1, r5
 8003efe:	4630      	mov	r0, r6
 8003f00:	f7ff fefa 	bl	8003cf8 <DSE_Calculation>
            MEL_Calculation(&pOut[mel_indice * N_MELS], tmp_buf_1);
 8003f04:	4d9d      	ldr	r5, [pc, #628]	@ (800417c <Feature_Export+0x2f8>)
 8003f06:	7828      	ldrb	r0, [r5, #0]
 8003f08:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8003f0c:	4631      	mov	r1, r6
 8003f0e:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 8003f12:	f7ff ff15 	bl	8003d40 <MEL_Calculation>
            ZScore_Calculation(&pOut[mel_indice * N_MELS], N_MELS);
 8003f16:	7828      	ldrb	r0, [r5, #0]
 8003f18:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8003f1c:	211e      	movs	r1, #30
 8003f1e:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 8003f22:	f7ff ff55 	bl	8003dd0 <ZScore_Calculation>
            mel_indice++;
 8003f26:	782b      	ldrb	r3, [r5, #0]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	702b      	strb	r3, [r5, #0]
        if (mel_indice == 32)
 8003f2c:	4b93      	ldr	r3, [pc, #588]	@ (800417c <Feature_Export+0x2f8>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d006      	beq.n	8003f42 <Feature_Export+0xbe>
        cReadIndex = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	4a8c      	ldr	r2, [pc, #560]	@ (8004168 <Feature_Export+0x2e4>)
 8003f38:	6013      	str	r3, [r2, #0]
    i = blockSize;
 8003f3a:	f44f 6680 	mov.w	r6, #1024	@ 0x400
    while (i > 0U)
 8003f3e:	4d8b      	ldr	r5, [pc, #556]	@ (800416c <Feature_Export+0x2e8>)
 8003f40:	e01a      	b.n	8003f78 <Feature_Export+0xf4>
            mel_indice = 0;
 8003f42:	2500      	movs	r5, #0
 8003f44:	4b8d      	ldr	r3, [pc, #564]	@ (800417c <Feature_Export+0x2f8>)
 8003f46:	701d      	strb	r5, [r3, #0]
            arm_copy_q15(&rawPCMdata[FILTRAGE_SIZE / 2], &sd_wav_cache[FILTRAGE_SIZE * wav_indice], FILTRAGE_SIZE / 2);
 8003f48:	4c8d      	ldr	r4, [pc, #564]	@ (8004180 <Feature_Export+0x2fc>)
 8003f4a:	6821      	ldr	r1, [r4, #0]
 8003f4c:	4e8d      	ldr	r6, [pc, #564]	@ (8004184 <Feature_Export+0x300>)
 8003f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f52:	eb06 21c1 	add.w	r1, r6, r1, lsl #11
 8003f56:	488c      	ldr	r0, [pc, #560]	@ (8004188 <Feature_Export+0x304>)
 8003f58:	f7fd f987 	bl	800126a <arm_copy_q15>
            WriteWAVFile((uint8_t *)sd_wav_cache, sizeof(sd_wav_cache), END_WAV_FILE);
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f44f 3184 	mov.w	r1, #67584	@ 0x10800
 8003f62:	4630      	mov	r0, r6
 8003f64:	f7fd ff8e 	bl	8001e84 <WriteWAVFile>
            wav_indice = 0;
 8003f68:	6025      	str	r5, [r4, #0]
            return FEATURE_EXPORT_OK;
 8003f6a:	2002      	movs	r0, #2
 8003f6c:	e795      	b.n	8003e9a <Feature_Export+0x16>
        dst = dst_base;
 8003f6e:	f5a2 6500 	sub.w	r5, r2, #2048	@ 0x800
 8003f72:	e009      	b.n	8003f88 <Feature_Export+0x104>
      i--;
 8003f74:	3e01      	subs	r6, #1
 8003f76:	460b      	mov	r3, r1
    while (i > 0U)
 8003f78:	b16e      	cbz	r6, 8003f96 <Feature_Export+0x112>
      *dst = circBuffer[rOffset];
 8003f7a:	f934 2013 	ldrsh.w	r2, [r4, r3, lsl #1]
 8003f7e:	f825 2b02 	strh.w	r2, [r5], #2
      if (dst == (q15_t *)dst_end)
 8003f82:	4a7b      	ldr	r2, [pc, #492]	@ (8004170 <Feature_Export+0x2ec>)
 8003f84:	4295      	cmp	r5, r2
 8003f86:	d0f2      	beq.n	8003f6e <Feature_Export+0xea>
      rOffset += bufferInc;
 8003f88:	1c99      	adds	r1, r3, #2
      if (rOffset >= L)
 8003f8a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8003f8e:	dbf1      	blt.n	8003f74 <Feature_Export+0xf0>
        rOffset -= L;
 8003f90:	f6a3 71fe 	subw	r1, r3, #4094	@ 0xffe
 8003f94:	e7ee      	b.n	8003f74 <Feature_Export+0xf0>
    *readOffset = rOffset;
 8003f96:	4a74      	ldr	r2, [pc, #464]	@ (8004168 <Feature_Export+0x2e4>)
 8003f98:	6013      	str	r3, [r2, #0]
        Hanning_window(tmp_buf_1, rawPCMdata, FILTRAGE_SIZE, MONO);
 8003f9a:	4d74      	ldr	r5, [pc, #464]	@ (800416c <Feature_Export+0x2e8>)
 8003f9c:	4e75      	ldr	r6, [pc, #468]	@ (8004174 <Feature_Export+0x2f0>)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f7ff fe4e 	bl	8003c48 <Hanning_window>
        FFT_Calculation(tmp_buf_2, tmp_buf_1);
 8003fac:	4c72      	ldr	r4, [pc, #456]	@ (8004178 <Feature_Export+0x2f4>)
 8003fae:	4631      	mov	r1, r6
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f7ff fe91 	bl	8003cd8 <FFT_Calculation>
        DSE_Calculation(tmp_buf_1, tmp_buf_2);
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f7ff fe9d 	bl	8003cf8 <DSE_Calculation>
        MEL_Calculation(&pOut[mel_indice * N_MELS], tmp_buf_1);
 8003fbe:	4c6f      	ldr	r4, [pc, #444]	@ (800417c <Feature_Export+0x2f8>)
 8003fc0:	7820      	ldrb	r0, [r4, #0]
 8003fc2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 8003fcc:	f7ff feb8 	bl	8003d40 <MEL_Calculation>
        ZScore_Calculation(&pOut[mel_indice * N_MELS], N_MELS);
 8003fd0:	7820      	ldrb	r0, [r4, #0]
 8003fd2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8003fd6:	211e      	movs	r1, #30
 8003fd8:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 8003fdc:	f7ff fef8 	bl	8003dd0 <ZScore_Calculation>
        buffer_run = BUFFER_HALF_NONE;
 8003fe0:	4b60      	ldr	r3, [pc, #384]	@ (8004164 <Feature_Export+0x2e0>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	701a      	strb	r2, [r3, #0]
        mel_indice++;
 8003fe6:	7823      	ldrb	r3, [r4, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	7023      	strb	r3, [r4, #0]
        arm_copy_q15(rawPCMdata, &sd_wav_cache[FILTRAGE_SIZE * wav_indice++], FILTRAGE_SIZE);
 8003fec:	4a64      	ldr	r2, [pc, #400]	@ (8004180 <Feature_Export+0x2fc>)
 8003fee:	6813      	ldr	r3, [r2, #0]
 8003ff0:	1c59      	adds	r1, r3, #1
 8003ff2:	6011      	str	r1, [r2, #0]
 8003ff4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ff8:	4962      	ldr	r1, [pc, #392]	@ (8004184 <Feature_Export+0x300>)
 8003ffa:	eb01 21c3 	add.w	r1, r1, r3, lsl #11
 8003ffe:	4628      	mov	r0, r5
 8004000:	f7fd f933 	bl	800126a <arm_copy_q15>
    return FEATURE_EXPORT_PROGRESS;
 8004004:	4638      	mov	r0, r7
 8004006:	e748      	b.n	8003e9a <Feature_Export+0x16>
        cReadIndex = FILTRAGE_SIZE;
 8004008:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800400c:	4b56      	ldr	r3, [pc, #344]	@ (8004168 <Feature_Export+0x2e4>)
 800400e:	601a      	str	r2, [r3, #0]
    rOffset = *readOffset;
 8004010:	4613      	mov	r3, r2
    while (i > 0U)
 8004012:	4856      	ldr	r0, [pc, #344]	@ (800416c <Feature_Export+0x2e8>)
 8004014:	e004      	b.n	8004020 <Feature_Export+0x19c>
        dst = dst_base;
 8004016:	f5a1 6000 	sub.w	r0, r1, #2048	@ 0x800
 800401a:	e009      	b.n	8004030 <Feature_Export+0x1ac>
      i--;
 800401c:	3a01      	subs	r2, #1
 800401e:	460b      	mov	r3, r1
    while (i > 0U)
 8004020:	b16a      	cbz	r2, 800403e <Feature_Export+0x1ba>
      *dst = circBuffer[rOffset];
 8004022:	f934 1013 	ldrsh.w	r1, [r4, r3, lsl #1]
 8004026:	f820 1b02 	strh.w	r1, [r0], #2
      if (dst == (q15_t *)dst_end)
 800402a:	4951      	ldr	r1, [pc, #324]	@ (8004170 <Feature_Export+0x2ec>)
 800402c:	4288      	cmp	r0, r1
 800402e:	d0f2      	beq.n	8004016 <Feature_Export+0x192>
      rOffset += bufferInc;
 8004030:	1c99      	adds	r1, r3, #2
      if (rOffset >= L)
 8004032:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004036:	dbf1      	blt.n	800401c <Feature_Export+0x198>
        rOffset -= L;
 8004038:	f6a3 71fe 	subw	r1, r3, #4094	@ 0xffe
 800403c:	e7ee      	b.n	800401c <Feature_Export+0x198>
    *readOffset = rOffset;
 800403e:	4a4a      	ldr	r2, [pc, #296]	@ (8004168 <Feature_Export+0x2e4>)
 8004040:	6013      	str	r3, [r2, #0]
        Hanning_window(tmp_buf_1, rawPCMdata, FILTRAGE_SIZE, MONO);
 8004042:	4e4c      	ldr	r6, [pc, #304]	@ (8004174 <Feature_Export+0x2f0>)
 8004044:	2300      	movs	r3, #0
 8004046:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800404a:	4948      	ldr	r1, [pc, #288]	@ (800416c <Feature_Export+0x2e8>)
 800404c:	4630      	mov	r0, r6
 800404e:	f7ff fdfb 	bl	8003c48 <Hanning_window>
        FFT_Calculation(tmp_buf_2, tmp_buf_1);
 8004052:	4d49      	ldr	r5, [pc, #292]	@ (8004178 <Feature_Export+0x2f4>)
 8004054:	4631      	mov	r1, r6
 8004056:	4628      	mov	r0, r5
 8004058:	f7ff fe3e 	bl	8003cd8 <FFT_Calculation>
        DSE_Calculation(tmp_buf_1, tmp_buf_2);
 800405c:	4629      	mov	r1, r5
 800405e:	4630      	mov	r0, r6
 8004060:	f7ff fe4a 	bl	8003cf8 <DSE_Calculation>
        MEL_Calculation(&pOut[mel_indice * N_MELS], tmp_buf_1);
 8004064:	4d45      	ldr	r5, [pc, #276]	@ (800417c <Feature_Export+0x2f8>)
 8004066:	7828      	ldrb	r0, [r5, #0]
 8004068:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800406c:	4631      	mov	r1, r6
 800406e:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 8004072:	f7ff fe65 	bl	8003d40 <MEL_Calculation>
        ZScore_Calculation(&pOut[mel_indice * N_MELS], N_MELS);
 8004076:	7828      	ldrb	r0, [r5, #0]
 8004078:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800407c:	211e      	movs	r1, #30
 800407e:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 8004082:	f7ff fea5 	bl	8003dd0 <ZScore_Calculation>
        mel_indice++;
 8004086:	782b      	ldrb	r3, [r5, #0]
 8004088:	3301      	adds	r3, #1
 800408a:	b2db      	uxtb	r3, r3
 800408c:	702b      	strb	r3, [r5, #0]
        if (mel_indice == 32)
 800408e:	2b20      	cmp	r3, #32
 8004090:	d007      	beq.n	80040a2 <Feature_Export+0x21e>
        cReadIndex = 2 * FILTRAGE_SIZE;
 8004092:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004096:	4a34      	ldr	r2, [pc, #208]	@ (8004168 <Feature_Export+0x2e4>)
 8004098:	6013      	str	r3, [r2, #0]
    i = blockSize;
 800409a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    while (i > 0U)
 800409e:	4933      	ldr	r1, [pc, #204]	@ (800416c <Feature_Export+0x2e8>)
 80040a0:	e01a      	b.n	80040d8 <Feature_Export+0x254>
            mel_indice = 0;
 80040a2:	2500      	movs	r5, #0
 80040a4:	4b35      	ldr	r3, [pc, #212]	@ (800417c <Feature_Export+0x2f8>)
 80040a6:	701d      	strb	r5, [r3, #0]
            arm_copy_q15(&rawPCMdata[FILTRAGE_SIZE / 2], &sd_wav_cache[FILTRAGE_SIZE * wav_indice], FILTRAGE_SIZE / 2);
 80040a8:	4c35      	ldr	r4, [pc, #212]	@ (8004180 <Feature_Export+0x2fc>)
 80040aa:	6821      	ldr	r1, [r4, #0]
 80040ac:	4e35      	ldr	r6, [pc, #212]	@ (8004184 <Feature_Export+0x300>)
 80040ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040b2:	eb06 21c1 	add.w	r1, r6, r1, lsl #11
 80040b6:	4834      	ldr	r0, [pc, #208]	@ (8004188 <Feature_Export+0x304>)
 80040b8:	f7fd f8d7 	bl	800126a <arm_copy_q15>
            WriteWAVFile((uint8_t *)sd_wav_cache, sizeof(sd_wav_cache), END_WAV_FILE);
 80040bc:	2201      	movs	r2, #1
 80040be:	f44f 3184 	mov.w	r1, #67584	@ 0x10800
 80040c2:	4630      	mov	r0, r6
 80040c4:	f7fd fede 	bl	8001e84 <WriteWAVFile>
            wav_indice = 0;
 80040c8:	6025      	str	r5, [r4, #0]
            return FEATURE_EXPORT_OK;
 80040ca:	4638      	mov	r0, r7
 80040cc:	e6e5      	b.n	8003e9a <Feature_Export+0x16>
        dst = dst_base;
 80040ce:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80040d2:	e009      	b.n	80040e8 <Feature_Export+0x264>
      i--;
 80040d4:	3801      	subs	r0, #1
 80040d6:	4613      	mov	r3, r2
    while (i > 0U)
 80040d8:	b168      	cbz	r0, 80040f6 <Feature_Export+0x272>
      *dst = circBuffer[rOffset];
 80040da:	f934 2013 	ldrsh.w	r2, [r4, r3, lsl #1]
 80040de:	f821 2b02 	strh.w	r2, [r1], #2
      if (dst == (q15_t *)dst_end)
 80040e2:	4a23      	ldr	r2, [pc, #140]	@ (8004170 <Feature_Export+0x2ec>)
 80040e4:	4291      	cmp	r1, r2
 80040e6:	d0f2      	beq.n	80040ce <Feature_Export+0x24a>
      rOffset += bufferInc;
 80040e8:	1c9a      	adds	r2, r3, #2
      if (rOffset >= L)
 80040ea:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80040ee:	dbf1      	blt.n	80040d4 <Feature_Export+0x250>
        rOffset -= L;
 80040f0:	f6a3 72fe 	subw	r2, r3, #4094	@ 0xffe
 80040f4:	e7ee      	b.n	80040d4 <Feature_Export+0x250>
    *readOffset = rOffset;
 80040f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004168 <Feature_Export+0x2e4>)
 80040f8:	6013      	str	r3, [r2, #0]
        Hanning_window(tmp_buf_1, rawPCMdata, FILTRAGE_SIZE, MONO);
 80040fa:	4e1c      	ldr	r6, [pc, #112]	@ (800416c <Feature_Export+0x2e8>)
 80040fc:	4d1d      	ldr	r5, [pc, #116]	@ (8004174 <Feature_Export+0x2f0>)
 80040fe:	2300      	movs	r3, #0
 8004100:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004104:	4631      	mov	r1, r6
 8004106:	4628      	mov	r0, r5
 8004108:	f7ff fd9e 	bl	8003c48 <Hanning_window>
        FFT_Calculation(tmp_buf_2, tmp_buf_1);
 800410c:	4c1a      	ldr	r4, [pc, #104]	@ (8004178 <Feature_Export+0x2f4>)
 800410e:	4629      	mov	r1, r5
 8004110:	4620      	mov	r0, r4
 8004112:	f7ff fde1 	bl	8003cd8 <FFT_Calculation>
        DSE_Calculation(tmp_buf_1, tmp_buf_2);
 8004116:	4621      	mov	r1, r4
 8004118:	4628      	mov	r0, r5
 800411a:	f7ff fded 	bl	8003cf8 <DSE_Calculation>
        MEL_Calculation(&pOut[mel_indice * N_MELS], tmp_buf_1);
 800411e:	4c17      	ldr	r4, [pc, #92]	@ (800417c <Feature_Export+0x2f8>)
 8004120:	7820      	ldrb	r0, [r4, #0]
 8004122:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8004126:	4629      	mov	r1, r5
 8004128:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 800412c:	f7ff fe08 	bl	8003d40 <MEL_Calculation>
        ZScore_Calculation(&pOut[mel_indice * N_MELS], N_MELS);
 8004130:	7820      	ldrb	r0, [r4, #0]
 8004132:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8004136:	211e      	movs	r1, #30
 8004138:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 800413c:	f7ff fe48 	bl	8003dd0 <ZScore_Calculation>
        mel_indice++;
 8004140:	7823      	ldrb	r3, [r4, #0]
 8004142:	3301      	adds	r3, #1
 8004144:	7023      	strb	r3, [r4, #0]
        arm_copy_q15(rawPCMdata, &sd_wav_cache[FILTRAGE_SIZE * wav_indice++], FILTRAGE_SIZE);
 8004146:	4a0e      	ldr	r2, [pc, #56]	@ (8004180 <Feature_Export+0x2fc>)
 8004148:	6813      	ldr	r3, [r2, #0]
 800414a:	1c59      	adds	r1, r3, #1
 800414c:	6011      	str	r1, [r2, #0]
 800414e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004152:	490c      	ldr	r1, [pc, #48]	@ (8004184 <Feature_Export+0x300>)
 8004154:	eb01 21c3 	add.w	r1, r1, r3, lsl #11
 8004158:	4630      	mov	r0, r6
 800415a:	f7fd f886 	bl	800126a <arm_copy_q15>
    return FEATURE_EXPORT_PROGRESS;
 800415e:	2001      	movs	r0, #1
 8004160:	e69b      	b.n	8003e9a <Feature_Export+0x16>
 8004162:	bf00      	nop
 8004164:	200010d5 	.word	0x200010d5
 8004168:	200010d8 	.word	0x200010d8
 800416c:	20019e24 	.word	0x20019e24
 8004170:	2001ae24 	.word	0x2001ae24
 8004174:	20008624 	.word	0x20008624
 8004178:	20007624 	.word	0x20007624
 800417c:	20007620 	.word	0x20007620
 8004180:	2000761c 	.word	0x2000761c
 8004184:	20009624 	.word	0x20009624
 8004188:	2001a224 	.word	0x2001a224

0800418c <Feature_Export_Init>:

uint8_t Feature_Export_Init()
{
 800418c:	b508      	push	{r3, lr}
    uint8_t ret = DMA_Config();
 800418e:	f7ff fe45 	bl	8003e1c <DMA_Config>
    if (ret != FILTER_CALCULATION_OK)
 8004192:	2801      	cmp	r0, #1
 8004194:	d000      	beq.n	8004198 <Feature_Export_Init+0xc>
    {
        return ret;
    }
    return FFT_init(FILTRAGE_SIZE);
}
 8004196:	bd08      	pop	{r3, pc}
    return FFT_init(FILTRAGE_SIZE);
 8004198:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800419c:	f7ff fd8c 	bl	8003cb8 <FFT_init>
 80041a0:	e7f9      	b.n	8004196 <Feature_Export_Init+0xa>

080041a2 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80041a2:	4770      	bx	lr

080041a4 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 80041a4:	2000      	movs	r0, #0
 80041a6:	4770      	bx	lr

080041a8 <ft6x06_TS_ClearIT>:
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT6206 */
}
 80041a8:	4770      	bx	lr
	...

080041ac <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 80041ac:	4603      	mov	r3, r0
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80041ae:	2000      	movs	r0, #0
 80041b0:	2801      	cmp	r0, #1
 80041b2:	d806      	bhi.n	80041c2 <ft6x06_GetInstance+0x16>
  {
    if(ft6x06[idx] == DeviceAddr)
 80041b4:	4a04      	ldr	r2, [pc, #16]	@ (80041c8 <ft6x06_GetInstance+0x1c>)
 80041b6:	5c12      	ldrb	r2, [r2, r0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d003      	beq.n	80041c4 <ft6x06_GetInstance+0x18>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80041bc:	3001      	adds	r0, #1
 80041be:	b2c0      	uxtb	r0, r0
 80041c0:	e7f6      	b.n	80041b0 <ft6x06_GetInstance+0x4>
    {
      return idx; 
    }
  }
  
  return 0xFF;
 80041c2:	20ff      	movs	r0, #255	@ 0xff
}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	2001a6a4 	.word	0x2001a6a4

080041cc <ft6x06_Init>:
{  
 80041cc:	b510      	push	{r4, lr}
 80041ce:	4604      	mov	r4, r0
  instance = ft6x06_GetInstance(DeviceAddr);
 80041d0:	f7ff ffec 	bl	80041ac <ft6x06_GetInstance>
  if(instance == 0xFF)
 80041d4:	28ff      	cmp	r0, #255	@ 0xff
 80041d6:	d000      	beq.n	80041da <ft6x06_Init+0xe>
}
 80041d8:	bd10      	pop	{r4, pc}
    empty = ft6x06_GetInstance(0);
 80041da:	2000      	movs	r0, #0
 80041dc:	f7ff ffe6 	bl	80041ac <ft6x06_GetInstance>
    if(empty < FT6x06_MAX_INSTANCE)
 80041e0:	2801      	cmp	r0, #1
 80041e2:	d8f9      	bhi.n	80041d8 <ft6x06_Init+0xc>
      ft6x06[empty] = DeviceAddr;
 80041e4:	4b02      	ldr	r3, [pc, #8]	@ (80041f0 <ft6x06_Init+0x24>)
 80041e6:	541c      	strb	r4, [r3, r0]
      TS_IO_Init(); 
 80041e8:	f001 faf8 	bl	80057dc <TS_IO_Init>
}
 80041ec:	e7f4      	b.n	80041d8 <ft6x06_Init+0xc>
 80041ee:	bf00      	nop
 80041f0:	2001a6a4 	.word	0x2001a6a4

080041f4 <ft6x06_ReadID>:
{
 80041f4:	b510      	push	{r4, lr}
 80041f6:	4604      	mov	r4, r0
  TS_IO_Init();
 80041f8:	f001 faf0 	bl	80057dc <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80041fc:	21a8      	movs	r1, #168	@ 0xa8
 80041fe:	b2e0      	uxtb	r0, r4
 8004200:	f001 fb08 	bl	8005814 <TS_IO_Read>
}
 8004204:	bd10      	pop	{r4, pc}
	...

08004208 <ft6x06_TS_DetectTouch>:
{
 8004208:	b500      	push	{lr}
 800420a:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8004212:	2102      	movs	r1, #2
 8004214:	b2c0      	uxtb	r0, r0
 8004216:	f001 fafd 	bl	8005814 <TS_IO_Read>
 800421a:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 800421e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800422a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d902      	bls.n	800423a <ft6x06_TS_DetectTouch+0x32>
    nbTouch = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	f88d 3007 	strb.w	r3, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 800423a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800423e:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <ft6x06_TS_DetectTouch+0x48>)
 8004240:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 8004242:	2200      	movs	r2, #0
 8004244:	709a      	strb	r2, [r3, #2]
  return(nbTouch);
 8004246:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800424a:	b003      	add	sp, #12
 800424c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004250:	2001a6a0 	.word	0x2001a6a0

08004254 <ft6x06_TS_GetXY>:
{
 8004254:	b530      	push	{r4, r5, lr}
 8004256:	b083      	sub	sp, #12
 8004258:	4614      	mov	r4, r2
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 800425a:	4b16      	ldr	r3, [pc, #88]	@ (80042b4 <ft6x06_TS_GetXY+0x60>)
 800425c:	789a      	ldrb	r2, [r3, #2]
 800425e:	785b      	ldrb	r3, [r3, #1]
 8004260:	429a      	cmp	r2, r3
 8004262:	d222      	bcs.n	80042aa <ft6x06_TS_GetXY+0x56>
 8004264:	460d      	mov	r5, r1
    switch(ft6x06_handle.currActiveTouchIdx)
 8004266:	b11a      	cbz	r2, 8004270 <ft6x06_TS_GetXY+0x1c>
 8004268:	2a01      	cmp	r2, #1
 800426a:	d120      	bne.n	80042ae <ft6x06_TS_GetXY+0x5a>
      regAddress = FT6206_P2_XH_REG; 
 800426c:	2109      	movs	r1, #9
 800426e:	e000      	b.n	8004272 <ft6x06_TS_GetXY+0x1e>
      regAddress = FT6206_P1_XH_REG; 
 8004270:	2103      	movs	r1, #3
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8004272:	2304      	movs	r3, #4
 8004274:	eb0d 0203 	add.w	r2, sp, r3
 8004278:	b2c0      	uxtb	r0, r0
 800427a:	f001 fae1 	bl	8005840 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800427e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004288:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800428c:	4313      	orrs	r3, r2
 800428e:	802b      	strh	r3, [r5, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8004290:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800429a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800429e:	4313      	orrs	r3, r2
 80042a0:	8023      	strh	r3, [r4, #0]
    ft6x06_handle.currActiveTouchIdx++;
 80042a2:	4a04      	ldr	r2, [pc, #16]	@ (80042b4 <ft6x06_TS_GetXY+0x60>)
 80042a4:	7893      	ldrb	r3, [r2, #2]
 80042a6:	3301      	adds	r3, #1
 80042a8:	7093      	strb	r3, [r2, #2]
}
 80042aa:	b003      	add	sp, #12
 80042ac:	bd30      	pop	{r4, r5, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 80042ae:	2100      	movs	r1, #0
 80042b0:	e7df      	b.n	8004272 <ft6x06_TS_GetXY+0x1e>
 80042b2:	bf00      	nop
 80042b4:	2001a6a0 	.word	0x2001a6a0

080042b8 <ft6x06_TS_EnableIT>:
{
 80042b8:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80042ba:	2201      	movs	r2, #1
 80042bc:	21a4      	movs	r1, #164	@ 0xa4
 80042be:	b2c0      	uxtb	r0, r0
 80042c0:	f001 fa94 	bl	80057ec <TS_IO_Write>
}
 80042c4:	bd08      	pop	{r3, pc}

080042c6 <ft6x06_TS_DisableIT>:
{
 80042c6:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80042c8:	2200      	movs	r2, #0
 80042ca:	21a4      	movs	r1, #164	@ 0xa4
 80042cc:	b2c0      	uxtb	r0, r0
 80042ce:	f001 fa8d 	bl	80057ec <TS_IO_Write>
}
 80042d2:	bd08      	pop	{r3, pc}

080042d4 <ft6x06_TS_Start>:
{
 80042d4:	b508      	push	{r3, lr}
  ft6x06_TS_DisableIT(DeviceAddr);
 80042d6:	f7ff fff6 	bl	80042c6 <ft6x06_TS_DisableIT>
}
 80042da:	bd08      	pop	{r3, pc}

080042dc <HAL_TIM_PeriodElapsedCallback>:
    }
    HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b508      	push	{r3, lr}

    if (htim->Instance == TIM6)
 80042de:	6802      	ldr	r2, [r0, #0]
 80042e0:	4b03      	ldr	r3, [pc, #12]	@ (80042f0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d000      	beq.n	80042e8 <HAL_TIM_PeriodElapsedCallback+0xc>
    {
        HAL_IncTick();
    }
}
 80042e6:	bd08      	pop	{r3, pc}
        HAL_IncTick();
 80042e8:	f003 fc38 	bl	8007b5c <HAL_IncTick>
}
 80042ec:	e7fb      	b.n	80042e6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80042ee:	bf00      	nop
 80042f0:	40001000 	.word	0x40001000

080042f4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042f4:	b672      	cpsid	i
void Error_Handler(void)
{

    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80042f6:	e7fe      	b.n	80042f6 <Error_Handler+0x2>

080042f8 <SystemClock_Config>:
{
 80042f8:	b500      	push	{lr}
 80042fa:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042fc:	2234      	movs	r2, #52	@ 0x34
 80042fe:	2100      	movs	r1, #0
 8004300:	a807      	add	r0, sp, #28
 8004302:	f00c fe9b 	bl	801103c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004306:	2300      	movs	r3, #0
 8004308:	9302      	str	r3, [sp, #8]
 800430a:	9303      	str	r3, [sp, #12]
 800430c:	9304      	str	r3, [sp, #16]
 800430e:	9305      	str	r3, [sp, #20]
 8004310:	9306      	str	r3, [sp, #24]
    HAL_PWR_EnableBkUpAccess();
 8004312:	f005 fe1d 	bl	8009f50 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	4b29      	ldr	r3, [pc, #164]	@ (80043bc <SystemClock_Config+0xc4>)
 8004318:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800431a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800431e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	9b00      	ldr	r3, [sp, #0]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800432a:	4b25      	ldr	r3, [pc, #148]	@ (80043c0 <SystemClock_Config+0xc8>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	9b01      	ldr	r3, [sp, #4]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800433e:	230b      	movs	r3, #11
 8004340:	9307      	str	r3, [sp, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004342:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004346:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004348:	2301      	movs	r3, #1
 800434a:	930a      	str	r3, [sp, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800434c:	2210      	movs	r2, #16
 800434e:	920b      	str	r2, [sp, #44]	@ 0x2c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004350:	930c      	str	r3, [sp, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004352:	2302      	movs	r3, #2
 8004354:	930d      	str	r3, [sp, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004356:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800435a:	920e      	str	r2, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 25;
 800435c:	2219      	movs	r2, #25
 800435e:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 432;
 8004360:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8004364:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004366:	9311      	str	r3, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8004368:	2204      	movs	r2, #4
 800436a:	9212      	str	r2, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 800436c:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800436e:	a807      	add	r0, sp, #28
 8004370:	f005 fe34 	bl	8009fdc <HAL_RCC_OscConfig>
 8004374:	b9d8      	cbnz	r0, 80043ae <SystemClock_Config+0xb6>
    if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004376:	f005 fdf3 	bl	8009f60 <HAL_PWREx_EnableOverDrive>
 800437a:	b9d0      	cbnz	r0, 80043b2 <SystemClock_Config+0xba>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800437c:	230f      	movs	r3, #15
 800437e:	9302      	str	r3, [sp, #8]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004380:	2302      	movs	r3, #2
 8004382:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004384:	2300      	movs	r3, #0
 8004386:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004388:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800438c:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800438e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004392:	9306      	str	r3, [sp, #24]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004394:	2107      	movs	r1, #7
 8004396:	a802      	add	r0, sp, #8
 8004398:	f006 f8e2 	bl	800a560 <HAL_RCC_ClockConfig>
 800439c:	b958      	cbnz	r0, 80043b6 <SystemClock_Config+0xbe>
    HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800439e:	2200      	movs	r2, #0
 80043a0:	4611      	mov	r1, r2
 80043a2:	4610      	mov	r0, r2
 80043a4:	f006 f83c 	bl	800a420 <HAL_RCC_MCOConfig>
}
 80043a8:	b015      	add	sp, #84	@ 0x54
 80043aa:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80043ae:	f7ff ffa1 	bl	80042f4 <Error_Handler>
        Error_Handler();
 80043b2:	f7ff ff9f 	bl	80042f4 <Error_Handler>
        Error_Handler();
 80043b6:	f7ff ff9d 	bl	80042f4 <Error_Handler>
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800
 80043c0:	40007000 	.word	0x40007000

080043c4 <SCB_EnableICache>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80043c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80043c8:	f3bf 8f6f 	isb	sy
  __STATIC_INLINE void SCB_EnableICache(void)
  {
#if defined(__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL; /* invalidate I-Cache */
 80043cc:	4b08      	ldr	r3, [pc, #32]	@ (80043f0 <SCB_EnableICache+0x2c>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80043d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80043d8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |= (uint32_t)SCB_CCR_IC_Msk; /* enable I-Cache */
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80043e2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80043e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80043e8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
#endif
  }
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <SCB_EnableDCache>:
  /**
    \brief   Enable D-Cache
    \details Turns on D-Cache
    */
  __STATIC_INLINE void SCB_EnableDCache(void)
  {
 80043f4:	b410      	push	{r4}
#if defined(__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/ /* Level 1 data cache */
 80043f6:	4b15      	ldr	r3, [pc, #84]	@ (800444c <SCB_EnableDCache+0x58>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80043fe:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8004402:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80

    /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004406:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800440a:	e000      	b.n	800440e <SCB_EnableDCache+0x1a>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk));
#if defined(__CC_ARM)
        __schedule_barrier();
#endif
      } while (ways-- != 0U);
    } while (sets-- != 0U);
 800440c:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800440e:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004412:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8004416:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800441a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800441e:	490b      	ldr	r1, [pc, #44]	@ (800444c <SCB_EnableDCache+0x58>)
 8004420:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8004424:	4613      	mov	r3, r2
 8004426:	3a01      	subs	r2, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f2      	bne.n	8004412 <SCB_EnableDCache+0x1e>
    } while (sets-- != 0U);
 800442c:	1e43      	subs	r3, r0, #1
 800442e:	2800      	cmp	r0, #0
 8004430:	d1ec      	bne.n	800440c <SCB_EnableDCache+0x18>
 8004432:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |= (uint32_t)SCB_CCR_DC_Msk; /* enable D-Cache */
 8004436:	694b      	ldr	r3, [r1, #20]
 8004438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800443c:	614b      	str	r3, [r1, #20]
 800443e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004442:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
#endif
  }
 8004446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <main>:
/* Private function prototypes ---------------------------------------------------*/
void SystemClock_Config(void);
/* END Private function prototypes -----------------------------------------------*/

int main(void)
{
 8004450:	b538      	push	{r3, r4, r5, lr}

  uint8_t lcd_status = LCD_OK;

  /* Enable Cache ------------------------------------------------------------*/
  SCB_EnableICache();
 8004452:	f7ff ffb7 	bl	80043c4 <SCB_EnableICache>
  SCB_EnableDCache();
 8004456:	f7ff ffcd 	bl	80043f4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800445a:	f003 fb73 	bl	8007b44 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800445e:	f7ff ff4b 	bl	80042f8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_CRC_Init();
 8004462:	f7fd fbf3 	bl	8001c4c <MX_CRC_Init>
  MX_RTC_Init();
 8004466:	f000 fd45 	bl	8004ef4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800446a:	f009 fb3b 	bl	800dae4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800446e:	f7fd fc5d 	bl	8001d2c <MX_FATFS_Init>
  MX_X_CUBE_AI_Init();
 8004472:	f7fc f805 	bl	8000480 <MX_X_CUBE_AI_Init>
  Feature_Export_Init();
 8004476:	f7ff fe89 	bl	800418c <Feature_Export_Init>
  BSP_LED_Init(LED1);
 800447a:	2000      	movs	r0, #0
 800447c:	f001 f944 	bl	8005708 <BSP_LED_Init>

  // LCD Initialisation
  lcd_status = BSP_LCD_Init();
 8004480:	f002 fe7a 	bl	8007178 <BSP_LCD_Init>
  while (lcd_status != LCD_OK)
 8004484:	2800      	cmp	r0, #0
 8004486:	d1fd      	bne.n	8004484 <main+0x34>
    ;
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8004488:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800448c:	f002 fbd0 	bl	8006c30 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8004490:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004494:	f002 fc34 	bl	8006d00 <BSP_LCD_Clear>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Hello, world!", CENTER_MODE);
 8004498:	f002 fbc4 	bl	8006c24 <BSP_LCD_GetYSize>
 800449c:	2301      	movs	r3, #1
 800449e:	4a86      	ldr	r2, [pc, #536]	@ (80046b8 <main+0x268>)
 80044a0:	f3c0 014f 	ubfx	r1, r0, #1, #16
 80044a4:	2000      	movs	r0, #0
 80044a6:	f002 ff13 	bl	80072d0 <BSP_LCD_DisplayStringAt>

  // TouchScreen Initialisation
  if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) != TS_OK)
 80044aa:	f002 fbb5 	bl	8006c18 <BSP_LCD_GetXSize>
 80044ae:	4604      	mov	r4, r0
 80044b0:	f002 fbb8 	bl	8006c24 <BSP_LCD_GetYSize>
 80044b4:	b281      	uxth	r1, r0
 80044b6:	b2a0      	uxth	r0, r4
 80044b8:	f003 fab8 	bl	8007a2c <BSP_TS_Init>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d14d      	bne.n	800455c <main+0x10c>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
    BSP_LCD_Clear(LCD_COLOR_WHITE);
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Error: TS Init", CENTER_MODE);
    Error_Handler();
  }
  if (BSP_TS_ITConfig() != TS_OK)
 80044c0:	f003 fb16 	bl	8007af0 <BSP_TS_ITConfig>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d15c      	bne.n	8004582 <main+0x132>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Error: TS IT Config", CENTER_MODE);
    Error_Handler();
  }

  // Audio In Initialisation
  if (BSP_AUDIO_IN_Init(BSP_AUDIO_FREQUENCY_16K, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK)
 80044c8:	2202      	movs	r2, #2
 80044ca:	2110      	movs	r1, #16
 80044cc:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 80044d0:	f002 fb2a 	bl	8006b28 <BSP_AUDIO_IN_Init>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d167      	bne.n	80045a8 <main+0x158>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
    BSP_LCD_Clear(LCD_COLOR_WHITE);
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Error: AUDIO IN initialization failed", CENTER_MODE);
    Error_Handler();
  }
  if (BSP_AUDIO_IN_AllocScratch(Scratch, SCRATCH_BUFF_SIZE) != AUDIO_OK)
 80044d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044dc:	4877      	ldr	r0, [pc, #476]	@ (80046bc <main+0x26c>)
 80044de:	f001 ff47 	bl	8006370 <BSP_AUDIO_IN_AllocScratch>
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d173      	bne.n	80045ce <main+0x17e>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Error: AUDIO IN Scratch", CENTER_MODE);
    Error_Handler();
  }

  // Audio Out Initialisation
  if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE,
 80044e6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80044ea:	2164      	movs	r1, #100	@ 0x64
 80044ec:	2002      	movs	r0, #2
 80044ee:	f001 ff05 	bl	80062fc <BSP_AUDIO_OUT_Init>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d17e      	bne.n	80045f4 <main+0x1a4>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
    BSP_LCD_Clear(LCD_COLOR_WHITE);
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Error: AUDIO OUT INIT", CENTER_MODE);
    Error_Handler();
  }
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 80044f6:	2005      	movs	r0, #5
 80044f8:	f001 fe2e 	bl	8006158 <BSP_AUDIO_OUT_SetAudioFrameSlot>

  /* END MCU Configuration---------------------------------------------------*/

  printf("\rHello, world!\n\r");
 80044fc:	4870      	ldr	r0, [pc, #448]	@ (80046c0 <main+0x270>)
 80044fe:	f00c fd13 	bl	8010f28 <iprintf>
  HAL_Delay(1000);
 8004502:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004506:	f003 fb3b 	bl	8007b80 <HAL_Delay>
  print_Menu_Interface();
 800450a:	f000 fe8b 	bl	8005224 <print_Menu_Interface>

  if (BSP_AUDIO_IN_Record((uint16_t *)&RecordBuffer[0], STEREO_RECORD_BUFFER_SIZE) != AUDIO_OK)
 800450e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004512:	486c      	ldr	r0, [pc, #432]	@ (80046c4 <main+0x274>)
 8004514:	f001 ff4a 	bl	80063ac <BSP_AUDIO_IN_Record>
 8004518:	2800      	cmp	r0, #0
 800451a:	d17e      	bne.n	800461a <main+0x1ca>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Error: AUDIO IN RECORD", CENTER_MODE);
    Error_Handler();
  }

  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800451c:	2400      	movs	r4, #0
 800451e:	4b6a      	ldr	r3, [pc, #424]	@ (80046c8 <main+0x278>)
 8004520:	701c      	strb	r4, [r3, #0]
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Enregistrement Audio", CENTER_MODE);
 8004522:	f002 fb7f 	bl	8006c24 <BSP_LCD_GetYSize>
 8004526:	2301      	movs	r3, #1
 8004528:	4a68      	ldr	r2, [pc, #416]	@ (80046cc <main+0x27c>)
 800452a:	f3c0 014f 	ubfx	r1, r0, #1, #16
 800452e:	4620      	mov	r0, r4
 8004530:	f002 fece 	bl	80072d0 <BSP_LCD_DisplayStringAt>

  HAL_Delay(2);
 8004534:	2002      	movs	r0, #2
 8004536:	f003 fb23 	bl	8007b80 <HAL_Delay>

  /* Play the recorded buffer */
  BSP_AUDIO_OUT_Play((uint16_t *)&RecordBuffer[0], STEREO_RECORD_BUFFER_SIZE * 2);
 800453a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800453e:	4861      	ldr	r0, [pc, #388]	@ (80046c4 <main+0x274>)
 8004540:	f001 fdea 	bl	8006118 <BSP_AUDIO_OUT_Play>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 40, (uint8_t *)"Retour Active", CENTER_MODE);
 8004544:	f002 fb6e 	bl	8006c24 <BSP_LCD_GetYSize>
 8004548:	0841      	lsrs	r1, r0, #1
 800454a:	3128      	adds	r1, #40	@ 0x28
 800454c:	2301      	movs	r3, #1
 800454e:	4a60      	ldr	r2, [pc, #384]	@ (80046d0 <main+0x280>)
 8004550:	b289      	uxth	r1, r1
 8004552:	4620      	mov	r0, r4
 8004554:	f002 febc 	bl	80072d0 <BSP_LCD_DisplayStringAt>

  // OpenWavFile();

  uint8_t res = FEATURE_EXPORT_PROGRESS;
 8004558:	2401      	movs	r4, #1
 800455a:	e085      	b.n	8004668 <main+0x218>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800455c:	485d      	ldr	r0, [pc, #372]	@ (80046d4 <main+0x284>)
 800455e:	f002 fba7 	bl	8006cb0 <BSP_LCD_SetTextColor>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8004562:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004566:	f002 fbcb 	bl	8006d00 <BSP_LCD_Clear>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Error: TS Init", CENTER_MODE);
 800456a:	f002 fb5b 	bl	8006c24 <BSP_LCD_GetYSize>
 800456e:	2301      	movs	r3, #1
 8004570:	4a59      	ldr	r2, [pc, #356]	@ (80046d8 <main+0x288>)
 8004572:	f3c0 014f 	ubfx	r1, r0, #1, #16
 8004576:	2000      	movs	r0, #0
 8004578:	f002 feaa 	bl	80072d0 <BSP_LCD_DisplayStringAt>
    Error_Handler();
 800457c:	f7ff feba 	bl	80042f4 <Error_Handler>
 8004580:	e79e      	b.n	80044c0 <main+0x70>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8004582:	4854      	ldr	r0, [pc, #336]	@ (80046d4 <main+0x284>)
 8004584:	f002 fb94 	bl	8006cb0 <BSP_LCD_SetTextColor>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8004588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800458c:	f002 fbb8 	bl	8006d00 <BSP_LCD_Clear>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Error: TS IT Config", CENTER_MODE);
 8004590:	f002 fb48 	bl	8006c24 <BSP_LCD_GetYSize>
 8004594:	2301      	movs	r3, #1
 8004596:	4a51      	ldr	r2, [pc, #324]	@ (80046dc <main+0x28c>)
 8004598:	f3c0 014f 	ubfx	r1, r0, #1, #16
 800459c:	2000      	movs	r0, #0
 800459e:	f002 fe97 	bl	80072d0 <BSP_LCD_DisplayStringAt>
    Error_Handler();
 80045a2:	f7ff fea7 	bl	80042f4 <Error_Handler>
 80045a6:	e78f      	b.n	80044c8 <main+0x78>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80045a8:	484a      	ldr	r0, [pc, #296]	@ (80046d4 <main+0x284>)
 80045aa:	f002 fb81 	bl	8006cb0 <BSP_LCD_SetTextColor>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80045ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045b2:	f002 fba5 	bl	8006d00 <BSP_LCD_Clear>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Error: AUDIO IN initialization failed", CENTER_MODE);
 80045b6:	f002 fb35 	bl	8006c24 <BSP_LCD_GetYSize>
 80045ba:	2301      	movs	r3, #1
 80045bc:	4a48      	ldr	r2, [pc, #288]	@ (80046e0 <main+0x290>)
 80045be:	f3c0 014f 	ubfx	r1, r0, #1, #16
 80045c2:	2000      	movs	r0, #0
 80045c4:	f002 fe84 	bl	80072d0 <BSP_LCD_DisplayStringAt>
    Error_Handler();
 80045c8:	f7ff fe94 	bl	80042f4 <Error_Handler>
 80045cc:	e784      	b.n	80044d8 <main+0x88>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80045ce:	4841      	ldr	r0, [pc, #260]	@ (80046d4 <main+0x284>)
 80045d0:	f002 fb6e 	bl	8006cb0 <BSP_LCD_SetTextColor>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045d8:	f002 fb92 	bl	8006d00 <BSP_LCD_Clear>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Error: AUDIO IN Scratch", CENTER_MODE);
 80045dc:	f002 fb22 	bl	8006c24 <BSP_LCD_GetYSize>
 80045e0:	2301      	movs	r3, #1
 80045e2:	4a40      	ldr	r2, [pc, #256]	@ (80046e4 <main+0x294>)
 80045e4:	f3c0 014f 	ubfx	r1, r0, #1, #16
 80045e8:	2000      	movs	r0, #0
 80045ea:	f002 fe71 	bl	80072d0 <BSP_LCD_DisplayStringAt>
    Error_Handler();
 80045ee:	f7ff fe81 	bl	80042f4 <Error_Handler>
 80045f2:	e778      	b.n	80044e6 <main+0x96>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80045f4:	4837      	ldr	r0, [pc, #220]	@ (80046d4 <main+0x284>)
 80045f6:	f002 fb5b 	bl	8006cb0 <BSP_LCD_SetTextColor>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80045fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045fe:	f002 fb7f 	bl	8006d00 <BSP_LCD_Clear>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Error: AUDIO OUT INIT", CENTER_MODE);
 8004602:	f002 fb0f 	bl	8006c24 <BSP_LCD_GetYSize>
 8004606:	2301      	movs	r3, #1
 8004608:	4a37      	ldr	r2, [pc, #220]	@ (80046e8 <main+0x298>)
 800460a:	f3c0 014f 	ubfx	r1, r0, #1, #16
 800460e:	2000      	movs	r0, #0
 8004610:	f002 fe5e 	bl	80072d0 <BSP_LCD_DisplayStringAt>
    Error_Handler();
 8004614:	f7ff fe6e 	bl	80042f4 <Error_Handler>
 8004618:	e76d      	b.n	80044f6 <main+0xa6>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800461a:	482e      	ldr	r0, [pc, #184]	@ (80046d4 <main+0x284>)
 800461c:	f002 fb48 	bl	8006cb0 <BSP_LCD_SetTextColor>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8004620:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004624:	f002 fb6c 	bl	8006d00 <BSP_LCD_Clear>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Error: AUDIO IN RECORD", CENTER_MODE);
 8004628:	f002 fafc 	bl	8006c24 <BSP_LCD_GetYSize>
 800462c:	2301      	movs	r3, #1
 800462e:	4a2f      	ldr	r2, [pc, #188]	@ (80046ec <main+0x29c>)
 8004630:	f3c0 014f 	ubfx	r1, r0, #1, #16
 8004634:	2000      	movs	r0, #0
 8004636:	f002 fe4b 	bl	80072d0 <BSP_LCD_DisplayStringAt>
    Error_Handler();
 800463a:	f7ff fe5b 	bl	80042f4 <Error_Handler>
 800463e:	e76d      	b.n	800451c <main+0xcc>
    if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
    {
      /* Copy half of the record buffer to the playback buffer */
      if (audio_rec_buffer_state == BUFFER_OFFSET_HALF)
      {
        uint32_t start = HAL_GetTick();
 8004640:	f003 fa98 	bl	8007b74 <HAL_GetTick>
 8004644:	4605      	mov	r5, r0
        res = Feature_Export(MelData, (int16_t *)RecordBuffer, BUFFER_OFFSET_HALF);
 8004646:	2201      	movs	r2, #1
 8004648:	491e      	ldr	r1, [pc, #120]	@ (80046c4 <main+0x274>)
 800464a:	4829      	ldr	r0, [pc, #164]	@ (80046f0 <main+0x2a0>)
 800464c:	f7ff fc1a 	bl	8003e84 <Feature_Export>
 8004650:	4604      	mov	r4, r0
        printf("Time: %ld\r\n", HAL_GetTick() - start);
 8004652:	f003 fa8f 	bl	8007b74 <HAL_GetTick>
 8004656:	1b41      	subs	r1, r0, r5
 8004658:	4826      	ldr	r0, [pc, #152]	@ (80046f4 <main+0x2a4>)
 800465a:	f00c fc65 	bl	8010f28 <iprintf>
        uint32_t start = HAL_GetTick();
        res = Feature_Export(MelData, (int16_t *)RecordBuffer, BUFFER_OFFSET_FULL);
        printf("Time: %ld\r\n", HAL_GetTick() - start);
      }
    }
    if (res == FEATURE_EXPORT_OK)
 800465e:	2c02      	cmp	r4, #2
 8004660:	d018      	beq.n	8004694 <main+0x244>
      while (1)
        ;
    }

    // Wait next data
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8004662:	4b19      	ldr	r3, [pc, #100]	@ (80046c8 <main+0x278>)
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
    if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 8004668:	4b17      	ldr	r3, [pc, #92]	@ (80046c8 <main+0x278>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f6      	beq.n	800465e <main+0x20e>
      if (audio_rec_buffer_state == BUFFER_OFFSET_HALF)
 8004670:	2b01      	cmp	r3, #1
 8004672:	d0e5      	beq.n	8004640 <main+0x1f0>
        uint32_t start = HAL_GetTick();
 8004674:	f003 fa7e 	bl	8007b74 <HAL_GetTick>
 8004678:	4605      	mov	r5, r0
        res = Feature_Export(MelData, (int16_t *)RecordBuffer, BUFFER_OFFSET_FULL);
 800467a:	2202      	movs	r2, #2
 800467c:	4911      	ldr	r1, [pc, #68]	@ (80046c4 <main+0x274>)
 800467e:	481c      	ldr	r0, [pc, #112]	@ (80046f0 <main+0x2a0>)
 8004680:	f7ff fc00 	bl	8003e84 <Feature_Export>
 8004684:	4604      	mov	r4, r0
        printf("Time: %ld\r\n", HAL_GetTick() - start);
 8004686:	f003 fa75 	bl	8007b74 <HAL_GetTick>
 800468a:	1b41      	subs	r1, r0, r5
 800468c:	4819      	ldr	r0, [pc, #100]	@ (80046f4 <main+0x2a4>)
 800468e:	f00c fc4b 	bl	8010f28 <iprintf>
 8004692:	e7e4      	b.n	800465e <main+0x20e>
      BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 70, (uint8_t *)"Feature Export OK", CENTER_MODE);
 8004694:	f002 fac6 	bl	8006c24 <BSP_LCD_GetYSize>
 8004698:	0841      	lsrs	r1, r0, #1
 800469a:	3146      	adds	r1, #70	@ 0x46
 800469c:	2301      	movs	r3, #1
 800469e:	4a16      	ldr	r2, [pc, #88]	@ (80046f8 <main+0x2a8>)
 80046a0:	b289      	uxth	r1, r1
 80046a2:	2000      	movs	r0, #0
 80046a4:	f002 fe14 	bl	80072d0 <BSP_LCD_DisplayStringAt>
      WriteBufferFile_F32(MelData, 30 * 32, "mel_data.txt");
 80046a8:	4a14      	ldr	r2, [pc, #80]	@ (80046fc <main+0x2ac>)
 80046aa:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80046ae:	4810      	ldr	r0, [pc, #64]	@ (80046f0 <main+0x2a0>)
 80046b0:	f7fd fb5c 	bl	8001d6c <WriteBufferFile_F32>
      while (1)
 80046b4:	e7fe      	b.n	80046b4 <main+0x264>
 80046b6:	bf00      	nop
 80046b8:	080125b4 	.word	0x080125b4
 80046bc:	2001a6a8 	.word	0x2001a6a8
 80046c0:	08012640 	.word	0x08012640
 80046c4:	2001bda8 	.word	0x2001bda8
 80046c8:	2001a6a6 	.word	0x2001a6a6
 80046cc:	0801266c 	.word	0x0801266c
 80046d0:	08012684 	.word	0x08012684
 80046d4:	ffff0000 	.word	0xffff0000
 80046d8:	080125c4 	.word	0x080125c4
 80046dc:	080125d4 	.word	0x080125d4
 80046e0:	080125e8 	.word	0x080125e8
 80046e4:	08012610 	.word	0x08012610
 80046e8:	08012628 	.word	0x08012628
 80046ec:	08012654 	.word	0x08012654
 80046f0:	2001aea8 	.word	0x2001aea8
 80046f4:	08012694 	.word	0x08012694
 80046f8:	080126a0 	.word	0x080126a0
 80046fc:	080126b4 	.word	0x080126b4

08004700 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8004700:	b530      	push	{r4, r5, lr}
 8004702:	b0b1      	sub	sp, #196	@ 0xc4
 8004704:	4604      	mov	r4, r0
 8004706:	460d      	mov	r5, r1
  NT35510_IO_Delay(120);
 8004708:	2078      	movs	r0, #120	@ 0x78
 800470a:	f001 f8ad 	bl	8005868 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 800470e:	4ba9      	ldr	r3, [pc, #676]	@ (80049b4 <NT35510_Init+0x2b4>)
 8004710:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004714:	902e      	str	r0, [sp, #184]	@ 0xb8
 8004716:	f8ad 10bc 	strh.w	r1, [sp, #188]	@ 0xbc
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 800471a:	4ba7      	ldr	r3, [pc, #668]	@ (80049b8 <NT35510_Init+0x2b8>)
 800471c:	932d      	str	r3, [sp, #180]	@ 0xb4
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 800471e:	4ba7      	ldr	r3, [pc, #668]	@ (80049bc <NT35510_Init+0x2bc>)
 8004720:	932c      	str	r3, [sp, #176]	@ 0xb0
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 8004722:	4ba7      	ldr	r3, [pc, #668]	@ (80049c0 <NT35510_Init+0x2c0>)
 8004724:	932b      	str	r3, [sp, #172]	@ 0xac
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8004726:	4ba7      	ldr	r3, [pc, #668]	@ (80049c4 <NT35510_Init+0x2c4>)
 8004728:	932a      	str	r3, [sp, #168]	@ 0xa8
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 800472a:	4ba7      	ldr	r3, [pc, #668]	@ (80049c8 <NT35510_Init+0x2c8>)
 800472c:	9329      	str	r3, [sp, #164]	@ 0xa4
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 800472e:	4ba7      	ldr	r3, [pc, #668]	@ (80049cc <NT35510_Init+0x2cc>)
 8004730:	9328      	str	r3, [sp, #160]	@ 0xa0
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 8004732:	f240 13bf 	movw	r3, #447	@ 0x1bf
 8004736:	f8ad 309c 	strh.w	r3, [sp, #156]	@ 0x9c
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 800473a:	4ba5      	ldr	r3, [pc, #660]	@ (80049d0 <NT35510_Init+0x2d0>)
 800473c:	9326      	str	r3, [sp, #152]	@ 0x98
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 800473e:	4ba5      	ldr	r3, [pc, #660]	@ (80049d4 <NT35510_Init+0x2d4>)
 8004740:	9325      	str	r3, [sp, #148]	@ 0x94
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 8004742:	4ba5      	ldr	r3, [pc, #660]	@ (80049d8 <NT35510_Init+0x2d8>)
 8004744:	9324      	str	r3, [sp, #144]	@ 0x90
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8004746:	4ba5      	ldr	r3, [pc, #660]	@ (80049dc <NT35510_Init+0x2dc>)
 8004748:	9323      	str	r3, [sp, #140]	@ 0x8c
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 800474a:	4ba5      	ldr	r3, [pc, #660]	@ (80049e0 <NT35510_Init+0x2e0>)
 800474c:	9322      	str	r3, [sp, #136]	@ 0x88
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 800474e:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 8004752:	9321      	str	r3, [sp, #132]	@ 0x84
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8004754:	4ba3      	ldr	r3, [pc, #652]	@ (80049e4 <NT35510_Init+0x2e4>)
 8004756:	461a      	mov	r2, r3
 8004758:	f852 1b04 	ldr.w	r1, [r2], #4
 800475c:	f8ad 1080 	strh.w	r1, [sp, #128]	@ 0x80
 8004760:	0c09      	lsrs	r1, r1, #16
 8004762:	f88d 1082 	strb.w	r1, [sp, #130]	@ 0x82
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8004766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800476a:	901e      	str	r0, [sp, #120]	@ 0x78
 800476c:	f8ad 107c 	strh.w	r1, [sp, #124]	@ 0x7c
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	f8ad 2074 	strh.w	r2, [sp, #116]	@ 0x74
 8004776:	0c12      	lsrs	r2, r2, #16
 8004778:	f88d 2076 	strb.w	r2, [sp, #118]	@ 0x76
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 800477c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8004780:	f8ad 2070 	strh.w	r2, [sp, #112]	@ 0x70
  const uint8_t nt35510_reg19[] = {0xB5, 0x50};
 8004784:	f245 02b5 	movw	r2, #20661	@ 0x50b5
 8004788:	f8ad 206c 	strh.w	r2, [sp, #108]	@ 0x6c
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	f8ad 2068 	strh.w	r2, [sp, #104]	@ 0x68
 8004792:	0c12      	lsrs	r2, r2, #16
 8004794:	f88d 206a 	strb.w	r2, [sp, #106]	@ 0x6a
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8004798:	4a93      	ldr	r2, [pc, #588]	@ (80049e8 <NT35510_Init+0x2e8>)
 800479a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800479e:	9018      	str	r0, [sp, #96]	@ 0x60
 80047a0:	f88d 1064 	strb.w	r1, [sp, #100]	@ 0x64
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 80047a4:	f04f 423c 	mov.w	r2, #3154116608	@ 0xbc000000
 80047a8:	9217      	str	r2, [sp, #92]	@ 0x5c
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 80047aa:	4a90      	ldr	r2, [pc, #576]	@ (80049ec <NT35510_Init+0x2ec>)
 80047ac:	9216      	str	r2, [sp, #88]	@ 0x58
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 80047ae:	f44f 72dd 	mov.w	r2, #442	@ 0x1ba
 80047b2:	f8ad 2054 	strh.w	r2, [sp, #84]	@ 0x54
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 80047b6:	2236      	movs	r2, #54	@ 0x36
 80047b8:	f8ad 2050 	strh.w	r2, [sp, #80]	@ 0x50
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 80047bc:	f103 0214 	add.w	r2, r3, #20
 80047c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80047c6:	f88d 104c 	strb.w	r1, [sp, #76]	@ 0x4c
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 80047ca:	f103 021c 	add.w	r2, r3, #28
 80047ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047d2:	9010      	str	r0, [sp, #64]	@ 0x40
 80047d4:	f88d 1044 	strb.w	r1, [sp, #68]	@ 0x44
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80047d8:	f246 0236 	movw	r2, #24630	@ 0x6036
 80047dc:	f8ad 203c 	strh.w	r2, [sp, #60]	@ 0x3c
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 80047e0:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80047e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047e8:	900d      	str	r0, [sp, #52]	@ 0x34
 80047ea:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 80047ee:	332c      	adds	r3, #44	@ 0x2c
 80047f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80047f6:	f88d 1030 	strb.w	r1, [sp, #48]	@ 0x30
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 80047fa:	2335      	movs	r3, #53	@ 0x35
 80047fc:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 8004800:	2311      	movs	r3, #17
 8004802:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 8004806:	2329      	movs	r3, #41	@ 0x29
 8004808:	f8ad 3020 	strh.w	r3, [sp, #32]

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 800480c:	f647 7351 	movw	r3, #32593	@ 0x7f51
 8004810:	f8ad 301c 	strh.w	r3, [sp, #28]
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8004814:	f642 4353 	movw	r3, #11347	@ 0x2c53
 8004818:	f8ad 3018 	strh.w	r3, [sp, #24]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 800481c:	f240 2355 	movw	r3, #597	@ 0x255
 8004820:	f8ad 3014 	strh.w	r3, [sp, #20]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8004824:	f64f 735e 	movw	r3, #65374	@ 0xff5e
 8004828:	f8ad 3010 	strh.w	r3, [sp, #16]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 800482c:	232c      	movs	r3, #44	@ 0x2c
 800482e:	f8ad 300c 	strh.w	r3, [sp, #12]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 8004832:	f245 533a 	movw	r3, #21818	@ 0x553a
 8004836:	f8ad 3008 	strh.w	r3, [sp, #8]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 800483a:	f247 733a 	movw	r3, #30522	@ 0x773a
 800483e:	f8ad 3004 	strh.w	r3, [sp, #4]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 8004842:	a92e      	add	r1, sp, #184	@ 0xb8
 8004844:	2005      	movs	r0, #5
 8004846:	f002 fb1b 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 800484a:	a92d      	add	r1, sp, #180	@ 0xb4
 800484c:	2003      	movs	r0, #3
 800484e:	f002 fb17 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8004852:	a92c      	add	r1, sp, #176	@ 0xb0
 8004854:	2003      	movs	r0, #3
 8004856:	f002 fb13 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 800485a:	a92b      	add	r1, sp, #172	@ 0xac
 800485c:	2003      	movs	r0, #3
 800485e:	f002 fb0f 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 8004862:	a92a      	add	r1, sp, #168	@ 0xa8
 8004864:	2003      	movs	r0, #3
 8004866:	f002 fb0b 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 800486a:	a929      	add	r1, sp, #164	@ 0xa4
 800486c:	2003      	movs	r0, #3
 800486e:	f002 fb07 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 8004872:	a928      	add	r1, sp, #160	@ 0xa0
 8004874:	2003      	movs	r0, #3
 8004876:	f002 fb03 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 800487a:	a927      	add	r1, sp, #156	@ 0x9c
 800487c:	2001      	movs	r0, #1
 800487e:	f002 faff 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 8004882:	a926      	add	r1, sp, #152	@ 0x98
 8004884:	2003      	movs	r0, #3
 8004886:	f002 fafb 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 800488a:	a925      	add	r1, sp, #148	@ 0x94
 800488c:	2003      	movs	r0, #3
 800488e:	f002 faf7 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 8004892:	a924      	add	r1, sp, #144	@ 0x90
 8004894:	2003      	movs	r0, #3
 8004896:	f002 faf3 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 800489a:	a923      	add	r1, sp, #140	@ 0x8c
 800489c:	2003      	movs	r0, #3
 800489e:	f002 faef 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 80048a2:	a922      	add	r1, sp, #136	@ 0x88
 80048a4:	2003      	movs	r0, #3
 80048a6:	f002 faeb 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 80048aa:	a921      	add	r1, sp, #132	@ 0x84
 80048ac:	2003      	movs	r0, #3
 80048ae:	f002 fae7 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 80048b2:	a920      	add	r1, sp, #128	@ 0x80
 80048b4:	2002      	movs	r0, #2
 80048b6:	f002 fae3 	bl	8006e80 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 80048ba:	a91e      	add	r1, sp, #120	@ 0x78
 80048bc:	2005      	movs	r0, #5
 80048be:	f002 fadf 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 80048c2:	a91d      	add	r1, sp, #116	@ 0x74
 80048c4:	2002      	movs	r0, #2
 80048c6:	f002 fadb 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 80048ca:	a91c      	add	r1, sp, #112	@ 0x70
 80048cc:	2001      	movs	r0, #1
 80048ce:	f002 fad7 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 80048d2:	a91b      	add	r1, sp, #108	@ 0x6c
 80048d4:	2001      	movs	r0, #1
 80048d6:	f002 fad3 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 80048da:	a91a      	add	r1, sp, #104	@ 0x68
 80048dc:	2002      	movs	r0, #2
 80048de:	f002 facf 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 80048e2:	a918      	add	r1, sp, #96	@ 0x60
 80048e4:	2004      	movs	r0, #4
 80048e6:	f002 facb 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 80048ea:	a917      	add	r1, sp, #92	@ 0x5c
 80048ec:	2003      	movs	r0, #3
 80048ee:	f002 fac7 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 80048f2:	a916      	add	r1, sp, #88	@ 0x58
 80048f4:	2003      	movs	r0, #3
 80048f6:	f002 fac3 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 80048fa:	a915      	add	r1, sp, #84	@ 0x54
 80048fc:	2001      	movs	r0, #1
 80048fe:	f002 fabf 	bl	8006e80 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 8004902:	a90a      	add	r1, sp, #40	@ 0x28
 8004904:	2000      	movs	r0, #0
 8004906:	f002 fabb 	bl	8006e80 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 800490a:	a901      	add	r1, sp, #4
 800490c:	2000      	movs	r0, #0
 800490e:	f002 fab7 	bl	8006e80 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 8004912:	20c8      	movs	r0, #200	@ 0xc8
 8004914:	f000 ffa8 	bl	8005868 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8004918:	2d00      	cmp	r5, #0
 800491a:	d134      	bne.n	8004986 <NT35510_Init+0x286>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 800491c:	a914      	add	r1, sp, #80	@ 0x50
 800491e:	2001      	movs	r0, #1
 8004920:	f002 faae 	bl	8006e80 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 8004924:	a912      	add	r1, sp, #72	@ 0x48
 8004926:	2004      	movs	r0, #4
 8004928:	f002 faaa 	bl	8006e80 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 800492c:	a910      	add	r1, sp, #64	@ 0x40
 800492e:	2004      	movs	r0, #4
 8004930:	f002 faa6 	bl	8006e80 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8004934:	a909      	add	r1, sp, #36	@ 0x24
 8004936:	2000      	movs	r0, #0
 8004938:	f002 faa2 	bl	8006e80 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 800493c:	2078      	movs	r0, #120	@ 0x78
 800493e:	f000 ff93 	bl	8005868 <NT35510_IO_Delay>

  switch(ColorCoding)
 8004942:	b36c      	cbz	r4, 80049a0 <NT35510_Init+0x2a0>
 8004944:	2c02      	cmp	r4, #2
 8004946:	d130      	bne.n	80049aa <NT35510_Init+0x2aa>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8004948:	a902      	add	r1, sp, #8
 800494a:	2001      	movs	r0, #1
 800494c:	f002 fa98 	bl	8006e80 <DSI_IO_WriteCmd>
      break;
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 8004950:	a907      	add	r1, sp, #28
 8004952:	2001      	movs	r0, #1
 8004954:	f002 fa94 	bl	8006e80 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8004958:	a906      	add	r1, sp, #24
 800495a:	2001      	movs	r0, #1
 800495c:	f002 fa90 	bl	8006e80 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 8004960:	a905      	add	r1, sp, #20
 8004962:	2001      	movs	r0, #1
 8004964:	f002 fa8c 	bl	8006e80 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8004968:	a904      	add	r1, sp, #16
 800496a:	2001      	movs	r0, #1
 800496c:	f002 fa88 	bl	8006e80 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 8004970:	a908      	add	r1, sp, #32
 8004972:	2000      	movs	r0, #0
 8004974:	f002 fa84 	bl	8006e80 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8004978:	a903      	add	r1, sp, #12
 800497a:	2000      	movs	r0, #0
 800497c:	f002 fa80 	bl	8006e80 <DSI_IO_WriteCmd>

  return 0;
}
 8004980:	2000      	movs	r0, #0
 8004982:	b031      	add	sp, #196	@ 0xc4
 8004984:	bd30      	pop	{r4, r5, pc}
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8004986:	a90f      	add	r1, sp, #60	@ 0x3c
 8004988:	2001      	movs	r0, #1
 800498a:	f002 fa79 	bl	8006e80 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 800498e:	a90d      	add	r1, sp, #52	@ 0x34
 8004990:	2004      	movs	r0, #4
 8004992:	f002 fa75 	bl	8006e80 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8004996:	a90b      	add	r1, sp, #44	@ 0x2c
 8004998:	2004      	movs	r0, #4
 800499a:	f002 fa71 	bl	8006e80 <DSI_IO_WriteCmd>
 800499e:	e7c9      	b.n	8004934 <NT35510_Init+0x234>
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 80049a0:	a901      	add	r1, sp, #4
 80049a2:	2001      	movs	r0, #1
 80049a4:	f002 fa6c 	bl	8006e80 <DSI_IO_WriteCmd>
      break;
 80049a8:	e7d2      	b.n	8004950 <NT35510_Init+0x250>
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 80049aa:	a901      	add	r1, sp, #4
 80049ac:	2001      	movs	r0, #1
 80049ae:	f002 fa67 	bl	8006e80 <DSI_IO_WriteCmd>
      break;
 80049b2:	e7cd      	b.n	8004950 <NT35510_Init+0x250>
 80049b4:	080126c4 	.word	0x080126c4
 80049b8:	b0030303 	.word	0xb0030303
 80049bc:	b6464646 	.word	0xb6464646
 80049c0:	b1030303 	.word	0xb1030303
 80049c4:	b7363636 	.word	0xb7363636
 80049c8:	b2020000 	.word	0xb2020000
 80049cc:	b8262626 	.word	0xb8262626
 80049d0:	b3090909 	.word	0xb3090909
 80049d4:	b9363636 	.word	0xb9363636
 80049d8:	b5080808 	.word	0xb5080808
 80049dc:	ba262626 	.word	0xba262626
 80049e0:	bc008000 	.word	0xbc008000
 80049e4:	08012410 	.word	0x08012410
 80049e8:	080126cc 	.word	0x080126cc
 80049ec:	cc000003 	.word	0xcc000003

080049f0 <NT35510_ReadID>:
/**
  * @brief  Read the component ID.
  * @retval Component ID
  */
uint16_t NT35510_ReadID(void)
{
 80049f0:	b500      	push	{lr}
 80049f2:	b083      	sub	sp, #12
  uint8_t pData=0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f88d 3007 	strb.w	r3, [sp, #7]
  DSI_IO_ReadCmd(NT35510_CMD_RDID2, &pData, 1);
 80049fa:	2201      	movs	r2, #1
 80049fc:	f10d 0107 	add.w	r1, sp, #7
 8004a00:	20db      	movs	r0, #219	@ 0xdb
 8004a02:	f002 fa59 	bl	8006eb8 <DSI_IO_ReadCmd>
  return pData;
}
 8004a06:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004a0a:	b003      	add	sp, #12
 8004a0c:	f85d fb04 	ldr.w	pc, [sp], #4

08004a10 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8004a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a14:	b083      	sub	sp, #12
 8004a16:	9000      	str	r0, [sp, #0]
 8004a18:	9101      	str	r1, [sp, #4]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004a1a:	4cd7      	ldr	r4, [pc, #860]	@ (8004d78 <OTM8009A_Init+0x368>)
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f002 fa2e 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8004a24:	49d5      	ldr	r1, [pc, #852]	@ (8004d7c <OTM8009A_Init+0x36c>)
 8004a26:	2003      	movs	r0, #3
 8004a28:	f002 fa2a 	bl	8006e80 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8004a2c:	4dd4      	ldr	r5, [pc, #848]	@ (8004d80 <OTM8009A_Init+0x370>)
 8004a2e:	4629      	mov	r1, r5
 8004a30:	2000      	movs	r0, #0
 8004a32:	f002 fa25 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8004a36:	49d3      	ldr	r1, [pc, #844]	@ (8004d84 <OTM8009A_Init+0x374>)
 8004a38:	2002      	movs	r0, #2
 8004a3a:	f002 fa21 	bl	8006e80 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8004a3e:	4629      	mov	r1, r5
 8004a40:	2000      	movs	r0, #0
 8004a42:	f002 fa1d 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8004a46:	49d0      	ldr	r1, [pc, #832]	@ (8004d88 <OTM8009A_Init+0x378>)
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f002 fa19 	bl	8006e80 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8004a4e:	200a      	movs	r0, #10
 8004a50:	f000 ff06 	bl	8005860 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8004a54:	49cd      	ldr	r1, [pc, #820]	@ (8004d8c <OTM8009A_Init+0x37c>)
 8004a56:	2000      	movs	r0, #0
 8004a58:	f002 fa12 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8004a5c:	49cc      	ldr	r1, [pc, #816]	@ (8004d90 <OTM8009A_Init+0x380>)
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f002 fa0e 	bl	8006e80 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8004a64:	200a      	movs	r0, #10
 8004a66:	f000 fefb 	bl	8005860 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8004a6a:	49ca      	ldr	r1, [pc, #808]	@ (8004d94 <OTM8009A_Init+0x384>)
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f002 fa07 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8004a72:	49c9      	ldr	r1, [pc, #804]	@ (8004d98 <OTM8009A_Init+0x388>)
 8004a74:	2000      	movs	r0, #0
 8004a76:	f002 fa03 	bl	8006e80 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8004a7a:	49c8      	ldr	r1, [pc, #800]	@ (8004d9c <OTM8009A_Init+0x38c>)
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	f002 f9ff 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8004a82:	f8df 8408 	ldr.w	r8, [pc, #1032]	@ 8004e8c <OTM8009A_Init+0x47c>
 8004a86:	4641      	mov	r1, r8
 8004a88:	2000      	movs	r0, #0
 8004a8a:	f002 f9f9 	bl	8006e80 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8004a8e:	49c4      	ldr	r1, [pc, #784]	@ (8004da0 <OTM8009A_Init+0x390>)
 8004a90:	2000      	movs	r0, #0
 8004a92:	f002 f9f5 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8004a96:	49c3      	ldr	r1, [pc, #780]	@ (8004da4 <OTM8009A_Init+0x394>)
 8004a98:	2000      	movs	r0, #0
 8004a9a:	f002 f9f1 	bl	8006e80 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f002 f9ed 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8004aa6:	49c0      	ldr	r1, [pc, #768]	@ (8004da8 <OTM8009A_Init+0x398>)
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	f002 f9e9 	bl	8006e80 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8004aae:	4ebf      	ldr	r6, [pc, #764]	@ (8004dac <OTM8009A_Init+0x39c>)
 8004ab0:	4631      	mov	r1, r6
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f002 f9e4 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8004ab8:	49bd      	ldr	r1, [pc, #756]	@ (8004db0 <OTM8009A_Init+0x3a0>)
 8004aba:	2000      	movs	r0, #0
 8004abc:	f002 f9e0 	bl	8006e80 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8004ac0:	4fbc      	ldr	r7, [pc, #752]	@ (8004db4 <OTM8009A_Init+0x3a4>)
 8004ac2:	4639      	mov	r1, r7
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	f002 f9db 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8004aca:	49bb      	ldr	r1, [pc, #748]	@ (8004db8 <OTM8009A_Init+0x3a8>)
 8004acc:	2000      	movs	r0, #0
 8004ace:	f002 f9d7 	bl	8006e80 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8004ad2:	49ba      	ldr	r1, [pc, #744]	@ (8004dbc <OTM8009A_Init+0x3ac>)
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f002 f9d3 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8004ada:	49b9      	ldr	r1, [pc, #740]	@ (8004dc0 <OTM8009A_Init+0x3b0>)
 8004adc:	2000      	movs	r0, #0
 8004ade:	f002 f9cf 	bl	8006e80 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8004ae2:	49b8      	ldr	r1, [pc, #736]	@ (8004dc4 <OTM8009A_Init+0x3b4>)
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	f002 f9cb 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8004aea:	4641      	mov	r1, r8
 8004aec:	2000      	movs	r0, #0
 8004aee:	f002 f9c7 	bl	8006e80 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004af2:	4621      	mov	r1, r4
 8004af4:	2000      	movs	r0, #0
 8004af6:	f002 f9c3 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8004afa:	49b3      	ldr	r1, [pc, #716]	@ (8004dc8 <OTM8009A_Init+0x3b8>)
 8004afc:	2002      	movs	r0, #2
 8004afe:	f002 f9bf 	bl	8006e80 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8004b02:	49b2      	ldr	r1, [pc, #712]	@ (8004dcc <OTM8009A_Init+0x3bc>)
 8004b04:	2000      	movs	r0, #0
 8004b06:	f002 f9bb 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8004b0a:	49b1      	ldr	r1, [pc, #708]	@ (8004dd0 <OTM8009A_Init+0x3c0>)
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	f002 f9b7 	bl	8006e80 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8004b12:	49b0      	ldr	r1, [pc, #704]	@ (8004dd4 <OTM8009A_Init+0x3c4>)
 8004b14:	2000      	movs	r0, #0
 8004b16:	f002 f9b3 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8004b1a:	49af      	ldr	r1, [pc, #700]	@ (8004dd8 <OTM8009A_Init+0x3c8>)
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	f002 f9af 	bl	8006e80 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8004b22:	49ae      	ldr	r1, [pc, #696]	@ (8004ddc <OTM8009A_Init+0x3cc>)
 8004b24:	2000      	movs	r0, #0
 8004b26:	f002 f9ab 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8004b2a:	49ad      	ldr	r1, [pc, #692]	@ (8004de0 <OTM8009A_Init+0x3d0>)
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	f002 f9a7 	bl	8006e80 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8004b32:	4631      	mov	r1, r6
 8004b34:	2000      	movs	r0, #0
 8004b36:	f002 f9a3 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8004b3a:	49aa      	ldr	r1, [pc, #680]	@ (8004de4 <OTM8009A_Init+0x3d4>)
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	f002 f99f 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8004b42:	4639      	mov	r1, r7
 8004b44:	2000      	movs	r0, #0
 8004b46:	f002 f99b 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8004b4a:	49a7      	ldr	r1, [pc, #668]	@ (8004de8 <OTM8009A_Init+0x3d8>)
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	f002 f997 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8004b52:	49a6      	ldr	r1, [pc, #664]	@ (8004dec <OTM8009A_Init+0x3dc>)
 8004b54:	2000      	movs	r0, #0
 8004b56:	f002 f993 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8004b5a:	49a5      	ldr	r1, [pc, #660]	@ (8004df0 <OTM8009A_Init+0x3e0>)
 8004b5c:	2002      	movs	r0, #2
 8004b5e:	f002 f98f 	bl	8006e80 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8004b62:	4629      	mov	r1, r5
 8004b64:	2000      	movs	r0, #0
 8004b66:	f002 f98b 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8004b6a:	49a2      	ldr	r1, [pc, #648]	@ (8004df4 <OTM8009A_Init+0x3e4>)
 8004b6c:	2006      	movs	r0, #6
 8004b6e:	f002 f987 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8004b72:	f8df a31c 	ldr.w	sl, [pc, #796]	@ 8004e90 <OTM8009A_Init+0x480>
 8004b76:	4651      	mov	r1, sl
 8004b78:	2000      	movs	r0, #0
 8004b7a:	f002 f981 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8004b7e:	499e      	ldr	r1, [pc, #632]	@ (8004df8 <OTM8009A_Init+0x3e8>)
 8004b80:	200e      	movs	r0, #14
 8004b82:	f002 f97d 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8004b86:	f8df 930c 	ldr.w	r9, [pc, #780]	@ 8004e94 <OTM8009A_Init+0x484>
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	f002 f977 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8004b92:	499a      	ldr	r1, [pc, #616]	@ (8004dfc <OTM8009A_Init+0x3ec>)
 8004b94:	200e      	movs	r0, #14
 8004b96:	f002 f973 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8004b9a:	f8df 82fc 	ldr.w	r8, [pc, #764]	@ 8004e98 <OTM8009A_Init+0x488>
 8004b9e:	4641      	mov	r1, r8
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	f002 f96d 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8004ba6:	4996      	ldr	r1, [pc, #600]	@ (8004e00 <OTM8009A_Init+0x3f0>)
 8004ba8:	200a      	movs	r0, #10
 8004baa:	f002 f969 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8004bae:	4f95      	ldr	r7, [pc, #596]	@ (8004e04 <OTM8009A_Init+0x3f4>)
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f002 f964 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8004bb8:	4993      	ldr	r1, [pc, #588]	@ (8004e08 <OTM8009A_Init+0x3f8>)
 8004bba:	2000      	movs	r0, #0
 8004bbc:	f002 f960 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f002 f95c 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8004bc8:	4990      	ldr	r1, [pc, #576]	@ (8004e0c <OTM8009A_Init+0x3fc>)
 8004bca:	200a      	movs	r0, #10
 8004bcc:	f002 f958 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8004bd0:	f8df b2c8 	ldr.w	fp, [pc, #712]	@ 8004e9c <OTM8009A_Init+0x48c>
 8004bd4:	4659      	mov	r1, fp
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f002 f952 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8004bdc:	498c      	ldr	r1, [pc, #560]	@ (8004e10 <OTM8009A_Init+0x400>)
 8004bde:	200f      	movs	r0, #15
 8004be0:	f002 f94e 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8004be4:	4651      	mov	r1, sl
 8004be6:	2000      	movs	r0, #0
 8004be8:	f002 f94a 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8004bec:	4989      	ldr	r1, [pc, #548]	@ (8004e14 <OTM8009A_Init+0x404>)
 8004bee:	200f      	movs	r0, #15
 8004bf0:	f002 f946 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f002 f942 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8004bfc:	4986      	ldr	r1, [pc, #536]	@ (8004e18 <OTM8009A_Init+0x408>)
 8004bfe:	200a      	movs	r0, #10
 8004c00:	f002 f93e 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8004c04:	4641      	mov	r1, r8
 8004c06:	2000      	movs	r0, #0
 8004c08:	f002 f93a 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8004c0c:	4983      	ldr	r1, [pc, #524]	@ (8004e1c <OTM8009A_Init+0x40c>)
 8004c0e:	200f      	movs	r0, #15
 8004c10:	f002 f936 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8004c14:	4639      	mov	r1, r7
 8004c16:	2000      	movs	r0, #0
 8004c18:	f002 f932 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8004c1c:	4980      	ldr	r1, [pc, #512]	@ (8004e20 <OTM8009A_Init+0x410>)
 8004c1e:	200f      	movs	r0, #15
 8004c20:	f002 f92e 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8004c24:	497f      	ldr	r1, [pc, #508]	@ (8004e24 <OTM8009A_Init+0x414>)
 8004c26:	2000      	movs	r0, #0
 8004c28:	f002 f92a 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8004c2c:	497e      	ldr	r1, [pc, #504]	@ (8004e28 <OTM8009A_Init+0x418>)
 8004c2e:	200a      	movs	r0, #10
 8004c30:	f002 f926 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8004c34:	497d      	ldr	r1, [pc, #500]	@ (8004e2c <OTM8009A_Init+0x41c>)
 8004c36:	2000      	movs	r0, #0
 8004c38:	f002 f922 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8004c3c:	497c      	ldr	r1, [pc, #496]	@ (8004e30 <OTM8009A_Init+0x420>)
 8004c3e:	200a      	movs	r0, #10
 8004c40:	f002 f91e 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8004c44:	4629      	mov	r1, r5
 8004c46:	2000      	movs	r0, #0
 8004c48:	f002 f91a 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8004c4c:	4979      	ldr	r1, [pc, #484]	@ (8004e34 <OTM8009A_Init+0x424>)
 8004c4e:	200a      	movs	r0, #10
 8004c50:	f002 f916 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8004c54:	4659      	mov	r1, fp
 8004c56:	2000      	movs	r0, #0
 8004c58:	f002 f912 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8004c5c:	4976      	ldr	r1, [pc, #472]	@ (8004e38 <OTM8009A_Init+0x428>)
 8004c5e:	200f      	movs	r0, #15
 8004c60:	f002 f90e 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8004c64:	4651      	mov	r1, sl
 8004c66:	2000      	movs	r0, #0
 8004c68:	f002 f90a 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8004c6c:	4973      	ldr	r1, [pc, #460]	@ (8004e3c <OTM8009A_Init+0x42c>)
 8004c6e:	200f      	movs	r0, #15
 8004c70:	f002 f906 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8004c74:	4649      	mov	r1, r9
 8004c76:	2000      	movs	r0, #0
 8004c78:	f002 f902 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8004c7c:	4970      	ldr	r1, [pc, #448]	@ (8004e40 <OTM8009A_Init+0x430>)
 8004c7e:	200a      	movs	r0, #10
 8004c80:	f002 f8fe 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8004c84:	4641      	mov	r1, r8
 8004c86:	2000      	movs	r0, #0
 8004c88:	f002 f8fa 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8004c8c:	496d      	ldr	r1, [pc, #436]	@ (8004e44 <OTM8009A_Init+0x434>)
 8004c8e:	200f      	movs	r0, #15
 8004c90:	f002 f8f6 	bl	8006e80 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8004c94:	4639      	mov	r1, r7
 8004c96:	2000      	movs	r0, #0
 8004c98:	f002 f8f2 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8004c9c:	496a      	ldr	r1, [pc, #424]	@ (8004e48 <OTM8009A_Init+0x438>)
 8004c9e:	200f      	movs	r0, #15
 8004ca0:	f002 f8ee 	bl	8006e80 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8004ca4:	4631      	mov	r1, r6
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f002 f8ea 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8004cac:	4967      	ldr	r1, [pc, #412]	@ (8004e4c <OTM8009A_Init+0x43c>)
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f002 f8e6 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8004cb4:	4966      	ldr	r1, [pc, #408]	@ (8004e50 <OTM8009A_Init+0x440>)
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f002 f8e2 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8004cbc:	4965      	ldr	r1, [pc, #404]	@ (8004e54 <OTM8009A_Init+0x444>)
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f002 f8de 	bl	8006e80 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8004cc4:	4964      	ldr	r1, [pc, #400]	@ (8004e58 <OTM8009A_Init+0x448>)
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	f002 f8da 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8004ccc:	4963      	ldr	r1, [pc, #396]	@ (8004e5c <OTM8009A_Init+0x44c>)
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f002 f8d6 	bl	8006e80 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	f002 f8d2 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8004cdc:	4960      	ldr	r1, [pc, #384]	@ (8004e60 <OTM8009A_Init+0x450>)
 8004cde:	2003      	movs	r0, #3
 8004ce0:	f002 f8ce 	bl	8006e80 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	f002 f8ca 	bl	8006e80 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004cec:	4621      	mov	r1, r4
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f002 f8c6 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8004cf4:	495b      	ldr	r1, [pc, #364]	@ (8004e64 <OTM8009A_Init+0x454>)
 8004cf6:	2010      	movs	r0, #16
 8004cf8:	f002 f8c2 	bl	8006e80 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	2000      	movs	r0, #0
 8004d00:	f002 f8be 	bl	8006e80 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8004d04:	4958      	ldr	r1, [pc, #352]	@ (8004e68 <OTM8009A_Init+0x458>)
 8004d06:	2010      	movs	r0, #16
 8004d08:	f002 f8ba 	bl	8006e80 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8004d0c:	4957      	ldr	r1, [pc, #348]	@ (8004e6c <OTM8009A_Init+0x45c>)
 8004d0e:	2000      	movs	r0, #0
 8004d10:	f002 f8b6 	bl	8006e80 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8004d14:	2078      	movs	r0, #120	@ 0x78
 8004d16:	f000 fda3 	bl	8005860 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8004d1a:	9b00      	ldr	r3, [sp, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80bf 	beq.w	8004ea0 <OTM8009A_Init+0x490>
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d103      	bne.n	8004d2e <OTM8009A_Init+0x31e>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8004d26:	4952      	ldr	r1, [pc, #328]	@ (8004e70 <OTM8009A_Init+0x460>)
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f002 f8a9 	bl	8006e80 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004d2e:	9b01      	ldr	r3, [sp, #4]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	f000 80ba 	beq.w	8004eaa <OTM8009A_Init+0x49a>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8004d36:	494f      	ldr	r1, [pc, #316]	@ (8004e74 <OTM8009A_Init+0x464>)
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f002 f8a1 	bl	8006e80 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8004d3e:	494e      	ldr	r1, [pc, #312]	@ (8004e78 <OTM8009A_Init+0x468>)
 8004d40:	2000      	movs	r0, #0
 8004d42:	f002 f89d 	bl	8006e80 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8004d46:	494d      	ldr	r1, [pc, #308]	@ (8004e7c <OTM8009A_Init+0x46c>)
 8004d48:	2000      	movs	r0, #0
 8004d4a:	f002 f899 	bl	8006e80 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8004d4e:	494c      	ldr	r1, [pc, #304]	@ (8004e80 <OTM8009A_Init+0x470>)
 8004d50:	2000      	movs	r0, #0
 8004d52:	f002 f895 	bl	8006e80 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8004d56:	494b      	ldr	r1, [pc, #300]	@ (8004e84 <OTM8009A_Init+0x474>)
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f002 f891 	bl	8006e80 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004d5e:	4906      	ldr	r1, [pc, #24]	@ (8004d78 <OTM8009A_Init+0x368>)
 8004d60:	2000      	movs	r0, #0
 8004d62:	f002 f88d 	bl	8006e80 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8004d66:	4948      	ldr	r1, [pc, #288]	@ (8004e88 <OTM8009A_Init+0x478>)
 8004d68:	2000      	movs	r0, #0
 8004d6a:	f002 f889 	bl	8006e80 <DSI_IO_WriteCmd>

  return 0;
}
 8004d6e:	2000      	movs	r0, #0
 8004d70:	b003      	add	sp, #12
 8004d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d76:	bf00      	nop
 8004d78:	0804c074 	.word	0x0804c074
 8004d7c:	0804c1bc 	.word	0x0804c1bc
 8004d80:	0804c070 	.word	0x0804c070
 8004d84:	0804c1b8 	.word	0x0804c1b8
 8004d88:	0804c06c 	.word	0x0804c06c
 8004d8c:	0804c068 	.word	0x0804c068
 8004d90:	0804c064 	.word	0x0804c064
 8004d94:	0804c060 	.word	0x0804c060
 8004d98:	0804c05c 	.word	0x0804c05c
 8004d9c:	0804c058 	.word	0x0804c058
 8004da0:	0804c050 	.word	0x0804c050
 8004da4:	0804c04c 	.word	0x0804c04c
 8004da8:	0804c048 	.word	0x0804c048
 8004dac:	0804c044 	.word	0x0804c044
 8004db0:	0804c040 	.word	0x0804c040
 8004db4:	0804c03c 	.word	0x0804c03c
 8004db8:	0804c038 	.word	0x0804c038
 8004dbc:	0804c034 	.word	0x0804c034
 8004dc0:	0804c030 	.word	0x0804c030
 8004dc4:	0804c02c 	.word	0x0804c02c
 8004dc8:	0804c18c 	.word	0x0804c18c
 8004dcc:	0804c028 	.word	0x0804c028
 8004dd0:	0804c024 	.word	0x0804c024
 8004dd4:	0804c020 	.word	0x0804c020
 8004dd8:	0804c01c 	.word	0x0804c01c
 8004ddc:	0804c018 	.word	0x0804c018
 8004de0:	0804c014 	.word	0x0804c014
 8004de4:	0804c010 	.word	0x0804c010
 8004de8:	0804c00c 	.word	0x0804c00c
 8004dec:	0804c008 	.word	0x0804c008
 8004df0:	0804c188 	.word	0x0804c188
 8004df4:	0804c180 	.word	0x0804c180
 8004df8:	0804c170 	.word	0x0804c170
 8004dfc:	0804c160 	.word	0x0804c160
 8004e00:	0804c154 	.word	0x0804c154
 8004e04:	0804bff8 	.word	0x0804bff8
 8004e08:	0804bfc0 	.word	0x0804bfc0
 8004e0c:	0804c148 	.word	0x0804c148
 8004e10:	0804c138 	.word	0x0804c138
 8004e14:	0804c128 	.word	0x0804c128
 8004e18:	0804c11c 	.word	0x0804c11c
 8004e1c:	0804c10c 	.word	0x0804c10c
 8004e20:	0804c0fc 	.word	0x0804c0fc
 8004e24:	0804bff0 	.word	0x0804bff0
 8004e28:	0804c0f0 	.word	0x0804c0f0
 8004e2c:	0804bfec 	.word	0x0804bfec
 8004e30:	0804c0e4 	.word	0x0804c0e4
 8004e34:	0804c0d8 	.word	0x0804c0d8
 8004e38:	0804c0c8 	.word	0x0804c0c8
 8004e3c:	0804c0b8 	.word	0x0804c0b8
 8004e40:	0804c0ac 	.word	0x0804c0ac
 8004e44:	0804c09c 	.word	0x0804c09c
 8004e48:	0804c08c 	.word	0x0804c08c
 8004e4c:	0804bfbc 	.word	0x0804bfbc
 8004e50:	0804bfb8 	.word	0x0804bfb8
 8004e54:	0804bfb4 	.word	0x0804bfb4
 8004e58:	0804bfb0 	.word	0x0804bfb0
 8004e5c:	0804bfac 	.word	0x0804bfac
 8004e60:	0804c088 	.word	0x0804c088
 8004e64:	0804c1a4 	.word	0x0804c1a4
 8004e68:	0804c190 	.word	0x0804c190
 8004e6c:	0804bfe8 	.word	0x0804bfe8
 8004e70:	0804bfe4 	.word	0x0804bfe4
 8004e74:	0804bfd8 	.word	0x0804bfd8
 8004e78:	0804bfd4 	.word	0x0804bfd4
 8004e7c:	0804bfd0 	.word	0x0804bfd0
 8004e80:	0804bfcc 	.word	0x0804bfcc
 8004e84:	0804bfc8 	.word	0x0804bfc8
 8004e88:	0804bfc4 	.word	0x0804bfc4
 8004e8c:	0804c054 	.word	0x0804c054
 8004e90:	0804c004 	.word	0x0804c004
 8004e94:	0804c000 	.word	0x0804c000
 8004e98:	0804bffc 	.word	0x0804bffc
 8004e9c:	0804bff4 	.word	0x0804bff4
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8004ea0:	4908      	ldr	r1, [pc, #32]	@ (8004ec4 <OTM8009A_Init+0x4b4>)
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f001 ffec 	bl	8006e80 <DSI_IO_WriteCmd>
    break;
 8004ea8:	e741      	b.n	8004d2e <OTM8009A_Init+0x31e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8004eaa:	4907      	ldr	r1, [pc, #28]	@ (8004ec8 <OTM8009A_Init+0x4b8>)
 8004eac:	2000      	movs	r0, #0
 8004eae:	f001 ffe7 	bl	8006e80 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8004eb2:	4906      	ldr	r1, [pc, #24]	@ (8004ecc <OTM8009A_Init+0x4bc>)
 8004eb4:	2004      	movs	r0, #4
 8004eb6:	f001 ffe3 	bl	8006e80 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8004eba:	4905      	ldr	r1, [pc, #20]	@ (8004ed0 <OTM8009A_Init+0x4c0>)
 8004ebc:	2004      	movs	r0, #4
 8004ebe:	f001 ffdf 	bl	8006e80 <DSI_IO_WriteCmd>
 8004ec2:	e738      	b.n	8004d36 <OTM8009A_Init+0x326>
 8004ec4:	0804bfe0 	.word	0x0804bfe0
 8004ec8:	0804bfdc 	.word	0x0804bfdc
 8004ecc:	0804c080 	.word	0x0804c080
 8004ed0:	0804c078 	.word	0x0804c078

08004ed4 <OTM8009A_ReadID>:
/**
  * @brief  Read the component ID.
  * @retval Component ID
  */
uint16_t OTM8009A_ReadID(void)
{
 8004ed4:	b500      	push	{lr}
 8004ed6:	b083      	sub	sp, #12
  uint8_t pData=0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f88d 3007 	strb.w	r3, [sp, #7]
  DSI_IO_ReadCmd(OTM8009A_CMD_ID1, &pData, 1);
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f10d 0107 	add.w	r1, sp, #7
 8004ee4:	20da      	movs	r0, #218	@ 0xda
 8004ee6:	f001 ffe7 	bl	8006eb8 <DSI_IO_ReadCmd>
  return pData;
}
 8004eea:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004eee:	b003      	add	sp, #12
 8004ef0:	f85d fb04 	ldr.w	pc, [sp], #4

08004ef4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004ef4:	b510      	push	{r4, lr}
 8004ef6:	b090      	sub	sp, #64	@ 0x40

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004ef8:	2400      	movs	r4, #0
 8004efa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004efc:	940c      	str	r4, [sp, #48]	@ 0x30
 8004efe:	940d      	str	r4, [sp, #52]	@ 0x34
 8004f00:	940e      	str	r4, [sp, #56]	@ 0x38
 8004f02:	940f      	str	r4, [sp, #60]	@ 0x3c
  RTC_DateTypeDef sDate = {0};
 8004f04:	940a      	str	r4, [sp, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8004f06:	2228      	movs	r2, #40	@ 0x28
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4668      	mov	r0, sp
 8004f0c:	f00c f896 	bl	801103c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004f10:	4830      	ldr	r0, [pc, #192]	@ (8004fd4 <MX_RTC_Init+0xe0>)
 8004f12:	4b31      	ldr	r3, [pc, #196]	@ (8004fd8 <MX_RTC_Init+0xe4>)
 8004f14:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004f16:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004f18:	237f      	movs	r3, #127	@ 0x7f
 8004f1a:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8004f1c:	23ff      	movs	r3, #255	@ 0xff
 8004f1e:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_ALARMA;
 8004f20:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004f24:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004f26:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004f28:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004f2a:	f006 f91b 	bl	800b164 <HAL_RTC_Init>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	d141      	bne.n	8004fb6 <MX_RTC_Init+0xc2>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8004f38:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8004f3c:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004f40:	930e      	str	r3, [sp, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004f42:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004f44:	2201      	movs	r2, #1
 8004f46:	a90b      	add	r1, sp, #44	@ 0x2c
 8004f48:	4822      	ldr	r0, [pc, #136]	@ (8004fd4 <MX_RTC_Init+0xe0>)
 8004f4a:	f006 f967 	bl	800b21c <HAL_RTC_SetTime>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d134      	bne.n	8004fbc <MX_RTC_Init+0xc8>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004f52:	2201      	movs	r2, #1
 8004f54:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8004f58:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  sDate.Date = 0x1;
 8004f5c:	f88d 202a 	strb.w	r2, [sp, #42]	@ 0x2a
  sDate.Year = 0x0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004f66:	a90a      	add	r1, sp, #40	@ 0x28
 8004f68:	481a      	ldr	r0, [pc, #104]	@ (8004fd4 <MX_RTC_Init+0xe0>)
 8004f6a:	f006 f9b7 	bl	800b2dc <HAL_RTC_SetDate>
 8004f6e:	bb40      	cbnz	r0, 8004fc2 <MX_RTC_Init+0xce>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8004f76:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8004f7a:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8004f7e:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004f80:	9303      	str	r3, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004f82:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004f84:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004f86:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004f88:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f88d 2020 	strb.w	r2, [sp, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8004f90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f94:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004f96:	4669      	mov	r1, sp
 8004f98:	480e      	ldr	r0, [pc, #56]	@ (8004fd4 <MX_RTC_Init+0xe0>)
 8004f9a:	f006 f9ed 	bl	800b378 <HAL_RTC_SetAlarm>
 8004f9e:	b998      	cbnz	r0, 8004fc8 <MX_RTC_Init+0xd4>
    Error_Handler();
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8004fa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fa4:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	4669      	mov	r1, sp
 8004faa:	480a      	ldr	r0, [pc, #40]	@ (8004fd4 <MX_RTC_Init+0xe0>)
 8004fac:	f006 f9e4 	bl	800b378 <HAL_RTC_SetAlarm>
 8004fb0:	b968      	cbnz	r0, 8004fce <MX_RTC_Init+0xda>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004fb2:	b010      	add	sp, #64	@ 0x40
 8004fb4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004fb6:	f7ff f99d 	bl	80042f4 <Error_Handler>
 8004fba:	e7ba      	b.n	8004f32 <MX_RTC_Init+0x3e>
    Error_Handler();
 8004fbc:	f7ff f99a 	bl	80042f4 <Error_Handler>
 8004fc0:	e7c7      	b.n	8004f52 <MX_RTC_Init+0x5e>
    Error_Handler();
 8004fc2:	f7ff f997 	bl	80042f4 <Error_Handler>
 8004fc6:	e7d3      	b.n	8004f70 <MX_RTC_Init+0x7c>
    Error_Handler();
 8004fc8:	f7ff f994 	bl	80042f4 <Error_Handler>
 8004fcc:	e7e8      	b.n	8004fa0 <MX_RTC_Init+0xac>
    Error_Handler();
 8004fce:	f7ff f991 	bl	80042f4 <Error_Handler>
}
 8004fd2:	e7ee      	b.n	8004fb2 <MX_RTC_Init+0xbe>
 8004fd4:	2001dda8 	.word	0x2001dda8
 8004fd8:	40002800 	.word	0x40002800

08004fdc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	b0aa      	sub	sp, #168	@ 0xa8
 8004fe0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	9125      	str	r1, [sp, #148]	@ 0x94
 8004fe6:	9126      	str	r1, [sp, #152]	@ 0x98
 8004fe8:	9127      	str	r1, [sp, #156]	@ 0x9c
 8004fea:	9128      	str	r1, [sp, #160]	@ 0xa0
 8004fec:	9129      	str	r1, [sp, #164]	@ 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fee:	2290      	movs	r2, #144	@ 0x90
 8004ff0:	a801      	add	r0, sp, #4
 8004ff2:	f00c f823 	bl	801103c <memset>
  if(rtcHandle->Instance==RTC)
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	4b15      	ldr	r3, [pc, #84]	@ (8005050 <HAL_RTC_MspInit+0x74>)
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d001      	beq.n	8005002 <HAL_RTC_MspInit+0x26>

  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004ffe:	b02a      	add	sp, #168	@ 0xa8
 8005000:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005002:	2320      	movs	r3, #32
 8005004:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005006:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800500a:	930d      	str	r3, [sp, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800500c:	a801      	add	r0, sp, #4
 800500e:	f005 fba1 	bl	800a754 <HAL_RCCEx_PeriphCLKConfig>
 8005012:	b9d0      	cbnz	r0, 800504a <HAL_RTC_MspInit+0x6e>
    __HAL_RCC_RTC_ENABLE();
 8005014:	4b0f      	ldr	r3, [pc, #60]	@ (8005054 <HAL_RTC_MspInit+0x78>)
 8005016:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005018:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800501c:	671a      	str	r2, [r3, #112]	@ 0x70
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800501e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005020:	f042 0204 	orr.w	r2, r2, #4
 8005024:	631a      	str	r2, [r3, #48]	@ 0x30
 8005026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005034:	9325      	str	r3, [sp, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005036:	2302      	movs	r3, #2
 8005038:	9326      	str	r3, [sp, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503a:	2300      	movs	r3, #0
 800503c:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800503e:	9328      	str	r3, [sp, #160]	@ 0xa0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005040:	a925      	add	r1, sp, #148	@ 0x94
 8005042:	4805      	ldr	r0, [pc, #20]	@ (8005058 <HAL_RTC_MspInit+0x7c>)
 8005044:	f004 f898 	bl	8009178 <HAL_GPIO_Init>
}
 8005048:	e7d9      	b.n	8004ffe <HAL_RTC_MspInit+0x22>
      Error_Handler();
 800504a:	f7ff f953 	bl	80042f4 <Error_Handler>
 800504e:	e7e1      	b.n	8005014 <HAL_RTC_MspInit+0x38>
 8005050:	40002800 	.word	0x40002800
 8005054:	40023800 	.word	0x40023800
 8005058:	40020800 	.word	0x40020800

0800505c <Draw_Play_Button>:
    // Rectangle central des logs
    BSP_LCD_DrawRect(20, START_Y + BUTTON_WIDTH_HEIGHT + 50, BSP_LCD_GetXSize() - 40, BSP_LCD_GetYSize() / 2 - 60);
}

void Draw_Play_Button(void)
{
 800505c:	b500      	push	{lr}
 800505e:	b083      	sub	sp, #12
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005064:	f001 fe24 	bl	8006cb0 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(START_X + 20, START_Y + 20, BUTTON_WIDTH_HEIGHT - 40, BUTTON_WIDTH_HEIGHT - 40);
 8005068:	2364      	movs	r3, #100	@ 0x64
 800506a:	461a      	mov	r2, r3
 800506c:	213c      	movs	r1, #60	@ 0x3c
 800506e:	4608      	mov	r0, r1
 8005070:	f001 feb8 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005074:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8005078:	f001 fe1a 	bl	8006cb0 <BSP_LCD_SetTextColor>
    FillTriangle(START_X + 43, START_X + 43, START_X + BUTTON_WIDTH_HEIGHT - 40 - 3, START_Y + 43, START_Y + BUTTON_WIDTH_HEIGHT - 43, START_Y + BUTTON_WIDTH_HEIGHT / 2);
 800507c:	236e      	movs	r3, #110	@ 0x6e
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	2289      	movs	r2, #137	@ 0x89
 8005082:	9200      	str	r2, [sp, #0]
 8005084:	2353      	movs	r3, #83	@ 0x53
 8005086:	4619      	mov	r1, r3
 8005088:	4618      	mov	r0, r3
 800508a:	f002 fb0b 	bl	80076a4 <FillTriangle>
}
 800508e:	b003      	add	sp, #12
 8005090:	f85d fb04 	ldr.w	pc, [sp], #4

08005094 <Draw_Output_Button>:
    BSP_LCD_FillRect(START_X + 43 + 20 + 13, START_Y + 43, 20, BUTTON_WIDTH_HEIGHT - 86);
}
#define OFFSET_LEFT -3 // Définir un décalage vers la gauche

void Draw_Output_Button(void)
{
 8005094:	b508      	push	{r3, lr}
    // Définir la couleur du texte en blanc et dessiner un rectangle de base pour le bouton
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005096:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800509a:	f001 fe09 	bl	8006cb0 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(START_X + 20 - OFFSET_LEFT, START_Y + 20, BUTTON_WIDTH_HEIGHT - 40, BUTTON_WIDTH_HEIGHT - 40);
 800509e:	2364      	movs	r3, #100	@ 0x64
 80050a0:	461a      	mov	r2, r3
 80050a2:	213c      	movs	r1, #60	@ 0x3c
 80050a4:	203f      	movs	r0, #63	@ 0x3f
 80050a6:	f001 fe9d 	bl	8006de4 <BSP_LCD_DrawRect>

    // Dessiner le cercle principal plus petit et plus épais
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80050aa:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80050ae:	f001 fdff 	bl	8006cb0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(START_X + SPACE_BETWEEN_BUTTONS + BUTTON_WIDTH_HEIGHT / 2 - OFFSET_LEFT, START_Y + BUTTON_WIDTH_HEIGHT / 2, BUTTON_WIDTH_HEIGHT / 2 - 25);
 80050b2:	222d      	movs	r2, #45	@ 0x2d
 80050b4:	216e      	movs	r1, #110	@ 0x6e
 80050b6:	f240 102f 	movw	r0, #303	@ 0x12f
 80050ba:	f002 fa85 	bl	80075c8 <BSP_LCD_FillCircle>

    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80050be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050c2:	f001 fdf5 	bl	8006cb0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(START_X + SPACE_BETWEEN_BUTTONS + BUTTON_WIDTH_HEIGHT / 2 - OFFSET_LEFT, START_Y + BUTTON_WIDTH_HEIGHT / 2, BUTTON_WIDTH_HEIGHT / 2 - 35);
 80050c6:	2223      	movs	r2, #35	@ 0x23
 80050c8:	216e      	movs	r1, #110	@ 0x6e
 80050ca:	f240 102f 	movw	r0, #303	@ 0x12f
 80050ce:	f002 fa7b 	bl	80075c8 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80050d2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80050d6:	f001 fdeb 	bl	8006cb0 <BSP_LCD_SetTextColor>

    // Masquer la moitié inférieure du cercle avec un rectangle blanc
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80050da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050de:	f001 fde7 	bl	8006cb0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(START_X + SPACE_BETWEEN_BUTTONS - OFFSET_LEFT + 5, START_Y + BUTTON_WIDTH_HEIGHT / 2, BUTTON_WIDTH_HEIGHT - 20, BUTTON_WIDTH_HEIGHT / 2);
 80050e2:	2346      	movs	r3, #70	@ 0x46
 80050e4:	2278      	movs	r2, #120	@ 0x78
 80050e6:	216e      	movs	r1, #110	@ 0x6e
 80050e8:	20ee      	movs	r0, #238	@ 0xee
 80050ea:	f001 fe95 	bl	8006e18 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80050ee:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80050f2:	f001 fddd 	bl	8006cb0 <BSP_LCD_SetTextColor>

    // Dessiner les coussinets avec des rectangles
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80050f6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80050fa:	f001 fdd9 	bl	8006cb0 <BSP_LCD_SetTextColor>

    BSP_LCD_FillRect(START_X + SPACE_BETWEEN_BUTTONS + 20 - OFFSET_LEFT, START_Y + BUTTON_WIDTH_HEIGHT / 2 - 12, 15, 30);
 80050fe:	231e      	movs	r3, #30
 8005100:	220f      	movs	r2, #15
 8005102:	2162      	movs	r1, #98	@ 0x62
 8005104:	20fd      	movs	r0, #253	@ 0xfd
 8005106:	f001 fe87 	bl	8006e18 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(START_X + SPACE_BETWEEN_BUTTONS + BUTTON_WIDTH_HEIGHT - 20 - OFFSET_LEFT - 15, START_Y + BUTTON_WIDTH_HEIGHT / 2 - 12, 15, 30);
 800510a:	231e      	movs	r3, #30
 800510c:	220f      	movs	r2, #15
 800510e:	2162      	movs	r1, #98	@ 0x62
 8005110:	f44f 70a9 	mov.w	r0, #338	@ 0x152
 8005114:	f001 fe80 	bl	8006e18 <BSP_LCD_FillRect>
}
 8005118:	bd08      	pop	{r3, pc}

0800511a <Draw_SD_Button>:

void Draw_SD_Button(void)
{
 800511a:	b500      	push	{lr}
 800511c:	b083      	sub	sp, #12
    // Définir la couleur de remplissage
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800511e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8005122:	f001 fdc5 	bl	8006cb0 <BSP_LCD_SetTextColor>

    // Dessiner un rectangle plein pour le troisième bouton
    BSP_LCD_FillRect(START_X + SPACE_BETWEEN_BUTTONS * 2 + 40, START_Y + 28, 65, 90);
 8005126:	235a      	movs	r3, #90	@ 0x5a
 8005128:	2241      	movs	r2, #65	@ 0x41
 800512a:	2144      	movs	r1, #68	@ 0x44
 800512c:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8005130:	f001 fe72 	bl	8006e18 <BSP_LCD_FillRect>

    // Dessiner un rectangle plein pour le troisième bouton
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005138:	f001 fdba 	bl	8006cb0 <BSP_LCD_SetTextColor>
    FillTriangle(START_X + SPACE_BETWEEN_BUTTONS * 2 + 110, START_X + SPACE_BETWEEN_BUTTONS * 2 + 110, START_X + SPACE_BETWEEN_BUTTONS * 2 + 80, START_Y + 20, START_Y + 50, START_Y + 20);
 800513c:	233c      	movs	r3, #60	@ 0x3c
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	225a      	movs	r2, #90	@ 0x5a
 8005142:	9200      	str	r2, [sp, #0]
 8005144:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005148:	f240 2112 	movw	r1, #530	@ 0x212
 800514c:	4608      	mov	r0, r1
 800514e:	f002 faa9 	bl	80076a4 <FillTriangle>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005152:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8005156:	f001 fdab 	bl	8006cb0 <BSP_LCD_SetTextColor>
}
 800515a:	b003      	add	sp, #12
 800515c:	f85d fb04 	ldr.w	pc, [sp], #4

08005160 <Draw_AI_Button>:

void Draw_AI_Button(void)
{
 8005160:	b508      	push	{r3, lr}
    // Ajuster les coordonnées pour centrer le logo
    int center_x = x + BUTTON_WIDTH_HEIGHT / 2;
    int center_y = y + BUTTON_WIDTH_HEIGHT / 2;

    // Définir la couleur de remplissage
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005162:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8005166:	f001 fda3 	bl	8006cb0 <BSP_LCD_SetTextColor>
    // Agrandir les dimensions des rectangles
    int rect_width = 10;   // Largeur des bras de la croix
    int rect_height = 100; // Hauteur des bras de la croix

    // Dessiner la croix avec des rectangles pleins
    BSP_LCD_FillRect(center_x - rect_width / 2 - 10, center_y - rect_height / 2, rect_width, rect_height); // Bras vertical
 800516a:	2364      	movs	r3, #100	@ 0x64
 800516c:	220a      	movs	r2, #10
 800516e:	213c      	movs	r1, #60	@ 0x3c
 8005170:	f240 2099 	movw	r0, #665	@ 0x299
 8005174:	f001 fe50 	bl	8006e18 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(center_x - rect_width / 2 + 10, center_y - rect_height / 2, rect_width, rect_height); // Bras vertical
 8005178:	2364      	movs	r3, #100	@ 0x64
 800517a:	220a      	movs	r2, #10
 800517c:	213c      	movs	r1, #60	@ 0x3c
 800517e:	f240 20ad 	movw	r0, #685	@ 0x2ad
 8005182:	f001 fe49 	bl	8006e18 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(center_x - rect_height / 2, center_y - rect_width / 2 - 10, rect_height, rect_width); // Bras horizontal
 8005186:	230a      	movs	r3, #10
 8005188:	2264      	movs	r2, #100	@ 0x64
 800518a:	215f      	movs	r1, #95	@ 0x5f
 800518c:	f240 2076 	movw	r0, #630	@ 0x276
 8005190:	f001 fe42 	bl	8006e18 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(center_x - rect_height / 2, center_y - rect_width / 2 + 10, rect_height, rect_width);
 8005194:	230a      	movs	r3, #10
 8005196:	2264      	movs	r2, #100	@ 0x64
 8005198:	2173      	movs	r1, #115	@ 0x73
 800519a:	f240 2076 	movw	r0, #630	@ 0x276
 800519e:	f001 fe3b 	bl	8006e18 <BSP_LCD_FillRect>

    BSP_LCD_FillRect(center_x - rect_height / 2, center_y - rect_width / 2 + 10, rect_width, 25);                    // Bras horizontal
 80051a2:	2319      	movs	r3, #25
 80051a4:	220a      	movs	r2, #10
 80051a6:	2173      	movs	r1, #115	@ 0x73
 80051a8:	f240 2076 	movw	r0, #630	@ 0x276
 80051ac:	f001 fe34 	bl	8006e18 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(center_x - rect_height / 2, center_y - rect_width / 2 - 25, rect_width, 25);                    // Bras horizontal
 80051b0:	2319      	movs	r3, #25
 80051b2:	220a      	movs	r2, #10
 80051b4:	2150      	movs	r1, #80	@ 0x50
 80051b6:	f240 2076 	movw	r0, #630	@ 0x276
 80051ba:	f001 fe2d 	bl	8006e18 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(center_x - rect_height / 2 + rect_height - 10, center_y - rect_width / 2 - 25, rect_width, 25); // Bras horizontal
 80051be:	2319      	movs	r3, #25
 80051c0:	220a      	movs	r2, #10
 80051c2:	2150      	movs	r1, #80	@ 0x50
 80051c4:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 80051c8:	f001 fe26 	bl	8006e18 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(center_x - rect_height / 2 + rect_height - 10, center_y - rect_width / 2 + 10, rect_width, 25);
 80051cc:	2319      	movs	r3, #25
 80051ce:	220a      	movs	r2, #10
 80051d0:	2173      	movs	r1, #115	@ 0x73
 80051d2:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 80051d6:	f001 fe1f 	bl	8006e18 <BSP_LCD_FillRect>

    BSP_LCD_FillRect(center_x - rect_width / 2 + 10, center_y - rect_height / 2, 25, rect_width);                    // Bras vertical
 80051da:	230a      	movs	r3, #10
 80051dc:	2219      	movs	r2, #25
 80051de:	213c      	movs	r1, #60	@ 0x3c
 80051e0:	f240 20ad 	movw	r0, #685	@ 0x2ad
 80051e4:	f001 fe18 	bl	8006e18 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(center_x - rect_width / 2 - 25, center_y - rect_height / 2, 25, rect_width);                    // Bras vertical
 80051e8:	230a      	movs	r3, #10
 80051ea:	2219      	movs	r2, #25
 80051ec:	213c      	movs	r1, #60	@ 0x3c
 80051ee:	f240 208a 	movw	r0, #650	@ 0x28a
 80051f2:	f001 fe11 	bl	8006e18 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(center_x - rect_width / 2 - 25, center_y - rect_height / 2 + rect_height - 10, 25, rect_width); // Bras vertical
 80051f6:	230a      	movs	r3, #10
 80051f8:	2219      	movs	r2, #25
 80051fa:	2196      	movs	r1, #150	@ 0x96
 80051fc:	f240 208a 	movw	r0, #650	@ 0x28a
 8005200:	f001 fe0a 	bl	8006e18 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(center_x - rect_width / 2 + 10, center_y - rect_height / 2 + rect_height - 10, 25, rect_width);
 8005204:	230a      	movs	r3, #10
 8005206:	2219      	movs	r2, #25
 8005208:	2196      	movs	r1, #150	@ 0x96
 800520a:	f240 20ad 	movw	r0, #685	@ 0x2ad
 800520e:	f001 fe03 	bl	8006e18 <BSP_LCD_FillRect>

    // Ajouter un carré plein au milieu de la croix
    int square_size = 60; // Taille du carré central
    BSP_LCD_FillRect(center_x - square_size / 2, center_y - square_size / 2, square_size, square_size);
 8005212:	233c      	movs	r3, #60	@ 0x3c
 8005214:	461a      	mov	r2, r3
 8005216:	2150      	movs	r1, #80	@ 0x50
 8005218:	f240 208a 	movw	r0, #650	@ 0x28a
 800521c:	f001 fdfc 	bl	8006e18 <BSP_LCD_FillRect>
}
 8005220:	bd08      	pop	{r3, pc}
	...

08005224 <print_Menu_Interface>:
{
 8005224:	b570      	push	{r4, r5, r6, lr}
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005226:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800522a:	f001 fd69 	bl	8006d00 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800522e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8005232:	f001 fd3d 	bl	8006cb0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8005236:	4e71      	ldr	r6, [pc, #452]	@ (80053fc <print_Menu_Interface+0x1d8>)
 8005238:	4630      	mov	r0, r6
 800523a:	f001 fd53 	bl	8006ce4 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800523e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005242:	f001 fd41 	bl	8006cc8 <BSP_LCD_SetBackColor>
    BSP_LCD_DrawRect(START_X, START_Y, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 8005246:	238c      	movs	r3, #140	@ 0x8c
 8005248:	461a      	mov	r2, r3
 800524a:	2128      	movs	r1, #40	@ 0x28
 800524c:	4608      	mov	r0, r1
 800524e:	f001 fdc9 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DrawRect(START_X + 1, START_Y + 1, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 8005252:	238c      	movs	r3, #140	@ 0x8c
 8005254:	461a      	mov	r2, r3
 8005256:	2129      	movs	r1, #41	@ 0x29
 8005258:	4608      	mov	r0, r1
 800525a:	f001 fdc3 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DrawRect(START_X + 2, START_Y + 2, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 800525e:	238c      	movs	r3, #140	@ 0x8c
 8005260:	461a      	mov	r2, r3
 8005262:	212a      	movs	r1, #42	@ 0x2a
 8005264:	4608      	mov	r0, r1
 8005266:	f001 fdbd 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DrawRect(START_X + 3, START_Y + 3, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 800526a:	238c      	movs	r3, #140	@ 0x8c
 800526c:	461a      	mov	r2, r3
 800526e:	212b      	movs	r1, #43	@ 0x2b
 8005270:	4608      	mov	r0, r1
 8005272:	f001 fdb7 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(START_X - 15, START_Y + BUTTON_WIDTH_HEIGHT + 20, (uint8_t *)"Play/Pause", LEFT_MODE);
 8005276:	2303      	movs	r3, #3
 8005278:	4a61      	ldr	r2, [pc, #388]	@ (8005400 <print_Menu_Interface+0x1dc>)
 800527a:	21c8      	movs	r1, #200	@ 0xc8
 800527c:	2019      	movs	r0, #25
 800527e:	f002 f827 	bl	80072d0 <BSP_LCD_DisplayStringAt>
    Draw_Play_Button();
 8005282:	f7ff feeb 	bl	800505c <Draw_Play_Button>
    BSP_LCD_DrawRect(START_X + SPACE_BETWEEN_BUTTONS, START_Y, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 8005286:	238c      	movs	r3, #140	@ 0x8c
 8005288:	461a      	mov	r2, r3
 800528a:	2128      	movs	r1, #40	@ 0x28
 800528c:	20e6      	movs	r0, #230	@ 0xe6
 800528e:	f001 fda9 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DrawRect(START_X + 1 + SPACE_BETWEEN_BUTTONS, START_Y + 1, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 8005292:	238c      	movs	r3, #140	@ 0x8c
 8005294:	461a      	mov	r2, r3
 8005296:	2129      	movs	r1, #41	@ 0x29
 8005298:	20e7      	movs	r0, #231	@ 0xe7
 800529a:	f001 fda3 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DrawRect(START_X + 2 + SPACE_BETWEEN_BUTTONS, START_Y + 2, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 800529e:	238c      	movs	r3, #140	@ 0x8c
 80052a0:	461a      	mov	r2, r3
 80052a2:	212a      	movs	r1, #42	@ 0x2a
 80052a4:	20e8      	movs	r0, #232	@ 0xe8
 80052a6:	f001 fd9d 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DrawRect(START_X + 3 + SPACE_BETWEEN_BUTTONS, START_Y + 3, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 80052aa:	238c      	movs	r3, #140	@ 0x8c
 80052ac:	461a      	mov	r2, r3
 80052ae:	212b      	movs	r1, #43	@ 0x2b
 80052b0:	20e9      	movs	r0, #233	@ 0xe9
 80052b2:	f001 fd97 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(START_X + SPACE_BETWEEN_BUTTONS - 2, START_Y + BUTTON_WIDTH_HEIGHT + 20, (uint8_t *)"Audio Out", LEFT_MODE);
 80052b6:	2303      	movs	r3, #3
 80052b8:	4a52      	ldr	r2, [pc, #328]	@ (8005404 <print_Menu_Interface+0x1e0>)
 80052ba:	21c8      	movs	r1, #200	@ 0xc8
 80052bc:	20e4      	movs	r0, #228	@ 0xe4
 80052be:	f002 f807 	bl	80072d0 <BSP_LCD_DisplayStringAt>
    Draw_Output_Button();
 80052c2:	f7ff fee7 	bl	8005094 <Draw_Output_Button>
    BSP_LCD_DrawRect(START_X + SPACE_BETWEEN_BUTTONS * 2, START_Y, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 80052c6:	238c      	movs	r3, #140	@ 0x8c
 80052c8:	461a      	mov	r2, r3
 80052ca:	2128      	movs	r1, #40	@ 0x28
 80052cc:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 80052d0:	f001 fd88 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DrawRect(START_X + 1 + SPACE_BETWEEN_BUTTONS * 2, START_Y + 1, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 80052d4:	238c      	movs	r3, #140	@ 0x8c
 80052d6:	461a      	mov	r2, r3
 80052d8:	2129      	movs	r1, #41	@ 0x29
 80052da:	f240 10a5 	movw	r0, #421	@ 0x1a5
 80052de:	f001 fd81 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DrawRect(START_X + 2 + SPACE_BETWEEN_BUTTONS * 2, START_Y + 2, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 80052e2:	238c      	movs	r3, #140	@ 0x8c
 80052e4:	461a      	mov	r2, r3
 80052e6:	212a      	movs	r1, #42	@ 0x2a
 80052e8:	f44f 70d3 	mov.w	r0, #422	@ 0x1a6
 80052ec:	f001 fd7a 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DrawRect(START_X + 3 + SPACE_BETWEEN_BUTTONS * 2, START_Y + 3, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 80052f0:	238c      	movs	r3, #140	@ 0x8c
 80052f2:	461a      	mov	r2, r3
 80052f4:	212b      	movs	r1, #43	@ 0x2b
 80052f6:	f240 10a7 	movw	r0, #423	@ 0x1a7
 80052fa:	f001 fd73 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(START_X + SPACE_BETWEEN_BUTTONS * 2 + 20, START_Y + BUTTON_WIDTH_HEIGHT + 20, (uint8_t *)"Record", LEFT_MODE);
 80052fe:	2303      	movs	r3, #3
 8005300:	4a41      	ldr	r2, [pc, #260]	@ (8005408 <print_Menu_Interface+0x1e4>)
 8005302:	21c8      	movs	r1, #200	@ 0xc8
 8005304:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8005308:	f001 ffe2 	bl	80072d0 <BSP_LCD_DisplayStringAt>
    Draw_SD_Button();
 800530c:	f7ff ff05 	bl	800511a <Draw_SD_Button>
    BSP_LCD_DrawRect(START_X + SPACE_BETWEEN_BUTTONS * 3, START_Y, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 8005310:	238c      	movs	r3, #140	@ 0x8c
 8005312:	461a      	mov	r2, r3
 8005314:	2128      	movs	r1, #40	@ 0x28
 8005316:	f240 2062 	movw	r0, #610	@ 0x262
 800531a:	f001 fd63 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DrawRect(START_X + 1 + SPACE_BETWEEN_BUTTONS * 3, START_Y + 1, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 800531e:	238c      	movs	r3, #140	@ 0x8c
 8005320:	461a      	mov	r2, r3
 8005322:	2129      	movs	r1, #41	@ 0x29
 8005324:	f240 2063 	movw	r0, #611	@ 0x263
 8005328:	f001 fd5c 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DrawRect(START_X + 2 + SPACE_BETWEEN_BUTTONS * 3, START_Y + 2, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 800532c:	238c      	movs	r3, #140	@ 0x8c
 800532e:	461a      	mov	r2, r3
 8005330:	212a      	movs	r1, #42	@ 0x2a
 8005332:	f44f 7019 	mov.w	r0, #612	@ 0x264
 8005336:	f001 fd55 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DrawRect(START_X + 3 + SPACE_BETWEEN_BUTTONS * 3, START_Y + 3, BUTTON_WIDTH_HEIGHT, BUTTON_WIDTH_HEIGHT);
 800533a:	238c      	movs	r3, #140	@ 0x8c
 800533c:	461a      	mov	r2, r3
 800533e:	212b      	movs	r1, #43	@ 0x2b
 8005340:	f240 2065 	movw	r0, #613	@ 0x265
 8005344:	f001 fd4e 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(START_X + SPACE_BETWEEN_BUTTONS * 3 + 60, START_Y + BUTTON_WIDTH_HEIGHT + 20, (uint8_t *)"AI", LEFT_MODE);
 8005348:	2303      	movs	r3, #3
 800534a:	4a30      	ldr	r2, [pc, #192]	@ (800540c <print_Menu_Interface+0x1e8>)
 800534c:	21c8      	movs	r1, #200	@ 0xc8
 800534e:	f240 209e 	movw	r0, #670	@ 0x29e
 8005352:	f001 ffbd 	bl	80072d0 <BSP_LCD_DisplayStringAt>
    Draw_AI_Button();
 8005356:	f7ff ff03 	bl	8005160 <Draw_AI_Button>
    BSP_LCD_DrawRect(20, BSP_LCD_GetYSize() - 40, BSP_LCD_GetXSize() / 2 - 40, 20);
 800535a:	f001 fc63 	bl	8006c24 <BSP_LCD_GetYSize>
 800535e:	4604      	mov	r4, r0
 8005360:	f001 fc5a 	bl	8006c18 <BSP_LCD_GetXSize>
 8005364:	0842      	lsrs	r2, r0, #1
 8005366:	3a28      	subs	r2, #40	@ 0x28
 8005368:	f1a4 0128 	sub.w	r1, r4, #40	@ 0x28
 800536c:	2314      	movs	r3, #20
 800536e:	b292      	uxth	r2, r2
 8005370:	b289      	uxth	r1, r1
 8005372:	4618      	mov	r0, r3
 8005374:	f001 fd36 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_SetFont(&Font20);
 8005378:	4825      	ldr	r0, [pc, #148]	@ (8005410 <print_Menu_Interface+0x1ec>)
 800537a:	f001 fcb3 	bl	8006ce4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize() - 60, (uint8_t *)"Luminosite", LEFT_MODE);
 800537e:	f001 fc51 	bl	8006c24 <BSP_LCD_GetYSize>
 8005382:	f1a0 013c 	sub.w	r1, r0, #60	@ 0x3c
 8005386:	2303      	movs	r3, #3
 8005388:	4a22      	ldr	r2, [pc, #136]	@ (8005414 <print_Menu_Interface+0x1f0>)
 800538a:	b289      	uxth	r1, r1
 800538c:	2014      	movs	r0, #20
 800538e:	f001 ff9f 	bl	80072d0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DrawRect(BSP_LCD_GetXSize() / 2 + 20, BSP_LCD_GetYSize() - 40, BSP_LCD_GetXSize() / 2 - 40, 20);
 8005392:	f001 fc41 	bl	8006c18 <BSP_LCD_GetXSize>
 8005396:	0844      	lsrs	r4, r0, #1
 8005398:	f001 fc44 	bl	8006c24 <BSP_LCD_GetYSize>
 800539c:	4605      	mov	r5, r0
 800539e:	f001 fc3b 	bl	8006c18 <BSP_LCD_GetXSize>
 80053a2:	0842      	lsrs	r2, r0, #1
 80053a4:	3a28      	subs	r2, #40	@ 0x28
 80053a6:	f1a5 0128 	sub.w	r1, r5, #40	@ 0x28
 80053aa:	3414      	adds	r4, #20
 80053ac:	2314      	movs	r3, #20
 80053ae:	b292      	uxth	r2, r2
 80053b0:	b289      	uxth	r1, r1
 80053b2:	b2a0      	uxth	r0, r4
 80053b4:	f001 fd16 	bl	8006de4 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize() / 2 + 20, BSP_LCD_GetYSize() - 60, (uint8_t *)"Volume", LEFT_MODE);
 80053b8:	f001 fc2e 	bl	8006c18 <BSP_LCD_GetXSize>
 80053bc:	0844      	lsrs	r4, r0, #1
 80053be:	f001 fc31 	bl	8006c24 <BSP_LCD_GetYSize>
 80053c2:	f1a0 013c 	sub.w	r1, r0, #60	@ 0x3c
 80053c6:	f104 0014 	add.w	r0, r4, #20
 80053ca:	2303      	movs	r3, #3
 80053cc:	4a12      	ldr	r2, [pc, #72]	@ (8005418 <print_Menu_Interface+0x1f4>)
 80053ce:	b289      	uxth	r1, r1
 80053d0:	b280      	uxth	r0, r0
 80053d2:	f001 ff7d 	bl	80072d0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
 80053d6:	4630      	mov	r0, r6
 80053d8:	f001 fc84 	bl	8006ce4 <BSP_LCD_SetFont>
    BSP_LCD_DrawRect(20, START_Y + BUTTON_WIDTH_HEIGHT + 50, BSP_LCD_GetXSize() - 40, BSP_LCD_GetYSize() / 2 - 60);
 80053dc:	f001 fc1c 	bl	8006c18 <BSP_LCD_GetXSize>
 80053e0:	4604      	mov	r4, r0
 80053e2:	f001 fc1f 	bl	8006c24 <BSP_LCD_GetYSize>
 80053e6:	0843      	lsrs	r3, r0, #1
 80053e8:	3b3c      	subs	r3, #60	@ 0x3c
 80053ea:	f1a4 0228 	sub.w	r2, r4, #40	@ 0x28
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	b292      	uxth	r2, r2
 80053f2:	21e6      	movs	r1, #230	@ 0xe6
 80053f4:	2014      	movs	r0, #20
 80053f6:	f001 fcf5 	bl	8006de4 <BSP_LCD_DrawRect>
}
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	2000212c 	.word	0x2000212c
 8005400:	080126d4 	.word	0x080126d4
 8005404:	080126e0 	.word	0x080126e0
 8005408:	080126ec 	.word	0x080126ec
 800540c:	080126f4 	.word	0x080126f4
 8005410:	20002124 	.word	0x20002124
 8005414:	080126f8 	.word	0x080126f8
 8005418:	08012704 	.word	0x08012704

0800541c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800541c:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800541e:	4b07      	ldr	r3, [pc, #28]	@ (800543c <SD_CheckStatus+0x20>)
 8005420:	2201      	movs	r2, #1
 8005422:	701a      	strb	r2, [r3, #0]

  if (BSP_SD_GetCardState() == MSD_OK)
 8005424:	f7fc fc00 	bl	8001c28 <BSP_SD_GetCardState>
 8005428:	b920      	cbnz	r0, 8005434 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800542a:	4a04      	ldr	r2, [pc, #16]	@ (800543c <SD_CheckStatus+0x20>)
 800542c:	7813      	ldrb	r3, [r2, #0]
 800542e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005432:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8005434:	4b01      	ldr	r3, [pc, #4]	@ (800543c <SD_CheckStatus+0x20>)
 8005436:	7818      	ldrb	r0, [r3, #0]
}
 8005438:	bd08      	pop	{r3, pc}
 800543a:	bf00      	nop
 800543c:	20002104 	.word	0x20002104

08005440 <SD_initialize>:
 * @brief  Initializes a Drive
 * @param  lun : not used
 * @retval DSTATUS: Operation status
 */
DSTATUS SD_initialize(BYTE lun)
{
 8005440:	b510      	push	{r4, lr}
 8005442:	4604      	mov	r4, r0
  Stat = STA_NOINIT;
 8005444:	4b07      	ldr	r3, [pc, #28]	@ (8005464 <SD_initialize+0x24>)
 8005446:	2201      	movs	r2, #1
 8005448:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if (BSP_SD_Init() == MSD_OK)
 800544a:	f7fc fbbf 	bl	8001bcc <BSP_SD_Init>
 800544e:	b110      	cbz	r0, 8005456 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005450:	4b04      	ldr	r3, [pc, #16]	@ (8005464 <SD_initialize+0x24>)
 8005452:	7818      	ldrb	r0, [r3, #0]
}
 8005454:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8005456:	4620      	mov	r0, r4
 8005458:	f7ff ffe0 	bl	800541c <SD_CheckStatus>
 800545c:	4b01      	ldr	r3, [pc, #4]	@ (8005464 <SD_initialize+0x24>)
 800545e:	7018      	strb	r0, [r3, #0]
 8005460:	e7f6      	b.n	8005450 <SD_initialize+0x10>
 8005462:	bf00      	nop
 8005464:	20002104 	.word	0x20002104

08005468 <SD_status>:
 * @brief  Gets Disk Status
 * @param  lun : not used
 * @retval DSTATUS: Operation status
 */
DSTATUS SD_status(BYTE lun)
{
 8005468:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800546a:	f7ff ffd7 	bl	800541c <SD_CheckStatus>
}
 800546e:	bd08      	pop	{r3, pc}

08005470 <SD_read>:
 * @param  count: Number of sectors to read (1..128)
 * @retval DRESULT: Operation result
 */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005470:	b508      	push	{r3, lr}
 8005472:	4608      	mov	r0, r1
 8005474:	4611      	mov	r1, r2
 8005476:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if (BSP_SD_ReadBlocks((uint32_t *)buff,
 8005478:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800547c:	f7fc fb06 	bl	8001a8c <BSP_SD_ReadBlocks>
 8005480:	b930      	cbnz	r0, 8005490 <SD_read+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while (BSP_SD_GetCardState() != MSD_OK)
 8005482:	f7fc fbd1 	bl	8001c28 <BSP_SD_GetCardState>
 8005486:	4603      	mov	r3, r0
 8005488:	2800      	cmp	r0, #0
 800548a:	d1fa      	bne.n	8005482 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800548c:	4618      	mov	r0, r3
 800548e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e7fb      	b.n	800548c <SD_read+0x1c>

08005494 <SD_write>:
 * @retval DRESULT: Operation result
 */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005494:	b508      	push	{r3, lr}
 8005496:	4608      	mov	r0, r1
 8005498:	4611      	mov	r1, r2
 800549a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if (BSP_SD_WriteBlocks((uint32_t *)buff,
 800549c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054a0:	f7fc fb04 	bl	8001aac <BSP_SD_WriteBlocks>
 80054a4:	b930      	cbnz	r0, 80054b4 <SD_write+0x20>
                         (uint32_t)(sector),
                         count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the Write operation is finished */
    while (BSP_SD_GetCardState() != MSD_OK)
 80054a6:	f7fc fbbf 	bl	8001c28 <BSP_SD_GetCardState>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d1fa      	bne.n	80054a6 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e7fb      	b.n	80054b0 <SD_write+0x1c>

080054b8 <SD_ioctl>:
 * @param  *buff: Buffer to send/receive control data
 * @retval DRESULT: Operation result
 */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80054b8:	b530      	push	{r4, r5, lr}
 80054ba:	b089      	sub	sp, #36	@ 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT)
 80054bc:	4b13      	ldr	r3, [pc, #76]	@ (800550c <SD_ioctl+0x54>)
 80054be:	7818      	ldrb	r0, [r3, #0]
 80054c0:	f010 0401 	ands.w	r4, r0, #1
 80054c4:	d11b      	bne.n	80054fe <SD_ioctl+0x46>
 80054c6:	4615      	mov	r5, r2
    return RES_NOTRDY;

  switch (cmd)
 80054c8:	2903      	cmp	r1, #3
 80054ca:	d81c      	bhi.n	8005506 <SD_ioctl+0x4e>
 80054cc:	e8df f001 	tbb	[pc, r1]
 80054d0:	100a0402 	.word	0x100a0402
 80054d4:	460c      	mov	r4, r1
 80054d6:	e013      	b.n	8005500 <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT:
    BSP_SD_GetCardInfo(&CardInfo);
 80054d8:	4668      	mov	r0, sp
 80054da:	f7fc fbaf 	bl	8001c3c <BSP_SD_GetCardInfo>
    *(DWORD *)buff = CardInfo.LogBlockNbr;
 80054de:	9b06      	ldr	r3, [sp, #24]
 80054e0:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 80054e2:	e00d      	b.n	8005500 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE:
    BSP_SD_GetCardInfo(&CardInfo);
 80054e4:	4668      	mov	r0, sp
 80054e6:	f7fc fba9 	bl	8001c3c <BSP_SD_GetCardInfo>
    *(WORD *)buff = CardInfo.LogBlockSize;
 80054ea:	9b07      	ldr	r3, [sp, #28]
 80054ec:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 80054ee:	e007      	b.n	8005500 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE:
    BSP_SD_GetCardInfo(&CardInfo);
 80054f0:	4668      	mov	r0, sp
 80054f2:	f7fc fba3 	bl	8001c3c <BSP_SD_GetCardInfo>
    *(DWORD *)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80054f6:	9b07      	ldr	r3, [sp, #28]
 80054f8:	0a5b      	lsrs	r3, r3, #9
 80054fa:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 80054fc:	e000      	b.n	8005500 <SD_ioctl+0x48>
    return RES_NOTRDY;
 80054fe:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8005500:	4620      	mov	r0, r4
 8005502:	b009      	add	sp, #36	@ 0x24
 8005504:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8005506:	2404      	movs	r4, #4
 8005508:	e7fa      	b.n	8005500 <SD_ioctl+0x48>
 800550a:	bf00      	nop
 800550c:	20002104 	.word	0x20002104

08005510 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005514:	4b49      	ldr	r3, [pc, #292]	@ (800563c <I2Cx_MspInit+0x12c>)
 8005516:	4283      	cmp	r3, r0
 8005518:	d043      	beq.n	80055a2 <I2Cx_MspInit+0x92>
  }
  else
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800551a:	4c49      	ldr	r4, [pc, #292]	@ (8005640 <I2Cx_MspInit+0x130>)
 800551c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800551e:	f043 0302 	orr.w	r3, r3, #2
 8005522:	6323      	str	r3, [r4, #48]	@ 0x30
 8005524:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	9303      	str	r3, [sp, #12]
 800552c:	9b03      	ldr	r3, [sp, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800552e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005532:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005534:	2312      	movs	r3, #18
 8005536:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005538:	2500      	movs	r5, #0
 800553a:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800553c:	2302      	movs	r3, #2
 800553e:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8005540:	2304      	movs	r3, #4
 8005542:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005544:	4e3f      	ldr	r6, [pc, #252]	@ (8005644 <I2Cx_MspInit+0x134>)
 8005546:	a905      	add	r1, sp, #20
 8005548:	4630      	mov	r0, r6
 800554a:	f003 fe15 	bl	8009178 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800554e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005552:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005554:	a905      	add	r1, sp, #20
 8005556:	4630      	mov	r0, r6
 8005558:	f003 fe0e 	bl	8009178 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800555c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800555e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005562:	6423      	str	r3, [r4, #64]	@ 0x40
 8005564:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005566:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800556a:	9304      	str	r3, [sp, #16]
 800556c:	9b04      	ldr	r3, [sp, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800556e:	6a23      	ldr	r3, [r4, #32]
 8005570:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005574:	6223      	str	r3, [r4, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8005576:	6a23      	ldr	r3, [r4, #32]
 8005578:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800557c:	6223      	str	r3, [r4, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800557e:	462a      	mov	r2, r5
 8005580:	210f      	movs	r1, #15
 8005582:	201f      	movs	r0, #31
 8005584:	f002 fb54 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8005588:	201f      	movs	r0, #31
 800558a:	f002 fb61 	bl	8007c50 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800558e:	462a      	mov	r2, r5
 8005590:	210f      	movs	r1, #15
 8005592:	2020      	movs	r0, #32
 8005594:	f002 fb4c 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8005598:	2020      	movs	r0, #32
 800559a:	f002 fb59 	bl	8007c50 <HAL_NVIC_EnableIRQ>
  }
}
 800559e:	b00a      	add	sp, #40	@ 0x28
 80055a0:	bd70      	pop	{r4, r5, r6, pc}
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 80055a2:	4c27      	ldr	r4, [pc, #156]	@ (8005640 <I2Cx_MspInit+0x130>)
 80055a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80055a6:	f043 0308 	orr.w	r3, r3, #8
 80055aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80055ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	9b00      	ldr	r3, [sp, #0]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 80055b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80055b8:	f043 0302 	orr.w	r3, r3, #2
 80055bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80055be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80055c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055cc:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80055ce:	2312      	movs	r3, #18
 80055d0:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80055d2:	2500      	movs	r5, #0
 80055d4:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80055d6:	2302      	movs	r3, #2
 80055d8:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 80055da:	2304      	movs	r3, #4
 80055dc:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 80055de:	a905      	add	r1, sp, #20
 80055e0:	4819      	ldr	r0, [pc, #100]	@ (8005648 <I2Cx_MspInit+0x138>)
 80055e2:	f003 fdc9 	bl	8009178 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80055e6:	2380      	movs	r3, #128	@ 0x80
 80055e8:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 80055ea:	230b      	movs	r3, #11
 80055ec:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 80055ee:	a905      	add	r1, sp, #20
 80055f0:	4814      	ldr	r0, [pc, #80]	@ (8005644 <I2Cx_MspInit+0x134>)
 80055f2:	f003 fdc1 	bl	8009178 <HAL_GPIO_Init>
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80055f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055fc:	6423      	str	r3, [r4, #64]	@ 0x40
 80055fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005600:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005604:	9302      	str	r3, [sp, #8]
 8005606:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8005608:	6a23      	ldr	r3, [r4, #32]
 800560a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800560e:	6223      	str	r3, [r4, #32]
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8005610:	6a23      	ldr	r3, [r4, #32]
 8005612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005616:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8005618:	462a      	mov	r2, r5
 800561a:	210f      	movs	r1, #15
 800561c:	205f      	movs	r0, #95	@ 0x5f
 800561e:	f002 fb07 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8005622:	205f      	movs	r0, #95	@ 0x5f
 8005624:	f002 fb14 	bl	8007c50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8005628:	462a      	mov	r2, r5
 800562a:	210f      	movs	r1, #15
 800562c:	2060      	movs	r0, #96	@ 0x60
 800562e:	f002 faff 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8005632:	2060      	movs	r0, #96	@ 0x60
 8005634:	f002 fb0c 	bl	8007c50 <HAL_NVIC_EnableIRQ>
 8005638:	e7b1      	b.n	800559e <I2Cx_MspInit+0x8e>
 800563a:	bf00      	nop
 800563c:	2001ddc8 	.word	0x2001ddc8
 8005640:	40023800 	.word	0x40023800
 8005644:	40020400 	.word	0x40020400
 8005648:	40020c00 	.word	0x40020c00

0800564c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800564c:	b510      	push	{r4, lr}
 800564e:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8005650:	f004 fab0 	bl	8009bb4 <HAL_I2C_GetState>
 8005654:	b9a0      	cbnz	r0, 8005680 <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005656:	4b0c      	ldr	r3, [pc, #48]	@ (8005688 <I2Cx_Init+0x3c>)
 8005658:	429c      	cmp	r4, r3
 800565a:	d012      	beq.n	8005682 <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800565c:	4b0b      	ldr	r3, [pc, #44]	@ (800568c <I2Cx_Init+0x40>)
 800565e:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8005660:	4b0b      	ldr	r3, [pc, #44]	@ (8005690 <I2Cx_Init+0x44>)
 8005662:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005668:	2201      	movs	r2, #1
 800566a:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800566c:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800566e:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005670:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005672:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8005674:	4620      	mov	r0, r4
 8005676:	f7ff ff4b 	bl	8005510 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800567a:	4620      	mov	r0, r4
 800567c:	f004 f86e 	bl	800975c <HAL_I2C_Init>
  }
}
 8005680:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8005682:	4b04      	ldr	r3, [pc, #16]	@ (8005694 <I2Cx_Init+0x48>)
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	e7eb      	b.n	8005660 <I2Cx_Init+0x14>
 8005688:	2001ddc8 	.word	0x2001ddc8
 800568c:	40005400 	.word	0x40005400
 8005690:	40912732 	.word	0x40912732
 8005694:	40006000 	.word	0x40006000

08005698 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8005698:	b510      	push	{r4, lr}
 800569a:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800569c:	f004 f8c3 	bl	8009826 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80056a0:	4620      	mov	r0, r4
 80056a2:	f7ff ffd3 	bl	800564c <I2Cx_Init>
}
 80056a6:	bd10      	pop	{r4, pc}

080056a8 <I2Cx_WriteMultiple>:
{
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	4604      	mov	r4, r0
 80056ae:	460d      	mov	r5, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80056b0:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
 80056b4:	9602      	str	r6, [sp, #8]
 80056b6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	@ 0x24
 80056ba:	9601      	str	r6, [sp, #4]
 80056bc:	9e08      	ldr	r6, [sp, #32]
 80056be:	9600      	str	r6, [sp, #0]
 80056c0:	f004 f8ca 	bl	8009858 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80056c4:	4606      	mov	r6, r0
 80056c6:	b910      	cbnz	r0, 80056ce <I2Cx_WriteMultiple+0x26>
}
 80056c8:	4630      	mov	r0, r6
 80056ca:	b004      	add	sp, #16
 80056cc:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 80056ce:	4629      	mov	r1, r5
 80056d0:	4620      	mov	r0, r4
 80056d2:	f7ff ffe1 	bl	8005698 <I2Cx_Error>
 80056d6:	e7f7      	b.n	80056c8 <I2Cx_WriteMultiple+0x20>

080056d8 <I2Cx_ReadMultiple>:
{
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	4604      	mov	r4, r0
 80056de:	460d      	mov	r5, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80056e0:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
 80056e4:	9602      	str	r6, [sp, #8]
 80056e6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	@ 0x24
 80056ea:	9601      	str	r6, [sp, #4]
 80056ec:	9e08      	ldr	r6, [sp, #32]
 80056ee:	9600      	str	r6, [sp, #0]
 80056f0:	f004 f988 	bl	8009a04 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80056f4:	4606      	mov	r6, r0
 80056f6:	b910      	cbnz	r0, 80056fe <I2Cx_ReadMultiple+0x26>
}
 80056f8:	4630      	mov	r0, r6
 80056fa:	b004      	add	sp, #16
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 80056fe:	4629      	mov	r1, r5
 8005700:	4620      	mov	r0, r4
 8005702:	f7ff ffc9 	bl	8005698 <I2Cx_Error>
 8005706:	e7f7      	b.n	80056f8 <I2Cx_ReadMultiple+0x20>

08005708 <BSP_LED_Init>:
{
 8005708:	b500      	push	{lr}
 800570a:	b087      	sub	sp, #28
  LEDx_GPIO_CLK_ENABLE();
 800570c:	4b0d      	ldr	r3, [pc, #52]	@ (8005744 <BSP_LED_Init+0x3c>)
 800570e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005714:	631a      	str	r2, [r3, #48]	@ 0x30
 8005716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8005720:	4b09      	ldr	r3, [pc, #36]	@ (8005748 <BSP_LED_Init+0x40>)
 8005722:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005726:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005728:	2301      	movs	r3, #1
 800572a:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800572c:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800572e:	2303      	movs	r3, #3
 8005730:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8005732:	a901      	add	r1, sp, #4
 8005734:	4b05      	ldr	r3, [pc, #20]	@ (800574c <BSP_LED_Init+0x44>)
 8005736:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800573a:	f003 fd1d 	bl	8009178 <HAL_GPIO_Init>
}
 800573e:	b007      	add	sp, #28
 8005740:	f85d fb04 	ldr.w	pc, [sp], #4
 8005744:	40023800 	.word	0x40023800
 8005748:	20002110 	.word	0x20002110
 800574c:	20002108 	.word	0x20002108

08005750 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 8005750:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 8005752:	4802      	ldr	r0, [pc, #8]	@ (800575c <AUDIO_IO_Init+0xc>)
 8005754:	f7ff ff7a 	bl	800564c <I2Cx_Init>
}
 8005758:	bd08      	pop	{r3, pc}
 800575a:	bf00      	nop
 800575c:	2001ddc8 	.word	0x2001ddc8

08005760 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{

}
 8005760:	4770      	bx	lr
	...

08005764 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005764:	b500      	push	{lr}
 8005766:	b085      	sub	sp, #20
 8005768:	f8ad 200e 	strh.w	r2, [sp, #14]
  uint16_t tmp = Value;
 800576c:	b292      	uxth	r2, r2
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800576e:	0a13      	lsrs	r3, r2, #8
 8005770:	f8ad 300e 	strh.w	r3, [sp, #14]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8005774:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005778:	f8ad 300e 	strh.w	r3, [sp, #14]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800577c:	2302      	movs	r3, #2
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	f10d 020e 	add.w	r2, sp, #14
 8005784:	9200      	str	r2, [sp, #0]
 8005786:	460a      	mov	r2, r1
 8005788:	4601      	mov	r1, r0
 800578a:	4803      	ldr	r0, [pc, #12]	@ (8005798 <AUDIO_IO_Write+0x34>)
 800578c:	f7ff ff8c 	bl	80056a8 <I2Cx_WriteMultiple>
}
 8005790:	b005      	add	sp, #20
 8005792:	f85d fb04 	ldr.w	pc, [sp], #4
 8005796:	bf00      	nop
 8005798:	2001ddc8 	.word	0x2001ddc8

0800579c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 800579c:	b500      	push	{lr}
 800579e:	b085      	sub	sp, #20
 80057a0:	460a      	mov	r2, r1
  uint16_t read_value = 0, tmp = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	f8ad 300e 	strh.w	r3, [sp, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80057a8:	2302      	movs	r3, #2
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	f10d 010e 	add.w	r1, sp, #14
 80057b0:	9100      	str	r1, [sp, #0]
 80057b2:	4601      	mov	r1, r0
 80057b4:	4806      	ldr	r0, [pc, #24]	@ (80057d0 <AUDIO_IO_Read+0x34>)
 80057b6:	f7ff ff8f 	bl	80056d8 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80057ba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80057be:	0218      	lsls	r0, r3, #8
 80057c0:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
 80057c4:	b280      	uxth	r0, r0
  
  read_value = tmp;
 80057c6:	f8ad 000e 	strh.w	r0, [sp, #14]
  
  return read_value;
}
 80057ca:	b005      	add	sp, #20
 80057cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80057d0:	2001ddc8 	.word	0x2001ddc8

080057d4 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80057d4:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 80057d6:	f002 f9d3 	bl	8007b80 <HAL_Delay>
}
 80057da:	bd08      	pop	{r3, pc}

080057dc <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80057dc:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 80057de:	4802      	ldr	r0, [pc, #8]	@ (80057e8 <TS_IO_Init+0xc>)
 80057e0:	f7ff ff34 	bl	800564c <I2Cx_Init>
}
 80057e4:	bd08      	pop	{r3, pc}
 80057e6:	bf00      	nop
 80057e8:	2001ddc8 	.word	0x2001ddc8

080057ec <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80057ec:	b500      	push	{lr}
 80057ee:	b085      	sub	sp, #20
 80057f0:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80057f4:	2301      	movs	r3, #1
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	f10d 020f 	add.w	r2, sp, #15
 80057fc:	9200      	str	r2, [sp, #0]
 80057fe:	460a      	mov	r2, r1
 8005800:	4601      	mov	r1, r0
 8005802:	4803      	ldr	r0, [pc, #12]	@ (8005810 <TS_IO_Write+0x24>)
 8005804:	f7ff ff50 	bl	80056a8 <I2Cx_WriteMultiple>
}
 8005808:	b005      	add	sp, #20
 800580a:	f85d fb04 	ldr.w	pc, [sp], #4
 800580e:	bf00      	nop
 8005810:	2001ddc8 	.word	0x2001ddc8

08005814 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005814:	b500      	push	{lr}
 8005816:	b085      	sub	sp, #20
 8005818:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	f88d 300f 	strb.w	r3, [sp, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8005820:	2301      	movs	r3, #1
 8005822:	9301      	str	r3, [sp, #4]
 8005824:	f10d 010f 	add.w	r1, sp, #15
 8005828:	9100      	str	r1, [sp, #0]
 800582a:	4601      	mov	r1, r0
 800582c:	4803      	ldr	r0, [pc, #12]	@ (800583c <TS_IO_Read+0x28>)
 800582e:	f7ff ff53 	bl	80056d8 <I2Cx_ReadMultiple>

  return read_value;
}
 8005832:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8005836:	b005      	add	sp, #20
 8005838:	f85d fb04 	ldr.w	pc, [sp], #4
 800583c:	2001ddc8 	.word	0x2001ddc8

08005840 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8005840:	b500      	push	{lr}
 8005842:	b083      	sub	sp, #12
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8005844:	9301      	str	r3, [sp, #4]
 8005846:	9200      	str	r2, [sp, #0]
 8005848:	2301      	movs	r3, #1
 800584a:	460a      	mov	r2, r1
 800584c:	4601      	mov	r1, r0
 800584e:	4803      	ldr	r0, [pc, #12]	@ (800585c <TS_IO_ReadMultiple+0x1c>)
 8005850:	f7ff ff42 	bl	80056d8 <I2Cx_ReadMultiple>
}
 8005854:	b003      	add	sp, #12
 8005856:	f85d fb04 	ldr.w	pc, [sp], #4
 800585a:	bf00      	nop
 800585c:	2001ddc8 	.word	0x2001ddc8

08005860 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8005860:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8005862:	f002 f98d 	bl	8007b80 <HAL_Delay>
}
 8005866:	bd08      	pop	{r3, pc}

08005868 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 8005868:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 800586a:	f002 f989 	bl	8007b80 <HAL_Delay>
}
 800586e:	bd08      	pop	{r3, pc}

08005870 <SAIx_Out_DeInit>:
/**
 * @brief  Deinitializes the Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_Out_DeInit(void)
{
 8005870:	b508      	push	{r3, lr}
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005872:	4805      	ldr	r0, [pc, #20]	@ (8005888 <SAIx_Out_DeInit+0x18>)
 8005874:	4b05      	ldr	r3, [pc, #20]	@ (800588c <SAIx_Out_DeInit+0x1c>)
 8005876:	6003      	str	r3, [r0, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8005878:	4a05      	ldr	r2, [pc, #20]	@ (8005890 <SAIx_Out_DeInit+0x20>)
 800587a:	6853      	ldr	r3, [r2, #4]
 800587c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005880:	6053      	str	r3, [r2, #4]

  HAL_SAI_DeInit(&haudio_out_sai);
 8005882:	f005 ff76 	bl	800b772 <HAL_SAI_DeInit>
}
 8005886:	bd08      	pop	{r3, pc}
 8005888:	2001e358 	.word	0x2001e358
 800588c:	40015804 	.word	0x40015804
 8005890:	40015800 	.word	0x40015800

08005894 <SAIx_In_DeInit>:
/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_In_DeInit(void)
{
 8005894:	b510      	push	{r4, lr}
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005896:	4808      	ldr	r0, [pc, #32]	@ (80058b8 <SAIx_In_DeInit+0x24>)
 8005898:	4b08      	ldr	r3, [pc, #32]	@ (80058bc <SAIx_In_DeInit+0x28>)
 800589a:	6003      	str	r3, [r0, #0]
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800589c:	4c08      	ldr	r4, [pc, #32]	@ (80058c0 <SAIx_In_DeInit+0x2c>)
 800589e:	3b20      	subs	r3, #32
 80058a0:	6023      	str	r3, [r4, #0]
  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80058a2:	4a08      	ldr	r2, [pc, #32]	@ (80058c4 <SAIx_In_DeInit+0x30>)
 80058a4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80058a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058aa:	6253      	str	r3, [r2, #36]	@ 0x24

  HAL_SAI_DeInit(&haudio_in_sai);
 80058ac:	f005 ff61 	bl	800b772 <HAL_SAI_DeInit>
  HAL_SAI_DeInit(&haudio_out_sai);
 80058b0:	4620      	mov	r0, r4
 80058b2:	f005 ff5e 	bl	800b772 <HAL_SAI_DeInit>
}
 80058b6:	bd10      	pop	{r4, pc}
 80058b8:	2001e2d4 	.word	0x2001e2d4
 80058bc:	40015824 	.word	0x40015824
 80058c0:	2001e358 	.word	0x2001e358
 80058c4:	40015800 	.word	0x40015800

080058c8 <SAIx_Out_Init>:
{
 80058c8:	b510      	push	{r4, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80058ca:	4c1a      	ldr	r4, [pc, #104]	@ (8005934 <SAIx_Out_Init+0x6c>)
 80058cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005938 <SAIx_Out_Init+0x70>)
 80058ce:	6023      	str	r3, [r4, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80058d0:	4a1a      	ldr	r2, [pc, #104]	@ (800593c <SAIx_Out_Init+0x74>)
 80058d2:	6853      	ldr	r3, [r2, #4]
 80058d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058d8:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80058da:	2300      	movs	r3, #0
 80058dc:	6263      	str	r3, [r4, #36]	@ 0x24
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80058de:	61e0      	str	r0, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 80058e0:	6063      	str	r3, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80058e2:	6163      	str	r3, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80058e4:	6323      	str	r3, [r4, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80058e6:	2280      	movs	r2, #128	@ 0x80
 80058e8:	6362      	str	r2, [r4, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80058ea:	63a3      	str	r3, [r4, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80058ec:	2101      	movs	r1, #1
 80058ee:	63e1      	str	r1, [r4, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80058f0:	60a3      	str	r3, [r4, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80058f2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80058f6:	6120      	str	r0, [r4, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80058f8:	61a1      	str	r1, [r4, #24]
  haudio_out_sai.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80058fa:	60e3      	str	r3, [r4, #12]
  haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80058fc:	62a3      	str	r3, [r4, #40]	@ 0x28
  haudio_out_sai.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80058fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
  haudio_out_sai.Init.Mckdiv = 0;
 8005900:	6223      	str	r3, [r4, #32]
  haudio_out_sai.FrameInit.FrameLength = 128;
 8005902:	6422      	str	r2, [r4, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 64;
 8005904:	2240      	movs	r2, #64	@ 0x40
 8005906:	6462      	str	r2, [r4, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005908:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800590c:	64a2      	str	r2, [r4, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800590e:	64e3      	str	r3, [r4, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8005910:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005914:	6522      	str	r2, [r4, #80]	@ 0x50
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8005916:	6563      	str	r3, [r4, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8005918:	65a3      	str	r3, [r4, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 800591a:	2304      	movs	r3, #4
 800591c:	65e3      	str	r3, [r4, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 800591e:	230f      	movs	r3, #15
 8005920:	6623      	str	r3, [r4, #96]	@ 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8005922:	4620      	mov	r0, r4
 8005924:	f005 fe22 	bl	800b56c <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8005928:	6822      	ldr	r2, [r4, #0]
 800592a:	6813      	ldr	r3, [r2, #0]
 800592c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005930:	6013      	str	r3, [r2, #0]
}
 8005932:	bd10      	pop	{r4, pc}
 8005934:	2001e358 	.word	0x2001e358
 8005938:	40015804 	.word	0x40015804
 800593c:	40015800 	.word	0x40015800

08005940 <SAIx_In_Init>:
{
 8005940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005944:	b083      	sub	sp, #12
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005946:	4c3b      	ldr	r4, [pc, #236]	@ (8005a34 <SAIx_In_Init+0xf4>)
 8005948:	4b3b      	ldr	r3, [pc, #236]	@ (8005a38 <SAIx_In_Init+0xf8>)
 800594a:	6023      	str	r3, [r4, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800594c:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 8005a44 <SAIx_In_Init+0x104>
 8005950:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005958:	f8c8 3004 	str.w	r3, [r8, #4]
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800595c:	2600      	movs	r6, #0
 800595e:	6266      	str	r6, [r4, #36]	@ 0x24
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8005960:	9001      	str	r0, [sp, #4]
 8005962:	61e0      	str	r0, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_RX;
 8005964:	2701      	movs	r7, #1
 8005966:	6067      	str	r7, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8005968:	6166      	str	r6, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800596a:	6326      	str	r6, [r4, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800596c:	f04f 0b80 	mov.w	fp, #128	@ 0x80
 8005970:	f8c4 b034 	str.w	fp, [r4, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005974:	63a6      	str	r6, [r4, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005976:	63e6      	str	r6, [r4, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8005978:	60a6      	str	r6, [r4, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800597a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800597e:	6123      	str	r3, [r4, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8005980:	61a7      	str	r7, [r4, #24]
  haudio_out_sai.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005982:	60e6      	str	r6, [r4, #12]
  haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8005984:	62a6      	str	r6, [r4, #40]	@ 0x28
  haudio_out_sai.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8005986:	62e6      	str	r6, [r4, #44]	@ 0x2c
  haudio_out_sai.Init.Mckdiv = 0;
 8005988:	6226      	str	r6, [r4, #32]
  haudio_out_sai.FrameInit.FrameLength = 64;
 800598a:	f04f 0a40 	mov.w	sl, #64	@ 0x40
 800598e:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8005992:	f04f 0920 	mov.w	r9, #32
 8005996:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800599a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800599e:	64a2      	str	r2, [r4, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80059a0:	64e6      	str	r6, [r4, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80059a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80059a6:	6522      	str	r2, [r4, #80]	@ 0x50
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80059a8:	6566      	str	r6, [r4, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80059aa:	65a6      	str	r6, [r4, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 80059ac:	2204      	movs	r2, #4
 80059ae:	65e2      	str	r2, [r4, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_02;
 80059b0:	2205      	movs	r2, #5
 80059b2:	6622      	str	r2, [r4, #96]	@ 0x60
  HAL_SAI_Init(&haudio_out_sai);
 80059b4:	4620      	mov	r0, r4
 80059b6:	f005 fdd9 	bl	800b56c <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80059ba:	4d20      	ldr	r5, [pc, #128]	@ (8005a3c <SAIx_In_Init+0xfc>)
 80059bc:	4b20      	ldr	r3, [pc, #128]	@ (8005a40 <SAIx_In_Init+0x100>)
 80059be:	602b      	str	r3, [r5, #0]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80059c0:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 80059c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059c8:	f8c8 3024 	str.w	r3, [r8, #36]	@ 0x24
  haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80059cc:	626e      	str	r6, [r5, #36]	@ 0x24
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	61eb      	str	r3, [r5, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80059d2:	2303      	movs	r3, #3
 80059d4:	606b      	str	r3, [r5, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80059d6:	616e      	str	r6, [r5, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80059d8:	632e      	str	r6, [r5, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 80059da:	f8c5 b034 	str.w	fp, [r5, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80059de:	63ae      	str	r6, [r5, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80059e0:	63ef      	str	r7, [r5, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80059e2:	60af      	str	r7, [r5, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80059e4:	612e      	str	r6, [r5, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80059e6:	61af      	str	r7, [r5, #24]
  haudio_in_sai.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80059e8:	60ee      	str	r6, [r5, #12]
  haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80059ea:	62ae      	str	r6, [r5, #40]	@ 0x28
  haudio_in_sai.Init.TriState = SAI_OUTPUT_RELEASED;
 80059ec:	2310      	movs	r3, #16
 80059ee:	62eb      	str	r3, [r5, #44]	@ 0x2c
  haudio_in_sai.Init.Mckdiv = 0;
 80059f0:	622e      	str	r6, [r5, #32]
  haudio_in_sai.FrameInit.FrameLength = 64;
 80059f2:	f8c5 a040 	str.w	sl, [r5, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80059f6:	f8c5 9044 	str.w	r9, [r5, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80059fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80059fe:	64ab      	str	r3, [r5, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005a00:	64ee      	str	r6, [r5, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8005a02:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005a06:	652b      	str	r3, [r5, #80]	@ 0x50
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8005a08:	656e      	str	r6, [r5, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8005a0a:	65ae      	str	r6, [r5, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	65eb      	str	r3, [r5, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_02;
 8005a10:	2305      	movs	r3, #5
 8005a12:	662b      	str	r3, [r5, #96]	@ 0x60
  HAL_SAI_Init(&haudio_in_sai);
 8005a14:	4628      	mov	r0, r5
 8005a16:	f005 fda9 	bl	800b56c <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8005a1a:	682a      	ldr	r2, [r5, #0]
 8005a1c:	6813      	ldr	r3, [r2, #0]
 8005a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a22:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8005a24:	6822      	ldr	r2, [r4, #0]
 8005a26:	6813      	ldr	r3, [r2, #0]
 8005a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a2c:	6013      	str	r3, [r2, #0]
}
 8005a2e:	b003      	add	sp, #12
 8005a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a34:	2001e358 	.word	0x2001e358
 8005a38:	40015804 	.word	0x40015804
 8005a3c:	2001e2d4 	.word	0x2001e2d4
 8005a40:	40015824 	.word	0x40015824
 8005a44:	40015800 	.word	0x40015800

08005a48 <DFSDMx_ChannelMspInit>:
/**
 * @brief  Initialize the DFSDM channel MSP.
 * @retval None
 */
static void DFSDMx_ChannelMspInit(void)
{
 8005a48:	b530      	push	{r4, r5, lr}
 8005a4a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 8005a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac8 <DFSDMx_ChannelMspInit+0x80>)
 8005a4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a50:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8005a54:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a58:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8005a5c:	9200      	str	r2, [sp, #0]
 8005a5e:	9a00      	ldr	r2, [sp, #0]

  /* Enable GPIO clock */
  AUDIO_DFSDMx_DMIC_DATIN_GPIO_CLK_ENABLE();
 8005a60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a62:	f042 0204 	orr.w	r2, r2, #4
 8005a66:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a6a:	f002 0204 	and.w	r2, r2, #4
 8005a6e:	9201      	str	r2, [sp, #4]
 8005a70:	9a01      	ldr	r2, [sp, #4]
  AUDIO_DFSDMx_CKOUT_DMIC_GPIO_CLK_ENABLE();
 8005a72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a74:	f042 0208 	orr.w	r2, r2, #8
 8005a78:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	9302      	str	r3, [sp, #8]
 8005a82:	9b02      	ldr	r3, [sp, #8]

  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN1 pins ------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_CKOUT_PIN;
 8005a84:	2508      	movs	r5, #8
 8005a86:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a90:	2403      	movs	r4, #3
 8005a92:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_CKOUT_AF;
 8005a94:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(AUDIO_DFSDMx_CKOUT_DMIC_GPIO_PORT, &GPIO_InitStruct);
 8005a96:	a903      	add	r1, sp, #12
 8005a98:	480c      	ldr	r0, [pc, #48]	@ (8005acc <DFSDMx_ChannelMspInit+0x84>)
 8005a9a:	f003 fb6d 	bl	8009178 <HAL_GPIO_Init>

  /* DFSDM pin configuration: DMIC_DATIN1 pin --------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN1_PIN;
 8005a9e:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
 8005aa0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);
 8005aa2:	a903      	add	r1, sp, #12
 8005aa4:	480a      	ldr	r0, [pc, #40]	@ (8005ad0 <DFSDMx_ChannelMspInit+0x88>)
 8005aa6:	f003 fb67 	bl	8009178 <HAL_GPIO_Init>

  if (AudioIn_ChannelNumber > 2)
 8005aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad4 <DFSDMx_ChannelMspInit+0x8c>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d801      	bhi.n	8005ab6 <DFSDMx_ChannelMspInit+0x6e>
    /* DFSDM pin configuration: DMIC_DATIN5 pin --------------------------------*/
    GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN5_PIN;
    GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
    HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);
  }
}
 8005ab2:	b009      	add	sp, #36	@ 0x24
 8005ab4:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN5_PIN;
 8005ab6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005aba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
 8005abc:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);
 8005abe:	a903      	add	r1, sp, #12
 8005ac0:	4803      	ldr	r0, [pc, #12]	@ (8005ad0 <DFSDMx_ChannelMspInit+0x88>)
 8005ac2:	f003 fb59 	bl	8009178 <HAL_GPIO_Init>
}
 8005ac6:	e7f4      	b.n	8005ab2 <DFSDMx_ChannelMspInit+0x6a>
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	40020c00 	.word	0x40020c00
 8005ad0:	40020800 	.word	0x40020800
 8005ad4:	20002118 	.word	0x20002118

08005ad8 <DFSDMx_FilterMspInit>:
/**
 * @brief  Initialize the DFSDM filter MSP.
 * @retval None
 */
static void DFSDMx_FilterMspInit(void)
{
 8005ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005adc:	b082      	sub	sp, #8
  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 8005ade:	4b4e      	ldr	r3, [pc, #312]	@ (8005c18 <DFSDMx_FilterMspInit+0x140>)
 8005ae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ae2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8005ae6:	645a      	str	r2, [r3, #68]	@ 0x44
 8005ae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aea:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8005aee:	9200      	str	r2, [sp, #0]
 8005af0:	9a00      	ldr	r2, [sp, #0]

  /* Enable the DMA clock */
  AUDIO_DFSDMx_DMAx_CLK_ENABLE();
 8005af2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005af4:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8005af8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	9b01      	ldr	r3, [sp, #4]

  /*********** Configure DMA stream for TOP LEFT microphone *******************/
  hDmaTopLeft.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b04:	4845      	ldr	r0, [pc, #276]	@ (8005c1c <DFSDMx_FilterMspInit+0x144>)
 8005b06:	2400      	movs	r4, #0
 8005b08:	6084      	str	r4, [r0, #8]
  hDmaTopLeft.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b0a:	60c4      	str	r4, [r0, #12]
  hDmaTopLeft.Init.MemInc = DMA_MINC_ENABLE;
 8005b0c:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
 8005b10:	f8c0 a010 	str.w	sl, [r0, #16]
  hDmaTopLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8005b14:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
 8005b18:	f8c0 9014 	str.w	r9, [r0, #20]
  hDmaTopLeft.Init.MemDataAlignment = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8005b1c:	f44f 4880 	mov.w	r8, #16384	@ 0x4000
 8005b20:	f8c0 8018 	str.w	r8, [r0, #24]
  hDmaTopLeft.Init.Mode = DMA_CIRCULAR;
 8005b24:	f44f 7780 	mov.w	r7, #256	@ 0x100
 8005b28:	61c7      	str	r7, [r0, #28]
  hDmaTopLeft.Init.Priority = DMA_PRIORITY_HIGH;
 8005b2a:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
 8005b2e:	6206      	str	r6, [r0, #32]
  hDmaTopLeft.Instance = AUDIO_DFSDMx_DMAx_TOP_LEFT_STREAM;
 8005b30:	4b3b      	ldr	r3, [pc, #236]	@ (8005c20 <DFSDMx_FilterMspInit+0x148>)
 8005b32:	6003      	str	r3, [r0, #0]
  hDmaTopLeft.Init.Channel = AUDIO_DFSDMx_DMAx_CHANNEL;
 8005b34:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8005b38:	6045      	str	r5, [r0, #4]

  /* Associate the DMA handle */
  __HAL_LINKDMA(&hAudioInTopLeftFilter, hdmaReg, hDmaTopLeft);
 8005b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8005c24 <DFSDMx_FilterMspInit+0x14c>)
 8005b3c:	6298      	str	r0, [r3, #40]	@ 0x28
 8005b3e:	6383      	str	r3, [r0, #56]	@ 0x38

  /* Reset DMA handle state */
  __HAL_DMA_RESET_HANDLE_STATE(&hDmaTopLeft);
 8005b40:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35

  /* Configure the DMA Channel */
  HAL_DMA_Init(&hDmaTopLeft);
 8005b44:	f002 fb92 	bl	800826c <HAL_DMA_Init>

  /* DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8005b48:	4622      	mov	r2, r4
 8005b4a:	210e      	movs	r1, #14
 8005b4c:	2038      	movs	r0, #56	@ 0x38
 8005b4e:	f002 f86f 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQ);
 8005b52:	2038      	movs	r0, #56	@ 0x38
 8005b54:	f002 f87c 	bl	8007c50 <HAL_NVIC_EnableIRQ>

  /*********** Configure DMA stream for TOP RIGHT microphone ******************/
  hDmaTopRight.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b58:	4833      	ldr	r0, [pc, #204]	@ (8005c28 <DFSDMx_FilterMspInit+0x150>)
 8005b5a:	6084      	str	r4, [r0, #8]
  hDmaTopRight.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b5c:	60c4      	str	r4, [r0, #12]
  hDmaTopRight.Init.MemInc = DMA_MINC_ENABLE;
 8005b5e:	f8c0 a010 	str.w	sl, [r0, #16]
  hDmaTopRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8005b62:	f8c0 9014 	str.w	r9, [r0, #20]
  hDmaTopRight.Init.MemDataAlignment = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8005b66:	f8c0 8018 	str.w	r8, [r0, #24]
  hDmaTopRight.Init.Mode = DMA_CIRCULAR;
 8005b6a:	61c7      	str	r7, [r0, #28]
  hDmaTopRight.Init.Priority = DMA_PRIORITY_HIGH;
 8005b6c:	6206      	str	r6, [r0, #32]
  hDmaTopRight.Instance = AUDIO_DFSDMx_DMAx_TOP_RIGHT_STREAM;
 8005b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c2c <DFSDMx_FilterMspInit+0x154>)
 8005b70:	6003      	str	r3, [r0, #0]
  hDmaTopRight.Init.Channel = AUDIO_DFSDMx_DMAx_CHANNEL;
 8005b72:	6045      	str	r5, [r0, #4]

  /* Associate the DMA handle */
  __HAL_LINKDMA(&hAudioInTopRightFilter, hdmaReg, hDmaTopRight);
 8005b74:	4b2e      	ldr	r3, [pc, #184]	@ (8005c30 <DFSDMx_FilterMspInit+0x158>)
 8005b76:	6298      	str	r0, [r3, #40]	@ 0x28
 8005b78:	6383      	str	r3, [r0, #56]	@ 0x38

  /* Reset DMA handle state */
  __HAL_DMA_RESET_HANDLE_STATE(&hDmaTopRight);
 8005b7a:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35

  /* Configure the DMA Channel */
  HAL_DMA_Init(&hDmaTopRight);
 8005b7e:	f002 fb75 	bl	800826c <HAL_DMA_Init>

  /* DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8005b82:	4622      	mov	r2, r4
 8005b84:	210e      	movs	r1, #14
 8005b86:	2044      	movs	r0, #68	@ 0x44
 8005b88:	f002 f852 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQ);
 8005b8c:	2044      	movs	r0, #68	@ 0x44
 8005b8e:	f002 f85f 	bl	8007c50 <HAL_NVIC_EnableIRQ>

  if (AudioIn_ChannelNumber > 2)
 8005b92:	4b28      	ldr	r3, [pc, #160]	@ (8005c34 <DFSDMx_FilterMspInit+0x15c>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d802      	bhi.n	8005ba0 <DFSDMx_FilterMspInit+0xc8>

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ);
  }
}
 8005b9a:	b002      	add	sp, #8
 8005b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hDmaButtomLeft.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ba0:	4825      	ldr	r0, [pc, #148]	@ (8005c38 <DFSDMx_FilterMspInit+0x160>)
 8005ba2:	6084      	str	r4, [r0, #8]
    hDmaButtomLeft.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ba4:	60c4      	str	r4, [r0, #12]
    hDmaButtomLeft.Init.MemInc = DMA_MINC_ENABLE;
 8005ba6:	f8c0 a010 	str.w	sl, [r0, #16]
    hDmaButtomLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8005baa:	f8c0 9014 	str.w	r9, [r0, #20]
    hDmaButtomLeft.Init.MemDataAlignment = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8005bae:	f8c0 8018 	str.w	r8, [r0, #24]
    hDmaButtomLeft.Init.Mode = DMA_CIRCULAR;
 8005bb2:	61c7      	str	r7, [r0, #28]
    hDmaButtomLeft.Init.Priority = DMA_PRIORITY_HIGH;
 8005bb4:	6206      	str	r6, [r0, #32]
    hDmaButtomLeft.Instance = AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_STREAM;
 8005bb6:	4b21      	ldr	r3, [pc, #132]	@ (8005c3c <DFSDMx_FilterMspInit+0x164>)
 8005bb8:	6003      	str	r3, [r0, #0]
    hDmaButtomLeft.Init.Channel = AUDIO_DFSDMx_DMAx_CHANNEL;
 8005bba:	6045      	str	r5, [r0, #4]
    __HAL_LINKDMA(&hAudioInButtomLeftFilter, hdmaReg, hDmaButtomLeft);
 8005bbc:	4b20      	ldr	r3, [pc, #128]	@ (8005c40 <DFSDMx_FilterMspInit+0x168>)
 8005bbe:	6298      	str	r0, [r3, #40]	@ 0x28
 8005bc0:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaButtomLeft);
 8005bc2:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    HAL_DMA_Init(&hDmaButtomLeft);
 8005bc6:	f002 fb51 	bl	800826c <HAL_DMA_Init>
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8005bca:	4622      	mov	r2, r4
 8005bcc:	210e      	movs	r1, #14
 8005bce:	2045      	movs	r0, #69	@ 0x45
 8005bd0:	f002 f82e 	bl	8007c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_IRQ);
 8005bd4:	2045      	movs	r0, #69	@ 0x45
 8005bd6:	f002 f83b 	bl	8007c50 <HAL_NVIC_EnableIRQ>
    hDmaButtomRight.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005bda:	481a      	ldr	r0, [pc, #104]	@ (8005c44 <DFSDMx_FilterMspInit+0x16c>)
 8005bdc:	6084      	str	r4, [r0, #8]
    hDmaButtomRight.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bde:	60c4      	str	r4, [r0, #12]
    hDmaButtomRight.Init.MemInc = DMA_MINC_ENABLE;
 8005be0:	f8c0 a010 	str.w	sl, [r0, #16]
    hDmaButtomRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8005be4:	f8c0 9014 	str.w	r9, [r0, #20]
    hDmaButtomRight.Init.MemDataAlignment = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8005be8:	f8c0 8018 	str.w	r8, [r0, #24]
    hDmaButtomRight.Init.Mode = DMA_CIRCULAR;
 8005bec:	61c7      	str	r7, [r0, #28]
    hDmaButtomRight.Init.Priority = DMA_PRIORITY_HIGH;
 8005bee:	6206      	str	r6, [r0, #32]
    hDmaButtomRight.Instance = AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_STREAM;
 8005bf0:	4b15      	ldr	r3, [pc, #84]	@ (8005c48 <DFSDMx_FilterMspInit+0x170>)
 8005bf2:	6003      	str	r3, [r0, #0]
    hDmaButtomRight.Init.Channel = AUDIO_DFSDMx_DMAx_CHANNEL;
 8005bf4:	6045      	str	r5, [r0, #4]
    __HAL_LINKDMA(&hAudioInButtomRightFilter, hdmaReg, hDmaButtomRight);
 8005bf6:	4b15      	ldr	r3, [pc, #84]	@ (8005c4c <DFSDMx_FilterMspInit+0x174>)
 8005bf8:	6298      	str	r0, [r3, #40]	@ 0x28
 8005bfa:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaButtomRight);
 8005bfc:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    HAL_DMA_Init(&hDmaButtomRight);
 8005c00:	f002 fb34 	bl	800826c <HAL_DMA_Init>
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8005c04:	4622      	mov	r2, r4
 8005c06:	210e      	movs	r1, #14
 8005c08:	2046      	movs	r0, #70	@ 0x46
 8005c0a:	f002 f811 	bl	8007c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ);
 8005c0e:	2046      	movs	r0, #70	@ 0x46
 8005c10:	f002 f81e 	bl	8007c50 <HAL_NVIC_EnableIRQ>
}
 8005c14:	e7c1      	b.n	8005b9a <DFSDMx_FilterMspInit+0xc2>
 8005c16:	bf00      	nop
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	2001e154 	.word	0x2001e154
 8005c20:	40026410 	.word	0x40026410
 8005c24:	2001e208 	.word	0x2001e208
 8005c28:	2001e0f4 	.word	0x2001e0f4
 8005c2c:	40026488 	.word	0x40026488
 8005c30:	2001e1b4 	.word	0x2001e1b4
 8005c34:	20002118 	.word	0x20002118
 8005c38:	2001df7c 	.word	0x2001df7c
 8005c3c:	400264a0 	.word	0x400264a0
 8005c40:	2001e030 	.word	0x2001e030
 8005c44:	2001df1c 	.word	0x2001df1c
 8005c48:	400264b8 	.word	0x400264b8
 8005c4c:	2001dfdc 	.word	0x2001dfdc

08005c50 <SAI_AUDIO_IN_MspInit>:
{
 8005c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c52:	b08b      	sub	sp, #44	@ 0x2c
 8005c54:	4605      	mov	r5, r0
  AUDIO_IN_SAIx_CLK_ENABLE();
 8005c56:	4c3b      	ldr	r4, [pc, #236]	@ (8005d44 <SAI_AUDIO_IN_MspInit+0xf4>)
 8005c58:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005c5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005c5e:	6463      	str	r3, [r4, #68]	@ 0x44
 8005c60:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
 8005c6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005c6c:	f043 0310 	orr.w	r3, r3, #16
 8005c70:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	9302      	str	r3, [sp, #8]
 8005c7a:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8005c7c:	2308      	movs	r3, #8
 8005c7e:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005c80:	2602      	movs	r6, #2
 8005c82:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005c84:	2700      	movs	r7, #0
 8005c86:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005c88:	9608      	str	r6, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8005c8a:	2306      	movs	r3, #6
 8005c8c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8005c8e:	a905      	add	r1, sp, #20
 8005c90:	482d      	ldr	r0, [pc, #180]	@ (8005d48 <SAI_AUDIO_IN_MspInit+0xf8>)
 8005c92:	f003 fa71 	bl	8009178 <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
 8005c96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005c98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca4:	9303      	str	r3, [sp, #12]
 8005ca6:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8005ca8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cac:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8005cae:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005cb0:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005cb2:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8005cb4:	a905      	add	r1, sp, #20
 8005cb6:	4825      	ldr	r0, [pc, #148]	@ (8005d4c <SAI_AUDIO_IN_MspInit+0xfc>)
 8005cb8:	f003 fa5e 	bl	8009178 <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8005cbc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005cbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005cc2:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cc4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cca:	9304      	str	r3, [sp, #16]
 8005ccc:	9b04      	ldr	r3, [sp, #16]
  if (hsai->Instance == AUDIO_IN_SAIx)
 8005cce:	682a      	ldr	r2, [r5, #0]
 8005cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8005d50 <SAI_AUDIO_IN_MspInit+0x100>)
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d011      	beq.n	8005cfa <SAI_AUDIO_IN_MspInit+0xaa>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	210f      	movs	r1, #15
 8005cda:	203c      	movs	r0, #60	@ 0x3c
 8005cdc:	f001 ffa8 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8005ce0:	203c      	movs	r0, #60	@ 0x3c
 8005ce2:	f001 ffb5 	bl	8007c50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	210f      	movs	r1, #15
 8005cea:	2028      	movs	r0, #40	@ 0x28
 8005cec:	f001 ffa0 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8005cf0:	2028      	movs	r0, #40	@ 0x28
 8005cf2:	f001 ffad 	bl	8007c50 <HAL_NVIC_EnableIRQ>
}
 8005cf6:	b00b      	add	sp, #44	@ 0x2c
 8005cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma_sai_rx.Init.Channel = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8005cfa:	4c16      	ldr	r4, [pc, #88]	@ (8005d54 <SAI_AUDIO_IN_MspInit+0x104>)
 8005cfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d00:	6063      	str	r3, [r4, #4]
    hdma_sai_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d02:	60a7      	str	r7, [r4, #8]
    hdma_sai_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d04:	60e7      	str	r7, [r4, #12]
    hdma_sai_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d0a:	6122      	str	r2, [r4, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8005d0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d10:	6162      	str	r2, [r4, #20]
    hdma_sai_rx.Init.MemDataAlignment = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8005d12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005d16:	61a2      	str	r2, [r4, #24]
    hdma_sai_rx.Init.Mode = DMA_CIRCULAR;
 8005d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d1c:	61e2      	str	r2, [r4, #28]
    hdma_sai_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005d1e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d22:	6222      	str	r2, [r4, #32]
    hdma_sai_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d24:	6267      	str	r7, [r4, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005d26:	2203      	movs	r2, #3
 8005d28:	62a2      	str	r2, [r4, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005d2a:	62e7      	str	r7, [r4, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 8005d2c:	6327      	str	r7, [r4, #48]	@ 0x30
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <SAI_AUDIO_IN_MspInit+0x108>)
 8005d30:	6023      	str	r3, [r4, #0]
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8005d32:	672c      	str	r4, [r5, #112]	@ 0x70
 8005d34:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_DMA_DeInit(&hdma_sai_rx);
 8005d36:	4620      	mov	r0, r4
 8005d38:	f002 fb00 	bl	800833c <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f002 fa95 	bl	800826c <HAL_DMA_Init>
 8005d42:	e7c8      	b.n	8005cd6 <SAI_AUDIO_IN_MspInit+0x86>
 8005d44:	40023800 	.word	0x40023800
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	40022400 	.word	0x40022400
 8005d50:	40015824 	.word	0x40015824
 8005d54:	2001de1c 	.word	0x2001de1c
 8005d58:	40026470 	.word	0x40026470

08005d5c <DFSDMx_Init>:
{
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	4604      	mov	r4, r0
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopLeftChannel);
 8005d60:	4ba1      	ldr	r3, [pc, #644]	@ (8005fe8 <DFSDMx_Init+0x28c>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hAudioInTopLeftChannel.Instance = DFSDM1_Channel1;
 8005d68:	4aa0      	ldr	r2, [pc, #640]	@ (8005fec <DFSDMx_Init+0x290>)
 8005d6a:	601a      	str	r2, [r3, #0]
  hAudioInTopLeftChannel.Init.OutputClock.Activation = ENABLE;
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	711a      	strb	r2, [r3, #4]
  hAudioInTopLeftChannel.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8005d70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005d74:	609a      	str	r2, [r3, #8]
  hAudioInTopLeftChannel.Init.OutputClock.Divider = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8005d76:	f5b0 5ffa 	cmp.w	r0, #8000	@ 0x1f40
 8005d7a:	d015      	beq.n	8005da8 <DFSDMx_Init+0x4c>
 8005d7c:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8005d80:	4298      	cmp	r0, r3
 8005d82:	d03a      	beq.n	8005dfa <DFSDMx_Init+0x9e>
 8005d84:	f5b0 5f7a 	cmp.w	r0, #16000	@ 0x3e80
 8005d88:	d039      	beq.n	8005dfe <DFSDMx_Init+0xa2>
 8005d8a:	f245 6322 	movw	r3, #22050	@ 0x5622
 8005d8e:	4298      	cmp	r0, r3
 8005d90:	d037      	beq.n	8005e02 <DFSDMx_Init+0xa6>
 8005d92:	f5b0 4ffa 	cmp.w	r0, #32000	@ 0x7d00
 8005d96:	d036      	beq.n	8005e06 <DFSDMx_Init+0xaa>
 8005d98:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8005d9c:	4298      	cmp	r0, r3
 8005d9e:	d001      	beq.n	8005da4 <DFSDMx_Init+0x48>
 8005da0:	2619      	movs	r6, #25
 8005da2:	e002      	b.n	8005daa <DFSDMx_Init+0x4e>
 8005da4:	2604      	movs	r6, #4
 8005da6:	e000      	b.n	8005daa <DFSDMx_Init+0x4e>
 8005da8:	2618      	movs	r6, #24
 8005daa:	4b8f      	ldr	r3, [pc, #572]	@ (8005fe8 <DFSDMx_Init+0x28c>)
 8005dac:	60de      	str	r6, [r3, #12]
  hAudioInTopLeftChannel.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8005dae:	2200      	movs	r2, #0
 8005db0:	611a      	str	r2, [r3, #16]
  hAudioInTopLeftChannel.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8005db2:	615a      	str	r2, [r3, #20]
  hAudioInTopLeftChannel.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8005db4:	619a      	str	r2, [r3, #24]
  hAudioInTopLeftChannel.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8005db6:	61da      	str	r2, [r3, #28]
  hAudioInTopLeftChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8005db8:	2104      	movs	r1, #4
 8005dba:	6219      	str	r1, [r3, #32]
  hAudioInTopLeftChannel.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8005dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hAudioInTopLeftChannel.Init.Awd.Oversampling = 10;
 8005dbe:	210a      	movs	r1, #10
 8005dc0:	6299      	str	r1, [r3, #40]	@ 0x28
  hAudioInTopLeftChannel.Init.Offset = 0;
 8005dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hAudioInTopLeftChannel.Init.RightBitShift = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8005dc4:	f5b4 5ffa 	cmp.w	r4, #8000	@ 0x1f40
 8005dc8:	d021      	beq.n	8005e0e <DFSDMx_Init+0xb2>
 8005dca:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	d025      	beq.n	8005e1e <DFSDMx_Init+0xc2>
 8005dd2:	f5b4 5f7a 	cmp.w	r4, #16000	@ 0x3e80
 8005dd6:	d024      	beq.n	8005e22 <DFSDMx_Init+0xc6>
 8005dd8:	f245 6322 	movw	r3, #22050	@ 0x5622
 8005ddc:	429c      	cmp	r4, r3
 8005dde:	d022      	beq.n	8005e26 <DFSDMx_Init+0xca>
 8005de0:	f5b4 4ffa 	cmp.w	r4, #32000	@ 0x7d00
 8005de4:	d021      	beq.n	8005e2a <DFSDMx_Init+0xce>
 8005de6:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8005dea:	429c      	cmp	r4, r3
 8005dec:	d01f      	beq.n	8005e2e <DFSDMx_Init+0xd2>
 8005dee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005df2:	429c      	cmp	r4, r3
 8005df4:	d009      	beq.n	8005e0a <DFSDMx_Init+0xae>
 8005df6:	2504      	movs	r5, #4
 8005df8:	e00a      	b.n	8005e10 <DFSDMx_Init+0xb4>
  hAudioInTopLeftChannel.Init.OutputClock.Divider = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8005dfa:	2604      	movs	r6, #4
 8005dfc:	e7d5      	b.n	8005daa <DFSDMx_Init+0x4e>
 8005dfe:	2618      	movs	r6, #24
 8005e00:	e7d3      	b.n	8005daa <DFSDMx_Init+0x4e>
 8005e02:	2604      	movs	r6, #4
 8005e04:	e7d1      	b.n	8005daa <DFSDMx_Init+0x4e>
 8005e06:	2618      	movs	r6, #24
 8005e08:	e7cf      	b.n	8005daa <DFSDMx_Init+0x4e>
  hAudioInTopLeftChannel.Init.RightBitShift = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8005e0a:	4615      	mov	r5, r2
 8005e0c:	e000      	b.n	8005e10 <DFSDMx_Init+0xb4>
 8005e0e:	2508      	movs	r5, #8
 8005e10:	4875      	ldr	r0, [pc, #468]	@ (8005fe8 <DFSDMx_Init+0x28c>)
 8005e12:	6305      	str	r5, [r0, #48]	@ 0x30
  if (HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopLeftChannel))
 8005e14:	f002 f804 	bl	8007e20 <HAL_DFSDM_ChannelInit>
 8005e18:	b158      	cbz	r0, 8005e32 <DFSDMx_Init+0xd6>
    return AUDIO_ERROR;
 8005e1a:	2001      	movs	r0, #1
}
 8005e1c:	bd70      	pop	{r4, r5, r6, pc}
  hAudioInTopLeftChannel.Init.RightBitShift = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8005e1e:	2508      	movs	r5, #8
 8005e20:	e7f6      	b.n	8005e10 <DFSDMx_Init+0xb4>
 8005e22:	2503      	movs	r5, #3
 8005e24:	e7f4      	b.n	8005e10 <DFSDMx_Init+0xb4>
 8005e26:	2504      	movs	r5, #4
 8005e28:	e7f2      	b.n	8005e10 <DFSDMx_Init+0xb4>
 8005e2a:	2507      	movs	r5, #7
 8005e2c:	e7f0      	b.n	8005e10 <DFSDMx_Init+0xb4>
 8005e2e:	2500      	movs	r5, #0
 8005e30:	e7ee      	b.n	8005e10 <DFSDMx_Init+0xb4>
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopRightChannel);
 8005e32:	486f      	ldr	r0, [pc, #444]	@ (8005ff0 <DFSDMx_Init+0x294>)
 8005e34:	2300      	movs	r3, #0
 8005e36:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  hAudioInTopRightChannel.Instance = DFSDM1_Channel0;
 8005e3a:	4a6e      	ldr	r2, [pc, #440]	@ (8005ff4 <DFSDMx_Init+0x298>)
 8005e3c:	6002      	str	r2, [r0, #0]
  hAudioInTopRightChannel.Init.OutputClock.Activation = ENABLE;
 8005e3e:	2201      	movs	r2, #1
 8005e40:	7102      	strb	r2, [r0, #4]
  hAudioInTopRightChannel.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8005e42:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005e46:	6081      	str	r1, [r0, #8]
  hAudioInTopRightChannel.Init.OutputClock.Divider = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8005e48:	60c6      	str	r6, [r0, #12]
  hAudioInTopRightChannel.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8005e4a:	6103      	str	r3, [r0, #16]
  hAudioInTopRightChannel.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8005e4c:	6143      	str	r3, [r0, #20]
  hAudioInTopRightChannel.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8005e4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005e52:	6181      	str	r1, [r0, #24]
  hAudioInTopRightChannel.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8005e54:	61c2      	str	r2, [r0, #28]
  hAudioInTopRightChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8005e56:	2204      	movs	r2, #4
 8005e58:	6202      	str	r2, [r0, #32]
  hAudioInTopRightChannel.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8005e5a:	6243      	str	r3, [r0, #36]	@ 0x24
  hAudioInTopRightChannel.Init.Awd.Oversampling = 10;
 8005e5c:	220a      	movs	r2, #10
 8005e5e:	6282      	str	r2, [r0, #40]	@ 0x28
  hAudioInTopRightChannel.Init.Offset = 0;
 8005e60:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hAudioInTopRightChannel.Init.RightBitShift = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8005e62:	6305      	str	r5, [r0, #48]	@ 0x30
  if (HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopRightChannel))
 8005e64:	f001 ffdc 	bl	8007e20 <HAL_DFSDM_ChannelInit>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	f040 813e 	bne.w	80060ea <DFSDMx_Init+0x38e>
  if (AudioIn_ChannelNumber > 2)
 8005e6e:	4b62      	ldr	r3, [pc, #392]	@ (8005ff8 <DFSDMx_Init+0x29c>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d82c      	bhi.n	8005ed0 <DFSDMx_Init+0x174>
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopLeftFilter);
 8005e76:	4b61      	ldr	r3, [pc, #388]	@ (8005ffc <DFSDMx_Init+0x2a0>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  hAudioInTopLeftFilter.Instance = AUDIO_DFSDMx_TOP_LEFT_FILTER;
 8005e7e:	4960      	ldr	r1, [pc, #384]	@ (8006000 <DFSDMx_Init+0x2a4>)
 8005e80:	6019      	str	r1, [r3, #0]
  hAudioInTopLeftFilter.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8005e82:	605a      	str	r2, [r3, #4]
  hAudioInTopLeftFilter.Init.RegularParam.FastMode = ENABLE;
 8005e84:	2101      	movs	r1, #1
 8005e86:	7219      	strb	r1, [r3, #8]
  hAudioInTopLeftFilter.Init.RegularParam.DmaMode = ENABLE;
 8005e88:	7259      	strb	r1, [r3, #9]
  hAudioInTopLeftFilter.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8005e8a:	60da      	str	r2, [r3, #12]
  hAudioInTopLeftFilter.Init.InjectedParam.ScanMode = ENABLE;
 8005e8c:	7419      	strb	r1, [r3, #16]
  hAudioInTopLeftFilter.Init.InjectedParam.DmaMode = DISABLE;
 8005e8e:	745a      	strb	r2, [r3, #17]
  hAudioInTopLeftFilter.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8005e90:	615a      	str	r2, [r3, #20]
  hAudioInTopLeftFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8005e92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005e96:	619a      	str	r2, [r3, #24]
  hAudioInTopLeftFilter.Init.FilterParam.SincOrder = DFSDM_FILTER_ORDER(AudioFreq);
 8005e98:	f5b4 5ffa 	cmp.w	r4, #8000	@ 0x1f40
 8005e9c:	d056      	beq.n	8005f4c <DFSDMx_Init+0x1f0>
 8005e9e:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8005ea2:	429c      	cmp	r4, r3
 8005ea4:	d071      	beq.n	8005f8a <DFSDMx_Init+0x22e>
 8005ea6:	f5b4 5f7a 	cmp.w	r4, #16000	@ 0x3e80
 8005eaa:	d071      	beq.n	8005f90 <DFSDMx_Init+0x234>
 8005eac:	f245 6322 	movw	r3, #22050	@ 0x5622
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	d070      	beq.n	8005f96 <DFSDMx_Init+0x23a>
 8005eb4:	f5b4 4ffa 	cmp.w	r4, #32000	@ 0x7d00
 8005eb8:	d070      	beq.n	8005f9c <DFSDMx_Init+0x240>
 8005eba:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8005ebe:	429c      	cmp	r4, r3
 8005ec0:	d06f      	beq.n	8005fa2 <DFSDMx_Init+0x246>
 8005ec2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005ec6:	429c      	cmp	r4, r3
 8005ec8:	d03d      	beq.n	8005f46 <DFSDMx_Init+0x1ea>
 8005eca:	f04f 4520 	mov.w	r5, #2684354560	@ 0xa0000000
 8005ece:	e03f      	b.n	8005f50 <DFSDMx_Init+0x1f4>
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomLeftChannel);
 8005ed0:	484c      	ldr	r0, [pc, #304]	@ (8006004 <DFSDMx_Init+0x2a8>)
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    hAudioInButtomLeftChannel.Instance = DFSDM1_Channel5;
 8005ed8:	4a4b      	ldr	r2, [pc, #300]	@ (8006008 <DFSDMx_Init+0x2ac>)
 8005eda:	6002      	str	r2, [r0, #0]
    hAudioInButtomLeftChannel.Init.OutputClock.Activation = ENABLE;
 8005edc:	2201      	movs	r2, #1
 8005ede:	7102      	strb	r2, [r0, #4]
    hAudioInButtomLeftChannel.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8005ee0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005ee4:	6082      	str	r2, [r0, #8]
    hAudioInButtomLeftChannel.Init.OutputClock.Divider = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8005ee6:	60c6      	str	r6, [r0, #12]
    hAudioInButtomLeftChannel.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8005ee8:	6103      	str	r3, [r0, #16]
    hAudioInButtomLeftChannel.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8005eea:	6143      	str	r3, [r0, #20]
    hAudioInButtomLeftChannel.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8005eec:	6183      	str	r3, [r0, #24]
    hAudioInButtomLeftChannel.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8005eee:	61c3      	str	r3, [r0, #28]
    hAudioInButtomLeftChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	6202      	str	r2, [r0, #32]
    hAudioInButtomLeftChannel.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8005ef4:	6243      	str	r3, [r0, #36]	@ 0x24
    hAudioInButtomLeftChannel.Init.Awd.Oversampling = 10;
 8005ef6:	220a      	movs	r2, #10
 8005ef8:	6282      	str	r2, [r0, #40]	@ 0x28
    hAudioInButtomLeftChannel.Init.Offset = 0;
 8005efa:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hAudioInButtomLeftChannel.Init.RightBitShift = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8005efc:	6305      	str	r5, [r0, #48]	@ 0x30
    if (HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomLeftChannel))
 8005efe:	f001 ff8f 	bl	8007e20 <HAL_DFSDM_ChannelInit>
 8005f02:	b108      	cbz	r0, 8005f08 <DFSDMx_Init+0x1ac>
      return AUDIO_ERROR;
 8005f04:	2001      	movs	r0, #1
 8005f06:	e789      	b.n	8005e1c <DFSDMx_Init+0xc0>
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomRightChannel);
 8005f08:	4840      	ldr	r0, [pc, #256]	@ (800600c <DFSDMx_Init+0x2b0>)
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    hAudioInButtomRightChannel.Instance = DFSDM1_Channel4;
 8005f10:	4a3f      	ldr	r2, [pc, #252]	@ (8006010 <DFSDMx_Init+0x2b4>)
 8005f12:	6002      	str	r2, [r0, #0]
    hAudioInButtomRightChannel.Init.OutputClock.Activation = ENABLE;
 8005f14:	2201      	movs	r2, #1
 8005f16:	7102      	strb	r2, [r0, #4]
    hAudioInButtomRightChannel.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8005f18:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005f1c:	6081      	str	r1, [r0, #8]
    hAudioInButtomRightChannel.Init.OutputClock.Divider = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8005f1e:	60c6      	str	r6, [r0, #12]
    hAudioInButtomRightChannel.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8005f20:	6103      	str	r3, [r0, #16]
    hAudioInButtomRightChannel.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8005f22:	6143      	str	r3, [r0, #20]
    hAudioInButtomRightChannel.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8005f24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005f28:	6181      	str	r1, [r0, #24]
    hAudioInButtomRightChannel.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8005f2a:	61c2      	str	r2, [r0, #28]
    hAudioInButtomRightChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	6202      	str	r2, [r0, #32]
    hAudioInButtomRightChannel.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8005f30:	6243      	str	r3, [r0, #36]	@ 0x24
    hAudioInButtomRightChannel.Init.Awd.Oversampling = 10;
 8005f32:	220a      	movs	r2, #10
 8005f34:	6282      	str	r2, [r0, #40]	@ 0x28
    hAudioInButtomRightChannel.Init.Offset = 0;
 8005f36:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hAudioInButtomRightChannel.Init.RightBitShift = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8005f38:	6305      	str	r5, [r0, #48]	@ 0x30
    if (HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomRightChannel))
 8005f3a:	f001 ff71 	bl	8007e20 <HAL_DFSDM_ChannelInit>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d099      	beq.n	8005e76 <DFSDMx_Init+0x11a>
      return AUDIO_ERROR;
 8005f42:	2001      	movs	r0, #1
 8005f44:	e76a      	b.n	8005e1c <DFSDMx_Init+0xc0>
  hAudioInTopLeftFilter.Init.FilterParam.SincOrder = DFSDM_FILTER_ORDER(AudioFreq);
 8005f46:	f04f 45c0 	mov.w	r5, #1610612736	@ 0x60000000
 8005f4a:	e001      	b.n	8005f50 <DFSDMx_Init+0x1f4>
 8005f4c:	f04f 45c0 	mov.w	r5, #1610612736	@ 0x60000000
 8005f50:	4b2a      	ldr	r3, [pc, #168]	@ (8005ffc <DFSDMx_Init+0x2a0>)
 8005f52:	61dd      	str	r5, [r3, #28]
  hAudioInTopLeftFilter.Init.FilterParam.Oversampling = DFSDM_OVER_SAMPLING(AudioFreq);
 8005f54:	f5b4 5ffa 	cmp.w	r4, #8000	@ 0x1f40
 8005f58:	d028      	beq.n	8005fac <DFSDMx_Init+0x250>
 8005f5a:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8005f5e:	429c      	cmp	r4, r3
 8005f60:	d02f      	beq.n	8005fc2 <DFSDMx_Init+0x266>
 8005f62:	f5b4 5f7a 	cmp.w	r4, #16000	@ 0x3e80
 8005f66:	d02f      	beq.n	8005fc8 <DFSDMx_Init+0x26c>
 8005f68:	f245 6322 	movw	r3, #22050	@ 0x5622
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	d02d      	beq.n	8005fcc <DFSDMx_Init+0x270>
 8005f70:	f5b4 4ffa 	cmp.w	r4, #32000	@ 0x7d00
 8005f74:	d02c      	beq.n	8005fd0 <DFSDMx_Init+0x274>
 8005f76:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8005f7a:	429c      	cmp	r4, r3
 8005f7c:	d02a      	beq.n	8005fd4 <DFSDMx_Init+0x278>
 8005f7e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005f82:	429c      	cmp	r4, r3
 8005f84:	d010      	beq.n	8005fa8 <DFSDMx_Init+0x24c>
 8005f86:	2414      	movs	r4, #20
 8005f88:	e012      	b.n	8005fb0 <DFSDMx_Init+0x254>
  hAudioInTopLeftFilter.Init.FilterParam.SincOrder = DFSDM_FILTER_ORDER(AudioFreq);
 8005f8a:	f04f 45c0 	mov.w	r5, #1610612736	@ 0x60000000
 8005f8e:	e7df      	b.n	8005f50 <DFSDMx_Init+0x1f4>
 8005f90:	f04f 45c0 	mov.w	r5, #1610612736	@ 0x60000000
 8005f94:	e7dc      	b.n	8005f50 <DFSDMx_Init+0x1f4>
 8005f96:	f04f 45c0 	mov.w	r5, #1610612736	@ 0x60000000
 8005f9a:	e7d9      	b.n	8005f50 <DFSDMx_Init+0x1f4>
 8005f9c:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 8005fa0:	e7d6      	b.n	8005f50 <DFSDMx_Init+0x1f4>
 8005fa2:	f04f 45c0 	mov.w	r5, #1610612736	@ 0x60000000
 8005fa6:	e7d3      	b.n	8005f50 <DFSDMx_Init+0x1f4>
  hAudioInTopLeftFilter.Init.FilterParam.Oversampling = DFSDM_OVER_SAMPLING(AudioFreq);
 8005fa8:	2428      	movs	r4, #40	@ 0x28
 8005faa:	e001      	b.n	8005fb0 <DFSDMx_Init+0x254>
 8005fac:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8005fb0:	4812      	ldr	r0, [pc, #72]	@ (8005ffc <DFSDMx_Init+0x2a0>)
 8005fb2:	6204      	str	r4, [r0, #32]
  hAudioInTopLeftFilter.Init.FilterParam.IntOversampling = 1;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopLeftFilter))
 8005fb8:	f001 ffb8 	bl	8007f2c <HAL_DFSDM_FilterInit>
 8005fbc:	b160      	cbz	r0, 8005fd8 <DFSDMx_Init+0x27c>
    return AUDIO_ERROR;
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	e72c      	b.n	8005e1c <DFSDMx_Init+0xc0>
  hAudioInTopLeftFilter.Init.FilterParam.Oversampling = DFSDM_OVER_SAMPLING(AudioFreq);
 8005fc2:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8005fc6:	e7f3      	b.n	8005fb0 <DFSDMx_Init+0x254>
 8005fc8:	2480      	movs	r4, #128	@ 0x80
 8005fca:	e7f1      	b.n	8005fb0 <DFSDMx_Init+0x254>
 8005fcc:	2480      	movs	r4, #128	@ 0x80
 8005fce:	e7ef      	b.n	8005fb0 <DFSDMx_Init+0x254>
 8005fd0:	2440      	movs	r4, #64	@ 0x40
 8005fd2:	e7ed      	b.n	8005fb0 <DFSDMx_Init+0x254>
 8005fd4:	2440      	movs	r4, #64	@ 0x40
 8005fd6:	e7eb      	b.n	8005fb0 <DFSDMx_Init+0x254>
  if (HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInTopLeftFilter, AUDIO_DFSDMx_TOP_LEFT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8005fd8:	2201      	movs	r2, #1
 8005fda:	490e      	ldr	r1, [pc, #56]	@ (8006014 <DFSDMx_Init+0x2b8>)
 8005fdc:	4807      	ldr	r0, [pc, #28]	@ (8005ffc <DFSDMx_Init+0x2a0>)
 8005fde:	f002 f839 	bl	8008054 <HAL_DFSDM_FilterConfigRegChannel>
 8005fe2:	b1c8      	cbz	r0, 8006018 <DFSDMx_Init+0x2bc>
    return AUDIO_ERROR;
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	e719      	b.n	8005e1c <DFSDMx_Init+0xc0>
 8005fe8:	2001e294 	.word	0x2001e294
 8005fec:	40017420 	.word	0x40017420
 8005ff0:	2001e25c 	.word	0x2001e25c
 8005ff4:	40017400 	.word	0x40017400
 8005ff8:	20002118 	.word	0x20002118
 8005ffc:	2001e208 	.word	0x2001e208
 8006000:	40017500 	.word	0x40017500
 8006004:	2001e0bc 	.word	0x2001e0bc
 8006008:	400174a0 	.word	0x400174a0
 800600c:	2001e084 	.word	0x2001e084
 8006010:	40017480 	.word	0x40017480
 8006014:	00010002 	.word	0x00010002
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopRightFilter);
 8006018:	4836      	ldr	r0, [pc, #216]	@ (80060f4 <DFSDMx_Init+0x398>)
 800601a:	2300      	movs	r3, #0
 800601c:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  hAudioInTopRightFilter.Instance = AUDIO_DFSDMx_TOP_RIGHT_FILTER;
 8006020:	4a35      	ldr	r2, [pc, #212]	@ (80060f8 <DFSDMx_Init+0x39c>)
 8006022:	6002      	str	r2, [r0, #0]
  hAudioInTopRightFilter.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 8006024:	2201      	movs	r2, #1
 8006026:	6042      	str	r2, [r0, #4]
  hAudioInTopRightFilter.Init.RegularParam.FastMode = ENABLE;
 8006028:	7202      	strb	r2, [r0, #8]
  hAudioInTopRightFilter.Init.RegularParam.DmaMode = ENABLE;
 800602a:	7242      	strb	r2, [r0, #9]
  hAudioInTopRightFilter.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800602c:	60c3      	str	r3, [r0, #12]
  hAudioInTopRightFilter.Init.InjectedParam.ScanMode = DISABLE;
 800602e:	7403      	strb	r3, [r0, #16]
  hAudioInTopRightFilter.Init.InjectedParam.DmaMode = DISABLE;
 8006030:	7443      	strb	r3, [r0, #17]
  hAudioInTopRightFilter.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8006032:	6143      	str	r3, [r0, #20]
  hAudioInTopRightFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8006034:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006038:	6183      	str	r3, [r0, #24]
  hAudioInTopRightFilter.Init.FilterParam.SincOrder = DFSDM_FILTER_ORDER(AudioFreq);
 800603a:	61c5      	str	r5, [r0, #28]
  hAudioInTopRightFilter.Init.FilterParam.Oversampling = DFSDM_OVER_SAMPLING(AudioFreq);
 800603c:	6204      	str	r4, [r0, #32]
  hAudioInTopRightFilter.Init.FilterParam.IntOversampling = 1;
 800603e:	6242      	str	r2, [r0, #36]	@ 0x24
  if (HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopRightFilter))
 8006040:	f001 ff74 	bl	8007f2c <HAL_DFSDM_FilterInit>
 8006044:	b108      	cbz	r0, 800604a <DFSDMx_Init+0x2ee>
    return AUDIO_ERROR;
 8006046:	2001      	movs	r0, #1
 8006048:	e6e8      	b.n	8005e1c <DFSDMx_Init+0xc0>
  if (HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInTopRightFilter, AUDIO_DFSDMx_TOP_RIGHT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 800604a:	2201      	movs	r2, #1
 800604c:	4611      	mov	r1, r2
 800604e:	4829      	ldr	r0, [pc, #164]	@ (80060f4 <DFSDMx_Init+0x398>)
 8006050:	f002 f800 	bl	8008054 <HAL_DFSDM_FilterConfigRegChannel>
 8006054:	2800      	cmp	r0, #0
 8006056:	d14a      	bne.n	80060ee <DFSDMx_Init+0x392>
  if (AudioIn_ChannelNumber > 2)
 8006058:	4b28      	ldr	r3, [pc, #160]	@ (80060fc <DFSDMx_Init+0x3a0>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b02      	cmp	r3, #2
 800605e:	f67f aedd 	bls.w	8005e1c <DFSDMx_Init+0xc0>
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomLeftFilter);
 8006062:	4827      	ldr	r0, [pc, #156]	@ (8006100 <DFSDMx_Init+0x3a4>)
 8006064:	2200      	movs	r2, #0
 8006066:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    hAudioInButtomLeftFilter.Instance = AUDIO_DFSDMx_BUTTOM_LEFT_FILTER;
 800606a:	4b26      	ldr	r3, [pc, #152]	@ (8006104 <DFSDMx_Init+0x3a8>)
 800606c:	6003      	str	r3, [r0, #0]
    hAudioInButtomLeftFilter.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 800606e:	2301      	movs	r3, #1
 8006070:	6043      	str	r3, [r0, #4]
    hAudioInButtomLeftFilter.Init.RegularParam.FastMode = ENABLE;
 8006072:	7203      	strb	r3, [r0, #8]
    hAudioInButtomLeftFilter.Init.RegularParam.DmaMode = ENABLE;
 8006074:	7243      	strb	r3, [r0, #9]
    hAudioInButtomLeftFilter.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8006076:	60c2      	str	r2, [r0, #12]
    hAudioInButtomLeftFilter.Init.InjectedParam.ScanMode = ENABLE;
 8006078:	7403      	strb	r3, [r0, #16]
    hAudioInButtomLeftFilter.Init.InjectedParam.DmaMode = DISABLE;
 800607a:	7442      	strb	r2, [r0, #17]
    hAudioInButtomLeftFilter.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800607c:	6142      	str	r2, [r0, #20]
    hAudioInButtomLeftFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 800607e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006082:	6182      	str	r2, [r0, #24]
    hAudioInButtomLeftFilter.Init.FilterParam.SincOrder = DFSDM_FILTER_ORDER(AudioFreq);
 8006084:	61c5      	str	r5, [r0, #28]
    hAudioInButtomLeftFilter.Init.FilterParam.Oversampling = DFSDM_OVER_SAMPLING(AudioFreq);
 8006086:	6204      	str	r4, [r0, #32]
    hAudioInButtomLeftFilter.Init.FilterParam.IntOversampling = 1;
 8006088:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomLeftFilter))
 800608a:	f001 ff4f 	bl	8007f2c <HAL_DFSDM_FilterInit>
 800608e:	b108      	cbz	r0, 8006094 <DFSDMx_Init+0x338>
      return AUDIO_ERROR;
 8006090:	2001      	movs	r0, #1
 8006092:	e6c3      	b.n	8005e1c <DFSDMx_Init+0xc0>
    if (HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInButtomLeftFilter, AUDIO_DFSDMx_BUTTOM_LEFT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8006094:	2201      	movs	r2, #1
 8006096:	491c      	ldr	r1, [pc, #112]	@ (8006108 <DFSDMx_Init+0x3ac>)
 8006098:	4819      	ldr	r0, [pc, #100]	@ (8006100 <DFSDMx_Init+0x3a4>)
 800609a:	f001 ffdb 	bl	8008054 <HAL_DFSDM_FilterConfigRegChannel>
 800609e:	b108      	cbz	r0, 80060a4 <DFSDMx_Init+0x348>
      return AUDIO_ERROR;
 80060a0:	2001      	movs	r0, #1
 80060a2:	e6bb      	b.n	8005e1c <DFSDMx_Init+0xc0>
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomRightFilter);
 80060a4:	4819      	ldr	r0, [pc, #100]	@ (800610c <DFSDMx_Init+0x3b0>)
 80060a6:	2300      	movs	r3, #0
 80060a8:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
    hAudioInButtomRightFilter.Instance = AUDIO_DFSDMx_BUTTOM_RIGHT_FILTER;
 80060ac:	4a18      	ldr	r2, [pc, #96]	@ (8006110 <DFSDMx_Init+0x3b4>)
 80060ae:	6002      	str	r2, [r0, #0]
    hAudioInButtomRightFilter.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 80060b0:	2201      	movs	r2, #1
 80060b2:	6042      	str	r2, [r0, #4]
    hAudioInButtomRightFilter.Init.RegularParam.FastMode = ENABLE;
 80060b4:	7202      	strb	r2, [r0, #8]
    hAudioInButtomRightFilter.Init.RegularParam.DmaMode = ENABLE;
 80060b6:	7242      	strb	r2, [r0, #9]
    hAudioInButtomRightFilter.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80060b8:	60c3      	str	r3, [r0, #12]
    hAudioInButtomRightFilter.Init.InjectedParam.ScanMode = DISABLE;
 80060ba:	7403      	strb	r3, [r0, #16]
    hAudioInButtomRightFilter.Init.InjectedParam.DmaMode = DISABLE;
 80060bc:	7443      	strb	r3, [r0, #17]
    hAudioInButtomRightFilter.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80060be:	6143      	str	r3, [r0, #20]
    hAudioInButtomRightFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80060c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060c4:	6183      	str	r3, [r0, #24]
    hAudioInButtomRightFilter.Init.FilterParam.SincOrder = DFSDM_FILTER_ORDER(AudioFreq);
 80060c6:	61c5      	str	r5, [r0, #28]
    hAudioInButtomRightFilter.Init.FilterParam.Oversampling = DFSDM_OVER_SAMPLING(AudioFreq);
 80060c8:	6204      	str	r4, [r0, #32]
    hAudioInButtomRightFilter.Init.FilterParam.IntOversampling = 1;
 80060ca:	6242      	str	r2, [r0, #36]	@ 0x24
    if (HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomRightFilter))
 80060cc:	f001 ff2e 	bl	8007f2c <HAL_DFSDM_FilterInit>
 80060d0:	b108      	cbz	r0, 80060d6 <DFSDMx_Init+0x37a>
      return AUDIO_ERROR;
 80060d2:	2001      	movs	r0, #1
 80060d4:	e6a2      	b.n	8005e1c <DFSDMx_Init+0xc0>
    if (HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInButtomRightFilter, AUDIO_DFSDMx_BUTTOM_RIGHT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 80060d6:	2201      	movs	r2, #1
 80060d8:	490e      	ldr	r1, [pc, #56]	@ (8006114 <DFSDMx_Init+0x3b8>)
 80060da:	480c      	ldr	r0, [pc, #48]	@ (800610c <DFSDMx_Init+0x3b0>)
 80060dc:	f001 ffba 	bl	8008054 <HAL_DFSDM_FilterConfigRegChannel>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	f43f ae9b 	beq.w	8005e1c <DFSDMx_Init+0xc0>
      return AUDIO_ERROR;
 80060e6:	2001      	movs	r0, #1
 80060e8:	e698      	b.n	8005e1c <DFSDMx_Init+0xc0>
    return AUDIO_ERROR;
 80060ea:	2001      	movs	r0, #1
 80060ec:	e696      	b.n	8005e1c <DFSDMx_Init+0xc0>
    return AUDIO_ERROR;
 80060ee:	2001      	movs	r0, #1
 80060f0:	e694      	b.n	8005e1c <DFSDMx_Init+0xc0>
 80060f2:	bf00      	nop
 80060f4:	2001e1b4 	.word	0x2001e1b4
 80060f8:	40017580 	.word	0x40017580
 80060fc:	20002118 	.word	0x20002118
 8006100:	2001e030 	.word	0x2001e030
 8006104:	40017600 	.word	0x40017600
 8006108:	00050020 	.word	0x00050020
 800610c:	2001dfdc 	.word	0x2001dfdc
 8006110:	40017680 	.word	0x40017680
 8006114:	00040010 	.word	0x00040010

08006118 <BSP_AUDIO_OUT_Play>:
{
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4605      	mov	r5, r0
 800611c:	460c      	mov	r4, r1
  if (audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 800611e:	4b0c      	ldr	r3, [pc, #48]	@ (8006150 <BSP_AUDIO_OUT_Play+0x38>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	b28a      	uxth	r2, r1
 8006126:	4601      	mov	r1, r0
 8006128:	2034      	movs	r0, #52	@ 0x34
 800612a:	4798      	blx	r3
 800612c:	b968      	cbnz	r0, 800614a <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t *)pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 800612e:	f5b4 3f00 	cmp.w	r4, #131072	@ 0x20000
 8006132:	d202      	bcs.n	800613a <BSP_AUDIO_OUT_Play+0x22>
 8006134:	f3c4 024f 	ubfx	r2, r4, #1, #16
 8006138:	e001      	b.n	800613e <BSP_AUDIO_OUT_Play+0x26>
 800613a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800613e:	4629      	mov	r1, r5
 8006140:	4804      	ldr	r0, [pc, #16]	@ (8006154 <BSP_AUDIO_OUT_Play+0x3c>)
 8006142:	f005 fb37 	bl	800b7b4 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 8006146:	2000      	movs	r0, #0
}
 8006148:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 800614a:	2001      	movs	r0, #1
 800614c:	e7fc      	b.n	8006148 <BSP_AUDIO_OUT_Play+0x30>
 800614e:	bf00      	nop
 8006150:	2001e3dc 	.word	0x2001e3dc
 8006154:	2001e358 	.word	0x2001e358

08006158 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
{
 8006158:	b510      	push	{r4, lr}
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800615a:	4c08      	ldr	r4, [pc, #32]	@ (800617c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x24>)
 800615c:	6822      	ldr	r2, [r4, #0]
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006164:	6013      	str	r3, [r2, #0]
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8006166:	6620      	str	r0, [r4, #96]	@ 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8006168:	4620      	mov	r0, r4
 800616a:	f005 f9ff 	bl	800b56c <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800616e:	6822      	ldr	r2, [r4, #0]
 8006170:	6813      	ldr	r3, [r2, #0]
 8006172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006176:	6013      	str	r3, [r2, #0]
}
 8006178:	bd10      	pop	{r4, pc}
 800617a:	bf00      	nop
 800617c:	2001e358 	.word	0x2001e358

08006180 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
}
 8006180:	4770      	bx	lr

08006182 <HAL_SAI_TxCpltCallback>:
{
 8006182:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8006184:	f7ff fffc 	bl	8006180 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8006188:	bd08      	pop	{r3, pc}

0800618a <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
}
 800618a:	4770      	bx	lr

0800618c <HAL_SAI_TxHalfCpltCallback>:
{
 800618c:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 800618e:	f7ff fffc 	bl	800618a <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8006192:	bd08      	pop	{r3, pc}

08006194 <BSP_AUDIO_OUT_Error_CallBack>:
}
 8006194:	4770      	bx	lr
	...

08006198 <BSP_AUDIO_OUT_MspInit>:
{
 8006198:	b530      	push	{r4, r5, lr}
 800619a:	b08b      	sub	sp, #44	@ 0x2c
 800619c:	4605      	mov	r5, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800619e:	4c36      	ldr	r4, [pc, #216]	@ (8006278 <BSP_AUDIO_OUT_MspInit+0xe0>)
 80061a0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80061a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80061a6:	6463      	str	r3, [r4, #68]	@ 0x44
 80061a8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80061aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80061b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80061b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80061ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80061bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c0:	9302      	str	r3, [sp, #8]
 80061c2:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 80061c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80061c6:	f043 0310 	orr.w	r3, r3, #16
 80061ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80061cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	9303      	str	r3, [sp, #12]
 80061d4:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 80061d6:	2370      	movs	r3, #112	@ 0x70
 80061d8:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80061da:	2302      	movs	r3, #2
 80061dc:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80061e2:	2303      	movs	r3, #3
 80061e4:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 80061e6:	2306      	movs	r3, #6
 80061e8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 80061ea:	a905      	add	r1, sp, #20
 80061ec:	4823      	ldr	r0, [pc, #140]	@ (800627c <BSP_AUDIO_OUT_MspInit+0xe4>)
 80061ee:	f002 ffc3 	bl	8009178 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80061f2:	2380      	movs	r3, #128	@ 0x80
 80061f4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80061f6:	a905      	add	r1, sp, #20
 80061f8:	4821      	ldr	r0, [pc, #132]	@ (8006280 <BSP_AUDIO_OUT_MspInit+0xe8>)
 80061fa:	f002 ffbd 	bl	8009178 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80061fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006200:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006204:	6323      	str	r3, [r4, #48]	@ 0x30
 8006206:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800620c:	9304      	str	r3, [sp, #16]
 800620e:	9b04      	ldr	r3, [sp, #16]
  if (hsai->Instance == AUDIO_OUT_SAIx)
 8006210:	682a      	ldr	r2, [r5, #0]
 8006212:	4b1c      	ldr	r3, [pc, #112]	@ (8006284 <BSP_AUDIO_OUT_MspInit+0xec>)
 8006214:	429a      	cmp	r2, r3
 8006216:	d009      	beq.n	800622c <BSP_AUDIO_OUT_MspInit+0x94>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8006218:	2200      	movs	r2, #0
 800621a:	210e      	movs	r1, #14
 800621c:	2039      	movs	r0, #57	@ 0x39
 800621e:	f001 fd07 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8006222:	2039      	movs	r0, #57	@ 0x39
 8006224:	f001 fd14 	bl	8007c50 <HAL_NVIC_EnableIRQ>
}
 8006228:	b00b      	add	sp, #44	@ 0x2c
 800622a:	bd30      	pop	{r4, r5, pc}
    hdma_sai_tx.Init.Channel = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800622c:	4c16      	ldr	r4, [pc, #88]	@ (8006288 <BSP_AUDIO_OUT_MspInit+0xf0>)
 800622e:	2300      	movs	r3, #0
 8006230:	6063      	str	r3, [r4, #4]
    hdma_sai_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006232:	2240      	movs	r2, #64	@ 0x40
 8006234:	60a2      	str	r2, [r4, #8]
    hdma_sai_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006236:	60e3      	str	r3, [r4, #12]
    hdma_sai_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006238:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800623c:	6122      	str	r2, [r4, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 800623e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006242:	6162      	str	r2, [r4, #20]
    hdma_sai_tx.Init.MemDataAlignment = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8006244:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006248:	61a2      	str	r2, [r4, #24]
    hdma_sai_tx.Init.Mode = DMA_CIRCULAR;
 800624a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800624e:	61e2      	str	r2, [r4, #28]
    hdma_sai_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006250:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006254:	6222      	str	r2, [r4, #32]
    hdma_sai_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006256:	2204      	movs	r2, #4
 8006258:	6262      	str	r2, [r4, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800625a:	2203      	movs	r2, #3
 800625c:	62a2      	str	r2, [r4, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800625e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006260:	6323      	str	r3, [r4, #48]	@ 0x30
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8006262:	4b0a      	ldr	r3, [pc, #40]	@ (800628c <BSP_AUDIO_OUT_MspInit+0xf4>)
 8006264:	6023      	str	r3, [r4, #0]
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8006266:	66ec      	str	r4, [r5, #108]	@ 0x6c
 8006268:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_DMA_DeInit(&hdma_sai_tx);
 800626a:	4620      	mov	r0, r4
 800626c:	f002 f866 	bl	800833c <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);
 8006270:	4620      	mov	r0, r4
 8006272:	f001 fffb 	bl	800826c <HAL_DMA_Init>
 8006276:	e7cf      	b.n	8006218 <BSP_AUDIO_OUT_MspInit+0x80>
 8006278:	40023800 	.word	0x40023800
 800627c:	40021000 	.word	0x40021000
 8006280:	40021800 	.word	0x40021800
 8006284:	40015804 	.word	0x40015804
 8006288:	2001de7c 	.word	0x2001de7c
 800628c:	40026428 	.word	0x40026428

08006290 <BSP_AUDIO_OUT_ClockConfig>:
{
 8006290:	b510      	push	{r4, lr}
 8006292:	b0a4      	sub	sp, #144	@ 0x90
 8006294:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8006296:	4668      	mov	r0, sp
 8006298:	f004 fd5c 	bl	800ad54 <HAL_RCCEx_GetPeriphCLKConfig>
  if ((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800629c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80062a0:	f245 6322 	movw	r3, #22050	@ 0x5622
 80062a4:	429c      	cmp	r4, r3
 80062a6:	bf18      	it	ne
 80062a8:	4294      	cmpne	r4, r2
 80062aa:	d003      	beq.n	80062b4 <BSP_AUDIO_OUT_ClockConfig+0x24>
 80062ac:	f64a 4344 	movw	r3, #44100	@ 0xac44
 80062b0:	429c      	cmp	r4, r3
 80062b2:	d111      	bne.n	80062d8 <BSP_AUDIO_OUT_ClockConfig+0x48>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80062b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80062b8:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 80062ba:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80062be:	930f      	str	r3, [sp, #60]	@ 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80062c0:	f240 13ad 	movw	r3, #429	@ 0x1ad
 80062c4:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80062c6:	2302      	movs	r3, #2
 80062c8:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80062ca:	2313      	movs	r3, #19
 80062cc:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80062ce:	4668      	mov	r0, sp
 80062d0:	f004 fa40 	bl	800a754 <HAL_RCCEx_PeriphCLKConfig>
}
 80062d4:	b024      	add	sp, #144	@ 0x90
 80062d6:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80062d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80062dc:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 80062de:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80062e2:	930f      	str	r3, [sp, #60]	@ 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80062e4:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 80062e8:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80062ea:	2307      	movs	r3, #7
 80062ec:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80062ee:	2301      	movs	r3, #1
 80062f0:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80062f2:	4668      	mov	r0, sp
 80062f4:	f004 fa2e 	bl	800a754 <HAL_RCCEx_PeriphCLKConfig>
}
 80062f8:	e7ec      	b.n	80062d4 <BSP_AUDIO_OUT_ClockConfig+0x44>
	...

080062fc <BSP_AUDIO_OUT_Init>:
{
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	4606      	mov	r6, r0
 8006300:	460f      	mov	r7, r1
 8006302:	4614      	mov	r4, r2
  SAIx_Out_DeInit();
 8006304:	f7ff fab4 	bl	8005870 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8006308:	4d15      	ldr	r5, [pc, #84]	@ (8006360 <BSP_AUDIO_OUT_Init+0x64>)
 800630a:	2200      	movs	r2, #0
 800630c:	4621      	mov	r1, r4
 800630e:	4628      	mov	r0, r5
 8006310:	f7ff ffbe 	bl	8006290 <BSP_AUDIO_OUT_ClockConfig>
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8006314:	4b13      	ldr	r3, [pc, #76]	@ (8006364 <BSP_AUDIO_OUT_Init+0x68>)
 8006316:	602b      	str	r3, [r5, #0]
  if (HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8006318:	4628      	mov	r0, r5
 800631a:	f005 fb8e 	bl	800ba3a <HAL_SAI_GetState>
 800631e:	b160      	cbz	r0, 800633a <BSP_AUDIO_OUT_Init+0x3e>
  SAIx_Out_Init(AudioFreq);
 8006320:	4620      	mov	r0, r4
 8006322:	f7ff fad1 	bl	80058c8 <SAIx_Out_Init>
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8006326:	4b10      	ldr	r3, [pc, #64]	@ (8006368 <BSP_AUDIO_OUT_Init+0x6c>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2034      	movs	r0, #52	@ 0x34
 800632c:	4798      	blx	r3
  if ((deviceid) == WM8994_ID)
 800632e:	f648 1394 	movw	r3, #35220	@ 0x8994
 8006332:	4298      	cmp	r0, r3
 8006334:	d006      	beq.n	8006344 <BSP_AUDIO_OUT_Init+0x48>
    ret = AUDIO_ERROR;
 8006336:	2001      	movs	r0, #1
}
 8006338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800633a:	2100      	movs	r1, #0
 800633c:	4628      	mov	r0, r5
 800633e:	f7ff ff2b 	bl	8006198 <BSP_AUDIO_OUT_MspInit>
 8006342:	e7ed      	b.n	8006320 <BSP_AUDIO_OUT_Init+0x24>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8006344:	4d08      	ldr	r5, [pc, #32]	@ (8006368 <BSP_AUDIO_OUT_Init+0x6c>)
 8006346:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006348:	2034      	movs	r0, #52	@ 0x34
 800634a:	4798      	blx	r3
    audio_drv = &wm8994_drv;
 800634c:	4b07      	ldr	r3, [pc, #28]	@ (800636c <BSP_AUDIO_OUT_Init+0x70>)
 800634e:	601d      	str	r5, [r3, #0]
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8006350:	682d      	ldr	r5, [r5, #0]
 8006352:	4623      	mov	r3, r4
 8006354:	463a      	mov	r2, r7
 8006356:	4631      	mov	r1, r6
 8006358:	2034      	movs	r0, #52	@ 0x34
 800635a:	47a8      	blx	r5
    ret = AUDIO_OK;
 800635c:	2000      	movs	r0, #0
 800635e:	e7eb      	b.n	8006338 <BSP_AUDIO_OUT_Init+0x3c>
 8006360:	2001e358 	.word	0x2001e358
 8006364:	40015804 	.word	0x40015804
 8006368:	20002144 	.word	0x20002144
 800636c:	2001e3dc 	.word	0x2001e3dc

08006370 <BSP_AUDIO_IN_AllocScratch>:
  ScratchSize = (size / AudioIn_ChannelNumber);
 8006370:	4b0b      	ldr	r3, [pc, #44]	@ (80063a0 <BSP_AUDIO_IN_AllocScratch+0x30>)
 8006372:	f893 c000 	ldrb.w	ip, [r3]
 8006376:	fbb1 f1fc 	udiv	r1, r1, ip
 800637a:	4b0a      	ldr	r3, [pc, #40]	@ (80063a4 <BSP_AUDIO_IN_AllocScratch+0x34>)
 800637c:	6019      	str	r1, [r3, #0]
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
 800637e:	2200      	movs	r2, #0
 8006380:	e009      	b.n	8006396 <BSP_AUDIO_IN_AllocScratch+0x26>
    pScratchBuff[idx] = (int32_t *)(pScratch + (idx * ScratchSize));
 8006382:	4b08      	ldr	r3, [pc, #32]	@ (80063a4 <BSP_AUDIO_IN_AllocScratch+0x34>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	fb02 f303 	mul.w	r3, r2, r3
 800638a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800638e:	4906      	ldr	r1, [pc, #24]	@ (80063a8 <BSP_AUDIO_IN_AllocScratch+0x38>)
 8006390:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
 8006394:	3201      	adds	r2, #1
 8006396:	4594      	cmp	ip, r2
 8006398:	d8f3      	bhi.n	8006382 <BSP_AUDIO_IN_AllocScratch+0x12>
}
 800639a:	2000      	movs	r0, #0
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20002118 	.word	0x20002118
 80063a4:	2001df08 	.word	0x2001df08
 80063a8:	2001df0c 	.word	0x2001df0c

080063ac <BSP_AUDIO_IN_Record>:
{
 80063ac:	b508      	push	{r3, lr}
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 80063ae:	4b21      	ldr	r3, [pc, #132]	@ (8006434 <BSP_AUDIO_IN_Record+0x88>)
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d132      	bne.n	800641c <BSP_AUDIO_IN_Record+0x70>
    hAudioIn.pRecBuf = pbuf;
 80063b6:	4b20      	ldr	r3, [pc, #128]	@ (8006438 <BSP_AUDIO_IN_Record+0x8c>)
 80063b8:	6018      	str	r0, [r3, #0]
    hAudioIn.RecSize = size;
 80063ba:	6059      	str	r1, [r3, #4]
    AppBuffTrigger = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	4a1f      	ldr	r2, [pc, #124]	@ (800643c <BSP_AUDIO_IN_Record+0x90>)
 80063c0:	6013      	str	r3, [r2, #0]
    AppBuffHalf = 0;
 80063c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006440 <BSP_AUDIO_IN_Record+0x94>)
 80063c4:	6013      	str	r3, [r2, #0]
    if (AudioIn_ChannelNumber > 2)
 80063c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006444 <BSP_AUDIO_IN_Record+0x98>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d911      	bls.n	80063f2 <BSP_AUDIO_IN_Record+0x46>
      if (HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInButtomRightFilter, pScratchBuff[2], ScratchSize))
 80063ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006448 <BSP_AUDIO_IN_Record+0x9c>)
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	4b1e      	ldr	r3, [pc, #120]	@ (800644c <BSP_AUDIO_IN_Record+0xa0>)
 80063d4:	6899      	ldr	r1, [r3, #8]
 80063d6:	481e      	ldr	r0, [pc, #120]	@ (8006450 <BSP_AUDIO_IN_Record+0xa4>)
 80063d8:	f001 fe64 	bl	80080a4 <HAL_DFSDM_FilterRegularStart_DMA>
 80063dc:	b108      	cbz	r0, 80063e2 <BSP_AUDIO_IN_Record+0x36>
        return AUDIO_ERROR;
 80063de:	2001      	movs	r0, #1
 80063e0:	e010      	b.n	8006404 <BSP_AUDIO_IN_Record+0x58>
      if (HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInButtomLeftFilter, pScratchBuff[3], ScratchSize))
 80063e2:	4b19      	ldr	r3, [pc, #100]	@ (8006448 <BSP_AUDIO_IN_Record+0x9c>)
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4b19      	ldr	r3, [pc, #100]	@ (800644c <BSP_AUDIO_IN_Record+0xa0>)
 80063e8:	68d9      	ldr	r1, [r3, #12]
 80063ea:	481a      	ldr	r0, [pc, #104]	@ (8006454 <BSP_AUDIO_IN_Record+0xa8>)
 80063ec:	f001 fe5a 	bl	80080a4 <HAL_DFSDM_FilterRegularStart_DMA>
 80063f0:	b9e8      	cbnz	r0, 800642e <BSP_AUDIO_IN_Record+0x82>
    if (HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInTopRightFilter, pScratchBuff[0], ScratchSize))
 80063f2:	4b15      	ldr	r3, [pc, #84]	@ (8006448 <BSP_AUDIO_IN_Record+0x9c>)
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4b15      	ldr	r3, [pc, #84]	@ (800644c <BSP_AUDIO_IN_Record+0xa0>)
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	4817      	ldr	r0, [pc, #92]	@ (8006458 <BSP_AUDIO_IN_Record+0xac>)
 80063fc:	f001 fe52 	bl	80080a4 <HAL_DFSDM_FilterRegularStart_DMA>
 8006400:	b108      	cbz	r0, 8006406 <BSP_AUDIO_IN_Record+0x5a>
      return AUDIO_ERROR;
 8006402:	2001      	movs	r0, #1
}
 8006404:	bd08      	pop	{r3, pc}
    if (HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInTopLeftFilter, pScratchBuff[1], ScratchSize))
 8006406:	4b10      	ldr	r3, [pc, #64]	@ (8006448 <BSP_AUDIO_IN_Record+0x9c>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4b10      	ldr	r3, [pc, #64]	@ (800644c <BSP_AUDIO_IN_Record+0xa0>)
 800640c:	6859      	ldr	r1, [r3, #4]
 800640e:	4813      	ldr	r0, [pc, #76]	@ (800645c <BSP_AUDIO_IN_Record+0xb0>)
 8006410:	f001 fe48 	bl	80080a4 <HAL_DFSDM_FilterRegularStart_DMA>
 8006414:	2800      	cmp	r0, #0
 8006416:	d0f5      	beq.n	8006404 <BSP_AUDIO_IN_Record+0x58>
      return AUDIO_ERROR;
 8006418:	2001      	movs	r0, #1
 800641a:	e7f3      	b.n	8006404 <BSP_AUDIO_IN_Record+0x58>
    if (HAL_OK != HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t *)pbuf, size))
 800641c:	b28a      	uxth	r2, r1
 800641e:	4601      	mov	r1, r0
 8006420:	480f      	ldr	r0, [pc, #60]	@ (8006460 <BSP_AUDIO_IN_Record+0xb4>)
 8006422:	f005 fa43 	bl	800b8ac <HAL_SAI_Receive_DMA>
 8006426:	2800      	cmp	r0, #0
 8006428:	d0ec      	beq.n	8006404 <BSP_AUDIO_IN_Record+0x58>
      return AUDIO_ERROR;
 800642a:	2001      	movs	r0, #1
 800642c:	e7ea      	b.n	8006404 <BSP_AUDIO_IN_Record+0x58>
        return AUDIO_ERROR;
 800642e:	2001      	movs	r0, #1
 8006430:	e7e8      	b.n	8006404 <BSP_AUDIO_IN_Record+0x58>
 8006432:	bf00      	nop
 8006434:	2001df04 	.word	0x2001df04
 8006438:	2001e2cc 	.word	0x2001e2cc
 800643c:	2001dee0 	.word	0x2001dee0
 8006440:	2001dedc 	.word	0x2001dedc
 8006444:	20002118 	.word	0x20002118
 8006448:	2001df08 	.word	0x2001df08
 800644c:	2001df0c 	.word	0x2001df0c
 8006450:	2001dfdc 	.word	0x2001dfdc
 8006454:	2001e030 	.word	0x2001e030
 8006458:	2001e1b4 	.word	0x2001e1b4
 800645c:	2001e208 	.word	0x2001e208
 8006460:	2001e2d4 	.word	0x2001e2d4

08006464 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8006464:	4b01      	ldr	r3, [pc, #4]	@ (800646c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 8006466:	2202      	movs	r2, #2
 8006468:	701a      	strb	r2, [r3, #0]
}
 800646a:	4770      	bx	lr
 800646c:	2001a6a6 	.word	0x2001a6a6

08006470 <HAL_SAI_RxCpltCallback>:
{
 8006470:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8006472:	f7ff fff7 	bl	8006464 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8006476:	bd08      	pop	{r3, pc}

08006478 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8006478:	4b01      	ldr	r3, [pc, #4]	@ (8006480 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 800647a:	2201      	movs	r2, #1
 800647c:	701a      	strb	r2, [r3, #0]
}
 800647e:	4770      	bx	lr
 8006480:	2001a6a6 	.word	0x2001a6a6

08006484 <HAL_DFSDM_FilterRegConvCpltCallback>:
{
 8006484:	b510      	push	{r4, lr}
  if (hdfsdm_filter == &hAudioInTopLeftFilter)
 8006486:	4b94      	ldr	r3, [pc, #592]	@ (80066d8 <HAL_DFSDM_FilterRegConvCpltCallback+0x254>)
 8006488:	4298      	cmp	r0, r3
 800648a:	d021      	beq.n	80064d0 <HAL_DFSDM_FilterRegConvCpltCallback+0x4c>
  else if (hdfsdm_filter == &hAudioInTopRightFilter)
 800648c:	4b93      	ldr	r3, [pc, #588]	@ (80066dc <HAL_DFSDM_FilterRegConvCpltCallback+0x258>)
 800648e:	4298      	cmp	r0, r3
 8006490:	d022      	beq.n	80064d8 <HAL_DFSDM_FilterRegConvCpltCallback+0x54>
  else if (hdfsdm_filter == &hAudioInButtomLeftFilter)
 8006492:	4b93      	ldr	r3, [pc, #588]	@ (80066e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x25c>)
 8006494:	4298      	cmp	r0, r3
 8006496:	d023      	beq.n	80064e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x5c>
    DmaButtomRightRecCplt = 1;
 8006498:	4b92      	ldr	r3, [pc, #584]	@ (80066e4 <HAL_DFSDM_FilterRegConvCpltCallback+0x260>)
 800649a:	2201      	movs	r2, #1
 800649c:	601a      	str	r2, [r3, #0]
  if (AudioIn_ChannelNumber > 2)
 800649e:	4b92      	ldr	r3, [pc, #584]	@ (80066e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x264>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	f240 80af 	bls.w	8006606 <HAL_DFSDM_FilterRegConvCpltCallback+0x182>
    if ((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1) && (DmaButtomLeftRecCplt == 1) && (DmaButtomRightRecCplt == 1))
 80064a8:	4b90      	ldr	r3, [pc, #576]	@ (80066ec <HAL_DFSDM_FilterRegConvCpltCallback+0x268>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d01b      	beq.n	80064e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x64>
  if ((AppBuffTrigger == hAudioIn.RecSize / 2) && (AppBuffHalf == 0))
 80064b0:	4b8f      	ldr	r3, [pc, #572]	@ (80066f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x26c>)
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	4b8f      	ldr	r3, [pc, #572]	@ (80066f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x270>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 80064bc:	f000 80f8 	beq.w	80066b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x22c>
  if (AppBuffTrigger == hAudioIn.RecSize)
 80064c0:	4b8b      	ldr	r3, [pc, #556]	@ (80066f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x26c>)
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	4b8b      	ldr	r3, [pc, #556]	@ (80066f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x270>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	f000 80fc 	beq.w	80066c6 <HAL_DFSDM_FilterRegConvCpltCallback+0x242>
}
 80064ce:	bd10      	pop	{r4, pc}
    DmaTopLeftRecCplt = 1;
 80064d0:	4b86      	ldr	r3, [pc, #536]	@ (80066ec <HAL_DFSDM_FilterRegConvCpltCallback+0x268>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e7e2      	b.n	800649e <HAL_DFSDM_FilterRegConvCpltCallback+0x1a>
    DmaTopRightRecCplt = 1;
 80064d8:	4b87      	ldr	r3, [pc, #540]	@ (80066f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x274>)
 80064da:	2201      	movs	r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e7de      	b.n	800649e <HAL_DFSDM_FilterRegConvCpltCallback+0x1a>
    DmaButtomLeftRecCplt = 1;
 80064e0:	4b86      	ldr	r3, [pc, #536]	@ (80066fc <HAL_DFSDM_FilterRegConvCpltCallback+0x278>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	e7da      	b.n	800649e <HAL_DFSDM_FilterRegConvCpltCallback+0x1a>
    if ((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1) && (DmaButtomLeftRecCplt == 1) && (DmaButtomRightRecCplt == 1))
 80064e8:	4b83      	ldr	r3, [pc, #524]	@ (80066f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x274>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d1df      	bne.n	80064b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
 80064f0:	4b82      	ldr	r3, [pc, #520]	@ (80066fc <HAL_DFSDM_FilterRegConvCpltCallback+0x278>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d1db      	bne.n	80064b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
 80064f8:	4b7a      	ldr	r3, [pc, #488]	@ (80066e4 <HAL_DFSDM_FilterRegConvCpltCallback+0x260>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d1d7      	bne.n	80064b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
      for (index = (ScratchSize / 2); index < ScratchSize; index++)
 8006500:	4b7f      	ldr	r3, [pc, #508]	@ (8006700 <HAL_DFSDM_FilterRegConvCpltCallback+0x27c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	db01      	blt.n	800650c <HAL_DFSDM_FilterRegConvCpltCallback+0x88>
 8006508:	105b      	asrs	r3, r3, #1
 800650a:	e05b      	b.n	80065c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x140>
 800650c:	3301      	adds	r3, #1
 800650e:	e7fb      	b.n	8006508 <HAL_DFSDM_FilterRegConvCpltCallback+0x84>
        hAudioIn.pRecBuf[AppBuffTrigger] = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 8006510:	f248 0108 	movw	r1, #32776	@ 0x8008
 8006514:	4876      	ldr	r0, [pc, #472]	@ (80066f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x26c>)
 8006516:	6800      	ldr	r0, [r0, #0]
 8006518:	4c76      	ldr	r4, [pc, #472]	@ (80066f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x270>)
 800651a:	6824      	ldr	r4, [r4, #0]
 800651c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 8006520:	4978      	ldr	r1, [pc, #480]	@ (8006704 <HAL_DFSDM_FilterRegConvCpltCallback+0x280>)
 8006522:	6809      	ldr	r1, [r1, #0]
 8006524:	5889      	ldr	r1, [r1, r2]
 8006526:	1208      	asrs	r0, r1, #8
 8006528:	4c77      	ldr	r4, [pc, #476]	@ (8006708 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 800652a:	ebb4 2f21 	cmp.w	r4, r1, asr #8
 800652e:	dc08      	bgt.n	8006542 <HAL_DFSDM_FilterRegConvCpltCallback+0xbe>
 8006530:	f647 71f8 	movw	r1, #32760	@ 0x7ff8
 8006534:	4288      	cmp	r0, r1
 8006536:	dc1b      	bgt.n	8006570 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>
 8006538:	b280      	uxth	r0, r0
 800653a:	e004      	b.n	8006546 <HAL_DFSDM_FilterRegConvCpltCallback+0xc2>
        hAudioIn.pRecBuf[AppBuffTrigger] = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 800653c:	f647 71f8 	movw	r1, #32760	@ 0x7ff8
 8006540:	e7e8      	b.n	8006514 <HAL_DFSDM_FilterRegConvCpltCallback+0x90>
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 8006542:	f248 0008 	movw	r0, #32776	@ 0x8008
 8006546:	496a      	ldr	r1, [pc, #424]	@ (80066f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x26c>)
 8006548:	680c      	ldr	r4, [r1, #0]
 800654a:	496a      	ldr	r1, [pc, #424]	@ (80066f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x270>)
 800654c:	6809      	ldr	r1, [r1, #0]
 800654e:	3101      	adds	r1, #1
 8006550:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
        hAudioIn.pRecBuf[AppBuffTrigger + 2] = (uint16_t)(SaturaLH((pScratchBuff[3][index] >> 8), -32760, 32760));
 8006554:	496b      	ldr	r1, [pc, #428]	@ (8006704 <HAL_DFSDM_FilterRegConvCpltCallback+0x280>)
 8006556:	68c9      	ldr	r1, [r1, #12]
 8006558:	5889      	ldr	r1, [r1, r2]
 800655a:	1208      	asrs	r0, r1, #8
 800655c:	4c6a      	ldr	r4, [pc, #424]	@ (8006708 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 800655e:	ebb4 2f21 	cmp.w	r4, r1, asr #8
 8006562:	dc08      	bgt.n	8006576 <HAL_DFSDM_FilterRegConvCpltCallback+0xf2>
 8006564:	f647 71f8 	movw	r1, #32760	@ 0x7ff8
 8006568:	4288      	cmp	r0, r1
 800656a:	dc1b      	bgt.n	80065a4 <HAL_DFSDM_FilterRegConvCpltCallback+0x120>
 800656c:	b280      	uxth	r0, r0
 800656e:	e004      	b.n	800657a <HAL_DFSDM_FilterRegConvCpltCallback+0xf6>
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 8006570:	f647 70f8 	movw	r0, #32760	@ 0x7ff8
 8006574:	e7e7      	b.n	8006546 <HAL_DFSDM_FilterRegConvCpltCallback+0xc2>
        hAudioIn.pRecBuf[AppBuffTrigger + 2] = (uint16_t)(SaturaLH((pScratchBuff[3][index] >> 8), -32760, 32760));
 8006576:	f248 0008 	movw	r0, #32776	@ 0x8008
 800657a:	495d      	ldr	r1, [pc, #372]	@ (80066f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x26c>)
 800657c:	680c      	ldr	r4, [r1, #0]
 800657e:	495d      	ldr	r1, [pc, #372]	@ (80066f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x270>)
 8006580:	6809      	ldr	r1, [r1, #0]
 8006582:	3102      	adds	r1, #2
 8006584:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
        hAudioIn.pRecBuf[AppBuffTrigger + 3] = (uint16_t)(SaturaLH((pScratchBuff[2][index] >> 8), -32760, 32760));
 8006588:	495e      	ldr	r1, [pc, #376]	@ (8006704 <HAL_DFSDM_FilterRegConvCpltCallback+0x280>)
 800658a:	6889      	ldr	r1, [r1, #8]
 800658c:	588a      	ldr	r2, [r1, r2]
 800658e:	1210      	asrs	r0, r2, #8
 8006590:	495d      	ldr	r1, [pc, #372]	@ (8006708 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 8006592:	ebb1 2f22 	cmp.w	r1, r2, asr #8
 8006596:	dc08      	bgt.n	80065aa <HAL_DFSDM_FilterRegConvCpltCallback+0x126>
 8006598:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800659c:	4290      	cmp	r0, r2
 800659e:	dc25      	bgt.n	80065ec <HAL_DFSDM_FilterRegConvCpltCallback+0x168>
 80065a0:	b280      	uxth	r0, r0
 80065a2:	e004      	b.n	80065ae <HAL_DFSDM_FilterRegConvCpltCallback+0x12a>
        hAudioIn.pRecBuf[AppBuffTrigger + 2] = (uint16_t)(SaturaLH((pScratchBuff[3][index] >> 8), -32760, 32760));
 80065a4:	f647 70f8 	movw	r0, #32760	@ 0x7ff8
 80065a8:	e7e7      	b.n	800657a <HAL_DFSDM_FilterRegConvCpltCallback+0xf6>
        hAudioIn.pRecBuf[AppBuffTrigger + 3] = (uint16_t)(SaturaLH((pScratchBuff[2][index] >> 8), -32760, 32760));
 80065aa:	f248 0008 	movw	r0, #32776	@ 0x8008
 80065ae:	4a50      	ldr	r2, [pc, #320]	@ (80066f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x26c>)
 80065b0:	6814      	ldr	r4, [r2, #0]
 80065b2:	4a50      	ldr	r2, [pc, #320]	@ (80066f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x270>)
 80065b4:	6811      	ldr	r1, [r2, #0]
 80065b6:	3103      	adds	r1, #3
 80065b8:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
        AppBuffTrigger += 4;
 80065bc:	6811      	ldr	r1, [r2, #0]
 80065be:	3104      	adds	r1, #4
 80065c0:	6011      	str	r1, [r2, #0]
      for (index = (ScratchSize / 2); index < ScratchSize; index++)
 80065c2:	3301      	adds	r3, #1
 80065c4:	4a4e      	ldr	r2, [pc, #312]	@ (8006700 <HAL_DFSDM_FilterRegConvCpltCallback+0x27c>)
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d912      	bls.n	80065f2 <HAL_DFSDM_FilterRegConvCpltCallback+0x16e>
        hAudioIn.pRecBuf[AppBuffTrigger] = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 80065cc:	4a4d      	ldr	r2, [pc, #308]	@ (8006704 <HAL_DFSDM_FilterRegConvCpltCallback+0x280>)
 80065ce:	6851      	ldr	r1, [r2, #4]
 80065d0:	009a      	lsls	r2, r3, #2
 80065d2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80065d6:	1201      	asrs	r1, r0, #8
 80065d8:	4c4b      	ldr	r4, [pc, #300]	@ (8006708 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 80065da:	ebb4 2f20 	cmp.w	r4, r0, asr #8
 80065de:	dc97      	bgt.n	8006510 <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>
 80065e0:	f647 70f8 	movw	r0, #32760	@ 0x7ff8
 80065e4:	4281      	cmp	r1, r0
 80065e6:	dca9      	bgt.n	800653c <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>
 80065e8:	b289      	uxth	r1, r1
 80065ea:	e793      	b.n	8006514 <HAL_DFSDM_FilterRegConvCpltCallback+0x90>
        hAudioIn.pRecBuf[AppBuffTrigger + 3] = (uint16_t)(SaturaLH((pScratchBuff[2][index] >> 8), -32760, 32760));
 80065ec:	f647 70f8 	movw	r0, #32760	@ 0x7ff8
 80065f0:	e7dd      	b.n	80065ae <HAL_DFSDM_FilterRegConvCpltCallback+0x12a>
      DmaTopLeftRecCplt = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	4a3d      	ldr	r2, [pc, #244]	@ (80066ec <HAL_DFSDM_FilterRegConvCpltCallback+0x268>)
 80065f6:	6013      	str	r3, [r2, #0]
      DmaTopRightRecCplt = 0;
 80065f8:	4a3f      	ldr	r2, [pc, #252]	@ (80066f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x274>)
 80065fa:	6013      	str	r3, [r2, #0]
      DmaButtomLeftRecCplt = 0;
 80065fc:	4a3f      	ldr	r2, [pc, #252]	@ (80066fc <HAL_DFSDM_FilterRegConvCpltCallback+0x278>)
 80065fe:	6013      	str	r3, [r2, #0]
      DmaButtomRightRecCplt = 0;
 8006600:	4a38      	ldr	r2, [pc, #224]	@ (80066e4 <HAL_DFSDM_FilterRegConvCpltCallback+0x260>)
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	e754      	b.n	80064b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
    if ((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1))
 8006606:	4b39      	ldr	r3, [pc, #228]	@ (80066ec <HAL_DFSDM_FilterRegConvCpltCallback+0x268>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b01      	cmp	r3, #1
 800660c:	f47f af50 	bne.w	80064b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
 8006610:	4b39      	ldr	r3, [pc, #228]	@ (80066f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x274>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b01      	cmp	r3, #1
 8006616:	f47f af4b 	bne.w	80064b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
      for (index = (ScratchSize / 2); index < ScratchSize; index++)
 800661a:	4b39      	ldr	r3, [pc, #228]	@ (8006700 <HAL_DFSDM_FilterRegConvCpltCallback+0x27c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	db01      	blt.n	8006626 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a2>
 8006622:	105b      	asrs	r3, r3, #1
 8006624:	e027      	b.n	8006676 <HAL_DFSDM_FilterRegConvCpltCallback+0x1f2>
 8006626:	3301      	adds	r3, #1
 8006628:	e7fb      	b.n	8006622 <HAL_DFSDM_FilterRegConvCpltCallback+0x19e>
        hAudioIn.pRecBuf[AppBuffTrigger] = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 800662a:	f248 0208 	movw	r2, #32776	@ 0x8008
 800662e:	4930      	ldr	r1, [pc, #192]	@ (80066f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x26c>)
 8006630:	6809      	ldr	r1, [r1, #0]
 8006632:	4c30      	ldr	r4, [pc, #192]	@ (80066f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x270>)
 8006634:	6824      	ldr	r4, [r4, #0]
 8006636:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 800663a:	4a32      	ldr	r2, [pc, #200]	@ (8006704 <HAL_DFSDM_FilterRegConvCpltCallback+0x280>)
 800663c:	6812      	ldr	r2, [r2, #0]
 800663e:	5812      	ldr	r2, [r2, r0]
 8006640:	1210      	asrs	r0, r2, #8
 8006642:	4931      	ldr	r1, [pc, #196]	@ (8006708 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 8006644:	ebb1 2f22 	cmp.w	r1, r2, asr #8
 8006648:	dc08      	bgt.n	800665c <HAL_DFSDM_FilterRegConvCpltCallback+0x1d8>
 800664a:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800664e:	4290      	cmp	r0, r2
 8006650:	dc25      	bgt.n	800669e <HAL_DFSDM_FilterRegConvCpltCallback+0x21a>
 8006652:	b280      	uxth	r0, r0
 8006654:	e004      	b.n	8006660 <HAL_DFSDM_FilterRegConvCpltCallback+0x1dc>
        hAudioIn.pRecBuf[AppBuffTrigger] = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 8006656:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800665a:	e7e8      	b.n	800662e <HAL_DFSDM_FilterRegConvCpltCallback+0x1aa>
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 800665c:	f248 0008 	movw	r0, #32776	@ 0x8008
 8006660:	4a23      	ldr	r2, [pc, #140]	@ (80066f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x26c>)
 8006662:	6814      	ldr	r4, [r2, #0]
 8006664:	4a23      	ldr	r2, [pc, #140]	@ (80066f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x270>)
 8006666:	6811      	ldr	r1, [r2, #0]
 8006668:	3101      	adds	r1, #1
 800666a:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
        AppBuffTrigger += 2;
 800666e:	6811      	ldr	r1, [r2, #0]
 8006670:	3102      	adds	r1, #2
 8006672:	6011      	str	r1, [r2, #0]
      for (index = (ScratchSize / 2); index < ScratchSize; index++)
 8006674:	3301      	adds	r3, #1
 8006676:	4a22      	ldr	r2, [pc, #136]	@ (8006700 <HAL_DFSDM_FilterRegConvCpltCallback+0x27c>)
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d912      	bls.n	80066a4 <HAL_DFSDM_FilterRegConvCpltCallback+0x220>
        hAudioIn.pRecBuf[AppBuffTrigger] = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 800667e:	4a21      	ldr	r2, [pc, #132]	@ (8006704 <HAL_DFSDM_FilterRegConvCpltCallback+0x280>)
 8006680:	6852      	ldr	r2, [r2, #4]
 8006682:	0098      	lsls	r0, r3, #2
 8006684:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006688:	120a      	asrs	r2, r1, #8
 800668a:	4c1f      	ldr	r4, [pc, #124]	@ (8006708 <HAL_DFSDM_FilterRegConvCpltCallback+0x284>)
 800668c:	ebb4 2f21 	cmp.w	r4, r1, asr #8
 8006690:	dccb      	bgt.n	800662a <HAL_DFSDM_FilterRegConvCpltCallback+0x1a6>
 8006692:	f647 71f8 	movw	r1, #32760	@ 0x7ff8
 8006696:	428a      	cmp	r2, r1
 8006698:	dcdd      	bgt.n	8006656 <HAL_DFSDM_FilterRegConvCpltCallback+0x1d2>
 800669a:	b292      	uxth	r2, r2
 800669c:	e7c7      	b.n	800662e <HAL_DFSDM_FilterRegConvCpltCallback+0x1aa>
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 800669e:	f647 70f8 	movw	r0, #32760	@ 0x7ff8
 80066a2:	e7dd      	b.n	8006660 <HAL_DFSDM_FilterRegConvCpltCallback+0x1dc>
      DmaTopLeftRecCplt = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	4a11      	ldr	r2, [pc, #68]	@ (80066ec <HAL_DFSDM_FilterRegConvCpltCallback+0x268>)
 80066a8:	6013      	str	r3, [r2, #0]
      DmaTopRightRecCplt = 0;
 80066aa:	4a13      	ldr	r2, [pc, #76]	@ (80066f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x274>)
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	e6ff      	b.n	80064b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
  if ((AppBuffTrigger == hAudioIn.RecSize / 2) && (AppBuffHalf == 0))
 80066b0:	4b16      	ldr	r3, [pc, #88]	@ (800670c <HAL_DFSDM_FilterRegConvCpltCallback+0x288>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f47f af03 	bne.w	80064c0 <HAL_DFSDM_FilterRegConvCpltCallback+0x3c>
    AppBuffHalf = 1;
 80066ba:	4b14      	ldr	r3, [pc, #80]	@ (800670c <HAL_DFSDM_FilterRegConvCpltCallback+0x288>)
 80066bc:	2201      	movs	r2, #1
 80066be:	601a      	str	r2, [r3, #0]
    BSP_AUDIO_IN_HalfTransfer_CallBack();
 80066c0:	f7ff feda 	bl	8006478 <BSP_AUDIO_IN_HalfTransfer_CallBack>
 80066c4:	e6fc      	b.n	80064c0 <HAL_DFSDM_FilterRegConvCpltCallback+0x3c>
    AppBuffTrigger = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	4a0a      	ldr	r2, [pc, #40]	@ (80066f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x270>)
 80066ca:	6013      	str	r3, [r2, #0]
    AppBuffHalf = 0;
 80066cc:	4a0f      	ldr	r2, [pc, #60]	@ (800670c <HAL_DFSDM_FilterRegConvCpltCallback+0x288>)
 80066ce:	6013      	str	r3, [r2, #0]
    BSP_AUDIO_IN_TransferComplete_CallBack();
 80066d0:	f7ff fec8 	bl	8006464 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80066d4:	e6fb      	b.n	80064ce <HAL_DFSDM_FilterRegConvCpltCallback+0x4a>
 80066d6:	bf00      	nop
 80066d8:	2001e208 	.word	0x2001e208
 80066dc:	2001e1b4 	.word	0x2001e1b4
 80066e0:	2001e030 	.word	0x2001e030
 80066e4:	2001dee4 	.word	0x2001dee4
 80066e8:	20002118 	.word	0x20002118
 80066ec:	2001defc 	.word	0x2001defc
 80066f0:	2001e2cc 	.word	0x2001e2cc
 80066f4:	2001dee0 	.word	0x2001dee0
 80066f8:	2001def4 	.word	0x2001def4
 80066fc:	2001deec 	.word	0x2001deec
 8006700:	2001df08 	.word	0x2001df08
 8006704:	2001df0c 	.word	0x2001df0c
 8006708:	ffff8008 	.word	0xffff8008
 800670c:	2001dedc 	.word	0x2001dedc

08006710 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
{
 8006710:	b510      	push	{r4, lr}
  if (hdfsdm_filter == &hAudioInTopLeftFilter)
 8006712:	4b93      	ldr	r3, [pc, #588]	@ (8006960 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x250>)
 8006714:	4298      	cmp	r0, r3
 8006716:	d021      	beq.n	800675c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4c>
  else if (hdfsdm_filter == &hAudioInTopRightFilter)
 8006718:	4b92      	ldr	r3, [pc, #584]	@ (8006964 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x254>)
 800671a:	4298      	cmp	r0, r3
 800671c:	d022      	beq.n	8006764 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x54>
  else if (hdfsdm_filter == &hAudioInButtomLeftFilter)
 800671e:	4b92      	ldr	r3, [pc, #584]	@ (8006968 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x258>)
 8006720:	4298      	cmp	r0, r3
 8006722:	d023      	beq.n	800676c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>
    DmaButtomRightRecHalfCplt = 1;
 8006724:	4b91      	ldr	r3, [pc, #580]	@ (800696c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x25c>)
 8006726:	2201      	movs	r2, #1
 8006728:	601a      	str	r2, [r3, #0]
  if (AudioIn_ChannelNumber > 2)
 800672a:	4b91      	ldr	r3, [pc, #580]	@ (8006970 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x260>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b02      	cmp	r3, #2
 8006730:	f240 80ae 	bls.w	8006890 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x180>
    if ((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1) && (DmaButtomLeftRecHalfCplt == 1) && (DmaButtomRightRecHalfCplt == 1))
 8006734:	4b8f      	ldr	r3, [pc, #572]	@ (8006974 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x264>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d01b      	beq.n	8006774 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x64>
  if ((AppBuffTrigger == hAudioIn.RecSize / 2) && (AppBuffHalf == 0))
 800673c:	4b8e      	ldr	r3, [pc, #568]	@ (8006978 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x268>)
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	4b8e      	ldr	r3, [pc, #568]	@ (800697c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8006748:	f000 80f6 	beq.w	8006938 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x228>
  if (AppBuffTrigger == hAudioIn.RecSize)
 800674c:	4b8a      	ldr	r3, [pc, #552]	@ (8006978 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x268>)
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	4b8a      	ldr	r3, [pc, #552]	@ (800697c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	429a      	cmp	r2, r3
 8006756:	f000 80fa 	beq.w	800694e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x23e>
}
 800675a:	bd10      	pop	{r4, pc}
    DmaTopLeftRecHalfCplt = 1;
 800675c:	4b85      	ldr	r3, [pc, #532]	@ (8006974 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x264>)
 800675e:	2201      	movs	r2, #1
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	e7e2      	b.n	800672a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a>
    DmaTopRightRecHalfCplt = 1;
 8006764:	4b86      	ldr	r3, [pc, #536]	@ (8006980 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 8006766:	2201      	movs	r2, #1
 8006768:	601a      	str	r2, [r3, #0]
 800676a:	e7de      	b.n	800672a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a>
    DmaButtomLeftRecHalfCplt = 1;
 800676c:	4b85      	ldr	r3, [pc, #532]	@ (8006984 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 800676e:	2201      	movs	r2, #1
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	e7da      	b.n	800672a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a>
    if ((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1) && (DmaButtomLeftRecHalfCplt == 1) && (DmaButtomRightRecHalfCplt == 1))
 8006774:	4b82      	ldr	r3, [pc, #520]	@ (8006980 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d1df      	bne.n	800673c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>
 800677c:	4b81      	ldr	r3, [pc, #516]	@ (8006984 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d1db      	bne.n	800673c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>
 8006784:	4b79      	ldr	r3, [pc, #484]	@ (800696c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x25c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d1d7      	bne.n	800673c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>
      for (index = 0; index < ScratchSize / 2; index++)
 800678c:	2300      	movs	r3, #0
 800678e:	e059      	b.n	8006844 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x134>
        hAudioIn.pRecBuf[AppBuffTrigger] = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 8006790:	f248 0108 	movw	r1, #32776	@ 0x8008
 8006794:	4878      	ldr	r0, [pc, #480]	@ (8006978 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x268>)
 8006796:	6800      	ldr	r0, [r0, #0]
 8006798:	4c78      	ldr	r4, [pc, #480]	@ (800697c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 800679a:	6824      	ldr	r4, [r4, #0]
 800679c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 80067a0:	4979      	ldr	r1, [pc, #484]	@ (8006988 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 80067a2:	6809      	ldr	r1, [r1, #0]
 80067a4:	5889      	ldr	r1, [r1, r2]
 80067a6:	1208      	asrs	r0, r1, #8
 80067a8:	4c78      	ldr	r4, [pc, #480]	@ (800698c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 80067aa:	ebb4 2f21 	cmp.w	r4, r1, asr #8
 80067ae:	dc08      	bgt.n	80067c2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb2>
 80067b0:	f647 71f8 	movw	r1, #32760	@ 0x7ff8
 80067b4:	4288      	cmp	r0, r1
 80067b6:	dc1b      	bgt.n	80067f0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe0>
 80067b8:	b280      	uxth	r0, r0
 80067ba:	e004      	b.n	80067c6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb6>
        hAudioIn.pRecBuf[AppBuffTrigger] = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 80067bc:	f647 71f8 	movw	r1, #32760	@ 0x7ff8
 80067c0:	e7e8      	b.n	8006794 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x84>
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 80067c2:	f248 0008 	movw	r0, #32776	@ 0x8008
 80067c6:	496c      	ldr	r1, [pc, #432]	@ (8006978 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x268>)
 80067c8:	680c      	ldr	r4, [r1, #0]
 80067ca:	496c      	ldr	r1, [pc, #432]	@ (800697c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 80067cc:	6809      	ldr	r1, [r1, #0]
 80067ce:	3101      	adds	r1, #1
 80067d0:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
        hAudioIn.pRecBuf[AppBuffTrigger + 2] = (uint16_t)(SaturaLH((pScratchBuff[3][index] >> 8), -32760, 32760));
 80067d4:	496c      	ldr	r1, [pc, #432]	@ (8006988 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 80067d6:	68c9      	ldr	r1, [r1, #12]
 80067d8:	5889      	ldr	r1, [r1, r2]
 80067da:	1208      	asrs	r0, r1, #8
 80067dc:	4c6b      	ldr	r4, [pc, #428]	@ (800698c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 80067de:	ebb4 2f21 	cmp.w	r4, r1, asr #8
 80067e2:	dc08      	bgt.n	80067f6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xe6>
 80067e4:	f647 71f8 	movw	r1, #32760	@ 0x7ff8
 80067e8:	4288      	cmp	r0, r1
 80067ea:	dc1b      	bgt.n	8006824 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x114>
 80067ec:	b280      	uxth	r0, r0
 80067ee:	e004      	b.n	80067fa <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xea>
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 80067f0:	f647 70f8 	movw	r0, #32760	@ 0x7ff8
 80067f4:	e7e7      	b.n	80067c6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb6>
        hAudioIn.pRecBuf[AppBuffTrigger + 2] = (uint16_t)(SaturaLH((pScratchBuff[3][index] >> 8), -32760, 32760));
 80067f6:	f248 0008 	movw	r0, #32776	@ 0x8008
 80067fa:	495f      	ldr	r1, [pc, #380]	@ (8006978 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x268>)
 80067fc:	680c      	ldr	r4, [r1, #0]
 80067fe:	495f      	ldr	r1, [pc, #380]	@ (800697c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8006800:	6809      	ldr	r1, [r1, #0]
 8006802:	3102      	adds	r1, #2
 8006804:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
        hAudioIn.pRecBuf[AppBuffTrigger + 3] = (uint16_t)(SaturaLH((pScratchBuff[2][index] >> 8), -32760, 32760));
 8006808:	495f      	ldr	r1, [pc, #380]	@ (8006988 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 800680a:	6889      	ldr	r1, [r1, #8]
 800680c:	588a      	ldr	r2, [r1, r2]
 800680e:	1210      	asrs	r0, r2, #8
 8006810:	495e      	ldr	r1, [pc, #376]	@ (800698c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 8006812:	ebb1 2f22 	cmp.w	r1, r2, asr #8
 8006816:	dc08      	bgt.n	800682a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x11a>
 8006818:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 800681c:	4290      	cmp	r0, r2
 800681e:	dc28      	bgt.n	8006872 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x162>
 8006820:	b280      	uxth	r0, r0
 8006822:	e004      	b.n	800682e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x11e>
        hAudioIn.pRecBuf[AppBuffTrigger + 2] = (uint16_t)(SaturaLH((pScratchBuff[3][index] >> 8), -32760, 32760));
 8006824:	f647 70f8 	movw	r0, #32760	@ 0x7ff8
 8006828:	e7e7      	b.n	80067fa <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xea>
        hAudioIn.pRecBuf[AppBuffTrigger + 3] = (uint16_t)(SaturaLH((pScratchBuff[2][index] >> 8), -32760, 32760));
 800682a:	f248 0008 	movw	r0, #32776	@ 0x8008
 800682e:	4a52      	ldr	r2, [pc, #328]	@ (8006978 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x268>)
 8006830:	6814      	ldr	r4, [r2, #0]
 8006832:	4a52      	ldr	r2, [pc, #328]	@ (800697c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8006834:	6811      	ldr	r1, [r2, #0]
 8006836:	3103      	adds	r1, #3
 8006838:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
        AppBuffTrigger += 4;
 800683c:	6811      	ldr	r1, [r2, #0]
 800683e:	3104      	adds	r1, #4
 8006840:	6011      	str	r1, [r2, #0]
      for (index = 0; index < ScratchSize / 2; index++)
 8006842:	3301      	adds	r3, #1
 8006844:	4a52      	ldr	r2, [pc, #328]	@ (8006990 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x280>)
 8006846:	6812      	ldr	r2, [r2, #0]
 8006848:	2a00      	cmp	r2, #0
 800684a:	db15      	blt.n	8006878 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x168>
 800684c:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8006850:	d214      	bcs.n	800687c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x16c>
        hAudioIn.pRecBuf[AppBuffTrigger] = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 8006852:	4a4d      	ldr	r2, [pc, #308]	@ (8006988 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 8006854:	6851      	ldr	r1, [r2, #4]
 8006856:	009a      	lsls	r2, r3, #2
 8006858:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800685c:	1201      	asrs	r1, r0, #8
 800685e:	4c4b      	ldr	r4, [pc, #300]	@ (800698c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 8006860:	ebb4 2f20 	cmp.w	r4, r0, asr #8
 8006864:	dc94      	bgt.n	8006790 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x80>
 8006866:	f647 70f8 	movw	r0, #32760	@ 0x7ff8
 800686a:	4281      	cmp	r1, r0
 800686c:	dca6      	bgt.n	80067bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xac>
 800686e:	b289      	uxth	r1, r1
 8006870:	e790      	b.n	8006794 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x84>
        hAudioIn.pRecBuf[AppBuffTrigger + 3] = (uint16_t)(SaturaLH((pScratchBuff[2][index] >> 8), -32760, 32760));
 8006872:	f647 70f8 	movw	r0, #32760	@ 0x7ff8
 8006876:	e7da      	b.n	800682e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x11e>
      for (index = 0; index < ScratchSize / 2; index++)
 8006878:	3201      	adds	r2, #1
 800687a:	e7e7      	b.n	800684c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x13c>
      DmaTopLeftRecHalfCplt = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	4a3d      	ldr	r2, [pc, #244]	@ (8006974 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x264>)
 8006880:	6013      	str	r3, [r2, #0]
      DmaTopRightRecHalfCplt = 0;
 8006882:	4a3f      	ldr	r2, [pc, #252]	@ (8006980 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 8006884:	6013      	str	r3, [r2, #0]
      DmaButtomLeftRecHalfCplt = 0;
 8006886:	4a3f      	ldr	r2, [pc, #252]	@ (8006984 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x274>)
 8006888:	6013      	str	r3, [r2, #0]
      DmaButtomRightRecHalfCplt = 0;
 800688a:	4a38      	ldr	r2, [pc, #224]	@ (800696c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x25c>)
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e755      	b.n	800673c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>
    if ((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1))
 8006890:	4b38      	ldr	r3, [pc, #224]	@ (8006974 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x264>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b01      	cmp	r3, #1
 8006896:	f47f af51 	bne.w	800673c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>
 800689a:	4b39      	ldr	r3, [pc, #228]	@ (8006980 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	f47f af4c 	bne.w	800673c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>
      for (index = 0; index < ScratchSize / 2; index++)
 80068a4:	2300      	movs	r3, #0
 80068a6:	e025      	b.n	80068f4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e4>
        hAudioIn.pRecBuf[AppBuffTrigger] = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 80068a8:	f248 0208 	movw	r2, #32776	@ 0x8008
 80068ac:	4932      	ldr	r1, [pc, #200]	@ (8006978 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x268>)
 80068ae:	6809      	ldr	r1, [r1, #0]
 80068b0:	4c32      	ldr	r4, [pc, #200]	@ (800697c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 80068b2:	6824      	ldr	r4, [r4, #0]
 80068b4:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 80068b8:	4a33      	ldr	r2, [pc, #204]	@ (8006988 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	5812      	ldr	r2, [r2, r0]
 80068be:	1210      	asrs	r0, r2, #8
 80068c0:	4932      	ldr	r1, [pc, #200]	@ (800698c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 80068c2:	ebb1 2f22 	cmp.w	r1, r2, asr #8
 80068c6:	dc08      	bgt.n	80068da <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ca>
 80068c8:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 80068cc:	4290      	cmp	r0, r2
 80068ce:	dc28      	bgt.n	8006922 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x212>
 80068d0:	b280      	uxth	r0, r0
 80068d2:	e004      	b.n	80068de <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ce>
        hAudioIn.pRecBuf[AppBuffTrigger] = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 80068d4:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 80068d8:	e7e8      	b.n	80068ac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 80068da:	f248 0008 	movw	r0, #32776	@ 0x8008
 80068de:	4a26      	ldr	r2, [pc, #152]	@ (8006978 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x268>)
 80068e0:	6814      	ldr	r4, [r2, #0]
 80068e2:	4a26      	ldr	r2, [pc, #152]	@ (800697c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 80068e4:	6811      	ldr	r1, [r2, #0]
 80068e6:	3101      	adds	r1, #1
 80068e8:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
        AppBuffTrigger += 2;
 80068ec:	6811      	ldr	r1, [r2, #0]
 80068ee:	3102      	adds	r1, #2
 80068f0:	6011      	str	r1, [r2, #0]
      for (index = 0; index < ScratchSize / 2; index++)
 80068f2:	3301      	adds	r3, #1
 80068f4:	4a26      	ldr	r2, [pc, #152]	@ (8006990 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x280>)
 80068f6:	6812      	ldr	r2, [r2, #0]
 80068f8:	2a00      	cmp	r2, #0
 80068fa:	db15      	blt.n	8006928 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x218>
 80068fc:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8006900:	d214      	bcs.n	800692c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x21c>
        hAudioIn.pRecBuf[AppBuffTrigger] = (uint16_t)(SaturaLH((pScratchBuff[1][index] >> 8), -32760, 32760));
 8006902:	4a21      	ldr	r2, [pc, #132]	@ (8006988 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x278>)
 8006904:	6852      	ldr	r2, [r2, #4]
 8006906:	0098      	lsls	r0, r3, #2
 8006908:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800690c:	120a      	asrs	r2, r1, #8
 800690e:	4c1f      	ldr	r4, [pc, #124]	@ (800698c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27c>)
 8006910:	ebb4 2f21 	cmp.w	r4, r1, asr #8
 8006914:	dcc8      	bgt.n	80068a8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x198>
 8006916:	f647 71f8 	movw	r1, #32760	@ 0x7ff8
 800691a:	428a      	cmp	r2, r1
 800691c:	dcda      	bgt.n	80068d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c4>
 800691e:	b292      	uxth	r2, r2
 8006920:	e7c4      	b.n	80068ac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x19c>
        hAudioIn.pRecBuf[AppBuffTrigger + 1] = (uint16_t)(SaturaLH((pScratchBuff[0][index] >> 8), -32760, 32760));
 8006922:	f647 70f8 	movw	r0, #32760	@ 0x7ff8
 8006926:	e7da      	b.n	80068de <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ce>
      for (index = 0; index < ScratchSize / 2; index++)
 8006928:	3201      	adds	r2, #1
 800692a:	e7e7      	b.n	80068fc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1ec>
      DmaTopLeftRecHalfCplt = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	4a11      	ldr	r2, [pc, #68]	@ (8006974 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x264>)
 8006930:	6013      	str	r3, [r2, #0]
      DmaTopRightRecHalfCplt = 0;
 8006932:	4a13      	ldr	r2, [pc, #76]	@ (8006980 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x270>)
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	e701      	b.n	800673c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>
  if ((AppBuffTrigger == hAudioIn.RecSize / 2) && (AppBuffHalf == 0))
 8006938:	4b16      	ldr	r3, [pc, #88]	@ (8006994 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x284>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f47f af05 	bne.w	800674c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3c>
    AppBuffHalf = 1;
 8006942:	4b14      	ldr	r3, [pc, #80]	@ (8006994 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x284>)
 8006944:	2201      	movs	r2, #1
 8006946:	601a      	str	r2, [r3, #0]
    BSP_AUDIO_IN_HalfTransfer_CallBack();
 8006948:	f7ff fd96 	bl	8006478 <BSP_AUDIO_IN_HalfTransfer_CallBack>
 800694c:	e6fe      	b.n	800674c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3c>
    AppBuffTrigger = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	4a0a      	ldr	r2, [pc, #40]	@ (800697c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x26c>)
 8006952:	6013      	str	r3, [r2, #0]
    AppBuffHalf = 0;
 8006954:	4a0f      	ldr	r2, [pc, #60]	@ (8006994 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x284>)
 8006956:	6013      	str	r3, [r2, #0]
    BSP_AUDIO_IN_TransferComplete_CallBack();
 8006958:	f7ff fd84 	bl	8006464 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800695c:	e6fd      	b.n	800675a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4a>
 800695e:	bf00      	nop
 8006960:	2001e208 	.word	0x2001e208
 8006964:	2001e1b4 	.word	0x2001e1b4
 8006968:	2001e030 	.word	0x2001e030
 800696c:	2001dee8 	.word	0x2001dee8
 8006970:	20002118 	.word	0x20002118
 8006974:	2001df00 	.word	0x2001df00
 8006978:	2001e2cc 	.word	0x2001e2cc
 800697c:	2001dee0 	.word	0x2001dee0
 8006980:	2001def8 	.word	0x2001def8
 8006984:	2001def0 	.word	0x2001def0
 8006988:	2001df0c 	.word	0x2001df0c
 800698c:	ffff8008 	.word	0xffff8008
 8006990:	2001df08 	.word	0x2001df08
 8006994:	2001dedc 	.word	0x2001dedc

08006998 <HAL_SAI_RxHalfCpltCallback>:
{
 8006998:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 800699a:	f7ff fd6d 	bl	8006478 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 800699e:	bd08      	pop	{r3, pc}

080069a0 <BSP_AUDIO_IN_Error_CallBack>:
{
 80069a0:	b508      	push	{r3, lr}
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80069a2:	4807      	ldr	r0, [pc, #28]	@ (80069c0 <BSP_AUDIO_IN_Error_CallBack+0x20>)
 80069a4:	f000 f984 	bl	8006cb0 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2, (uint8_t *)"Error: AUDIO IN", CENTER_MODE);
 80069a8:	f000 f93c 	bl	8006c24 <BSP_LCD_GetYSize>
 80069ac:	2301      	movs	r3, #1
 80069ae:	4a05      	ldr	r2, [pc, #20]	@ (80069c4 <BSP_AUDIO_IN_Error_CallBack+0x24>)
 80069b0:	f3c0 014f 	ubfx	r1, r0, #1, #16
 80069b4:	2000      	movs	r0, #0
 80069b6:	f000 fc8b 	bl	80072d0 <BSP_LCD_DisplayStringAt>
  Error_Handler();
 80069ba:	f7fd fc9b 	bl	80042f4 <Error_Handler>
}
 80069be:	bd08      	pop	{r3, pc}
 80069c0:	ffff0000 	.word	0xffff0000
 80069c4:	0801270c 	.word	0x0801270c

080069c8 <HAL_SAI_ErrorCallback>:
{
 80069c8:	b508      	push	{r3, lr}
  if (hsai->Instance == AUDIO_OUT_SAIx)
 80069ca:	6802      	ldr	r2, [r0, #0]
 80069cc:	4b04      	ldr	r3, [pc, #16]	@ (80069e0 <HAL_SAI_ErrorCallback+0x18>)
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d002      	beq.n	80069d8 <HAL_SAI_ErrorCallback+0x10>
    BSP_AUDIO_IN_Error_CallBack();
 80069d2:	f7ff ffe5 	bl	80069a0 <BSP_AUDIO_IN_Error_CallBack>
}
 80069d6:	bd08      	pop	{r3, pc}
    BSP_AUDIO_OUT_Error_CallBack();
 80069d8:	f7ff fbdc 	bl	8006194 <BSP_AUDIO_OUT_Error_CallBack>
 80069dc:	e7fb      	b.n	80069d6 <HAL_SAI_ErrorCallback+0xe>
 80069de:	bf00      	nop
 80069e0:	40015804 	.word	0x40015804

080069e4 <BSP_AUDIO_IN_MspInit>:
{
 80069e4:	b508      	push	{r3, lr}
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 80069e6:	4b06      	ldr	r3, [pc, #24]	@ (8006a00 <BSP_AUDIO_IN_MspInit+0x1c>)
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b923      	cbnz	r3, 80069f6 <BSP_AUDIO_IN_MspInit+0x12>
    DFSDMx_ChannelMspInit();
 80069ec:	f7ff f82c 	bl	8005a48 <DFSDMx_ChannelMspInit>
    DFSDMx_FilterMspInit();
 80069f0:	f7ff f872 	bl	8005ad8 <DFSDMx_FilterMspInit>
}
 80069f4:	bd08      	pop	{r3, pc}
    SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80069f6:	2100      	movs	r1, #0
 80069f8:	4802      	ldr	r0, [pc, #8]	@ (8006a04 <BSP_AUDIO_IN_MspInit+0x20>)
 80069fa:	f7ff f929 	bl	8005c50 <SAI_AUDIO_IN_MspInit>
}
 80069fe:	e7f9      	b.n	80069f4 <BSP_AUDIO_IN_MspInit+0x10>
 8006a00:	2001df04 	.word	0x2001df04
 8006a04:	2001e2d4 	.word	0x2001e2d4

08006a08 <BSP_AUDIO_IN_ClockConfig>:
{
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	b0a4      	sub	sp, #144	@ 0x90
 8006a0c:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8006a0e:	4668      	mov	r0, sp
 8006a10:	f004 f9a0 	bl	800ad54 <HAL_RCCEx_GetPeriphCLKConfig>
  if ((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8006a14:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8006a18:	f245 6322 	movw	r3, #22050	@ 0x5622
 8006a1c:	429c      	cmp	r4, r3
 8006a1e:	bf18      	it	ne
 8006a20:	4294      	cmpne	r4, r2
 8006a22:	d003      	beq.n	8006a2c <BSP_AUDIO_IN_ClockConfig+0x24>
 8006a24:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8006a28:	429c      	cmp	r4, r3
 8006a2a:	d11a      	bne.n	8006a62 <BSP_AUDIO_IN_ClockConfig+0x5a>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8006a2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006a30:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8006a32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006a36:	9310      	str	r3, [sp, #64]	@ 0x40
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8006a38:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8006a3c:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8006a3e:	2302      	movs	r3, #2
 8006a40:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8006a42:	2313      	movs	r3, #19
 8006a44:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8006a46:	4668      	mov	r0, sp
 8006a48:	f003 fe84 	bl	800a754 <HAL_RCCEx_PeriphCLKConfig>
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1_AUDIO;
 8006a4c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006a50:	9300      	str	r3, [sp, #0]
  rcc_ex_clk_init_struct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8006a52:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006a56:	9323      	str	r3, [sp, #140]	@ 0x8c
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8006a58:	4668      	mov	r0, sp
 8006a5a:	f003 fe7b 	bl	800a754 <HAL_RCCEx_PeriphCLKConfig>
}
 8006a5e:	b024      	add	sp, #144	@ 0x90
 8006a60:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8006a62:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006a66:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8006a68:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006a6c:	9310      	str	r3, [sp, #64]	@ 0x40
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8006a6e:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8006a72:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8006a74:	2307      	movs	r3, #7
 8006a76:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8006a7c:	4668      	mov	r0, sp
 8006a7e:	f003 fe69 	bl	800a754 <HAL_RCCEx_PeriphCLKConfig>
 8006a82:	e7e3      	b.n	8006a4c <BSP_AUDIO_IN_ClockConfig+0x44>

08006a84 <BSP_AUDIO_IN_InitEx>:
{
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	460d      	mov	r5, r1
  AudioIn_Device = InputDevice;
 8006a88:	4a20      	ldr	r2, [pc, #128]	@ (8006b0c <BSP_AUDIO_IN_InitEx+0x88>)
 8006a8a:	8010      	strh	r0, [r2, #0]
  if (InputDevice == INPUT_DEVICE_DIGITAL_MIC)
 8006a8c:	b960      	cbnz	r0, 8006aa8 <BSP_AUDIO_IN_InitEx+0x24>
    AudioIn_ChannelNumber = ChnlNbr;
 8006a8e:	4a20      	ldr	r2, [pc, #128]	@ (8006b10 <BSP_AUDIO_IN_InitEx+0x8c>)
 8006a90:	7013      	strb	r3, [r2, #0]
    BSP_AUDIO_IN_ClockConfig(&hAudioInTopLeftFilter, AudioFreq, NULL);
 8006a92:	2200      	movs	r2, #0
 8006a94:	481f      	ldr	r0, [pc, #124]	@ (8006b14 <BSP_AUDIO_IN_InitEx+0x90>)
 8006a96:	f7ff ffb7 	bl	8006a08 <BSP_AUDIO_IN_ClockConfig>
    BSP_AUDIO_IN_MspInit();
 8006a9a:	f7ff ffa3 	bl	80069e4 <BSP_AUDIO_IN_MspInit>
    DFSDMx_Init(AudioFreq);
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f7ff f95c 	bl	8005d5c <DFSDMx_Init>
    ret = AUDIO_OK;
 8006aa4:	2000      	movs	r0, #0
}
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	4604      	mov	r4, r0
    SAIx_In_DeInit();
 8006aaa:	f7fe fef3 	bl	8005894 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 8006aae:	4e1a      	ldr	r6, [pc, #104]	@ (8006b18 <BSP_AUDIO_IN_InitEx+0x94>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f7ff fbeb 	bl	8006290 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8006aba:	4b18      	ldr	r3, [pc, #96]	@ (8006b1c <BSP_AUDIO_IN_InitEx+0x98>)
 8006abc:	6033      	str	r3, [r6, #0]
    if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f004 ffbb 	bl	800ba3a <HAL_SAI_GetState>
 8006ac4:	b160      	cbz	r0, 8006ae0 <BSP_AUDIO_IN_InitEx+0x5c>
    SAIx_In_Init(AudioFreq);
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f7fe ff3a 	bl	8005940 <SAIx_In_Init>
    if ((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 8006acc:	4b14      	ldr	r3, [pc, #80]	@ (8006b20 <BSP_AUDIO_IN_InitEx+0x9c>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2034      	movs	r0, #52	@ 0x34
 8006ad2:	4798      	blx	r3
 8006ad4:	f648 1394 	movw	r3, #35220	@ 0x8994
 8006ad8:	4298      	cmp	r0, r3
 8006ada:	d008      	beq.n	8006aee <BSP_AUDIO_IN_InitEx+0x6a>
      ret = AUDIO_ERROR;
 8006adc:	2001      	movs	r0, #1
 8006ade:	e7e2      	b.n	8006aa6 <BSP_AUDIO_IN_InitEx+0x22>
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff fb58 	bl	8006198 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit();
 8006ae8:	f7ff ff7c 	bl	80069e4 <BSP_AUDIO_IN_MspInit>
 8006aec:	e7eb      	b.n	8006ac6 <BSP_AUDIO_IN_InitEx+0x42>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8006aee:	4e0c      	ldr	r6, [pc, #48]	@ (8006b20 <BSP_AUDIO_IN_InitEx+0x9c>)
 8006af0:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8006af2:	2034      	movs	r0, #52	@ 0x34
 8006af4:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 8006af6:	4b0b      	ldr	r3, [pc, #44]	@ (8006b24 <BSP_AUDIO_IN_InitEx+0xa0>)
 8006af8:	601e      	str	r6, [r3, #0]
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8006afa:	6836      	ldr	r6, [r6, #0]
 8006afc:	462b      	mov	r3, r5
 8006afe:	2264      	movs	r2, #100	@ 0x64
 8006b00:	4621      	mov	r1, r4
 8006b02:	2034      	movs	r0, #52	@ 0x34
 8006b04:	47b0      	blx	r6
      ret = AUDIO_OK;
 8006b06:	2000      	movs	r0, #0
 8006b08:	e7cd      	b.n	8006aa6 <BSP_AUDIO_IN_InitEx+0x22>
 8006b0a:	bf00      	nop
 8006b0c:	2001df04 	.word	0x2001df04
 8006b10:	20002118 	.word	0x20002118
 8006b14:	2001e208 	.word	0x2001e208
 8006b18:	2001e2d4 	.word	0x2001e2d4
 8006b1c:	40015824 	.word	0x40015824
 8006b20:	20002144 	.word	0x20002144
 8006b24:	2001e3dc 	.word	0x2001e3dc

08006b28 <BSP_AUDIO_IN_Init>:
{
 8006b28:	b508      	push	{r3, lr}
 8006b2a:	4613      	mov	r3, r2
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MIC, AudioFreq, BitRes, ChnlNbr);
 8006b2c:	460a      	mov	r2, r1
 8006b2e:	4601      	mov	r1, r0
 8006b30:	2000      	movs	r0, #0
 8006b32:	f7ff ffa7 	bl	8006a84 <BSP_AUDIO_IN_InitEx>
}
 8006b36:	bd08      	pop	{r3, pc}

08006b38 <LCD_IO_GetID>:
    return 0;
  }
#else
  return LCD_DSI_ID;
#endif /* USE_LCD_HDMI */
}
 8006b38:	2011      	movs	r0, #17
 8006b3a:	4770      	bx	lr

08006b3c <Driver_Type>:
/**
 * @brief  Check if the component ID is correct.
 * @param  Lcd_type Driver Type Control NT35510 or OTM8009A
 */
static LCD_Driver_t Driver_Type(LCD_Driver_t Lcd_type)
{
 8006b3c:	b508      	push	{r3, lr}
  uint16_t read_id;
  /* Read the NT35510 ID */
  read_id = NT35510_ReadID();
 8006b3e:	f7fd ff57 	bl	80049f0 <NT35510_ReadID>
  if (read_id == NT35510_ID)
 8006b42:	2880      	cmp	r0, #128	@ 0x80
 8006b44:	d101      	bne.n	8006b4a <Driver_Type+0xe>
  {
    Lcd_type = LCD_CTRL_NT35510;
 8006b46:	2000      	movs	r0, #0
      Lcd_type = LCD_CTRL_NONE;
    }
  }

  return Lcd_type;
}
 8006b48:	bd08      	pop	{r3, pc}
    read_id = OTM8009A_ReadID();
 8006b4a:	f7fe f9c3 	bl	8004ed4 <OTM8009A_ReadID>
    if (read_id == OTM8009A_ID)
 8006b4e:	2840      	cmp	r0, #64	@ 0x40
 8006b50:	d001      	beq.n	8006b56 <Driver_Type+0x1a>
      Lcd_type = LCD_CTRL_NONE;
 8006b52:	2002      	movs	r0, #2
 8006b54:	e7f8      	b.n	8006b48 <Driver_Type+0xc>
      Lcd_type = LCD_CTRL_OTM8009A;
 8006b56:	2001      	movs	r0, #1
 8006b58:	e7f6      	b.n	8006b48 <Driver_Type+0xc>
	...

08006b5c <LL_FillBuffer>:
{
 8006b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	4604      	mov	r4, r0
 8006b62:	460d      	mov	r5, r1
 8006b64:	4616      	mov	r6, r2
 8006b66:	461f      	mov	r7, r3
  hdma2d_discovery.Init.Mode = DMA2D_R2M;
 8006b68:	4811      	ldr	r0, [pc, #68]	@ (8006bb0 <LL_FillBuffer+0x54>)
 8006b6a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8006b6e:	6043      	str	r3, [r0, #4]
  hdma2d_discovery.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8006b70:	2300      	movs	r3, #0
 8006b72:	6083      	str	r3, [r0, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8006b74:	9b08      	ldr	r3, [sp, #32]
 8006b76:	60c3      	str	r3, [r0, #12]
  hdma2d_discovery.Instance = DMA2D;
 8006b78:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb4 <LL_FillBuffer+0x58>)
 8006b7a:	6003      	str	r3, [r0, #0]
  if (HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8006b7c:	f001 fd80 	bl	8008680 <HAL_DMA2D_Init>
 8006b80:	b108      	cbz	r0, 8006b86 <LL_FillBuffer+0x2a>
}
 8006b82:	b003      	add	sp, #12
 8006b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8006b86:	4621      	mov	r1, r4
 8006b88:	4809      	ldr	r0, [pc, #36]	@ (8006bb0 <LL_FillBuffer+0x54>)
 8006b8a:	f001 fe6b 	bl	8008864 <HAL_DMA2D_ConfigLayer>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d1f7      	bne.n	8006b82 <LL_FillBuffer+0x26>
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8006b92:	9700      	str	r7, [sp, #0]
 8006b94:	4633      	mov	r3, r6
 8006b96:	462a      	mov	r2, r5
 8006b98:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b9a:	4805      	ldr	r0, [pc, #20]	@ (8006bb0 <LL_FillBuffer+0x54>)
 8006b9c:	f001 fda7 	bl	80086ee <HAL_DMA2D_Start>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d1ee      	bne.n	8006b82 <LL_FillBuffer+0x26>
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8006ba4:	210a      	movs	r1, #10
 8006ba6:	4802      	ldr	r0, [pc, #8]	@ (8006bb0 <LL_FillBuffer+0x54>)
 8006ba8:	f001 fdbd 	bl	8008726 <HAL_DMA2D_PollForTransfer>
}
 8006bac:	e7e9      	b.n	8006b82 <LL_FillBuffer+0x26>
 8006bae:	bf00      	nop
 8006bb0:	2001e554 	.word	0x2001e554
 8006bb4:	4002b000 	.word	0x4002b000

08006bb8 <BSP_LCD_Reset>:
{
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	b086      	sub	sp, #24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006bbc:	4b14      	ldr	r3, [pc, #80]	@ (8006c10 <BSP_LCD_Reset+0x58>)
 8006bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin = GPIO_PIN_15;
 8006bd0:	f44f 4500 	mov.w	r5, #32768	@ 0x8000
 8006bd4:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8006bd6:	2601      	movs	r6, #1
 8006bd8:	9602      	str	r6, [sp, #8]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8006bda:	9603      	str	r6, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8006be0:	4c0c      	ldr	r4, [pc, #48]	@ (8006c14 <BSP_LCD_Reset+0x5c>)
 8006be2:	a901      	add	r1, sp, #4
 8006be4:	4620      	mov	r0, r4
 8006be6:	f002 fac7 	bl	8009178 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8006bea:	2200      	movs	r2, #0
 8006bec:	4629      	mov	r1, r5
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f002 fbcb 	bl	800938a <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 8006bf4:	2014      	movs	r0, #20
 8006bf6:	f000 ffc3 	bl	8007b80 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8006bfa:	4632      	mov	r2, r6
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f002 fbc3 	bl	800938a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8006c04:	200a      	movs	r0, #10
 8006c06:	f000 ffbb 	bl	8007b80 <HAL_Delay>
}
 8006c0a:	b006      	add	sp, #24
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
 8006c0e:	bf00      	nop
 8006c10:	40023800 	.word	0x40023800
 8006c14:	40022400 	.word	0x40022400

08006c18 <BSP_LCD_GetXSize>:
}
 8006c18:	4b01      	ldr	r3, [pc, #4]	@ (8006c20 <BSP_LCD_GetXSize+0x8>)
 8006c1a:	6818      	ldr	r0, [r3, #0]
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	20002120 	.word	0x20002120

08006c24 <BSP_LCD_GetYSize>:
}
 8006c24:	4b01      	ldr	r3, [pc, #4]	@ (8006c2c <BSP_LCD_GetYSize+0x8>)
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	2000211c 	.word	0x2000211c

08006c30 <BSP_LCD_LayerDefaultInit>:
{
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	b08e      	sub	sp, #56	@ 0x38
 8006c34:	4604      	mov	r4, r0
 8006c36:	460e      	mov	r6, r1
  Layercfg.WindowX0 = 0;
 8006c38:	2500      	movs	r5, #0
 8006c3a:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8006c3c:	f7ff ffec 	bl	8006c18 <BSP_LCD_GetXSize>
 8006c40:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY0 = 0;
 8006c42:	9503      	str	r5, [sp, #12]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8006c44:	f7ff ffee 	bl	8006c24 <BSP_LCD_GetYSize>
 8006c48:	9004      	str	r0, [sp, #16]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006c4a:	9505      	str	r5, [sp, #20]
  Layercfg.FBStartAdress = FB_Address;
 8006c4c:	960a      	str	r6, [sp, #40]	@ 0x28
  Layercfg.Alpha = 255;
 8006c4e:	23ff      	movs	r3, #255	@ 0xff
 8006c50:	9306      	str	r3, [sp, #24]
  Layercfg.Alpha0 = 0;
 8006c52:	9507      	str	r5, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 8006c54:	f88d 5034 	strb.w	r5, [sp, #52]	@ 0x34
  Layercfg.Backcolor.Green = 0;
 8006c58:	f88d 5035 	strb.w	r5, [sp, #53]	@ 0x35
  Layercfg.Backcolor.Red = 0;
 8006c5c:	f88d 5036 	strb.w	r5, [sp, #54]	@ 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006c60:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006c64:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006c66:	2307      	movs	r3, #7
 8006c68:	9309      	str	r3, [sp, #36]	@ 0x24
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8006c6a:	f7ff ffd5 	bl	8006c18 <BSP_LCD_GetXSize>
 8006c6e:	900b      	str	r0, [sp, #44]	@ 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8006c70:	f7ff ffd8 	bl	8006c24 <BSP_LCD_GetYSize>
 8006c74:	900c      	str	r0, [sp, #48]	@ 0x30
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex);
 8006c76:	4622      	mov	r2, r4
 8006c78:	a901      	add	r1, sp, #4
 8006c7a:	480a      	ldr	r0, [pc, #40]	@ (8006ca4 <BSP_LCD_LayerDefaultInit+0x74>)
 8006c7c:	f003 f8ee 	bl	8009e5c <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8006c80:	4a09      	ldr	r2, [pc, #36]	@ (8006ca8 <BSP_LCD_LayerDefaultInit+0x78>)
 8006c82:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006c86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c8a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006c8e:	6059      	str	r1, [r3, #4]
  DrawProp[LayerIndex].pFont = &Font24;
 8006c90:	4906      	ldr	r1, [pc, #24]	@ (8006cac <BSP_LCD_LayerDefaultInit+0x7c>)
 8006c92:	6099      	str	r1, [r3, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8006c94:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006c98:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8006c9c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8006ca0:	b00e      	add	sp, #56	@ 0x38
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	2001e4ac 	.word	0x2001e4ac
 8006ca8:	2001e470 	.word	0x2001e470
 8006cac:	2000212c 	.word	0x2000212c

08006cb0 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8006cb0:	4b03      	ldr	r3, [pc, #12]	@ (8006cc0 <BSP_LCD_SetTextColor+0x10>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006cb8:	4a02      	ldr	r2, [pc, #8]	@ (8006cc4 <BSP_LCD_SetTextColor+0x14>)
 8006cba:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8006cbe:	4770      	bx	lr
 8006cc0:	2001e488 	.word	0x2001e488
 8006cc4:	2001e470 	.word	0x2001e470

08006cc8 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8006cc8:	4b04      	ldr	r3, [pc, #16]	@ (8006cdc <BSP_LCD_SetBackColor+0x14>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006cd0:	4a03      	ldr	r2, [pc, #12]	@ (8006ce0 <BSP_LCD_SetBackColor+0x18>)
 8006cd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006cd6:	6058      	str	r0, [r3, #4]
}
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	2001e488 	.word	0x2001e488
 8006ce0:	2001e470 	.word	0x2001e470

08006ce4 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8006ce4:	4b04      	ldr	r3, [pc, #16]	@ (8006cf8 <BSP_LCD_SetFont+0x14>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006cec:	4a03      	ldr	r2, [pc, #12]	@ (8006cfc <BSP_LCD_SetFont+0x18>)
 8006cee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006cf2:	6098      	str	r0, [r3, #8]
}
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	2001e488 	.word	0x2001e488
 8006cfc:	2001e470 	.word	0x2001e470

08006d00 <BSP_LCD_Clear>:
{
 8006d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d02:	b083      	sub	sp, #12
 8006d04:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006d06:	4b0b      	ldr	r3, [pc, #44]	@ (8006d34 <BSP_LCD_Clear+0x34>)
 8006d08:	681e      	ldr	r6, [r3, #0]
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d38 <BSP_LCD_Clear+0x38>)
 8006d0c:	2234      	movs	r2, #52	@ 0x34
 8006d0e:	fb02 3306 	mla	r3, r2, r6, r3
 8006d12:	6ddf      	ldr	r7, [r3, #92]	@ 0x5c
 8006d14:	f7ff ff80 	bl	8006c18 <BSP_LCD_GetXSize>
 8006d18:	4604      	mov	r4, r0
 8006d1a:	f7ff ff83 	bl	8006c24 <BSP_LCD_GetYSize>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	9501      	str	r5, [sp, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	9200      	str	r2, [sp, #0]
 8006d26:	4622      	mov	r2, r4
 8006d28:	4639      	mov	r1, r7
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7ff ff16 	bl	8006b5c <LL_FillBuffer>
}
 8006d30:	b003      	add	sp, #12
 8006d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d34:	2001e488 	.word	0x2001e488
 8006d38:	2001e4ac 	.word	0x2001e4ac

08006d3c <BSP_LCD_DrawHLine>:
{
 8006d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d40:	b082      	sub	sp, #8
 8006d42:	4604      	mov	r4, r0
 8006d44:	460f      	mov	r7, r1
 8006d46:	4616      	mov	r6, r2
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8006d48:	4b0e      	ldr	r3, [pc, #56]	@ (8006d84 <BSP_LCD_DrawHLine+0x48>)
 8006d4a:	681d      	ldr	r5, [r3, #0]
 8006d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d88 <BSP_LCD_DrawHLine+0x4c>)
 8006d4e:	2234      	movs	r2, #52	@ 0x34
 8006d50:	fb02 3305 	mla	r3, r2, r5, r3
 8006d54:	f8d3 805c 	ldr.w	r8, [r3, #92]	@ 0x5c
 8006d58:	f7ff ff5e 	bl	8006c18 <BSP_LCD_GetXSize>
 8006d5c:	fb00 4107 	mla	r1, r0, r7, r4
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8006d60:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8006d64:	4b09      	ldr	r3, [pc, #36]	@ (8006d8c <BSP_LCD_DrawHLine+0x50>)
 8006d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6a:	9301      	str	r3, [sp, #4]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	2301      	movs	r3, #1
 8006d72:	4632      	mov	r2, r6
 8006d74:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8006d78:	4628      	mov	r0, r5
 8006d7a:	f7ff feef 	bl	8006b5c <LL_FillBuffer>
}
 8006d7e:	b002      	add	sp, #8
 8006d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d84:	2001e488 	.word	0x2001e488
 8006d88:	2001e4ac 	.word	0x2001e4ac
 8006d8c:	2001e470 	.word	0x2001e470

08006d90 <BSP_LCD_DrawVLine>:
{
 8006d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	4604      	mov	r4, r0
 8006d98:	4688      	mov	r8, r1
 8006d9a:	4616      	mov	r6, r2
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8006d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd8 <BSP_LCD_DrawVLine+0x48>)
 8006d9e:	681d      	ldr	r5, [r3, #0]
 8006da0:	4b0e      	ldr	r3, [pc, #56]	@ (8006ddc <BSP_LCD_DrawVLine+0x4c>)
 8006da2:	2234      	movs	r2, #52	@ 0x34
 8006da4:	fb02 3305 	mla	r3, r2, r5, r3
 8006da8:	6ddf      	ldr	r7, [r3, #92]	@ 0x5c
 8006daa:	f7ff ff35 	bl	8006c18 <BSP_LCD_GetXSize>
 8006dae:	fb00 4108 	mla	r1, r0, r8, r4
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8006db2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8006db6:	4b0a      	ldr	r3, [pc, #40]	@ (8006de0 <BSP_LCD_DrawVLine+0x50>)
 8006db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	3801      	subs	r0, #1
 8006dc0:	9000      	str	r0, [sp, #0]
 8006dc2:	4633      	mov	r3, r6
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f7ff fec6 	bl	8006b5c <LL_FillBuffer>
}
 8006dd0:	b002      	add	sp, #8
 8006dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd6:	bf00      	nop
 8006dd8:	2001e488 	.word	0x2001e488
 8006ddc:	2001e4ac 	.word	0x2001e4ac
 8006de0:	2001e470 	.word	0x2001e470

08006de4 <BSP_LCD_DrawRect>:
{
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	4604      	mov	r4, r0
 8006de8:	460d      	mov	r5, r1
 8006dea:	4617      	mov	r7, r2
 8006dec:	461e      	mov	r6, r3
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8006dee:	f7ff ffa5 	bl	8006d3c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height), Width);
 8006df2:	19a9      	adds	r1, r5, r6
 8006df4:	463a      	mov	r2, r7
 8006df6:	b289      	uxth	r1, r1
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f7ff ff9f 	bl	8006d3c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8006dfe:	4632      	mov	r2, r6
 8006e00:	4629      	mov	r1, r5
 8006e02:	4620      	mov	r0, r4
 8006e04:	f7ff ffc4 	bl	8006d90 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8006e08:	19e0      	adds	r0, r4, r7
 8006e0a:	4632      	mov	r2, r6
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	b280      	uxth	r0, r0
 8006e10:	f7ff ffbe 	bl	8006d90 <BSP_LCD_DrawVLine>
}
 8006e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e18 <BSP_LCD_FillRect>:
{
 8006e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1c:	b082      	sub	sp, #8
 8006e1e:	4604      	mov	r4, r0
 8006e20:	4688      	mov	r8, r1
 8006e22:	4616      	mov	r6, r2
 8006e24:	461f      	mov	r7, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006e26:	f8df a054 	ldr.w	sl, [pc, #84]	@ 8006e7c <BSP_LCD_FillRect+0x64>
 8006e2a:	4d12      	ldr	r5, [pc, #72]	@ (8006e74 <BSP_LCD_FillRect+0x5c>)
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006e32:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8006e36:	f7ff ff3b 	bl	8006cb0 <BSP_LCD_SetTextColor>
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8006e3a:	682d      	ldr	r5, [r5, #0]
 8006e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e78 <BSP_LCD_FillRect+0x60>)
 8006e3e:	2234      	movs	r2, #52	@ 0x34
 8006e40:	fb02 3305 	mla	r3, r2, r5, r3
 8006e44:	f8d3 905c 	ldr.w	r9, [r3, #92]	@ 0x5c
 8006e48:	f7ff fee6 	bl	8006c18 <BSP_LCD_GetXSize>
 8006e4c:	fb00 4108 	mla	r1, r0, r8, r4
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8006e50:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8006e54:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	1b80      	subs	r0, r0, r6
 8006e5c:	9000      	str	r0, [sp, #0]
 8006e5e:	463b      	mov	r3, r7
 8006e60:	4632      	mov	r2, r6
 8006e62:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8006e66:	4628      	mov	r0, r5
 8006e68:	f7ff fe78 	bl	8006b5c <LL_FillBuffer>
}
 8006e6c:	b002      	add	sp, #8
 8006e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e72:	bf00      	nop
 8006e74:	2001e488 	.word	0x2001e488
 8006e78:	2001e4ac 	.word	0x2001e4ac
 8006e7c:	2001e470 	.word	0x2001e470

08006e80 <DSI_IO_WriteCmd>:
{
 8006e80:	b500      	push	{lr}
 8006e82:	b083      	sub	sp, #12
  if (NbrParams <= 1)
 8006e84:	2801      	cmp	r0, #1
 8006e86:	d90b      	bls.n	8006ea0 <DSI_IO_WriteCmd+0x20>
 8006e88:	4603      	mov	r3, r0
    HAL_DSI_LongWrite(&hdsi_discovery, LCD_Driver_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8006e8a:	5c0a      	ldrb	r2, [r1, r0]
 8006e8c:	9101      	str	r1, [sp, #4]
 8006e8e:	9200      	str	r2, [sp, #0]
 8006e90:	2239      	movs	r2, #57	@ 0x39
 8006e92:	2100      	movs	r1, #0
 8006e94:	4807      	ldr	r0, [pc, #28]	@ (8006eb4 <DSI_IO_WriteCmd+0x34>)
 8006e96:	f002 f886 	bl	8008fa6 <HAL_DSI_LongWrite>
}
 8006e9a:	b003      	add	sp, #12
 8006e9c:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_DSI_ShortWrite(&hdsi_discovery, LCD_Driver_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8006ea0:	784b      	ldrb	r3, [r1, #1]
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	780b      	ldrb	r3, [r1, #0]
 8006ea6:	2215      	movs	r2, #21
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4802      	ldr	r0, [pc, #8]	@ (8006eb4 <DSI_IO_WriteCmd+0x34>)
 8006eac:	f002 f868 	bl	8008f80 <HAL_DSI_ShortWrite>
 8006eb0:	e7f3      	b.n	8006e9a <DSI_IO_WriteCmd+0x1a>
 8006eb2:	bf00      	nop
 8006eb4:	2001e490 	.word	0x2001e490

08006eb8 <DSI_IO_ReadCmd>:
{
 8006eb8:	b500      	push	{lr}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	4613      	mov	r3, r2
  if (HAL_DSI_Read(&hdsi_discovery, LCD_Driver_ID, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) == HAL_OK)
 8006ebe:	9102      	str	r1, [sp, #8]
 8006ec0:	9001      	str	r0, [sp, #4]
 8006ec2:	2206      	movs	r2, #6
 8006ec4:	9200      	str	r2, [sp, #0]
 8006ec6:	460a      	mov	r2, r1
 8006ec8:	2100      	movs	r1, #0
 8006eca:	4805      	ldr	r0, [pc, #20]	@ (8006ee0 <DSI_IO_ReadCmd+0x28>)
 8006ecc:	f002 f8cb 	bl	8009066 <HAL_DSI_Read>
 8006ed0:	b118      	cbz	r0, 8006eda <DSI_IO_ReadCmd+0x22>
  int32_t ret = LCD_ERROR;
 8006ed2:	2001      	movs	r0, #1
}
 8006ed4:	b005      	add	sp, #20
 8006ed6:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = LCD_OK;
 8006eda:	2000      	movs	r0, #0
  return ret;
 8006edc:	e7fa      	b.n	8006ed4 <DSI_IO_ReadCmd+0x1c>
 8006ede:	bf00      	nop
 8006ee0:	2001e490 	.word	0x2001e490

08006ee4 <BSP_LCD_MspInit>:
{
 8006ee4:	b500      	push	{lr}
 8006ee6:	b085      	sub	sp, #20
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006ee8:	4b27      	ldr	r3, [pc, #156]	@ (8006f88 <BSP_LCD_MspInit+0xa4>)
 8006eea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eec:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8006ef0:	645a      	str	r2, [r3, #68]	@ 0x44
 8006ef2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ef4:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8006ef8:	9201      	str	r2, [sp, #4]
 8006efa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 8006efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006efe:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8006f02:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8006f04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f06:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8006f0a:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8006f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f0e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8006f12:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f16:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8006f1a:	9202      	str	r2, [sp, #8]
 8006f1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8006f24:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8006f2c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8006f2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f30:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8006f34:	645a      	str	r2, [r3, #68]	@ 0x44
 8006f36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f38:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006f3c:	9203      	str	r2, [sp, #12]
 8006f3e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8006f40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f42:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8006f46:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8006f48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f4a:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
 8006f4e:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8006f50:	2200      	movs	r2, #0
 8006f52:	2103      	movs	r1, #3
 8006f54:	2058      	movs	r0, #88	@ 0x58
 8006f56:	f000 fe6b 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006f5a:	2058      	movs	r0, #88	@ 0x58
 8006f5c:	f000 fe78 	bl	8007c50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8006f60:	2200      	movs	r2, #0
 8006f62:	2103      	movs	r1, #3
 8006f64:	205a      	movs	r0, #90	@ 0x5a
 8006f66:	f000 fe63 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006f6a:	205a      	movs	r0, #90	@ 0x5a
 8006f6c:	f000 fe70 	bl	8007c50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8006f70:	2200      	movs	r2, #0
 8006f72:	2103      	movs	r1, #3
 8006f74:	2062      	movs	r0, #98	@ 0x62
 8006f76:	f000 fe5b 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8006f7a:	2062      	movs	r0, #98	@ 0x62
 8006f7c:	f000 fe68 	bl	8007c50 <HAL_NVIC_EnableIRQ>
}
 8006f80:	b005      	add	sp, #20
 8006f82:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f86:	bf00      	nop
 8006f88:	40023800 	.word	0x40023800

08006f8c <BSP_LCD_InitEx>:
{
 8006f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	4607      	mov	r7, r0
  BSP_LCD_Reset();
 8006f94:	f7ff fe10 	bl	8006bb8 <BSP_LCD_Reset>
  read_id = LCD_IO_GetID();
 8006f98:	f7ff fdce 	bl	8006b38 <LCD_IO_GetID>
  if (read_id != LCD_DSI_ID)
 8006f9c:	2811      	cmp	r0, #17
 8006f9e:	d004      	beq.n	8006faa <BSP_LCD_InitEx+0x1e>
    return LCD_ERROR;
 8006fa0:	2401      	movs	r4, #1
}
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	b004      	add	sp, #16
 8006fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  BSP_LCD_MspInit();
 8006faa:	f7ff ff9b 	bl	8006ee4 <BSP_LCD_MspInit>
  hdsi_discovery.Instance = DSI;
 8006fae:	4c67      	ldr	r4, [pc, #412]	@ (800714c <BSP_LCD_InitEx+0x1c0>)
 8006fb0:	4b67      	ldr	r3, [pc, #412]	@ (8007150 <BSP_LCD_InitEx+0x1c4>)
 8006fb2:	6023      	str	r3, [r4, #0]
  HAL_DSI_DeInit(&(hdsi_discovery));
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f001 fe02 	bl	8008bbe <HAL_DSI_DeInit>
  dsiPllInit.PLLNDIV = 100;
 8006fba:	2364      	movs	r3, #100	@ 0x64
 8006fbc:	9301      	str	r3, [sp, #4]
  dsiPllInit.PLLIDF = DSI_PLL_IN_DIV5;
 8006fbe:	2305      	movs	r3, #5
 8006fc0:	9302      	str	r3, [sp, #8]
  dsiPllInit.PLLODF = DSI_PLL_OUT_DIV1;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9303      	str	r3, [sp, #12]
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	60e3      	str	r3, [r4, #12]
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz / 15620;
 8006fca:	2504      	movs	r5, #4
 8006fcc:	60a5      	str	r5, [r4, #8]
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8006fce:	eb0d 0105 	add.w	r1, sp, r5
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f001 fce2 	bl	800899c <HAL_DSI_Init>
  HAL_DSI_Start(&(hdsi_discovery));
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f001 ff83 	bl	8008ee4 <HAL_DSI_Start>
  HAL_DSI_ConfigFlowControl(&(hdsi_discovery), DSI_FLOW_CONTROL_BTA);
 8006fde:	4629      	mov	r1, r5
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f001 ff6b 	bl	8008ebc <HAL_DSI_ConfigFlowControl>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006fe6:	485b      	ldr	r0, [pc, #364]	@ (8007154 <BSP_LCD_InitEx+0x1c8>)
 8006fe8:	f7ff fe7c 	bl	8006ce4 <BSP_LCD_SetFont>
  Lcd_Driver_Type = Driver_Type(Lcd_Driver_Type);
 8006fec:	4d5a      	ldr	r5, [pc, #360]	@ (8007158 <BSP_LCD_InitEx+0x1cc>)
 8006fee:	7828      	ldrb	r0, [r5, #0]
 8006ff0:	f7ff fda4 	bl	8006b3c <Driver_Type>
 8006ff4:	7028      	strb	r0, [r5, #0]
  HAL_DSI_Stop(&(hdsi_discovery));
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f001 ff9b 	bl	8008f32 <HAL_DSI_Stop>
  if (orientation == LCD_ORIENTATION_PORTRAIT)
 8006ffc:	2f00      	cmp	r7, #0
 8006ffe:	f040 8091 	bne.w	8007124 <BSP_LCD_InitEx+0x198>
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8007002:	4b56      	ldr	r3, [pc, #344]	@ (800715c <BSP_LCD_InitEx+0x1d0>)
 8007004:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007008:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */
 800700a:	4b55      	ldr	r3, [pc, #340]	@ (8007160 <BSP_LCD_InitEx+0x1d4>)
 800700c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8007010:	601a      	str	r2, [r3, #0]
  HACT = lcd_x_size;
 8007012:	4b52      	ldr	r3, [pc, #328]	@ (800715c <BSP_LCD_InitEx+0x1d0>)
 8007014:	681b      	ldr	r3, [r3, #0]
  VACT = lcd_y_size;
 8007016:	4a52      	ldr	r2, [pc, #328]	@ (8007160 <BSP_LCD_InitEx+0x1d4>)
 8007018:	6810      	ldr	r0, [r2, #0]
  if (Lcd_Driver_Type == LCD_CTRL_OTM8009A)
 800701a:	4a4f      	ldr	r2, [pc, #316]	@ (8007158 <BSP_LCD_InitEx+0x1cc>)
 800701c:	7812      	ldrb	r2, [r2, #0]
 800701e:	2a01      	cmp	r2, #1
 8007020:	f000 8089 	beq.w	8007136 <BSP_LCD_InitEx+0x1aa>
    VFP = NT35510_480X800_VFP;
 8007024:	2196      	movs	r1, #150	@ 0x96
    VBP = NT35510_480X800_VBP;
 8007026:	460d      	mov	r5, r1
    VSA = NT35510_480X800_VSYNC;
 8007028:	f04f 0c78 	mov.w	ip, #120	@ 0x78
  hdsivideo_handle.VirtualChannelID = LCD_Driver_ID;
 800702c:	4c4d      	ldr	r4, [pc, #308]	@ (8007164 <BSP_LCD_InitEx+0x1d8>)
 800702e:	2600      	movs	r6, #0
 8007030:	6026      	str	r6, [r4, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8007032:	2205      	movs	r2, #5
 8007034:	6062      	str	r2, [r4, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8007036:	6226      	str	r6, [r4, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8007038:	61e6      	str	r6, [r4, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800703a:	6266      	str	r6, [r4, #36]	@ 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 800703c:	2202      	movs	r2, #2
 800703e:	60e2      	str	r2, [r4, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8007040:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8007044:	61a2      	str	r2, [r4, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8007046:	6166      	str	r6, [r4, #20]
  hdsivideo_handle.PacketSize = HACT; /* Value depending on display orientation choice portrait/landscape */
 8007048:	6123      	str	r3, [r4, #16]
  hdsivideo_handle.HorizontalSyncActive = (HSA * laneByteClk_kHz) / LcdClock;
 800704a:	2204      	movs	r2, #4
 800704c:	62a2      	str	r2, [r4, #40]	@ 0x28
  hdsivideo_handle.HorizontalBackPorch = (HBP * laneByteClk_kHz) / LcdClock;
 800704e:	224d      	movs	r2, #77	@ 0x4d
 8007050:	62e2      	str	r2, [r4, #44]	@ 0x2c
  hdsivideo_handle.HorizontalLine = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8007052:	3346      	adds	r3, #70	@ 0x46
 8007054:	f24f 4224 	movw	r2, #62500	@ 0xf424
 8007058:	fb02 f303 	mul.w	r3, r2, r3
 800705c:	4a42      	ldr	r2, [pc, #264]	@ (8007168 <BSP_LCD_InitEx+0x1dc>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	0b5b      	lsrs	r3, r3, #13
 8007064:	6323      	str	r3, [r4, #48]	@ 0x30
  hdsivideo_handle.VerticalSyncActive = VSA;
 8007066:	f8c4 c034 	str.w	ip, [r4, #52]	@ 0x34
  hdsivideo_handle.VerticalBackPorch = VBP;
 800706a:	63a5      	str	r5, [r4, #56]	@ 0x38
  hdsivideo_handle.VerticalFrontPorch = VFP;
 800706c:	63e1      	str	r1, [r4, #60]	@ 0x3c
  hdsivideo_handle.VerticalActive = VACT; /* Value depending on display orientation choice portrait/landscape */
 800706e:	6420      	str	r0, [r4, #64]	@ 0x40
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8007070:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007074:	6463      	str	r3, [r4, #68]	@ 0x44
  hdsivideo_handle.LPLargestPacketSize = 16;
 8007076:	2310      	movs	r3, #16
 8007078:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800707a:	64e6      	str	r6, [r4, #76]	@ 0x4c
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE; /* Allow sending LP commands during HFP period */
 800707c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007080:	6523      	str	r3, [r4, #80]	@ 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;  /* Allow sending LP commands during HBP period */
 8007082:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007086:	6563      	str	r3, [r4, #84]	@ 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;      /* Allow sending LP commands during VACT period */
 8007088:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800708c:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 800708e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007092:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;    /* Allow sending LP commands during VBP period */
 8007094:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007098:	6623      	str	r3, [r4, #96]	@ 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 800709a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800709e:	6663      	str	r3, [r4, #100]	@ 0x64
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 80070a0:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 800714c <BSP_LCD_InitEx+0x1c0>
 80070a4:	4621      	mov	r1, r4
 80070a6:	4640      	mov	r0, r8
 80070a8:	f001 fdd8 	bl	8008c5c <HAL_DSI_ConfigVideoMode>
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80070ac:	4d2f      	ldr	r5, [pc, #188]	@ (800716c <BSP_LCD_InitEx+0x1e0>)
 80070ae:	2301      	movs	r3, #1
 80070b0:	616b      	str	r3, [r5, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80070b2:	2323      	movs	r3, #35	@ 0x23
 80070b4:	61eb      	str	r3, [r5, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80070b6:	4b29      	ldr	r3, [pc, #164]	@ (800715c <BSP_LCD_InitEx+0x1d0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 80070be:	626a      	str	r2, [r5, #36]	@ 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80070c0:	f103 0245 	add.w	r2, r3, #69	@ 0x45
 80070c4:	62ea      	str	r2, [r5, #44]	@ 0x2c
  hltdc_discovery.LayerCfg->ImageWidth = lcd_x_size;
 80070c6:	662b      	str	r3, [r5, #96]	@ 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;
 80070c8:	4b25      	ldr	r3, [pc, #148]	@ (8007160 <BSP_LCD_InitEx+0x1d4>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	666b      	str	r3, [r5, #100]	@ 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80070ce:	4828      	ldr	r0, [pc, #160]	@ (8007170 <BSP_LCD_InitEx+0x1e4>)
 80070d0:	2308      	movs	r3, #8
 80070d2:	6003      	str	r3, [r0, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80070d4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80070d8:	6143      	str	r3, [r0, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80070da:	2307      	movs	r3, #7
 80070dc:	61c3      	str	r3, [r0, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80070de:	62c6      	str	r6, [r0, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80070e0:	f003 fb38 	bl	800a754 <HAL_RCCEx_PeriphCLKConfig>
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80070e4:	f885 6034 	strb.w	r6, [r5, #52]	@ 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80070e8:	f885 6035 	strb.w	r6, [r5, #53]	@ 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80070ec:	f885 6036 	strb.w	r6, [r5, #54]	@ 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80070f0:	612e      	str	r6, [r5, #16]
  hltdc_discovery.Instance = LTDC;
 80070f2:	4b20      	ldr	r3, [pc, #128]	@ (8007174 <BSP_LCD_InitEx+0x1e8>)
 80070f4:	602b      	str	r3, [r5, #0]
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80070f6:	4621      	mov	r1, r4
 80070f8:	4628      	mov	r0, r5
 80070fa:	f002 fee3 	bl	8009ec4 <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&hltdc_discovery);
 80070fe:	4628      	mov	r0, r5
 8007100:	f002 fe32 	bl	8009d68 <HAL_LTDC_Init>
  HAL_DSI_Start(&hdsi_discovery);
 8007104:	4640      	mov	r0, r8
 8007106:	f001 feed 	bl	8008ee4 <HAL_DSI_Start>
  BSP_SDRAM_Init();
 800710a:	f000 fc4f 	bl	80079ac <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800710e:	4811      	ldr	r0, [pc, #68]	@ (8007154 <BSP_LCD_InitEx+0x1c8>)
 8007110:	f7ff fde8 	bl	8006ce4 <BSP_LCD_SetFont>
  if (Lcd_Driver_Type == LCD_CTRL_NT35510)
 8007114:	4b10      	ldr	r3, [pc, #64]	@ (8007158 <BSP_LCD_InitEx+0x1cc>)
 8007116:	781c      	ldrb	r4, [r3, #0]
 8007118:	b994      	cbnz	r4, 8007140 <BSP_LCD_InitEx+0x1b4>
    NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 800711a:	4639      	mov	r1, r7
 800711c:	4630      	mov	r0, r6
 800711e:	f7fd faef 	bl	8004700 <NT35510_Init>
 8007122:	e73e      	b.n	8006fa2 <BSP_LCD_InitEx+0x16>
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8007124:	4b0d      	ldr	r3, [pc, #52]	@ (800715c <BSP_LCD_InitEx+0x1d0>)
 8007126:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800712a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */
 800712c:	4b0c      	ldr	r3, [pc, #48]	@ (8007160 <BSP_LCD_InitEx+0x1d4>)
 800712e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	e76d      	b.n	8007012 <BSP_LCD_InitEx+0x86>
    VFP = OTM8009A_480X800_VFP;
 8007136:	2110      	movs	r1, #16
    VBP = OTM8009A_480X800_VBP;
 8007138:	250f      	movs	r5, #15
    VSA = OTM8009A_480X800_VSYNC;
 800713a:	f04f 0c01 	mov.w	ip, #1
 800713e:	e775      	b.n	800702c <BSP_LCD_InitEx+0xa0>
    OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8007140:	4639      	mov	r1, r7
 8007142:	2000      	movs	r0, #0
 8007144:	f7fd fc64 	bl	8004a10 <OTM8009A_Init>
  return LCD_OK;
 8007148:	2400      	movs	r4, #0
 800714a:	e72a      	b.n	8006fa2 <BSP_LCD_InitEx+0x16>
 800714c:	2001e490 	.word	0x2001e490
 8007150:	40016c00 	.word	0x40016c00
 8007154:	2000212c 	.word	0x2000212c
 8007158:	2001e48c 	.word	0x2001e48c
 800715c:	20002120 	.word	0x20002120
 8007160:	2000211c 	.word	0x2000211c
 8007164:	2001e5ac 	.word	0x2001e5ac
 8007168:	4c751ce3 	.word	0x4c751ce3
 800716c:	2001e4ac 	.word	0x2001e4ac
 8007170:	2001e3e0 	.word	0x2001e3e0
 8007174:	40016800 	.word	0x40016800

08007178 <BSP_LCD_Init>:
{
 8007178:	b508      	push	{r3, lr}
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800717a:	2001      	movs	r0, #1
 800717c:	f7ff ff06 	bl	8006f8c <BSP_LCD_InitEx>
}
 8007180:	bd08      	pop	{r3, pc}
	...

08007184 <BSP_LCD_DrawPixel>:
{
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	4604      	mov	r4, r0
 8007188:	460e      	mov	r6, r1
 800718a:	4615      	mov	r5, r2
  *(__IO uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800718c:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <BSP_LCD_DrawPixel+0x24>)
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	4b06      	ldr	r3, [pc, #24]	@ (80071ac <BSP_LCD_DrawPixel+0x28>)
 8007192:	2134      	movs	r1, #52	@ 0x34
 8007194:	fb01 3302 	mla	r3, r1, r2, r3
 8007198:	6ddf      	ldr	r7, [r3, #92]	@ 0x5c
 800719a:	f7ff fd3d 	bl	8006c18 <BSP_LCD_GetXSize>
 800719e:	fb00 4406 	mla	r4, r0, r6, r4
 80071a2:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
}
 80071a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a8:	2001e488 	.word	0x2001e488
 80071ac:	2001e4ac 	.word	0x2001e4ac

080071b0 <DrawChar>:
{
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	b083      	sub	sp, #12
 80071b6:	4680      	mov	r8, r0
 80071b8:	468b      	mov	fp, r1
 80071ba:	9200      	str	r2, [sp, #0]
  height = DrawProp[ActiveLayer].pFont->Height;
 80071bc:	4b34      	ldr	r3, [pc, #208]	@ (8007290 <DrawChar+0xe0>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80071c4:	4a33      	ldr	r2, [pc, #204]	@ (8007294 <DrawChar+0xe4>)
 80071c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	88da      	ldrh	r2, [r3, #6]
 80071ce:	9201      	str	r2, [sp, #4]
  width = DrawProp[ActiveLayer].pFont->Width;
 80071d0:	889d      	ldrh	r5, [r3, #4]
  offset = 8 * ((width + 7) / 8) - width;
 80071d2:	1de9      	adds	r1, r5, #7
 80071d4:	ea4f 09e1 	mov.w	r9, r1, asr #3
 80071d8:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80071dc:	b2ff      	uxtb	r7, r7
 80071de:	b2eb      	uxtb	r3, r5
 80071e0:	1aff      	subs	r7, r7, r3
 80071e2:	b2ff      	uxtb	r7, r7
  for (i = 0; i < height; i++)
 80071e4:	f04f 0a00 	mov.w	sl, #0
 80071e8:	4653      	mov	r3, sl
 80071ea:	46ca      	mov	sl, r9
 80071ec:	4699      	mov	r9, r3
 80071ee:	e036      	b.n	800725e <DrawChar+0xae>
      line = pchar[0];
 80071f0:	9a00      	ldr	r2, [sp, #0]
 80071f2:	5cd6      	ldrb	r6, [r2, r3]
    for (j = 0; j < width; j++)
 80071f4:	2400      	movs	r4, #0
 80071f6:	e014      	b.n	8007222 <DrawChar+0x72>
      line = (pchar[0] << 8) | pchar[1];
 80071f8:	9a00      	ldr	r2, [sp, #0]
 80071fa:	5cd3      	ldrb	r3, [r2, r3]
 80071fc:	7846      	ldrb	r6, [r0, #1]
 80071fe:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      break;
 8007202:	e7f7      	b.n	80071f4 <DrawChar+0x44>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8007204:	4b22      	ldr	r3, [pc, #136]	@ (8007290 <DrawChar+0xe0>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800720c:	4a21      	ldr	r2, [pc, #132]	@ (8007294 <DrawChar+0xe4>)
 800720e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007212:	eb08 0004 	add.w	r0, r8, r4
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	4659      	mov	r1, fp
 800721a:	b280      	uxth	r0, r0
 800721c:	f7ff ffb2 	bl	8007184 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8007220:	3401      	adds	r4, #1
 8007222:	42a5      	cmp	r5, r4
 8007224:	d915      	bls.n	8007252 <DrawChar+0xa2>
      if (line & (1 << (width - j + offset - 1)))
 8007226:	1b2b      	subs	r3, r5, r4
 8007228:	443b      	add	r3, r7
 800722a:	3b01      	subs	r3, #1
 800722c:	2201      	movs	r2, #1
 800722e:	fa02 f303 	lsl.w	r3, r2, r3
 8007232:	4233      	tst	r3, r6
 8007234:	d0e6      	beq.n	8007204 <DrawChar+0x54>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8007236:	4b16      	ldr	r3, [pc, #88]	@ (8007290 <DrawChar+0xe0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800723e:	eb08 0004 	add.w	r0, r8, r4
 8007242:	4a14      	ldr	r2, [pc, #80]	@ (8007294 <DrawChar+0xe4>)
 8007244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007248:	4659      	mov	r1, fp
 800724a:	b280      	uxth	r0, r0
 800724c:	f7ff ff9a 	bl	8007184 <BSP_LCD_DrawPixel>
 8007250:	e7e6      	b.n	8007220 <DrawChar+0x70>
    Ypos++;
 8007252:	f10b 0b01 	add.w	fp, fp, #1
 8007256:	fa1f fb8b 	uxth.w	fp, fp
  for (i = 0; i < height; i++)
 800725a:	f109 0901 	add.w	r9, r9, #1
 800725e:	9b01      	ldr	r3, [sp, #4]
 8007260:	454b      	cmp	r3, r9
 8007262:	d912      	bls.n	800728a <DrawChar+0xda>
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8007264:	fb09 f30a 	mul.w	r3, r9, sl
 8007268:	9a00      	ldr	r2, [sp, #0]
 800726a:	18d0      	adds	r0, r2, r3
    switch (((width + 7) / 8))
 800726c:	f1ba 0f01 	cmp.w	sl, #1
 8007270:	d0be      	beq.n	80071f0 <DrawChar+0x40>
 8007272:	f1ba 0f02 	cmp.w	sl, #2
 8007276:	d0bf      	beq.n	80071f8 <DrawChar+0x48>
      line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8007278:	9a00      	ldr	r2, [sp, #0]
 800727a:	5cd3      	ldrb	r3, [r2, r3]
 800727c:	7846      	ldrb	r6, [r0, #1]
 800727e:	0236      	lsls	r6, r6, #8
 8007280:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8007284:	7883      	ldrb	r3, [r0, #2]
 8007286:	431e      	orrs	r6, r3
      break;
 8007288:	e7b4      	b.n	80071f4 <DrawChar+0x44>
}
 800728a:	b003      	add	sp, #12
 800728c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007290:	2001e488 	.word	0x2001e488
 8007294:	2001e470 	.word	0x2001e470

08007298 <BSP_LCD_DisplayChar>:
{
 8007298:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') * DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800729a:	4b0b      	ldr	r3, [pc, #44]	@ (80072c8 <BSP_LCD_DisplayChar+0x30>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80072a2:	4c0a      	ldr	r4, [pc, #40]	@ (80072cc <BSP_LCD_DisplayChar+0x34>)
 80072a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072a8:	689c      	ldr	r4, [r3, #8]
 80072aa:	6825      	ldr	r5, [r4, #0]
 80072ac:	f1a2 0320 	sub.w	r3, r2, #32
 80072b0:	88e2      	ldrh	r2, [r4, #6]
 80072b2:	fb02 f303 	mul.w	r3, r2, r3
 80072b6:	88a2      	ldrh	r2, [r4, #4]
 80072b8:	3207      	adds	r2, #7
 80072ba:	10d2      	asrs	r2, r2, #3
 80072bc:	fb02 5203 	mla	r2, r2, r3, r5
 80072c0:	f7ff ff76 	bl	80071b0 <DrawChar>
}
 80072c4:	bd38      	pop	{r3, r4, r5, pc}
 80072c6:	bf00      	nop
 80072c8:	2001e488 	.word	0x2001e488
 80072cc:	2001e470 	.word	0x2001e470

080072d0 <BSP_LCD_DisplayStringAt>:
{
 80072d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d4:	4604      	mov	r4, r0
 80072d6:	460e      	mov	r6, r1
 80072d8:	4615      	mov	r5, r2
 80072da:	4698      	mov	r8, r3
  uint8_t *ptr = Text;
 80072dc:	4694      	mov	ip, r2
  uint32_t size = 0, xsize = 0;
 80072de:	2700      	movs	r7, #0
  while (*ptr++)
 80072e0:	e000      	b.n	80072e4 <BSP_LCD_DisplayStringAt+0x14>
    size++;
 80072e2:	3701      	adds	r7, #1
  while (*ptr++)
 80072e4:	f81c 2b01 	ldrb.w	r2, [ip], #1
 80072e8:	2a00      	cmp	r2, #0
 80072ea:	d1fa      	bne.n	80072e2 <BSP_LCD_DisplayStringAt+0x12>
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 80072ec:	f7ff fc94 	bl	8006c18 <BSP_LCD_GetXSize>
 80072f0:	4b2a      	ldr	r3, [pc, #168]	@ (800739c <BSP_LCD_DisplayStringAt+0xcc>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80072f8:	4a29      	ldr	r2, [pc, #164]	@ (80073a0 <BSP_LCD_DisplayStringAt+0xd0>)
 80072fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	889a      	ldrh	r2, [r3, #4]
 8007302:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 8007306:	f1b8 0f01 	cmp.w	r8, #1
 800730a:	d007      	beq.n	800731c <BSP_LCD_DisplayStringAt+0x4c>
 800730c:	f1b8 0f02 	cmp.w	r8, #2
 8007310:	d00c      	beq.n	800732c <BSP_LCD_DisplayStringAt+0x5c>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8007312:	b223      	sxth	r3, r4
 8007314:	2b00      	cmp	r3, #0
 8007316:	dd3e      	ble.n	8007396 <BSP_LCD_DisplayStringAt+0xc6>
    refcolumn = 1;
 8007318:	2700      	movs	r7, #0
 800731a:	e021      	b.n	8007360 <BSP_LCD_DisplayStringAt+0x90>
    refcolumn = Xpos + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 800731c:	1bc0      	subs	r0, r0, r7
 800731e:	fb00 f302 	mul.w	r3, r0, r2
 8007322:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8007326:	4423      	add	r3, r4
 8007328:	b29c      	uxth	r4, r3
    break;
 800732a:	e7f2      	b.n	8007312 <BSP_LCD_DisplayStringAt+0x42>
    refcolumn = -Xpos + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 800732c:	1bc3      	subs	r3, r0, r7
 800732e:	fb13 f302 	smulbb	r3, r3, r2
 8007332:	b29b      	uxth	r3, r3
 8007334:	1b1b      	subs	r3, r3, r4
 8007336:	b29c      	uxth	r4, r3
    break;
 8007338:	e7eb      	b.n	8007312 <BSP_LCD_DisplayStringAt+0x42>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800733a:	4642      	mov	r2, r8
 800733c:	4631      	mov	r1, r6
 800733e:	4620      	mov	r0, r4
 8007340:	f7ff ffaa 	bl	8007298 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8007344:	4b15      	ldr	r3, [pc, #84]	@ (800739c <BSP_LCD_DisplayStringAt+0xcc>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800734c:	4a14      	ldr	r2, [pc, #80]	@ (80073a0 <BSP_LCD_DisplayStringAt+0xd0>)
 800734e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	889b      	ldrh	r3, [r3, #4]
 8007356:	4423      	add	r3, r4
 8007358:	b29c      	uxth	r4, r3
    Text++;
 800735a:	3501      	adds	r5, #1
    i++;
 800735c:	3701      	adds	r7, #1
 800735e:	b2bf      	uxth	r7, r7
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8007360:	f895 8000 	ldrb.w	r8, [r5]
 8007364:	f7ff fc58 	bl	8006c18 <BSP_LCD_GetXSize>
 8007368:	4b0c      	ldr	r3, [pc, #48]	@ (800739c <BSP_LCD_DisplayStringAt+0xcc>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007370:	4a0b      	ldr	r2, [pc, #44]	@ (80073a0 <BSP_LCD_DisplayStringAt+0xd0>)
 8007372:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	889a      	ldrh	r2, [r3, #4]
 800737a:	fb02 0317 	mls	r3, r2, r7, r0
 800737e:	b29b      	uxth	r3, r3
 8007380:	f1b8 0100 	subs.w	r1, r8, #0
 8007384:	bf18      	it	ne
 8007386:	2101      	movne	r1, #1
 8007388:	4293      	cmp	r3, r2
 800738a:	bf38      	it	cc
 800738c:	2100      	movcc	r1, #0
 800738e:	2900      	cmp	r1, #0
 8007390:	d1d3      	bne.n	800733a <BSP_LCD_DisplayStringAt+0x6a>
}
 8007392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    refcolumn = 1;
 8007396:	2401      	movs	r4, #1
 8007398:	e7be      	b.n	8007318 <BSP_LCD_DisplayStringAt+0x48>
 800739a:	bf00      	nop
 800739c:	2001e488 	.word	0x2001e488
 80073a0:	2001e470 	.word	0x2001e470

080073a4 <BSP_LCD_DrawLine>:
{
 80073a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a8:	b085      	sub	sp, #20
  deltax = ABS(x2 - x1); /* The difference between the x's */
 80073aa:	eba2 0a00 	sub.w	sl, r2, r0
 80073ae:	f1ba 0f00 	cmp.w	sl, #0
 80073b2:	bfb8      	it	lt
 80073b4:	f1ca 0a00 	rsblt	sl, sl, #0
 80073b8:	fa0f fa8a 	sxth.w	sl, sl
  deltay = ABS(y2 - y1); /* The difference between the y's */
 80073bc:	eba3 0c01 	sub.w	ip, r3, r1
 80073c0:	f1bc 0f00 	cmp.w	ip, #0
 80073c4:	bfb8      	it	lt
 80073c6:	f1cc 0c00 	rsblt	ip, ip, #0
 80073ca:	fa0f fb8c 	sxth.w	fp, ip
  x = x1;                /* Start x off at the first pixel */
 80073ce:	b204      	sxth	r4, r0
  y = y1;                /* Start y off at the first pixel */
 80073d0:	b20e      	sxth	r6, r1
  if (x2 >= x1) /* The x-values are increasing */
 80073d2:	4282      	cmp	r2, r0
 80073d4:	d315      	bcc.n	8007402 <BSP_LCD_DrawLine+0x5e>
    xinc1 = 1;
 80073d6:	2201      	movs	r2, #1
 80073d8:	9202      	str	r2, [sp, #8]
  if (y2 >= y1) /* The y-values are increasing */
 80073da:	428b      	cmp	r3, r1
 80073dc:	d315      	bcc.n	800740a <BSP_LCD_DrawLine+0x66>
    yinc1 = 1;
 80073de:	2301      	movs	r3, #1
 80073e0:	9303      	str	r3, [sp, #12]
  if (deltax >= deltay) /* There is at least one x-value for every y-value */
 80073e2:	45da      	cmp	sl, fp
 80073e4:	db18      	blt.n	8007418 <BSP_LCD_DrawLine+0x74>
    num = deltax / 2;
 80073e6:	46d0      	mov	r8, sl
 80073e8:	f1ba 0f00 	cmp.w	sl, #0
 80073ec:	db11      	blt.n	8007412 <BSP_LCD_DrawLine+0x6e>
 80073ee:	f348 084f 	sbfx	r8, r8, #1, #16
    numpixels = deltax; /* There are more x-values than y-values */
 80073f2:	9b02      	ldr	r3, [sp, #8]
 80073f4:	9300      	str	r3, [sp, #0]
    yinc2 = 0; /* Don't change the y for every iteration */
 80073f6:	2300      	movs	r3, #0
 80073f8:	9302      	str	r3, [sp, #8]
    xinc1 = 0; /* Don't change the x when numerator >= denominator */
 80073fa:	9301      	str	r3, [sp, #4]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80073fc:	f04f 0900 	mov.w	r9, #0
 8007400:	e026      	b.n	8007450 <BSP_LCD_DrawLine+0xac>
    xinc1 = -1;
 8007402:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007406:	9202      	str	r2, [sp, #8]
 8007408:	e7e7      	b.n	80073da <BSP_LCD_DrawLine+0x36>
    yinc1 = -1;
 800740a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800740e:	9303      	str	r3, [sp, #12]
 8007410:	e7e7      	b.n	80073e2 <BSP_LCD_DrawLine+0x3e>
    num = deltax / 2;
 8007412:	f10a 0801 	add.w	r8, sl, #1
 8007416:	e7ea      	b.n	80073ee <BSP_LCD_DrawLine+0x4a>
    num = deltay / 2;
 8007418:	46d8      	mov	r8, fp
 800741a:	f1bb 0f00 	cmp.w	fp, #0
 800741e:	db0a      	blt.n	8007436 <BSP_LCD_DrawLine+0x92>
 8007420:	f348 084f 	sbfx	r8, r8, #1, #16
 8007424:	4653      	mov	r3, sl
    den = deltay;
 8007426:	46da      	mov	sl, fp
    numadd = deltax;
 8007428:	469b      	mov	fp, r3
    num = deltay / 2;
 800742a:	9b03      	ldr	r3, [sp, #12]
 800742c:	9301      	str	r3, [sp, #4]
    yinc1 = 0; /* Don't change the y when numerator >= denominator */
 800742e:	2300      	movs	r3, #0
 8007430:	9303      	str	r3, [sp, #12]
    xinc2 = 0; /* Don't change the x for every iteration */
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	e7e2      	b.n	80073fc <BSP_LCD_DrawLine+0x58>
    num = deltay / 2;
 8007436:	f10b 0801 	add.w	r8, fp, #1
 800743a:	e7f1      	b.n	8007420 <BSP_LCD_DrawLine+0x7c>
    x += xinc2; /* Change the x as appropriate */
 800743c:	9b00      	ldr	r3, [sp, #0]
 800743e:	441c      	add	r4, r3
 8007440:	b224      	sxth	r4, r4
    y += yinc2; /* Change the y as appropriate */
 8007442:	9b01      	ldr	r3, [sp, #4]
 8007444:	441e      	add	r6, r3
 8007446:	b236      	sxth	r6, r6
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8007448:	f109 0901 	add.w	r9, r9, #1
 800744c:	fa0f f989 	sxth.w	r9, r9
 8007450:	45ca      	cmp	sl, r9
 8007452:	db1e      	blt.n	8007492 <BSP_LCD_DrawLine+0xee>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor); /* Draw the current pixel */
 8007454:	b2a7      	uxth	r7, r4
 8007456:	b2b5      	uxth	r5, r6
 8007458:	4b0f      	ldr	r3, [pc, #60]	@ (8007498 <BSP_LCD_DrawLine+0xf4>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007460:	4a0e      	ldr	r2, [pc, #56]	@ (800749c <BSP_LCD_DrawLine+0xf8>)
 8007462:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007466:	4629      	mov	r1, r5
 8007468:	4638      	mov	r0, r7
 800746a:	f7ff fe8b 	bl	8007184 <BSP_LCD_DrawPixel>
    num += numadd;                                            /* Increase the numerator by the top of the fraction */
 800746e:	44d8      	add	r8, fp
 8007470:	fa1f f388 	uxth.w	r3, r8
 8007474:	fa0f f888 	sxth.w	r8, r8
    if (num >= den)                                           /* Check if numerator >= denominator */
 8007478:	45c2      	cmp	sl, r8
 800747a:	dcdf      	bgt.n	800743c <BSP_LCD_DrawLine+0x98>
      num -= den; /* Calculate the new numerator value */
 800747c:	eba3 030a 	sub.w	r3, r3, sl
 8007480:	fa0f f883 	sxth.w	r8, r3
      x += xinc1; /* Change the x as appropriate */
 8007484:	9b02      	ldr	r3, [sp, #8]
 8007486:	441f      	add	r7, r3
 8007488:	b23c      	sxth	r4, r7
      y += yinc1; /* Change the y as appropriate */
 800748a:	9b03      	ldr	r3, [sp, #12]
 800748c:	441d      	add	r5, r3
 800748e:	b22e      	sxth	r6, r5
 8007490:	e7d4      	b.n	800743c <BSP_LCD_DrawLine+0x98>
}
 8007492:	b005      	add	sp, #20
 8007494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007498:	2001e488 	.word	0x2001e488
 800749c:	2001e470 	.word	0x2001e470

080074a0 <BSP_LCD_DrawCircle>:
{
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	b087      	sub	sp, #28
 80074a6:	4683      	mov	fp, r0
 80074a8:	468a      	mov	sl, r1
  D = 3 - (Radius << 1);
 80074aa:	0053      	lsls	r3, r2, #1
 80074ac:	f1c3 0303 	rsb	r3, r3, #3
 80074b0:	9301      	str	r3, [sp, #4]
  CurY = Radius;
 80074b2:	9200      	str	r2, [sp, #0]
  CurX = 0;
 80074b4:	f04f 0900 	mov.w	r9, #0
  while (CurX <= CurY)
 80074b8:	e00b      	b.n	80074d2 <BSP_LCD_DrawCircle+0x32>
      D += ((CurX - CurY) << 2) + 10;
 80074ba:	9a00      	ldr	r2, [sp, #0]
 80074bc:	eba9 0302 	sub.w	r3, r9, r2
 80074c0:	9901      	ldr	r1, [sp, #4]
 80074c2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80074c6:	330a      	adds	r3, #10
 80074c8:	9301      	str	r3, [sp, #4]
      CurY--;
 80074ca:	1e53      	subs	r3, r2, #1
 80074cc:	9300      	str	r3, [sp, #0]
    CurX++;
 80074ce:	f109 0901 	add.w	r9, r9, #1
  while (CurX <= CurY)
 80074d2:	9b00      	ldr	r3, [sp, #0]
 80074d4:	4599      	cmp	r9, r3
 80074d6:	d86f      	bhi.n	80075b8 <BSP_LCD_DrawCircle+0x118>
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 80074d8:	fa1f f489 	uxth.w	r4, r9
 80074dc:	eb04 030b 	add.w	r3, r4, fp
 80074e0:	b298      	uxth	r0, r3
 80074e2:	f8bd 5000 	ldrh.w	r5, [sp]
 80074e6:	ebaa 0805 	sub.w	r8, sl, r5
 80074ea:	fa1f f888 	uxth.w	r8, r8
 80074ee:	4e34      	ldr	r6, [pc, #208]	@ (80075c0 <BSP_LCD_DrawCircle+0x120>)
 80074f0:	4f34      	ldr	r7, [pc, #208]	@ (80075c4 <BSP_LCD_DrawCircle+0x124>)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80074f8:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80074fc:	4641      	mov	r1, r8
 80074fe:	9002      	str	r0, [sp, #8]
 8007500:	f7ff fe40 	bl	8007184 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8007504:	ebab 0304 	sub.w	r3, fp, r4
 8007508:	b29b      	uxth	r3, r3
 800750a:	4618      	mov	r0, r3
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007512:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8007516:	4641      	mov	r1, r8
 8007518:	9003      	str	r0, [sp, #12]
 800751a:	f7ff fe33 	bl	8007184 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 800751e:	eb05 030b 	add.w	r3, r5, fp
 8007522:	b29b      	uxth	r3, r3
 8007524:	4618      	mov	r0, r3
 8007526:	ebaa 0304 	sub.w	r3, sl, r4
 800752a:	b299      	uxth	r1, r3
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007532:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8007536:	9105      	str	r1, [sp, #20]
 8007538:	9004      	str	r0, [sp, #16]
 800753a:	f7ff fe23 	bl	8007184 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 800753e:	ebab 0805 	sub.w	r8, fp, r5
 8007542:	fa1f f888 	uxth.w	r8, r8
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800754c:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8007550:	9905      	ldr	r1, [sp, #20]
 8007552:	4640      	mov	r0, r8
 8007554:	f7ff fe16 	bl	8007184 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8007558:	4455      	add	r5, sl
 800755a:	b2ad      	uxth	r5, r5
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007562:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8007566:	4629      	mov	r1, r5
 8007568:	9802      	ldr	r0, [sp, #8]
 800756a:	f7ff fe0b 	bl	8007184 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007574:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8007578:	4629      	mov	r1, r5
 800757a:	9803      	ldr	r0, [sp, #12]
 800757c:	f7ff fe02 	bl	8007184 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8007580:	4454      	add	r4, sl
 8007582:	b2a4      	uxth	r4, r4
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800758a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800758e:	4621      	mov	r1, r4
 8007590:	9804      	ldr	r0, [sp, #16]
 8007592:	f7ff fdf7 	bl	8007184 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800759c:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80075a0:	4621      	mov	r1, r4
 80075a2:	4640      	mov	r0, r8
 80075a4:	f7ff fdee 	bl	8007184 <BSP_LCD_DrawPixel>
    if (D < 0)
 80075a8:	9b01      	ldr	r3, [sp, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	da85      	bge.n	80074ba <BSP_LCD_DrawCircle+0x1a>
      D += (CurX << 2) + 6;
 80075ae:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80075b2:	3306      	adds	r3, #6
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	e78a      	b.n	80074ce <BSP_LCD_DrawCircle+0x2e>
}
 80075b8:	b007      	add	sp, #28
 80075ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075be:	bf00      	nop
 80075c0:	2001e470 	.word	0x2001e470
 80075c4:	2001e488 	.word	0x2001e488

080075c8 <BSP_LCD_FillCircle>:
{
 80075c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075cc:	b083      	sub	sp, #12
 80075ce:	4682      	mov	sl, r0
 80075d0:	4689      	mov	r9, r1
 80075d2:	4615      	mov	r5, r2
 80075d4:	9201      	str	r2, [sp, #4]
  D = 3 - (Radius << 1);
 80075d6:	0056      	lsls	r6, r2, #1
 80075d8:	f1c6 0603 	rsb	r6, r6, #3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80075dc:	4b2f      	ldr	r3, [pc, #188]	@ (800769c <BSP_LCD_FillCircle+0xd4>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80075e4:	4a2e      	ldr	r2, [pc, #184]	@ (80076a0 <BSP_LCD_FillCircle+0xd8>)
 80075e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80075ea:	f7ff fb61 	bl	8006cb0 <BSP_LCD_SetTextColor>
  CurX = 0;
 80075ee:	2400      	movs	r4, #0
  while (CurX <= CurY)
 80075f0:	e036      	b.n	8007660 <BSP_LCD_FillCircle+0x98>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2 * CurY);
 80075f2:	b2af      	uxth	r7, r5
 80075f4:	ebaa 0b07 	sub.w	fp, sl, r7
 80075f8:	fa1f fb8b 	uxth.w	fp, fp
 80075fc:	fa1f f884 	uxth.w	r8, r4
 8007600:	007f      	lsls	r7, r7, #1
 8007602:	b2bf      	uxth	r7, r7
 8007604:	eb08 0109 	add.w	r1, r8, r9
 8007608:	463a      	mov	r2, r7
 800760a:	b289      	uxth	r1, r1
 800760c:	4658      	mov	r0, fp
 800760e:	f7ff fb95 	bl	8006d3c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2 * CurY);
 8007612:	eba9 0108 	sub.w	r1, r9, r8
 8007616:	463a      	mov	r2, r7
 8007618:	b289      	uxth	r1, r1
 800761a:	4658      	mov	r0, fp
 800761c:	f7ff fb8e 	bl	8006d3c <BSP_LCD_DrawHLine>
 8007620:	e022      	b.n	8007668 <BSP_LCD_FillCircle+0xa0>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2 * CurX);
 8007622:	b2a7      	uxth	r7, r4
 8007624:	ebaa 0b07 	sub.w	fp, sl, r7
 8007628:	fa1f fb8b 	uxth.w	fp, fp
 800762c:	fa1f f885 	uxth.w	r8, r5
 8007630:	007f      	lsls	r7, r7, #1
 8007632:	b2bf      	uxth	r7, r7
 8007634:	eba9 0108 	sub.w	r1, r9, r8
 8007638:	463a      	mov	r2, r7
 800763a:	b289      	uxth	r1, r1
 800763c:	4658      	mov	r0, fp
 800763e:	f7ff fb7d 	bl	8006d3c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2 * CurX);
 8007642:	eb08 0109 	add.w	r1, r8, r9
 8007646:	463a      	mov	r2, r7
 8007648:	b289      	uxth	r1, r1
 800764a:	4658      	mov	r0, fp
 800764c:	f7ff fb76 	bl	8006d3c <BSP_LCD_DrawHLine>
 8007650:	e00c      	b.n	800766c <BSP_LCD_FillCircle+0xa4>
      D += ((CurX - CurY) << 2) + 10;
 8007652:	1b63      	subs	r3, r4, r5
 8007654:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007658:	f103 060a 	add.w	r6, r3, #10
      CurY--;
 800765c:	3d01      	subs	r5, #1
    CurX++;
 800765e:	3401      	adds	r4, #1
  while (CurX <= CurY)
 8007660:	42ac      	cmp	r4, r5
 8007662:	d809      	bhi.n	8007678 <BSP_LCD_FillCircle+0xb0>
    if (CurY > 0)
 8007664:	2d00      	cmp	r5, #0
 8007666:	d1c4      	bne.n	80075f2 <BSP_LCD_FillCircle+0x2a>
    if (CurX > 0)
 8007668:	2c00      	cmp	r4, #0
 800766a:	d1da      	bne.n	8007622 <BSP_LCD_FillCircle+0x5a>
    if (D < 0)
 800766c:	2e00      	cmp	r6, #0
 800766e:	daf0      	bge.n	8007652 <BSP_LCD_FillCircle+0x8a>
      D += (CurX << 2) + 6;
 8007670:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8007674:	3606      	adds	r6, #6
 8007676:	e7f2      	b.n	800765e <BSP_LCD_FillCircle+0x96>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8007678:	4b08      	ldr	r3, [pc, #32]	@ (800769c <BSP_LCD_FillCircle+0xd4>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007680:	4a07      	ldr	r2, [pc, #28]	@ (80076a0 <BSP_LCD_FillCircle+0xd8>)
 8007682:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007686:	f7ff fb13 	bl	8006cb0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800768a:	9a01      	ldr	r2, [sp, #4]
 800768c:	4649      	mov	r1, r9
 800768e:	4650      	mov	r0, sl
 8007690:	f7ff ff06 	bl	80074a0 <BSP_LCD_DrawCircle>
}
 8007694:	b003      	add	sp, #12
 8007696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769a:	bf00      	nop
 800769c:	2001e488 	.word	0x2001e488
 80076a0:	2001e470 	.word	0x2001e470

080076a4 <FillTriangle>:
{
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	b087      	sub	sp, #28
 80076aa:	9202      	str	r2, [sp, #8]
 80076ac:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80076b0:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 80076b4:	9203      	str	r2, [sp, #12]
  deltax = ABS(x2 - x1); /* The difference between the x's */
 80076b6:	eba1 0a00 	sub.w	sl, r1, r0
 80076ba:	f1ba 0f00 	cmp.w	sl, #0
 80076be:	bfb8      	it	lt
 80076c0:	f1ca 0a00 	rsblt	sl, sl, #0
 80076c4:	fa0f fa8a 	sxth.w	sl, sl
  deltay = ABS(y2 - y1); /* The difference between the y's */
 80076c8:	1aea      	subs	r2, r5, r3
 80076ca:	2a00      	cmp	r2, #0
 80076cc:	bfb8      	it	lt
 80076ce:	4252      	neglt	r2, r2
 80076d0:	fa0f fb82 	sxth.w	fp, r2
  x = x1;                /* Start x off at the first pixel */
 80076d4:	b204      	sxth	r4, r0
  y = y1;                /* Start y off at the first pixel */
 80076d6:	b21e      	sxth	r6, r3
  if (x2 >= x1) /* The x-values are increasing */
 80076d8:	4281      	cmp	r1, r0
 80076da:	d315      	bcc.n	8007708 <FillTriangle+0x64>
    xinc1 = 1;
 80076dc:	2201      	movs	r2, #1
 80076de:	9204      	str	r2, [sp, #16]
  if (y2 >= y1) /* The y-values are increasing */
 80076e0:	429d      	cmp	r5, r3
 80076e2:	d315      	bcc.n	8007710 <FillTriangle+0x6c>
    yinc1 = 1;
 80076e4:	2301      	movs	r3, #1
 80076e6:	9305      	str	r3, [sp, #20]
  if (deltax >= deltay) /* There is at least one x-value for every y-value */
 80076e8:	45da      	cmp	sl, fp
 80076ea:	db18      	blt.n	800771e <FillTriangle+0x7a>
    num = deltax / 2;
 80076ec:	46d0      	mov	r8, sl
 80076ee:	f1ba 0f00 	cmp.w	sl, #0
 80076f2:	db11      	blt.n	8007718 <FillTriangle+0x74>
 80076f4:	f348 084f 	sbfx	r8, r8, #1, #16
    numpixels = deltax; /* There are more x-values than y-values */
 80076f8:	9b04      	ldr	r3, [sp, #16]
 80076fa:	9300      	str	r3, [sp, #0]
    yinc2 = 0; /* Don't change the y for every iteration */
 80076fc:	2300      	movs	r3, #0
 80076fe:	9304      	str	r3, [sp, #16]
    xinc1 = 0; /* Don't change the x when numerator >= denominator */
 8007700:	9301      	str	r3, [sp, #4]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8007702:	f04f 0900 	mov.w	r9, #0
 8007706:	e026      	b.n	8007756 <FillTriangle+0xb2>
    xinc1 = -1;
 8007708:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800770c:	9204      	str	r2, [sp, #16]
 800770e:	e7e7      	b.n	80076e0 <FillTriangle+0x3c>
    yinc1 = -1;
 8007710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007714:	9305      	str	r3, [sp, #20]
 8007716:	e7e7      	b.n	80076e8 <FillTriangle+0x44>
    num = deltax / 2;
 8007718:	f10a 0801 	add.w	r8, sl, #1
 800771c:	e7ea      	b.n	80076f4 <FillTriangle+0x50>
    num = deltay / 2;
 800771e:	46d8      	mov	r8, fp
 8007720:	f1bb 0f00 	cmp.w	fp, #0
 8007724:	db0a      	blt.n	800773c <FillTriangle+0x98>
 8007726:	f348 084f 	sbfx	r8, r8, #1, #16
 800772a:	4653      	mov	r3, sl
    den = deltay;
 800772c:	46da      	mov	sl, fp
    numadd = deltax;
 800772e:	469b      	mov	fp, r3
    num = deltay / 2;
 8007730:	9b05      	ldr	r3, [sp, #20]
 8007732:	9301      	str	r3, [sp, #4]
    yinc1 = 0; /* Don't change the y when numerator >= denominator */
 8007734:	2300      	movs	r3, #0
 8007736:	9305      	str	r3, [sp, #20]
    xinc2 = 0; /* Don't change the x for every iteration */
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	e7e2      	b.n	8007702 <FillTriangle+0x5e>
    num = deltay / 2;
 800773c:	f10b 0801 	add.w	r8, fp, #1
 8007740:	e7f1      	b.n	8007726 <FillTriangle+0x82>
    x += xinc2; /* Change the x as appropriate */
 8007742:	9b00      	ldr	r3, [sp, #0]
 8007744:	441c      	add	r4, r3
 8007746:	b224      	sxth	r4, r4
    y += yinc2; /* Change the y as appropriate */
 8007748:	9b01      	ldr	r3, [sp, #4]
 800774a:	441e      	add	r6, r3
 800774c:	b236      	sxth	r6, r6
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800774e:	f109 0901 	add.w	r9, r9, #1
 8007752:	fa0f f989 	sxth.w	r9, r9
 8007756:	45ca      	cmp	sl, r9
 8007758:	db19      	blt.n	800778e <FillTriangle+0xea>
    BSP_LCD_DrawLine(x, y, x3, y3);
 800775a:	b2a7      	uxth	r7, r4
 800775c:	b2b5      	uxth	r5, r6
 800775e:	9b03      	ldr	r3, [sp, #12]
 8007760:	9a02      	ldr	r2, [sp, #8]
 8007762:	4629      	mov	r1, r5
 8007764:	4638      	mov	r0, r7
 8007766:	f7ff fe1d 	bl	80073a4 <BSP_LCD_DrawLine>
    num += numadd;  /* Increase the numerator by the top of the fraction */
 800776a:	44d8      	add	r8, fp
 800776c:	fa1f f388 	uxth.w	r3, r8
 8007770:	fa0f f888 	sxth.w	r8, r8
    if (num >= den) /* Check if numerator >= denominator */
 8007774:	45c2      	cmp	sl, r8
 8007776:	dce4      	bgt.n	8007742 <FillTriangle+0x9e>
      num -= den; /* Calculate the new numerator value */
 8007778:	eba3 030a 	sub.w	r3, r3, sl
 800777c:	fa0f f883 	sxth.w	r8, r3
      x += xinc1; /* Change the x as appropriate */
 8007780:	9b04      	ldr	r3, [sp, #16]
 8007782:	441f      	add	r7, r3
 8007784:	b23c      	sxth	r4, r7
      y += yinc1; /* Change the y as appropriate */
 8007786:	9b05      	ldr	r3, [sp, #20]
 8007788:	441d      	add	r5, r3
 800778a:	b22e      	sxth	r6, r5
 800778c:	e7d9      	b.n	8007742 <FillTriangle+0x9e>
}
 800778e:	b007      	add	sp, #28
 8007790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007794 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8007794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007798:	b083      	sub	sp, #12
 800779a:	4681      	mov	r9, r0
  __IO uint32_t tmpmrd = 0;
 800779c:	f04f 0800 	mov.w	r8, #0
 80077a0:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80077a4:	4c20      	ldr	r4, [pc, #128]	@ (8007828 <BSP_SDRAM_Initialization_sequence+0x94>)
 80077a6:	2601      	movs	r6, #1
 80077a8:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80077aa:	2710      	movs	r7, #16
 80077ac:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 80077ae:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 80077b0:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80077b4:	4d1d      	ldr	r5, [pc, #116]	@ (800782c <BSP_SDRAM_Initialization_sequence+0x98>)
 80077b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077ba:	4621      	mov	r1, r4
 80077bc:	4628      	mov	r0, r5
 80077be:	f004 ff19 	bl	800c5f4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80077c2:	4630      	mov	r0, r6
 80077c4:	f000 f9dc 	bl	8007b80 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80077c8:	2302      	movs	r3, #2
 80077ca:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80077cc:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 80077ce:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 80077d0:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80077d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077d8:	4621      	mov	r1, r4
 80077da:	4628      	mov	r0, r5
 80077dc:	f004 ff0a 	bl	800c5f4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80077e0:	2303      	movs	r3, #3
 80077e2:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80077e4:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 80077e6:	2308      	movs	r3, #8
 80077e8:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 80077ea:	f8c4 800c 	str.w	r8, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80077ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077f2:	4621      	mov	r1, r4
 80077f4:	4628      	mov	r0, r5
 80077f6:	f004 fefd 	bl	800c5f4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80077fa:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80077fe:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8007800:	2304      	movs	r3, #4
 8007802:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007804:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8007806:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8007808:	9b01      	ldr	r3, [sp, #4]
 800780a:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800780c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007810:	4621      	mov	r1, r4
 8007812:	4628      	mov	r0, r5
 8007814:	f004 feee 	bl	800c5f4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8007818:	4649      	mov	r1, r9
 800781a:	4628      	mov	r0, r5
 800781c:	f004 ff0b 	bl	800c636 <HAL_SDRAM_ProgramRefreshRate>
}
 8007820:	b003      	add	sp, #12
 8007822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007826:	bf00      	nop
 8007828:	2001e678 	.word	0x2001e678
 800782c:	2001e6a4 	.word	0x2001e6a4

08007830 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8007830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007832:	b08f      	sub	sp, #60	@ 0x3c
 8007834:	4606      	mov	r6, r0
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007836:	4b54      	ldr	r3, [pc, #336]	@ (8007988 <BSP_SDRAM_MspInit+0x158>)
 8007838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800783a:	f042 0201 	orr.w	r2, r2, #1
 800783e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007840:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007842:	f002 0201 	and.w	r2, r2, #1
 8007846:	9201      	str	r2, [sp, #4]
 8007848:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800784a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800784c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8007850:	631a      	str	r2, [r3, #48]	@ 0x30
 8007852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007854:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8007858:	9202      	str	r2, [sp, #8]
 800785a:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800785c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800785e:	f042 0208 	orr.w	r2, r2, #8
 8007862:	631a      	str	r2, [r3, #48]	@ 0x30
 8007864:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007866:	f002 0208 	and.w	r2, r2, #8
 800786a:	9203      	str	r2, [sp, #12]
 800786c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800786e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007870:	f042 0210 	orr.w	r2, r2, #16
 8007874:	631a      	str	r2, [r3, #48]	@ 0x30
 8007876:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007878:	f002 0210 	and.w	r2, r2, #16
 800787c:	9204      	str	r2, [sp, #16]
 800787e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007882:	f042 0220 	orr.w	r2, r2, #32
 8007886:	631a      	str	r2, [r3, #48]	@ 0x30
 8007888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800788a:	f002 0220 	and.w	r2, r2, #32
 800788e:	9205      	str	r2, [sp, #20]
 8007890:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007892:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007894:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007898:	631a      	str	r2, [r3, #48]	@ 0x30
 800789a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800789c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80078a0:	9206      	str	r2, [sp, #24]
 80078a2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80078a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80078aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80078ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078ae:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80078b2:	9207      	str	r2, [sp, #28]
 80078b4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80078b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80078be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078c4:	9308      	str	r3, [sp, #32]
 80078c6:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80078c8:	2302      	movs	r3, #2
 80078ca:	930a      	str	r3, [sp, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80078cc:	2301      	movs	r3, #1
 80078ce:	930b      	str	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80078d0:	2703      	movs	r7, #3
 80078d2:	970c      	str	r7, [sp, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80078d4:	230c      	movs	r3, #12
 80078d6:	930d      	str	r3, [sp, #52]	@ 0x34
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80078d8:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80078dc:	9309      	str	r3, [sp, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80078de:	a909      	add	r1, sp, #36	@ 0x24
 80078e0:	482a      	ldr	r0, [pc, #168]	@ (800798c <BSP_SDRAM_MspInit+0x15c>)
 80078e2:	f001 fc49 	bl	8009178 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80078e6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80078ea:	9309      	str	r3, [sp, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80078ec:	a909      	add	r1, sp, #36	@ 0x24
 80078ee:	4828      	ldr	r0, [pc, #160]	@ (8007990 <BSP_SDRAM_MspInit+0x160>)
 80078f0:	f001 fc42 	bl	8009178 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80078f4:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80078f8:	9309      	str	r3, [sp, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80078fa:	a909      	add	r1, sp, #36	@ 0x24
 80078fc:	4825      	ldr	r0, [pc, #148]	@ (8007994 <BSP_SDRAM_MspInit+0x164>)
 80078fe:	f001 fc3b 	bl	8009178 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8007902:	f248 1337 	movw	r3, #33079	@ 0x8137
 8007906:	9309      	str	r3, [sp, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007908:	a909      	add	r1, sp, #36	@ 0x24
 800790a:	4823      	ldr	r0, [pc, #140]	@ (8007998 <BSP_SDRAM_MspInit+0x168>)
 800790c:	f001 fc34 	bl	8009178 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8007910:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 8007914:	9309      	str	r3, [sp, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8007916:	a909      	add	r1, sp, #36	@ 0x24
 8007918:	4820      	ldr	r0, [pc, #128]	@ (800799c <BSP_SDRAM_MspInit+0x16c>)
 800791a:	f001 fc2d 	bl	8009178 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800791e:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8007922:	9309      	str	r3, [sp, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8007924:	a909      	add	r1, sp, #36	@ 0x24
 8007926:	481e      	ldr	r0, [pc, #120]	@ (80079a0 <BSP_SDRAM_MspInit+0x170>)
 8007928:	f001 fc26 	bl	8009178 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800792c:	4c1d      	ldr	r4, [pc, #116]	@ (80079a4 <BSP_SDRAM_MspInit+0x174>)
 800792e:	2500      	movs	r5, #0
 8007930:	6065      	str	r5, [r4, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8007932:	2380      	movs	r3, #128	@ 0x80
 8007934:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8007936:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800793a:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800793c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007940:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007946:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8007948:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800794c:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800794e:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8007950:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007954:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8007956:	6265      	str	r5, [r4, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007958:	62a7      	str	r7, [r4, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800795a:	62e5      	str	r5, [r4, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800795c:	6325      	str	r5, [r4, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800795e:	4b12      	ldr	r3, [pc, #72]	@ (80079a8 <BSP_SDRAM_MspInit+0x178>)
 8007960:	6023      	str	r3, [r4, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8007962:	6334      	str	r4, [r6, #48]	@ 0x30
 8007964:	63a6      	str	r6, [r4, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8007966:	4620      	mov	r0, r4
 8007968:	f000 fce8 	bl	800833c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800796c:	4620      	mov	r0, r4
 800796e:	f000 fc7d 	bl	800826c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8007972:	462a      	mov	r2, r5
 8007974:	210f      	movs	r1, #15
 8007976:	2038      	movs	r0, #56	@ 0x38
 8007978:	f000 f95a 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800797c:	2038      	movs	r0, #56	@ 0x38
 800797e:	f000 f967 	bl	8007c50 <HAL_NVIC_EnableIRQ>
}
 8007982:	b00f      	add	sp, #60	@ 0x3c
 8007984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007986:	bf00      	nop
 8007988:	40023800 	.word	0x40023800
 800798c:	40020c00 	.word	0x40020c00
 8007990:	40021000 	.word	0x40021000
 8007994:	40021400 	.word	0x40021400
 8007998:	40021800 	.word	0x40021800
 800799c:	40021c00 	.word	0x40021c00
 80079a0:	40022000 	.word	0x40022000
 80079a4:	2001e618 	.word	0x2001e618
 80079a8:	40026410 	.word	0x40026410

080079ac <BSP_SDRAM_Init>:
{ 
 80079ac:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80079ae:	4c1b      	ldr	r4, [pc, #108]	@ (8007a1c <BSP_SDRAM_Init+0x70>)
 80079b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007a20 <BSP_SDRAM_Init+0x74>)
 80079b2:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 80079b4:	4d1b      	ldr	r5, [pc, #108]	@ (8007a24 <BSP_SDRAM_Init+0x78>)
 80079b6:	2302      	movs	r3, #2
 80079b8:	602b      	str	r3, [r5, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80079ba:	2107      	movs	r1, #7
 80079bc:	6069      	str	r1, [r5, #4]
  Timing.SelfRefreshTime      = 4;
 80079be:	2204      	movs	r2, #4
 80079c0:	60aa      	str	r2, [r5, #8]
  Timing.RowCycleDelay        = 7;
 80079c2:	60e9      	str	r1, [r5, #12]
  Timing.WriteRecoveryTime    = 2;
 80079c4:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 80079c6:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 80079c8:	61ab      	str	r3, [r5, #24]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80079ca:	2100      	movs	r1, #0
 80079cc:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80079ce:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80079d0:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80079d2:	2320      	movs	r3, #32
 80079d4:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80079d6:	2340      	movs	r3, #64	@ 0x40
 80079d8:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80079da:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80079de:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80079e0:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80079e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80079e6:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80079e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80079ec:	6263      	str	r3, [r4, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80079ee:	62a1      	str	r1, [r4, #40]	@ 0x28
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80079f0:	4620      	mov	r0, r4
 80079f2:	f7ff ff1d 	bl	8007830 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80079f6:	4629      	mov	r1, r5
 80079f8:	4620      	mov	r0, r4
 80079fa:	f004 fddb 	bl	800c5b4 <HAL_SDRAM_Init>
 80079fe:	b148      	cbz	r0, 8007a14 <BSP_SDRAM_Init+0x68>
    sdramstatus = SDRAM_ERROR;
 8007a00:	4b09      	ldr	r3, [pc, #36]	@ (8007a28 <BSP_SDRAM_Init+0x7c>)
 8007a02:	2201      	movs	r2, #1
 8007a04:	701a      	strb	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8007a06:	f240 6003 	movw	r0, #1539	@ 0x603
 8007a0a:	f7ff fec3 	bl	8007794 <BSP_SDRAM_Initialization_sequence>
}
 8007a0e:	4b06      	ldr	r3, [pc, #24]	@ (8007a28 <BSP_SDRAM_Init+0x7c>)
 8007a10:	7818      	ldrb	r0, [r3, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 8007a14:	4b04      	ldr	r3, [pc, #16]	@ (8007a28 <BSP_SDRAM_Init+0x7c>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	701a      	strb	r2, [r3, #0]
 8007a1a:	e7f4      	b.n	8007a06 <BSP_SDRAM_Init+0x5a>
 8007a1c:	2001e6a4 	.word	0x2001e6a4
 8007a20:	a0000140 	.word	0xa0000140
 8007a24:	2001e688 	.word	0x2001e688
 8007a28:	20002134 	.word	0x20002134

08007a2c <BSP_TS_Init>:
 * @param  ts_SizeX : Maximum X size of the TS area on LCD
 * @param  ts_SizeY : Maximum Y size of the TS area on LCD
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	4606      	mov	r6, r0
 8007a30:	460d      	mov	r5, r1
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8007a32:	4c1b      	ldr	r4, [pc, #108]	@ (8007aa0 <BSP_TS_Init+0x74>)
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	4a1b      	ldr	r2, [pc, #108]	@ (8007aa4 <BSP_TS_Init+0x78>)
 8007a38:	7810      	ldrb	r0, [r2, #0]
 8007a3a:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8007a3c:	6863      	ldr	r3, [r4, #4]
 8007a3e:	2054      	movs	r0, #84	@ 0x54
 8007a40:	4798      	blx	r3
 8007a42:	b2c4      	uxtb	r4, r0
  if (ts_id1 != FT6206_ID_VALUE)
 8007a44:	2c11      	cmp	r4, #17
 8007a46:	d01f      	beq.n	8007a88 <BSP_TS_Init+0x5c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8007a48:	4b15      	ldr	r3, [pc, #84]	@ (8007aa0 <BSP_TS_Init+0x74>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	2070      	movs	r0, #112	@ 0x70
 8007a4e:	4798      	blx	r3
 8007a50:	b2c3      	uxtb	r3, r0
    I2C_Address = TS_I2C_ADDRESS_A02;
 8007a52:	4a14      	ldr	r2, [pc, #80]	@ (8007aa4 <BSP_TS_Init+0x78>)
 8007a54:	2170      	movs	r1, #112	@ 0x70
 8007a56:	7011      	strb	r1, [r2, #0]
    I2C_Address = TS_I2C_ADDRESS;
  }

  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8007a58:	2b11      	cmp	r3, #17
 8007a5a:	bf18      	it	ne
 8007a5c:	2c11      	cmpne	r4, #17
 8007a5e:	d11c      	bne.n	8007a9a <BSP_TS_Init+0x6e>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8007a60:	4b11      	ldr	r3, [pc, #68]	@ (8007aa8 <BSP_TS_Init+0x7c>)
 8007a62:	4a0f      	ldr	r2, [pc, #60]	@ (8007aa0 <BSP_TS_Init+0x74>)
 8007a64:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if (ts_SizeX < ts_SizeY)
 8007a66:	42ae      	cmp	r6, r5
 8007a68:	d213      	bcs.n	8007a92 <BSP_TS_Init+0x66>
    {
      ts_orientation = TS_SWAP_NONE;
 8007a6a:	4b10      	ldr	r3, [pc, #64]	@ (8007aac <BSP_TS_Init+0x80>)
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	701a      	strb	r2, [r3, #0]
    }

    if (ts_status == TS_OK)
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8007a70:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa0 <BSP_TS_Init+0x74>)
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	4c0b      	ldr	r4, [pc, #44]	@ (8007aa4 <BSP_TS_Init+0x78>)
 8007a76:	7820      	ldrb	r0, [r4, #0]
 8007a78:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8007a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa8 <BSP_TS_Init+0x7c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	7820      	ldrb	r0, [r4, #0]
 8007a82:	4798      	blx	r3
  uint8_t ts_status = TS_OK;
 8007a84:	2000      	movs	r0, #0
  {
    ts_status = TS_DEVICE_NOT_FOUND;
  }

  return (ts_status);
}
 8007a86:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Address = TS_I2C_ADDRESS;
 8007a88:	4b06      	ldr	r3, [pc, #24]	@ (8007aa4 <BSP_TS_Init+0x78>)
 8007a8a:	2254      	movs	r2, #84	@ 0x54
 8007a8c:	701a      	strb	r2, [r3, #0]
  uint8_t ts_id1, ts_id2 = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	e7e2      	b.n	8007a58 <BSP_TS_Init+0x2c>
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;
 8007a92:	4b06      	ldr	r3, [pc, #24]	@ (8007aac <BSP_TS_Init+0x80>)
 8007a94:	220c      	movs	r2, #12
 8007a96:	701a      	strb	r2, [r3, #0]
 8007a98:	e7ea      	b.n	8007a70 <BSP_TS_Init+0x44>
    ts_status = TS_DEVICE_NOT_FOUND;
 8007a9a:	2003      	movs	r0, #3
 8007a9c:	e7f3      	b.n	8007a86 <BSP_TS_Init+0x5a>
 8007a9e:	bf00      	nop
 8007aa0:	200020dc 	.word	0x200020dc
 8007aa4:	2001e6d8 	.word	0x2001e6d8
 8007aa8:	2001e6dc 	.word	0x2001e6dc
 8007aac:	2001e6d9 	.word	0x2001e6d9

08007ab0 <BSP_TS_INT_MspInit>:
/**
 * @brief  Initializes the TS_INT pin MSP.
 * @retval None
 */
__weak void BSP_TS_INT_MspInit(void)
{
 8007ab0:	b500      	push	{lr}
 8007ab2:	b087      	sub	sp, #28
  GPIO_InitTypeDef gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 8007ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae8 <BSP_TS_INT_MspInit+0x38>)
 8007ab6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ab8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007abc:	631a      	str	r2, [r3, #48]	@ 0x30
 8007abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	9b00      	ldr	r3, [sp, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin = TS_INT_PIN;
 8007ac8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007acc:	9301      	str	r3, [sp, #4]

  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8007ada:	a901      	add	r1, sp, #4
 8007adc:	4803      	ldr	r0, [pc, #12]	@ (8007aec <BSP_TS_INT_MspInit+0x3c>)
 8007ade:	f001 fb4b 	bl	8009178 <HAL_GPIO_Init>
}
 8007ae2:	b007      	add	sp, #28
 8007ae4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ae8:	40023800 	.word	0x40023800
 8007aec:	40022000 	.word	0x40022000

08007af0 <BSP_TS_ITConfig>:
{
 8007af0:	b500      	push	{lr}
 8007af2:	b087      	sub	sp, #28
  BSP_TS_INT_MspInit();
 8007af4:	f7ff ffdc 	bl	8007ab0 <BSP_TS_INT_MspInit>
  gpio_init_structure.Pin = TS_INT_PIN;
 8007af8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007afc:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8007afe:	2301      	movs	r3, #1
 8007b00:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8007b02:	2302      	movs	r3, #2
 8007b04:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8007b06:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8007b0a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8007b0c:	a901      	add	r1, sp, #4
 8007b0e:	480a      	ldr	r0, [pc, #40]	@ (8007b38 <BSP_TS_ITConfig+0x48>)
 8007b10:	f001 fb32 	bl	8009178 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8007b14:	2200      	movs	r2, #0
 8007b16:	210f      	movs	r1, #15
 8007b18:	2028      	movs	r0, #40	@ 0x28
 8007b1a:	f000 f889 	bl	8007c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8007b1e:	2028      	movs	r0, #40	@ 0x28
 8007b20:	f000 f896 	bl	8007c50 <HAL_NVIC_EnableIRQ>
  ts_driver->EnableIT(I2C_Address);
 8007b24:	4b05      	ldr	r3, [pc, #20]	@ (8007b3c <BSP_TS_ITConfig+0x4c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	4a05      	ldr	r2, [pc, #20]	@ (8007b40 <BSP_TS_ITConfig+0x50>)
 8007b2c:	7810      	ldrb	r0, [r2, #0]
 8007b2e:	4798      	blx	r3
}
 8007b30:	2000      	movs	r0, #0
 8007b32:	b007      	add	sp, #28
 8007b34:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b38:	40022000 	.word	0x40022000
 8007b3c:	2001e6dc 	.word	0x2001e6dc
 8007b40:	2001e6d8 	.word	0x2001e6d8

08007b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b44:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b46:	2003      	movs	r0, #3
 8007b48:	f000 f860 	bl	8007c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b4c:	200f      	movs	r0, #15
 8007b4e:	f004 ff5b 	bl	800ca08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b52:	f002 f9e5 	bl	8009f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8007b56:	2000      	movs	r0, #0
 8007b58:	bd08      	pop	{r3, pc}
	...

08007b5c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007b5c:	4a03      	ldr	r2, [pc, #12]	@ (8007b6c <HAL_IncTick+0x10>)
 8007b5e:	6811      	ldr	r1, [r2, #0]
 8007b60:	4b03      	ldr	r3, [pc, #12]	@ (8007b70 <HAL_IncTick+0x14>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	440b      	add	r3, r1
 8007b66:	6013      	str	r3, [r2, #0]
}
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	2001e6e0 	.word	0x2001e6e0
 8007b70:	20002135 	.word	0x20002135

08007b74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007b74:	4b01      	ldr	r3, [pc, #4]	@ (8007b7c <HAL_GetTick+0x8>)
 8007b76:	6818      	ldr	r0, [r3, #0]
}
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	2001e6e0 	.word	0x2001e6e0

08007b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007b84:	f7ff fff6 	bl	8007b74 <HAL_GetTick>
 8007b88:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b8a:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8007b8e:	d002      	beq.n	8007b96 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8007b90:	4b04      	ldr	r3, [pc, #16]	@ (8007ba4 <HAL_Delay+0x24>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007b96:	f7ff ffed 	bl	8007b74 <HAL_GetTick>
 8007b9a:	1b40      	subs	r0, r0, r5
 8007b9c:	42a0      	cmp	r0, r4
 8007b9e:	d3fa      	bcc.n	8007b96 <HAL_Delay+0x16>
  {
  }
}
 8007ba0:	bd38      	pop	{r3, r4, r5, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20002135 	.word	0x20002135

08007ba8 <__NVIC_SetPriority>:
    if ((int32_t)(IRQn) >= 0)
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	db04      	blt.n	8007bb6 <__NVIC_SetPriority+0xe>
      NVIC->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bac:	0109      	lsls	r1, r1, #4
 8007bae:	b2c9      	uxtb	r1, r1
 8007bb0:	4b04      	ldr	r3, [pc, #16]	@ (8007bc4 <__NVIC_SetPriority+0x1c>)
 8007bb2:	5419      	strb	r1, [r3, r0]
 8007bb4:	4770      	bx	lr
      SCB->SHPR[(((uint32_t)IRQn) & 0xFUL) - 4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bb6:	f000 000f 	and.w	r0, r0, #15
 8007bba:	0109      	lsls	r1, r1, #4
 8007bbc:	b2c9      	uxtb	r1, r1
 8007bbe:	4b02      	ldr	r3, [pc, #8]	@ (8007bc8 <__NVIC_SetPriority+0x20>)
 8007bc0:	5419      	strb	r1, [r3, r0]
  }
 8007bc2:	4770      	bx	lr
 8007bc4:	e000e400 	.word	0xe000e400
 8007bc8:	e000ed14 	.word	0xe000ed14

08007bcc <NVIC_EncodePriority>:
  {
 8007bcc:	b500      	push	{lr}
    uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
 8007bce:	f000 0007 	and.w	r0, r0, #7
    PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007bd2:	f1c0 0c07 	rsb	ip, r0, #7
 8007bd6:	f1bc 0f04 	cmp.w	ip, #4
 8007bda:	bf28      	it	cs
 8007bdc:	f04f 0c04 	movcs.w	ip, #4
    SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007be0:	1d03      	adds	r3, r0, #4
 8007be2:	2b06      	cmp	r3, #6
 8007be4:	d90f      	bls.n	8007c06 <NVIC_EncodePriority+0x3a>
 8007be6:	1ec3      	subs	r3, r0, #3
        ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007be8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8007bec:	fa0e f00c 	lsl.w	r0, lr, ip
 8007bf0:	ea21 0100 	bic.w	r1, r1, r0
 8007bf4:	4099      	lsls	r1, r3
        ((SubPriority & (uint32_t)((1UL << (SubPriorityBits)) - 1UL))));
 8007bf6:	fa0e fe03 	lsl.w	lr, lr, r3
 8007bfa:	ea22 020e 	bic.w	r2, r2, lr
  }
 8007bfe:	ea41 0002 	orr.w	r0, r1, r2
 8007c02:	f85d fb04 	ldr.w	pc, [sp], #4
    SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c06:	2300      	movs	r3, #0
 8007c08:	e7ee      	b.n	8007be8 <NVIC_EncodePriority+0x1c>
	...

08007c0c <HAL_NVIC_SetPriorityGrouping>:
    reg_value = SCB->AIRCR;                                                     /* read old register configuration    */
 8007c0c:	4906      	ldr	r1, [pc, #24]	@ (8007c28 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8007c0e:	68cb      	ldr	r3, [r1, #12]
    reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c10:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007c14:	041b      	lsls	r3, r3, #16
 8007c16:	0c1b      	lsrs	r3, r3, #16
                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8007c18:	0200      	lsls	r0, r0, #8
 8007c1a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c1e:	4303      	orrs	r3, r0
    reg_value = (reg_value |
 8007c20:	4a02      	ldr	r2, [pc, #8]	@ (8007c2c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8007c22:	431a      	orrs	r2, r3
    SCB->AIRCR = reg_value;
 8007c24:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007c26:	4770      	bx	lr
 8007c28:	e000ed00 	.word	0xe000ed00
 8007c2c:	05fa0000 	.word	0x05fa0000

08007c30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c30:	b510      	push	{r4, lr}
 8007c32:	4604      	mov	r4, r0
    return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c34:	4b05      	ldr	r3, [pc, #20]	@ (8007c4c <HAL_NVIC_SetPriority+0x1c>)
 8007c36:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c38:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8007c3c:	f7ff ffc6 	bl	8007bcc <NVIC_EncodePriority>
 8007c40:	4601      	mov	r1, r0
 8007c42:	4620      	mov	r0, r4
 8007c44:	f7ff ffb0 	bl	8007ba8 <__NVIC_SetPriority>
}
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	bf00      	nop
 8007c4c:	e000ed00 	.word	0xe000ed00

08007c50 <HAL_NVIC_EnableIRQ>:
    if ((int32_t)(IRQn) >= 0)
 8007c50:	2800      	cmp	r0, #0
 8007c52:	db07      	blt.n	8007c64 <HAL_NVIC_EnableIRQ+0x14>
      NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c54:	f000 021f 	and.w	r2, r0, #31
 8007c58:	0940      	lsrs	r0, r0, #5
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	4093      	lsls	r3, r2
 8007c5e:	4a02      	ldr	r2, [pc, #8]	@ (8007c68 <HAL_NVIC_EnableIRQ+0x18>)
 8007c60:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	e000e100 	.word	0xe000e100

08007c6c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d038      	beq.n	8007ce2 <HAL_CRC_Init+0x76>
{
 8007c70:	b510      	push	{r4, lr}
 8007c72:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007c74:	7f43      	ldrb	r3, [r0, #29]
 8007c76:	b31b      	cbz	r3, 8007cc0 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007c7c:	7923      	ldrb	r3, [r4, #4]
 8007c7e:	bb1b      	cbnz	r3, 8007cc8 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	4a19      	ldr	r2, [pc, #100]	@ (8007ce8 <HAL_CRC_Init+0x7c>)
 8007c84:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007c86:	6822      	ldr	r2, [r4, #0]
 8007c88:	6893      	ldr	r3, [r2, #8]
 8007c8a:	f023 0318 	bic.w	r3, r3, #24
 8007c8e:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007c90:	7963      	ldrb	r3, [r4, #5]
 8007c92:	bb13      	cbnz	r3, 8007cda <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c9a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007c9c:	6822      	ldr	r2, [r4, #0]
 8007c9e:	6893      	ldr	r3, [r2, #8]
 8007ca0:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8007ca4:	6961      	ldr	r1, [r4, #20]
 8007ca6:	430b      	orrs	r3, r1
 8007ca8:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007caa:	6822      	ldr	r2, [r4, #0]
 8007cac:	6893      	ldr	r3, [r2, #8]
 8007cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cb2:	69a1      	ldr	r1, [r4, #24]
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8007cbc:	2000      	movs	r0, #0
}
 8007cbe:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8007cc0:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8007cc2:	f7f9 ffd9 	bl	8001c78 <HAL_CRC_MspInit>
 8007cc6:	e7d7      	b.n	8007c78 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007cc8:	68e2      	ldr	r2, [r4, #12]
 8007cca:	68a1      	ldr	r1, [r4, #8]
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 f80d 	bl	8007cec <HAL_CRCEx_Polynomial_Set>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d0dc      	beq.n	8007c90 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8007cd6:	2001      	movs	r0, #1
 8007cd8:	e7f1      	b.n	8007cbe <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	6922      	ldr	r2, [r4, #16]
 8007cde:	611a      	str	r2, [r3, #16]
 8007ce0:	e7dc      	b.n	8007c9c <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8007ce2:	2001      	movs	r0, #1
}
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	04c11db7 	.word	0x04c11db7

08007cec <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007cec:	f011 0f01 	tst.w	r1, #1
 8007cf0:	d030      	beq.n	8007d54 <HAL_CRCEx_Polynomial_Set+0x68>
{
 8007cf2:	b410      	push	{r4}
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007cf4:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007cf6:	461c      	mov	r4, r3
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	b134      	cbz	r4, 8007d0a <HAL_CRCEx_Polynomial_Set+0x1e>
 8007cfc:	f003 0c1f 	and.w	ip, r3, #31
 8007d00:	fa21 fc0c 	lsr.w	ip, r1, ip
 8007d04:	f01c 0f01 	tst.w	ip, #1
 8007d08:	d0f5      	beq.n	8007cf6 <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
 8007d0a:	2a18      	cmp	r2, #24
 8007d0c:	d824      	bhi.n	8007d58 <HAL_CRCEx_Polynomial_Set+0x6c>
 8007d0e:	e8df f002 	tbb	[pc, r2]
 8007d12:	230f      	.short	0x230f
 8007d14:	23232323 	.word	0x23232323
 8007d18:	231d2323 	.word	0x231d2323
 8007d1c:	23232323 	.word	0x23232323
 8007d20:	23192323 	.word	0x23192323
 8007d24:	23232323 	.word	0x23232323
 8007d28:	2323      	.short	0x2323
 8007d2a:	0d          	.byte	0x0d
 8007d2b:	00          	.byte	0x00
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007d2c:	2b06      	cmp	r3, #6
 8007d2e:	d817      	bhi.n	8007d60 <HAL_CRCEx_Polynomial_Set+0x74>
    }
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007d30:	6803      	ldr	r3, [r0, #0]
 8007d32:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007d34:	6801      	ldr	r1, [r0, #0]
 8007d36:	688b      	ldr	r3, [r1, #8]
 8007d38:	f023 0318 	bic.w	r3, r3, #24
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	608b      	str	r3, [r1, #8]
 8007d40:	2000      	movs	r0, #0
 8007d42:	e00a      	b.n	8007d5a <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_8B)
 8007d44:	2b07      	cmp	r3, #7
 8007d46:	d9f3      	bls.n	8007d30 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 8007d48:	2001      	movs	r0, #1
 8007d4a:	e006      	b.n	8007d5a <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_16B)
 8007d4c:	2b0f      	cmp	r3, #15
 8007d4e:	d9ef      	bls.n	8007d30 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 8007d50:	2001      	movs	r0, #1
 8007d52:	e002      	b.n	8007d5a <HAL_CRCEx_Polynomial_Set+0x6e>
    status =  HAL_ERROR;
 8007d54:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8007d56:	4770      	bx	lr
    switch (PolyLength)
 8007d58:	2001      	movs	r0, #1
}
 8007d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d5e:	4770      	bx	lr
          status =   HAL_ERROR;
 8007d60:	2001      	movs	r0, #1
 8007d62:	e7fa      	b.n	8007d5a <HAL_CRCEx_Polynomial_Set+0x6e>

08007d64 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8007d64:	4b12      	ldr	r3, [pc, #72]	@ (8007db0 <DFSDM_GetChannelFromInstance+0x4c>)
 8007d66:	4298      	cmp	r0, r3
 8007d68:	d015      	beq.n	8007d96 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 0;
  }
  else if(Instance == DFSDM1_Channel1)
 8007d6a:	3320      	adds	r3, #32
 8007d6c:	4298      	cmp	r0, r3
 8007d6e:	d014      	beq.n	8007d9a <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 8007d70:	3320      	adds	r3, #32
 8007d72:	4298      	cmp	r0, r3
 8007d74:	d013      	beq.n	8007d9e <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 8007d76:	3320      	adds	r3, #32
 8007d78:	4298      	cmp	r0, r3
 8007d7a:	d012      	beq.n	8007da2 <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 3;
  }
  else if(Instance == DFSDM1_Channel4)
 8007d7c:	3320      	adds	r3, #32
 8007d7e:	4298      	cmp	r0, r3
 8007d80:	d011      	beq.n	8007da6 <DFSDM_GetChannelFromInstance+0x42>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 8007d82:	3320      	adds	r3, #32
 8007d84:	4298      	cmp	r0, r3
 8007d86:	d010      	beq.n	8007daa <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 8007d88:	3320      	adds	r3, #32
 8007d8a:	4298      	cmp	r0, r3
 8007d8c:	d001      	beq.n	8007d92 <DFSDM_GetChannelFromInstance+0x2e>
  {
    channel = 6;
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8007d8e:	2007      	movs	r0, #7
  }

  return channel;
}
 8007d90:	4770      	bx	lr
    channel = 6;
 8007d92:	2006      	movs	r0, #6
 8007d94:	4770      	bx	lr
    channel = 0;
 8007d96:	2000      	movs	r0, #0
 8007d98:	4770      	bx	lr
    channel = 1;
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	4770      	bx	lr
    channel = 2;
 8007d9e:	2002      	movs	r0, #2
 8007da0:	4770      	bx	lr
    channel = 3;
 8007da2:	2003      	movs	r0, #3
 8007da4:	4770      	bx	lr
    channel = 4;
 8007da6:	2004      	movs	r0, #4
 8007da8:	4770      	bx	lr
    channel = 5;
 8007daa:	2005      	movs	r0, #5
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40017400 	.word	0x40017400

08007db4 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8007db4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007db6:	b963      	cbnz	r3, 8007dd2 <DFSDM_RegConvStart+0x1e>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8007db8:	6802      	ldr	r2, [r0, #0]
 8007dba:	6813      	ldr	r3, [r2, #0]
 8007dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dc0:	6013      	str	r3, [r2, #0]
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8007dc2:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d026      	beq.n	8007e18 <DFSDM_RegConvStart+0x64>
 8007dca:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8007dcc:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
}
 8007dd0:	4770      	bx	lr
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8007dd2:	6802      	ldr	r2, [r0, #0]
 8007dd4:	6813      	ldr	r3, [r2, #0]
 8007dd6:	f023 0301 	bic.w	r3, r3, #1
 8007dda:	6013      	str	r3, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8007ddc:	6802      	ldr	r2, [r0, #0]
 8007dde:	6813      	ldr	r3, [r2, #0]
 8007de0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007de4:	6013      	str	r3, [r2, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8007de6:	6802      	ldr	r2, [r0, #0]
 8007de8:	6813      	ldr	r3, [r2, #0]
 8007dea:	f043 0301 	orr.w	r3, r3, #1
 8007dee:	6013      	str	r3, [r2, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8007df0:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d1e4      	bne.n	8007dc2 <DFSDM_RegConvStart+0xe>
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8007df8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007dfa:	b923      	cbnz	r3, 8007e06 <DFSDM_RegConvStart+0x52>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8007dfc:	6802      	ldr	r2, [r0, #0]
 8007dfe:	6813      	ldr	r3, [r2, #0]
 8007e00:	f043 0302 	orr.w	r3, r3, #2
 8007e04:	6013      	str	r3, [r2, #0]
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8007e06:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d002      	beq.n	8007e14 <DFSDM_RegConvStart+0x60>
 8007e0e:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8007e10:	6483      	str	r3, [r0, #72]	@ 0x48
 8007e12:	e7d6      	b.n	8007dc2 <DFSDM_RegConvStart+0xe>
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8007e14:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007e16:	e7fb      	b.n	8007e10 <DFSDM_RegConvStart+0x5c>
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e7d7      	b.n	8007dcc <DFSDM_RegConvStart+0x18>

08007e1c <HAL_DFSDM_ChannelMspInit>:
}
 8007e1c:	4770      	bx	lr
	...

08007e20 <HAL_DFSDM_ChannelInit>:
  if(hdfsdm_channel == NULL)
 8007e20:	2800      	cmp	r0, #0
 8007e22:	d078      	beq.n	8007f16 <HAL_DFSDM_ChannelInit+0xf6>
{
 8007e24:	b510      	push	{r4, lr}
 8007e26:	4604      	mov	r4, r0
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8007e28:	6800      	ldr	r0, [r0, #0]
 8007e2a:	f7ff ff9b 	bl	8007d64 <DFSDM_GetChannelFromInstance>
 8007e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8007f1c <HAL_DFSDM_ChannelInit+0xfc>)
 8007e30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e34:	b10b      	cbz	r3, 8007e3a <HAL_DFSDM_ChannelInit+0x1a>
    return HAL_ERROR;
 8007e36:	2001      	movs	r0, #1
}
 8007e38:	bd10      	pop	{r4, pc}
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7ff ffee 	bl	8007e1c <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8007e40:	4b37      	ldr	r3, [pc, #220]	@ (8007f20 <HAL_DFSDM_ChannelInit+0x100>)
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	3201      	adds	r2, #1
 8007e46:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d045      	beq.n	8007eda <HAL_DFSDM_ChannelInit+0xba>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8007e4e:	6822      	ldr	r2, [r4, #0]
 8007e50:	6813      	ldr	r3, [r2, #0]
 8007e52:	f423 4371 	bic.w	r3, r3, #61696	@ 0xf100
 8007e56:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007e58:	6821      	ldr	r1, [r4, #0]
 8007e5a:	680a      	ldr	r2, [r1, #0]
 8007e5c:	6923      	ldr	r3, [r4, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007e5e:	6960      	ldr	r0, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007e60:	4303      	orrs	r3, r0
                                        hdfsdm_channel->Init.Input.Pins);
 8007e62:	69a0      	ldr	r0, [r4, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007e64:	4303      	orrs	r3, r0
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007e66:	4313      	orrs	r3, r2
 8007e68:	600b      	str	r3, [r1, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8007e6a:	6822      	ldr	r2, [r4, #0]
 8007e6c:	6813      	ldr	r3, [r2, #0]
 8007e6e:	f023 030f 	bic.w	r3, r3, #15
 8007e72:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007e74:	6821      	ldr	r1, [r4, #0]
 8007e76:	680b      	ldr	r3, [r1, #0]
 8007e78:	69e2      	ldr	r2, [r4, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8007e7a:	6a20      	ldr	r0, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007e7c:	4302      	orrs	r2, r0
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	600b      	str	r3, [r1, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8007e82:	6822      	ldr	r2, [r4, #0]
 8007e84:	6893      	ldr	r3, [r2, #8]
 8007e86:	f423 035f 	bic.w	r3, r3, #14614528	@ 0xdf0000
 8007e8a:	6093      	str	r3, [r2, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007e8c:	6820      	ldr	r0, [r4, #0]
 8007e8e:	6883      	ldr	r3, [r0, #8]
 8007e90:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8007e92:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007e94:	3901      	subs	r1, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007e96:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8007e9e:	6822      	ldr	r2, [r4, #0]
 8007ea0:	6853      	ldr	r3, [r2, #4]
 8007ea2:	f003 0307 	and.w	r3, r3, #7
 8007ea6:	6053      	str	r3, [r2, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007ea8:	6821      	ldr	r1, [r4, #0]
 8007eaa:	684a      	ldr	r2, [r1, #4]
 8007eac:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8007eae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007eb0:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007eb2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	604b      	str	r3, [r1, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8007eba:	6822      	ldr	r2, [r4, #0]
 8007ebc:	6813      	ldr	r3, [r2, #0]
 8007ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ec2:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8007eca:	6820      	ldr	r0, [r4, #0]
 8007ecc:	f7ff ff4a 	bl	8007d64 <DFSDM_GetChannelFromInstance>
 8007ed0:	4b12      	ldr	r3, [pc, #72]	@ (8007f1c <HAL_DFSDM_ChannelInit+0xfc>)
 8007ed2:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  return HAL_OK;
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	e7ae      	b.n	8007e38 <HAL_DFSDM_ChannelInit+0x18>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8007eda:	4b12      	ldr	r3, [pc, #72]	@ (8007f24 <HAL_DFSDM_ChannelInit+0x104>)
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8007ee2:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68a1      	ldr	r1, [r4, #8]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 8007ef2:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8007ef4:	7923      	ldrb	r3, [r4, #4]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d005      	beq.n	8007f06 <HAL_DFSDM_ChannelInit+0xe6>
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8007efa:	4a0a      	ldr	r2, [pc, #40]	@ (8007f24 <HAL_DFSDM_ChannelInit+0x104>)
 8007efc:	6813      	ldr	r3, [r2, #0]
 8007efe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f02:	6013      	str	r3, [r2, #0]
 8007f04:	e7a3      	b.n	8007e4e <HAL_DFSDM_ChannelInit+0x2e>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8007f06:	4907      	ldr	r1, [pc, #28]	@ (8007f24 <HAL_DFSDM_ChannelInit+0x104>)
 8007f08:	680b      	ldr	r3, [r1, #0]
 8007f0a:	68e2      	ldr	r2, [r4, #12]
 8007f0c:	3a01      	subs	r2, #1
 8007f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f12:	600b      	str	r3, [r1, #0]
 8007f14:	e7f1      	b.n	8007efa <HAL_DFSDM_ChannelInit+0xda>
    return HAL_ERROR;
 8007f16:	2001      	movs	r0, #1
}
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	2001e6e4 	.word	0x2001e6e4
 8007f20:	2001e704 	.word	0x2001e704
 8007f24:	40017400 	.word	0x40017400

08007f28 <HAL_DFSDM_FilterMspInit>:
}
 8007f28:	4770      	bx	lr
	...

08007f2c <HAL_DFSDM_FilterInit>:
  if(hdfsdm_filter == NULL)
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	f000 8086 	beq.w	800803e <HAL_DFSDM_FilterInit+0x112>
{
 8007f32:	b510      	push	{r4, lr}
 8007f34:	4604      	mov	r4, r0
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8007f36:	6802      	ldr	r2, [r0, #0]
 8007f38:	4b43      	ldr	r3, [pc, #268]	@ (8008048 <HAL_DFSDM_FilterInit+0x11c>)
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d059      	beq.n	8007ff2 <HAL_DFSDM_FilterInit+0xc6>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	6323      	str	r3, [r4, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8007f42:	2201      	movs	r2, #1
 8007f44:	6462      	str	r2, [r4, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8007f46:	64a2      	str	r2, [r4, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8007f48:	6523      	str	r3, [r4, #80]	@ 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7ff ffec 	bl	8007f28 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8007f50:	6822      	ldr	r2, [r4, #0]
 8007f52:	6813      	ldr	r3, [r2, #0]
 8007f54:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007f58:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8007f5a:	7a23      	ldrb	r3, [r4, #8]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d050      	beq.n	8008002 <HAL_DFSDM_FilterInit+0xd6>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8007f60:	6822      	ldr	r2, [r4, #0]
 8007f62:	6813      	ldr	r3, [r2, #0]
 8007f64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f68:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8007f6a:	7a63      	ldrb	r3, [r4, #9]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d04e      	beq.n	800800e <HAL_DFSDM_FilterInit+0xe2>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8007f70:	6822      	ldr	r2, [r4, #0]
 8007f72:	6813      	ldr	r3, [r2, #0]
 8007f74:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f78:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8007f7a:	6822      	ldr	r2, [r4, #0]
 8007f7c:	6811      	ldr	r1, [r2, #0]
 8007f7e:	4b33      	ldr	r3, [pc, #204]	@ (800804c <HAL_DFSDM_FilterInit+0x120>)
 8007f80:	400b      	ands	r3, r1
 8007f82:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8007f84:	68e3      	ldr	r3, [r4, #12]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d047      	beq.n	800801a <HAL_DFSDM_FilterInit+0xee>
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8007f8a:	7c23      	ldrb	r3, [r4, #16]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d04a      	beq.n	8008026 <HAL_DFSDM_FilterInit+0xfa>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8007f90:	6822      	ldr	r2, [r4, #0]
 8007f92:	6813      	ldr	r3, [r2, #0]
 8007f94:	f023 0310 	bic.w	r3, r3, #16
 8007f98:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8007f9a:	7c63      	ldrb	r3, [r4, #17]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d048      	beq.n	8008032 <HAL_DFSDM_FilterInit+0x106>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8007fa0:	6822      	ldr	r2, [r4, #0]
 8007fa2:	6813      	ldr	r3, [r2, #0]
 8007fa4:	f023 0320 	bic.w	r3, r3, #32
 8007fa8:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8007faa:	6822      	ldr	r2, [r4, #0]
 8007fac:	6951      	ldr	r1, [r2, #20]
 8007fae:	4b28      	ldr	r3, [pc, #160]	@ (8008050 <HAL_DFSDM_FilterInit+0x124>)
 8007fb0:	400b      	ands	r3, r1
 8007fb2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007fb4:	6820      	ldr	r0, [r4, #0]
 8007fb6:	6942      	ldr	r2, [r0, #20]
 8007fb8:	69e3      	ldr	r3, [r4, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8007fba:	6a21      	ldr	r1, [r4, #32]
 8007fbc:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007fbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8007fc2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007fc4:	3901      	subs	r1, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8007fc6:	430b      	orrs	r3, r1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	6143      	str	r3, [r0, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8007fcc:	6863      	ldr	r3, [r4, #4]
 8007fce:	6363      	str	r3, [r4, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8007fd0:	68e3      	ldr	r3, [r4, #12]
 8007fd2:	63a3      	str	r3, [r4, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8007fd4:	69a3      	ldr	r3, [r4, #24]
 8007fd6:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8007fd8:	7c23      	ldrb	r3, [r4, #16]
 8007fda:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8007fde:	6822      	ldr	r2, [r4, #0]
 8007fe0:	6813      	ldr	r3, [r2, #0]
 8007fe2:	f043 0301 	orr.w	r3, r3, #1
 8007fe6:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
  return HAL_OK;
 8007fee:	2000      	movs	r0, #0
}
 8007ff0:	bd10      	pop	{r4, pc}
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8007ff2:	6843      	ldr	r3, [r0, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d024      	beq.n	8008042 <HAL_DFSDM_FilterInit+0x116>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8007ff8:	68c3      	ldr	r3, [r0, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d19f      	bne.n	8007f3e <HAL_DFSDM_FilterInit+0x12>
    return HAL_ERROR;
 8007ffe:	2001      	movs	r0, #1
 8008000:	e7f6      	b.n	8007ff0 <HAL_DFSDM_FilterInit+0xc4>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	6813      	ldr	r3, [r2, #0]
 8008006:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	e7ad      	b.n	8007f6a <HAL_DFSDM_FilterInit+0x3e>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800800e:	6822      	ldr	r2, [r4, #0]
 8008010:	6813      	ldr	r3, [r2, #0]
 8008012:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	e7af      	b.n	8007f7a <HAL_DFSDM_FilterInit+0x4e>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800801a:	6822      	ldr	r2, [r4, #0]
 800801c:	6813      	ldr	r3, [r2, #0]
 800801e:	6961      	ldr	r1, [r4, #20]
 8008020:	430b      	orrs	r3, r1
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	e7b1      	b.n	8007f8a <HAL_DFSDM_FilterInit+0x5e>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8008026:	6822      	ldr	r2, [r4, #0]
 8008028:	6813      	ldr	r3, [r2, #0]
 800802a:	f043 0310 	orr.w	r3, r3, #16
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	e7b3      	b.n	8007f9a <HAL_DFSDM_FilterInit+0x6e>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8008032:	6822      	ldr	r2, [r4, #0]
 8008034:	6813      	ldr	r3, [r2, #0]
 8008036:	f043 0320 	orr.w	r3, r3, #32
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	e7b5      	b.n	8007faa <HAL_DFSDM_FilterInit+0x7e>
    return HAL_ERROR;
 800803e:	2001      	movs	r0, #1
}
 8008040:	4770      	bx	lr
    return HAL_ERROR;
 8008042:	2001      	movs	r0, #1
 8008044:	e7d4      	b.n	8007ff0 <HAL_DFSDM_FilterInit+0xc4>
 8008046:	bf00      	nop
 8008048:	40017500 	.word	0x40017500
 800804c:	ffff80f7 	.word	0xffff80f7
 8008050:	1c00ff00 	.word	0x1c00ff00

08008054 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8008054:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 8008058:	3b01      	subs	r3, #1
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2bfd      	cmp	r3, #253	@ 0xfd
 800805e:	d81c      	bhi.n	800809a <HAL_DFSDM_FilterConfigRegChannel+0x46>
{
 8008060:	b430      	push	{r4, r5}
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8008062:	6804      	ldr	r4, [r0, #0]
 8008064:	6825      	ldr	r5, [r4, #0]
 8008066:	4b0e      	ldr	r3, [pc, #56]	@ (80080a0 <HAL_DFSDM_FilterConfigRegChannel+0x4c>)
 8008068:	402b      	ands	r3, r5
 800806a:	6023      	str	r3, [r4, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800806c:	2a01      	cmp	r2, #1
 800806e:	d00a      	beq.n	8008086 <HAL_DFSDM_FilterConfigRegChannel+0x32>
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8008070:	6804      	ldr	r4, [r0, #0]
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	0209      	lsls	r1, r1, #8
 8008076:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
 800807a:	430b      	orrs	r3, r1
 800807c:	6023      	str	r3, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800807e:	6302      	str	r2, [r0, #48]	@ 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8008080:	2000      	movs	r0, #0
}
 8008082:	bc30      	pop	{r4, r5}
 8008084:	4770      	bx	lr
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8008086:	6804      	ldr	r4, [r0, #0]
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	0209      	lsls	r1, r1, #8
 800808c:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
 8008090:	430b      	orrs	r3, r1
 8008092:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	e7f1      	b.n	800807e <HAL_DFSDM_FilterConfigRegChannel+0x2a>
    status = HAL_ERROR;
 800809a:	2001      	movs	r0, #1
}
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	f8fbffff 	.word	0xf8fbffff

080080a4 <HAL_DFSDM_FilterRegularStart_DMA>:
{
 80080a4:	b538      	push	{r3, r4, r5, lr}
  if((pData == NULL) || (Length == 0))
 80080a6:	2a00      	cmp	r2, #0
 80080a8:	bf18      	it	ne
 80080aa:	2900      	cmpne	r1, #0
 80080ac:	d040      	beq.n	8008130 <HAL_DFSDM_FilterRegularStart_DMA+0x8c>
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	4613      	mov	r3, r2
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80080b4:	6822      	ldr	r2, [r4, #0]
 80080b6:	6812      	ldr	r2, [r2, #0]
 80080b8:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
 80080bc:	d03b      	beq.n	8008136 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80080be:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80080c0:	b942      	cbnz	r2, 80080d4 <HAL_DFSDM_FilterRegularStart_DMA+0x30>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80080c2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80080c4:	b931      	cbnz	r1, 80080d4 <HAL_DFSDM_FilterRegularStart_DMA+0x30>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80080c6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80080c8:	69c9      	ldr	r1, [r1, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80080ca:	b919      	cbnz	r1, 80080d4 <HAL_DFSDM_FilterRegularStart_DMA+0x30>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d001      	beq.n	80080d4 <HAL_DFSDM_FilterRegularStart_DMA+0x30>
    status = HAL_ERROR;
 80080d0:	2501      	movs	r5, #1
 80080d2:	e02e      	b.n	8008132 <HAL_DFSDM_FilterRegularStart_DMA+0x8e>
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80080d4:	b932      	cbnz	r2, 80080e4 <HAL_DFSDM_FilterRegularStart_DMA+0x40>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80080d6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80080d8:	b922      	cbnz	r2, 80080e4 <HAL_DFSDM_FilterRegularStart_DMA+0x40>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80080da:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80080dc:	69d2      	ldr	r2, [r2, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80080de:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80080e2:	d02a      	beq.n	800813a <HAL_DFSDM_FilterRegularStart_DMA+0x96>
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80080e4:	f894 204c 	ldrb.w	r2, [r4, #76]	@ 0x4c
 80080e8:	2a03      	cmp	r2, #3
 80080ea:	bf18      	it	ne
 80080ec:	2a01      	cmpne	r2, #1
 80080ee:	d126      	bne.n	800813e <HAL_DFSDM_FilterRegularStart_DMA+0x9a>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80080f0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80080f2:	4914      	ldr	r1, [pc, #80]	@ (8008144 <HAL_DFSDM_FilterRegularStart_DMA+0xa0>)
 80080f4:	63d1      	str	r1, [r2, #60]	@ 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80080f6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80080f8:	4913      	ldr	r1, [pc, #76]	@ (8008148 <HAL_DFSDM_FilterRegularStart_DMA+0xa4>)
 80080fa:	64d1      	str	r1, [r2, #76]	@ 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 80080fc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80080fe:	69d1      	ldr	r1, [r2, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8008100:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008104:	d00e      	beq.n	8008124 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
 8008106:	2100      	movs	r1, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8008108:	6411      	str	r1, [r2, #64]	@ 0x40
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800810a:	6821      	ldr	r1, [r4, #0]
 800810c:	4602      	mov	r2, r0
 800810e:	311c      	adds	r1, #28
 8008110:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008112:	f000 f945 	bl	80083a0 <HAL_DMA_Start_IT>
 8008116:	4605      	mov	r5, r0
 8008118:	b130      	cbz	r0, 8008128 <HAL_DFSDM_FilterRegularStart_DMA+0x84>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800811a:	23ff      	movs	r3, #255	@ 0xff
 800811c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
      status = HAL_ERROR;
 8008120:	2501      	movs	r5, #1
 8008122:	e006      	b.n	8008132 <HAL_DFSDM_FilterRegularStart_DMA+0x8e>
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8008124:	4909      	ldr	r1, [pc, #36]	@ (800814c <HAL_DFSDM_FilterRegularStart_DMA+0xa8>)
 8008126:	e7ef      	b.n	8008108 <HAL_DFSDM_FilterRegularStart_DMA+0x64>
      DFSDM_RegConvStart(hdfsdm_filter);
 8008128:	4620      	mov	r0, r4
 800812a:	f7ff fe43 	bl	8007db4 <DFSDM_RegConvStart>
 800812e:	e000      	b.n	8008132 <HAL_DFSDM_FilterRegularStart_DMA+0x8e>
    status = HAL_ERROR;
 8008130:	2501      	movs	r5, #1
}
 8008132:	4628      	mov	r0, r5
 8008134:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8008136:	2501      	movs	r5, #1
 8008138:	e7fb      	b.n	8008132 <HAL_DFSDM_FilterRegularStart_DMA+0x8e>
    status = HAL_ERROR;
 800813a:	2501      	movs	r5, #1
 800813c:	e7f9      	b.n	8008132 <HAL_DFSDM_FilterRegularStart_DMA+0x8e>
    status = HAL_ERROR;
 800813e:	2501      	movs	r5, #1
 8008140:	e7f7      	b.n	8008132 <HAL_DFSDM_FilterRegularStart_DMA+0x8e>
 8008142:	bf00      	nop
 8008144:	08008151 	.word	0x08008151
 8008148:	08008167 	.word	0x08008167
 800814c:	0800815b 	.word	0x0800815b

08008150 <DFSDM_DMARegularConvCplt>:
{
 8008150:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8008152:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8008154:	f7fe f996 	bl	8006484 <HAL_DFSDM_FilterRegConvCpltCallback>
}
 8008158:	bd08      	pop	{r3, pc}

0800815a <DFSDM_DMARegularHalfConvCplt>:
{
 800815a:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800815c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800815e:	f7fe fad7 	bl	8006710 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
}
 8008162:	bd08      	pop	{r3, pc}

08008164 <HAL_DFSDM_FilterErrorCallback>:
}
 8008164:	4770      	bx	lr

08008166 <DFSDM_DMAError>:
{
 8008166:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8008168:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800816a:	2303      	movs	r3, #3
 800816c:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800816e:	f7ff fff9 	bl	8008164 <HAL_DFSDM_FilterErrorCallback>
}
 8008172:	bd08      	pop	{r3, pc}

08008174 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008174:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008176:	6805      	ldr	r5, [r0, #0]
 8008178:	682c      	ldr	r4, [r5, #0]
 800817a:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 800817e:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008180:	6804      	ldr	r4, [r0, #0]
 8008182:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008184:	6883      	ldr	r3, [r0, #8]
 8008186:	2b40      	cmp	r3, #64	@ 0x40
 8008188:	d005      	beq.n	8008196 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800818a:	6803      	ldr	r3, [r0, #0]
 800818c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800818e:	6803      	ldr	r3, [r0, #0]
 8008190:	60da      	str	r2, [r3, #12]
  }
}
 8008192:	bc30      	pop	{r4, r5}
 8008194:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8008196:	6803      	ldr	r3, [r0, #0]
 8008198:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800819a:	6803      	ldr	r3, [r0, #0]
 800819c:	60d9      	str	r1, [r3, #12]
 800819e:	e7f8      	b.n	8008192 <DMA_SetConfig+0x1e>

080081a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081a0:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80081a2:	6803      	ldr	r3, [r0, #0]
 80081a4:	b2d9      	uxtb	r1, r3
 80081a6:	3910      	subs	r1, #16
 80081a8:	4a0a      	ldr	r2, [pc, #40]	@ (80081d4 <DMA_CalcBaseAndBitshift+0x34>)
 80081aa:	fba2 4201 	umull	r4, r2, r2, r1
 80081ae:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80081b0:	4c09      	ldr	r4, [pc, #36]	@ (80081d8 <DMA_CalcBaseAndBitshift+0x38>)
 80081b2:	5ca2      	ldrb	r2, [r4, r2]
 80081b4:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80081b6:	295f      	cmp	r1, #95	@ 0x5f
 80081b8:	d907      	bls.n	80081ca <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80081ba:	f36f 0309 	bfc	r3, #0, #10
 80081be:	3304      	adds	r3, #4
 80081c0:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80081c2:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80081c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081c8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80081ca:	f36f 0309 	bfc	r3, #0, #10
 80081ce:	6583      	str	r3, [r0, #88]	@ 0x58
 80081d0:	e7f7      	b.n	80081c2 <DMA_CalcBaseAndBitshift+0x22>
 80081d2:	bf00      	nop
 80081d4:	aaaaaaab 	.word	0xaaaaaaab
 80081d8:	0804eb64 	.word	0x0804eb64

080081dc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80081dc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80081de:	6982      	ldr	r2, [r0, #24]
 80081e0:	b992      	cbnz	r2, 8008208 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d00a      	beq.n	80081fc <DMA_CheckFifoParam+0x20>
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d002      	beq.n	80081f0 <DMA_CheckFifoParam+0x14>
 80081ea:	b10b      	cbz	r3, 80081f0 <DMA_CheckFifoParam+0x14>
 80081ec:	2000      	movs	r0, #0
 80081ee:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081f0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80081f2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80081f6:	d128      	bne.n	800824a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80081f8:	2000      	movs	r0, #0
 80081fa:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081fc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80081fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008202:	d024      	beq.n	800824e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8008204:	2000      	movs	r0, #0
 8008206:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008208:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800820c:	d009      	beq.n	8008222 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800820e:	2b02      	cmp	r3, #2
 8008210:	d925      	bls.n	800825e <DMA_CheckFifoParam+0x82>
 8008212:	2b03      	cmp	r3, #3
 8008214:	d125      	bne.n	8008262 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008216:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008218:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800821c:	d123      	bne.n	8008266 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800821e:	2000      	movs	r0, #0
 8008220:	4770      	bx	lr
    switch (tmp)
 8008222:	2b03      	cmp	r3, #3
 8008224:	d803      	bhi.n	800822e <DMA_CheckFifoParam+0x52>
 8008226:	e8df f003 	tbb	[pc, r3]
 800822a:	0414      	.short	0x0414
 800822c:	0a14      	.short	0x0a14
 800822e:	2000      	movs	r0, #0
 8008230:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008232:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008234:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8008238:	d10d      	bne.n	8008256 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800823a:	2000      	movs	r0, #0
 800823c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800823e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008240:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008244:	d009      	beq.n	800825a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8008246:	2000      	movs	r0, #0
 8008248:	4770      	bx	lr
        status = HAL_ERROR;
 800824a:	2001      	movs	r0, #1
 800824c:	4770      	bx	lr
        status = HAL_ERROR;
 800824e:	2001      	movs	r0, #1
 8008250:	4770      	bx	lr
      status = HAL_ERROR;
 8008252:	2001      	movs	r0, #1
 8008254:	4770      	bx	lr
        status = HAL_ERROR;
 8008256:	2001      	movs	r0, #1
 8008258:	4770      	bx	lr
        status = HAL_ERROR;
 800825a:	2001      	movs	r0, #1
 800825c:	4770      	bx	lr
      status = HAL_ERROR;
 800825e:	2001      	movs	r0, #1
 8008260:	4770      	bx	lr
    switch (tmp)
 8008262:	2000      	movs	r0, #0
 8008264:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8008266:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8008268:	4770      	bx	lr
	...

0800826c <HAL_DMA_Init>:
{
 800826c:	b570      	push	{r4, r5, r6, lr}
 800826e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008270:	f7ff fc80 	bl	8007b74 <HAL_GetTick>
  if(hdma == NULL)
 8008274:	2c00      	cmp	r4, #0
 8008276:	d05c      	beq.n	8008332 <HAL_DMA_Init+0xc6>
 8008278:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800827a:	2302      	movs	r3, #2
 800827c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8008280:	2300      	movs	r3, #0
 8008282:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8008286:	6822      	ldr	r2, [r4, #0]
 8008288:	6813      	ldr	r3, [r2, #0]
 800828a:	f023 0301 	bic.w	r3, r3, #1
 800828e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	f012 0f01 	tst.w	r2, #1
 8008298:	d00a      	beq.n	80082b0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800829a:	f7ff fc6b 	bl	8007b74 <HAL_GetTick>
 800829e:	1b43      	subs	r3, r0, r5
 80082a0:	2b05      	cmp	r3, #5
 80082a2:	d9f5      	bls.n	8008290 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082a4:	2320      	movs	r3, #32
 80082a6:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80082a8:	2003      	movs	r0, #3
 80082aa:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 80082ae:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80082b0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80082b2:	4921      	ldr	r1, [pc, #132]	@ (8008338 <HAL_DMA_Init+0xcc>)
 80082b4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80082b6:	6862      	ldr	r2, [r4, #4]
 80082b8:	68a0      	ldr	r0, [r4, #8]
 80082ba:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082bc:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80082be:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082c0:	6920      	ldr	r0, [r4, #16]
 80082c2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082c4:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082c6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082c8:	69a0      	ldr	r0, [r4, #24]
 80082ca:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80082cc:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082ce:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80082d0:	6a20      	ldr	r0, [r4, #32]
 80082d2:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80082d4:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80082d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80082d8:	2904      	cmp	r1, #4
 80082da:	d01e      	beq.n	800831a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80082dc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80082de:	6826      	ldr	r6, [r4, #0]
 80082e0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80082e2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80082e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80082e8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d107      	bne.n	80082fe <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80082ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80082f0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80082f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80082f4:	b11b      	cbz	r3, 80082fe <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80082f6:	4620      	mov	r0, r4
 80082f8:	f7ff ff70 	bl	80081dc <DMA_CheckFifoParam>
 80082fc:	b990      	cbnz	r0, 8008324 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80082fe:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008300:	4620      	mov	r0, r4
 8008302:	f7ff ff4d 	bl	80081a0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008306:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8008308:	233f      	movs	r3, #63	@ 0x3f
 800830a:	4093      	lsls	r3, r2
 800830c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800830e:	2000      	movs	r0, #0
 8008310:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8008312:	2301      	movs	r3, #1
 8008314:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8008318:	e7c9      	b.n	80082ae <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800831a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800831c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800831e:	4301      	orrs	r1, r0
 8008320:	430a      	orrs	r2, r1
 8008322:	e7db      	b.n	80082dc <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008324:	2340      	movs	r3, #64	@ 0x40
 8008326:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_RESET;
 8008328:	2300      	movs	r3, #0
 800832a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 800832e:	2001      	movs	r0, #1
 8008330:	e7bd      	b.n	80082ae <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8008332:	2001      	movs	r0, #1
 8008334:	e7bb      	b.n	80082ae <HAL_DMA_Init+0x42>
 8008336:	bf00      	nop
 8008338:	e010803f 	.word	0xe010803f

0800833c <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800833c:	2800      	cmp	r0, #0
 800833e:	d02d      	beq.n	800839c <HAL_DMA_DeInit+0x60>
{
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4605      	mov	r5, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008344:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
 8008348:	b2c0      	uxtb	r0, r0
 800834a:	2802      	cmp	r0, #2
 800834c:	d025      	beq.n	800839a <HAL_DMA_DeInit+0x5e>
  __HAL_DMA_DISABLE(hdma);
 800834e:	682a      	ldr	r2, [r5, #0]
 8008350:	6813      	ldr	r3, [r2, #0]
 8008352:	f023 0301 	bic.w	r3, r3, #1
 8008356:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	2400      	movs	r4, #0
 800835c:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 800835e:	682b      	ldr	r3, [r5, #0]
 8008360:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8008362:	682b      	ldr	r3, [r5, #0]
 8008364:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8008366:	682b      	ldr	r3, [r5, #0]
 8008368:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800836a:	682b      	ldr	r3, [r5, #0]
 800836c:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800836e:	682b      	ldr	r3, [r5, #0]
 8008370:	2221      	movs	r2, #33	@ 0x21
 8008372:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008374:	4628      	mov	r0, r5
 8008376:	f7ff ff13 	bl	80081a0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800837a:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800837c:	233f      	movs	r3, #63	@ 0x3f
 800837e:	4093      	lsls	r3, r2
 8008380:	6083      	str	r3, [r0, #8]
  hdma->XferCpltCallback = NULL;
 8008382:	63ec      	str	r4, [r5, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008384:	642c      	str	r4, [r5, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8008386:	646c      	str	r4, [r5, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008388:	64ac      	str	r4, [r5, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800838a:	64ec      	str	r4, [r5, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800838c:	652c      	str	r4, [r5, #80]	@ 0x50
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800838e:	656c      	str	r4, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8008390:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8008394:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  return HAL_OK;
 8008398:	4620      	mov	r0, r4
}
 800839a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800839c:	2001      	movs	r0, #1
}
 800839e:	4770      	bx	lr

080083a0 <HAL_DMA_Start_IT>:
{
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083a4:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80083a6:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 80083aa:	2801      	cmp	r0, #1
 80083ac:	d030      	beq.n	8008410 <HAL_DMA_Start_IT+0x70>
 80083ae:	2001      	movs	r0, #1
 80083b0:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80083b4:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 80083b8:	b2c0      	uxtb	r0, r0
 80083ba:	2801      	cmp	r0, #1
 80083bc:	d004      	beq.n	80083c8 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80083be:	2300      	movs	r3, #0
 80083c0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 80083c4:	2002      	movs	r0, #2
}
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80083c8:	2002      	movs	r0, #2
 80083ca:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083ce:	2000      	movs	r0, #0
 80083d0:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083d2:	4620      	mov	r0, r4
 80083d4:	f7ff fece 	bl	8008174 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083d8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80083da:	233f      	movs	r3, #63	@ 0x3f
 80083dc:	4093      	lsls	r3, r2
 80083de:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80083e0:	6822      	ldr	r2, [r4, #0]
 80083e2:	6813      	ldr	r3, [r2, #0]
 80083e4:	f043 0316 	orr.w	r3, r3, #22
 80083e8:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80083ea:	6822      	ldr	r2, [r4, #0]
 80083ec:	6953      	ldr	r3, [r2, #20]
 80083ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083f2:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80083f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083f6:	b123      	cbz	r3, 8008402 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 80083f8:	6822      	ldr	r2, [r4, #0]
 80083fa:	6813      	ldr	r3, [r2, #0]
 80083fc:	f043 0308 	orr.w	r3, r3, #8
 8008400:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8008402:	6822      	ldr	r2, [r4, #0]
 8008404:	6813      	ldr	r3, [r2, #0]
 8008406:	f043 0301 	orr.w	r3, r3, #1
 800840a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800840c:	2000      	movs	r0, #0
 800840e:	e7da      	b.n	80083c6 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8008410:	2002      	movs	r0, #2
 8008412:	e7d8      	b.n	80083c6 <HAL_DMA_Start_IT+0x26>

08008414 <HAL_DMA_IRQHandler>:
{
 8008414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008416:	b083      	sub	sp, #12
 8008418:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 800841a:	2300      	movs	r3, #0
 800841c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 800841e:	4b72      	ldr	r3, [pc, #456]	@ (80085e8 <HAL_DMA_IRQHandler+0x1d4>)
 8008420:	681d      	ldr	r5, [r3, #0]
 8008422:	4b72      	ldr	r3, [pc, #456]	@ (80085ec <HAL_DMA_IRQHandler+0x1d8>)
 8008424:	fba3 3505 	umull	r3, r5, r3, r5
 8008428:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800842a:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 800842c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800842e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8008430:	2308      	movs	r3, #8
 8008432:	4093      	lsls	r3, r2
 8008434:	4233      	tst	r3, r6
 8008436:	d010      	beq.n	800845a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008438:	6803      	ldr	r3, [r0, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	f012 0f04 	tst.w	r2, #4
 8008440:	d00b      	beq.n	800845a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	f022 0204 	bic.w	r2, r2, #4
 8008448:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800844a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800844c:	2308      	movs	r3, #8
 800844e:	4093      	lsls	r3, r2
 8008450:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008452:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008454:	f043 0301 	orr.w	r3, r3, #1
 8008458:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800845a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800845c:	2301      	movs	r3, #1
 800845e:	4093      	lsls	r3, r2
 8008460:	4233      	tst	r3, r6
 8008462:	d009      	beq.n	8008478 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008464:	6822      	ldr	r2, [r4, #0]
 8008466:	6952      	ldr	r2, [r2, #20]
 8008468:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800846c:	d004      	beq.n	8008478 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800846e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008470:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008472:	f043 0302 	orr.w	r3, r3, #2
 8008476:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008478:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800847a:	2304      	movs	r3, #4
 800847c:	4093      	lsls	r3, r2
 800847e:	4233      	tst	r3, r6
 8008480:	d009      	beq.n	8008496 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008482:	6822      	ldr	r2, [r4, #0]
 8008484:	6812      	ldr	r2, [r2, #0]
 8008486:	f012 0f02 	tst.w	r2, #2
 800848a:	d004      	beq.n	8008496 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800848c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800848e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008490:	f043 0304 	orr.w	r3, r3, #4
 8008494:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008496:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8008498:	2310      	movs	r3, #16
 800849a:	4093      	lsls	r3, r2
 800849c:	4233      	tst	r3, r6
 800849e:	d024      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80084a0:	6822      	ldr	r2, [r4, #0]
 80084a2:	6812      	ldr	r2, [r2, #0]
 80084a4:	f012 0f08 	tst.w	r2, #8
 80084a8:	d01f      	beq.n	80084ea <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80084aa:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80084b4:	d00d      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80084bc:	d104      	bne.n	80084c8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80084be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084c0:	b19b      	cbz	r3, 80084ea <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80084c2:	4620      	mov	r0, r4
 80084c4:	4798      	blx	r3
 80084c6:	e010      	b.n	80084ea <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80084c8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80084ca:	b173      	cbz	r3, 80084ea <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80084cc:	4620      	mov	r0, r4
 80084ce:	4798      	blx	r3
 80084d0:	e00b      	b.n	80084ea <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80084d8:	d103      	bne.n	80084e2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	f022 0208 	bic.w	r2, r2, #8
 80084e0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80084e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084e4:	b10b      	cbz	r3, 80084ea <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80084e6:	4620      	mov	r0, r4
 80084e8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80084ea:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80084ec:	2320      	movs	r3, #32
 80084ee:	4093      	lsls	r3, r2
 80084f0:	4233      	tst	r3, r6
 80084f2:	d055      	beq.n	80085a0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80084f4:	6822      	ldr	r2, [r4, #0]
 80084f6:	6812      	ldr	r2, [r2, #0]
 80084f8:	f012 0f10 	tst.w	r2, #16
 80084fc:	d050      	beq.n	80085a0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80084fe:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008500:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b05      	cmp	r3, #5
 8008508:	d00e      	beq.n	8008528 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8008512:	d033      	beq.n	800857c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800851a:	d12a      	bne.n	8008572 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800851c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800851e:	2b00      	cmp	r3, #0
 8008520:	d03e      	beq.n	80085a0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8008522:	4620      	mov	r0, r4
 8008524:	4798      	blx	r3
 8008526:	e03b      	b.n	80085a0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008528:	6822      	ldr	r2, [r4, #0]
 800852a:	6813      	ldr	r3, [r2, #0]
 800852c:	f023 0316 	bic.w	r3, r3, #22
 8008530:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008532:	6822      	ldr	r2, [r4, #0]
 8008534:	6953      	ldr	r3, [r2, #20]
 8008536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800853a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800853c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800853e:	b1a3      	cbz	r3, 800856a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008540:	6822      	ldr	r2, [r4, #0]
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	f023 0308 	bic.w	r3, r3, #8
 8008548:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800854a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800854c:	233f      	movs	r3, #63	@ 0x3f
 800854e:	4093      	lsls	r3, r2
 8008550:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8008552:	2301      	movs	r3, #1
 8008554:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8008558:	2300      	movs	r3, #0
 800855a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800855e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008560:	2b00      	cmp	r3, #0
 8008562:	d03f      	beq.n	80085e4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8008564:	4620      	mov	r0, r4
 8008566:	4798      	blx	r3
        return;
 8008568:	e03c      	b.n	80085e4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800856a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1e7      	bne.n	8008540 <HAL_DMA_IRQHandler+0x12c>
 8008570:	e7eb      	b.n	800854a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8008572:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008574:	b1a3      	cbz	r3, 80085a0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8008576:	4620      	mov	r0, r4
 8008578:	4798      	blx	r3
 800857a:	e011      	b.n	80085a0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008582:	d109      	bne.n	8008598 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	f022 0210 	bic.w	r2, r2, #16
 800858a:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800858c:	2301      	movs	r3, #1
 800858e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8008592:	2300      	movs	r3, #0
 8008594:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8008598:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800859a:	b10b      	cbz	r3, 80085a0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800859c:	4620      	mov	r0, r4
 800859e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80085a2:	b1fb      	cbz	r3, 80085e4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80085a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80085a6:	f013 0f01 	tst.w	r3, #1
 80085aa:	d017      	beq.n	80085dc <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80085ac:	2305      	movs	r3, #5
 80085ae:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80085b2:	6822      	ldr	r2, [r4, #0]
 80085b4:	6813      	ldr	r3, [r2, #0]
 80085b6:	f023 0301 	bic.w	r3, r3, #1
 80085ba:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80085bc:	9b01      	ldr	r3, [sp, #4]
 80085be:	3301      	adds	r3, #1
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	42ab      	cmp	r3, r5
 80085c4:	d804      	bhi.n	80085d0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f013 0f01 	tst.w	r3, #1
 80085ce:	d1f5      	bne.n	80085bc <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80085d0:	2301      	movs	r3, #1
 80085d2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80085d6:	2300      	movs	r3, #0
 80085d8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80085dc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80085de:	b10b      	cbz	r3, 80085e4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80085e0:	4620      	mov	r0, r4
 80085e2:	4798      	blx	r3
}
 80085e4:	b003      	add	sp, #12
 80085e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085e8:	2000213c 	.word	0x2000213c
 80085ec:	1b4e81b5 	.word	0x1b4e81b5

080085f0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80085f0:	b530      	push	{r4, r5, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80085f2:	6805      	ldr	r5, [r0, #0]
 80085f4:	6c6c      	ldr	r4, [r5, #68]	@ 0x44
 80085f6:	f004 4c40 	and.w	ip, r4, #3221225472	@ 0xc0000000
 80085fa:	9c03      	ldr	r4, [sp, #12]
 80085fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008600:	ea4c 0404 	orr.w	r4, ip, r4
 8008604:	646c      	str	r4, [r5, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008606:	6803      	ldr	r3, [r0, #0]
 8008608:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800860a:	6843      	ldr	r3, [r0, #4]
 800860c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008610:	d002      	beq.n	8008618 <DMA2D_SetConfig+0x28>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008612:	6803      	ldr	r3, [r0, #0]
 8008614:	60d9      	str	r1, [r3, #12]
  }
}
 8008616:	bd30      	pop	{r4, r5, pc}
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008618:	f001 4c7f 	and.w	ip, r1, #4278190080	@ 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800861c:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008620:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008624:	b2ca      	uxtb	r2, r1
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008626:	6884      	ldr	r4, [r0, #8]
 8008628:	2c03      	cmp	r4, #3
 800862a:	d81c      	bhi.n	8008666 <DMA2D_SetConfig+0x76>
 800862c:	e8df f004 	tbb	[pc, r4]
 8008630:	0f070204 	.word	0x0f070204
      tmp = (tmp3 | tmp2 | tmp4);
 8008634:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008638:	6803      	ldr	r3, [r0, #0]
 800863a:	6399      	str	r1, [r3, #56]	@ 0x38
 800863c:	e7eb      	b.n	8008616 <DMA2D_SetConfig+0x26>
      tmp2 = (tmp2 >> 19U);
 800863e:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8008640:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008642:	02db      	lsls	r3, r3, #11
 8008644:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8008648:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 800864c:	e7f4      	b.n	8008638 <DMA2D_SetConfig+0x48>
      tmp1 = (tmp1 >> 31U);
 800864e:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
      tmp2 = (tmp2 >> 19U);
 8008652:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8008654:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008656:	029b      	lsls	r3, r3, #10
 8008658:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800865c:	ea43 33cc 	orr.w	r3, r3, ip, lsl #15
 8008660:	ea43 01d2 	orr.w	r1, r3, r2, lsr #3
 8008664:	e7e8      	b.n	8008638 <DMA2D_SetConfig+0x48>
      tmp1 = (tmp1 >> 28U);
 8008666:	ea4f 7c1c 	mov.w	ip, ip, lsr #28
      tmp2 = (tmp2 >> 20U);
 800866a:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 800866c:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800866e:	021b      	lsls	r3, r3, #8
 8008670:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8008674:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8008678:	ea43 1112 	orr.w	r1, r3, r2, lsr #4
 800867c:	e7dc      	b.n	8008638 <DMA2D_SetConfig+0x48>

0800867e <HAL_DMA2D_MspInit>:
}
 800867e:	4770      	bx	lr

08008680 <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 8008680:	2800      	cmp	r0, #0
 8008682:	d032      	beq.n	80086ea <HAL_DMA2D_Init+0x6a>
{
 8008684:	b510      	push	{r4, lr}
 8008686:	4604      	mov	r4, r0
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008688:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 800868c:	b343      	cbz	r3, 80086e0 <HAL_DMA2D_Init+0x60>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800868e:	2302      	movs	r3, #2
 8008690:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008694:	6822      	ldr	r2, [r4, #0]
 8008696:	6813      	ldr	r3, [r2, #0]
 8008698:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800869c:	6861      	ldr	r1, [r4, #4]
 800869e:	430b      	orrs	r3, r1
 80086a0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80086a2:	6822      	ldr	r2, [r4, #0]
 80086a4:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80086a6:	f023 0307 	bic.w	r3, r3, #7
 80086aa:	68a1      	ldr	r1, [r4, #8]
 80086ac:	430b      	orrs	r3, r1
 80086ae:	6353      	str	r3, [r2, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80086b0:	6822      	ldr	r2, [r4, #0]
 80086b2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80086b4:	f36f 030d 	bfc	r3, #0, #14
 80086b8:	68e1      	ldr	r1, [r4, #12]
 80086ba:	430b      	orrs	r3, r1
 80086bc:	6413      	str	r3, [r2, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80086be:	6821      	ldr	r1, [r4, #0]
 80086c0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80086c2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80086c6:	6920      	ldr	r0, [r4, #16]
 80086c8:	6962      	ldr	r2, [r4, #20]
 80086ca:	0552      	lsls	r2, r2, #21
 80086cc:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 80086d0:	4313      	orrs	r3, r2
 80086d2:	634b      	str	r3, [r1, #52]	@ 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80086d4:	2000      	movs	r0, #0
 80086d6:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80086d8:	2301      	movs	r3, #1
 80086da:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80086de:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 80086e0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
    HAL_DMA2D_MspInit(hdma2d);
 80086e4:	f7ff ffcb 	bl	800867e <HAL_DMA2D_MspInit>
 80086e8:	e7d1      	b.n	800868e <HAL_DMA2D_Init+0xe>
    return HAL_ERROR;
 80086ea:	2001      	movs	r0, #1
}
 80086ec:	4770      	bx	lr

080086ee <HAL_DMA2D_Start>:
{
 80086ee:	b510      	push	{r4, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 80086f4:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 80086f8:	2801      	cmp	r0, #1
 80086fa:	d012      	beq.n	8008722 <HAL_DMA2D_Start+0x34>
 80086fc:	2001      	movs	r0, #1
 80086fe:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008702:	2002      	movs	r0, #2
 8008704:	f884 0051 	strb.w	r0, [r4, #81]	@ 0x51
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8008708:	9804      	ldr	r0, [sp, #16]
 800870a:	9000      	str	r0, [sp, #0]
 800870c:	4620      	mov	r0, r4
 800870e:	f7ff ff6f 	bl	80085f0 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8008712:	6822      	ldr	r2, [r4, #0]
 8008714:	6813      	ldr	r3, [r2, #0]
 8008716:	f043 0301 	orr.w	r3, r3, #1
 800871a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800871c:	2000      	movs	r0, #0
}
 800871e:	b002      	add	sp, #8
 8008720:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 8008722:	2002      	movs	r0, #2
 8008724:	e7fb      	b.n	800871e <HAL_DMA2D_Start+0x30>

08008726 <HAL_DMA2D_PollForTransfer>:
{
 8008726:	b570      	push	{r4, r5, r6, lr}
 8008728:	b082      	sub	sp, #8
 800872a:	4604      	mov	r4, r0
 800872c:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 800872e:	2300      	movs	r3, #0
 8008730:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008732:	6803      	ldr	r3, [r0, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f013 0f01 	tst.w	r3, #1
 800873a:	d111      	bne.n	8008760 <HAL_DMA2D_PollForTransfer+0x3a>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800873c:	6822      	ldr	r2, [r4, #0]
 800873e:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8008740:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008742:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8008744:	f013 0f20 	tst.w	r3, #32
 8008748:	d147      	bne.n	80087da <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	2212      	movs	r2, #18
 800874e:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008750:	2301      	movs	r3, #1
 8008752:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hdma2d);
 8008756:	2000      	movs	r0, #0
 8008758:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
}
 800875c:	b002      	add	sp, #8
 800875e:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8008760:	f7ff fa08 	bl	8007b74 <HAL_GetTick>
 8008764:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	f012 0f02 	tst.w	r2, #2
 800876e:	d1e5      	bne.n	800873c <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008774:	9a01      	ldr	r2, [sp, #4]
 8008776:	f012 0f21 	tst.w	r2, #33	@ 0x21
 800877a:	d114      	bne.n	80087a6 <HAL_DMA2D_PollForTransfer+0x80>
      if (Timeout != HAL_MAX_DELAY)
 800877c:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8008780:	d0f1      	beq.n	8008766 <HAL_DMA2D_PollForTransfer+0x40>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008782:	f7ff f9f7 	bl	8007b74 <HAL_GetTick>
 8008786:	1b80      	subs	r0, r0, r6
 8008788:	42a8      	cmp	r0, r5
 800878a:	d801      	bhi.n	8008790 <HAL_DMA2D_PollForTransfer+0x6a>
 800878c:	2d00      	cmp	r5, #0
 800878e:	d1ea      	bne.n	8008766 <HAL_DMA2D_PollForTransfer+0x40>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008790:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008792:	f043 0320 	orr.w	r3, r3, #32
 8008796:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008798:	2003      	movs	r0, #3
 800879a:	f884 0051 	strb.w	r0, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hdma2d);
 800879e:	2300      	movs	r3, #0
 80087a0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80087a4:	e7da      	b.n	800875c <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80087a6:	9a01      	ldr	r2, [sp, #4]
 80087a8:	f012 0f20 	tst.w	r2, #32
 80087ac:	d003      	beq.n	80087b6 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80087ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087b0:	f042 0202 	orr.w	r2, r2, #2
 80087b4:	6562      	str	r2, [r4, #84]	@ 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80087b6:	9a01      	ldr	r2, [sp, #4]
 80087b8:	f012 0f01 	tst.w	r2, #1
 80087bc:	d003      	beq.n	80087c6 <HAL_DMA2D_PollForTransfer+0xa0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80087be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087c0:	f042 0201 	orr.w	r2, r2, #1
 80087c4:	6562      	str	r2, [r4, #84]	@ 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80087c6:	2221      	movs	r2, #33	@ 0x21
 80087c8:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80087ca:	2304      	movs	r3, #4
 80087cc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hdma2d);
 80087d0:	2300      	movs	r3, #0
 80087d2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_ERROR;
 80087d6:	2001      	movs	r0, #1
 80087d8:	e7c0      	b.n	800875c <HAL_DMA2D_PollForTransfer+0x36>
    tickstart = HAL_GetTick();
 80087da:	f7ff f9cb 	bl	8007b74 <HAL_GetTick>
 80087de:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	f012 0f10 	tst.w	r2, #16
 80087e8:	d1af      	bne.n	800874a <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80087ee:	9a01      	ldr	r2, [sp, #4]
 80087f0:	f012 0f29 	tst.w	r2, #41	@ 0x29
 80087f4:	d114      	bne.n	8008820 <HAL_DMA2D_PollForTransfer+0xfa>
      if (Timeout != HAL_MAX_DELAY)
 80087f6:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80087fa:	d0f1      	beq.n	80087e0 <HAL_DMA2D_PollForTransfer+0xba>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80087fc:	f7ff f9ba 	bl	8007b74 <HAL_GetTick>
 8008800:	1b80      	subs	r0, r0, r6
 8008802:	42a8      	cmp	r0, r5
 8008804:	d801      	bhi.n	800880a <HAL_DMA2D_PollForTransfer+0xe4>
 8008806:	2d00      	cmp	r5, #0
 8008808:	d1ea      	bne.n	80087e0 <HAL_DMA2D_PollForTransfer+0xba>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800880a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800880c:	f043 0320 	orr.w	r3, r3, #32
 8008810:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008812:	2003      	movs	r0, #3
 8008814:	f884 0051 	strb.w	r0, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hdma2d);
 8008818:	2300      	movs	r3, #0
 800881a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 800881e:	e79d      	b.n	800875c <HAL_DMA2D_PollForTransfer+0x36>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008820:	9a01      	ldr	r2, [sp, #4]
 8008822:	f012 0f08 	tst.w	r2, #8
 8008826:	d003      	beq.n	8008830 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008828:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800882a:	f042 0204 	orr.w	r2, r2, #4
 800882e:	6562      	str	r2, [r4, #84]	@ 0x54
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008830:	9a01      	ldr	r2, [sp, #4]
 8008832:	f012 0f20 	tst.w	r2, #32
 8008836:	d003      	beq.n	8008840 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008838:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800883a:	f042 0202 	orr.w	r2, r2, #2
 800883e:	6562      	str	r2, [r4, #84]	@ 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008840:	9a01      	ldr	r2, [sp, #4]
 8008842:	f012 0f01 	tst.w	r2, #1
 8008846:	d003      	beq.n	8008850 <HAL_DMA2D_PollForTransfer+0x12a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008848:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800884a:	f042 0201 	orr.w	r2, r2, #1
 800884e:	6562      	str	r2, [r4, #84]	@ 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008850:	2229      	movs	r2, #41	@ 0x29
 8008852:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008854:	2304      	movs	r3, #4
 8008856:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hdma2d);
 800885a:	2300      	movs	r3, #0
 800885c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_ERROR;
 8008860:	2001      	movs	r0, #1
 8008862:	e77b      	b.n	800875c <HAL_DMA2D_PollForTransfer+0x36>

08008864 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8008864:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8008868:	2a01      	cmp	r2, #1
 800886a:	d067      	beq.n	800893c <HAL_DMA2D_ConfigLayer+0xd8>
{
 800886c:	b430      	push	{r4, r5}
 800886e:	4603      	mov	r3, r0
  __HAL_LOCK(hdma2d);
 8008870:	2201      	movs	r2, #1
 8008872:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008876:	2202      	movs	r2, #2
 8008878:	f880 2051 	strb.w	r2, [r0, #81]	@ 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800887c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8008880:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008884:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8008886:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8008888:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800888c:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 800888e:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008892:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008894:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008898:	3c09      	subs	r4, #9
 800889a:	2c01      	cmp	r4, #1
 800889c:	d920      	bls.n	80088e0 <HAL_DMA2D_ConfigLayer+0x7c>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800889e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80088a2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80088a6:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80088a8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80088ac:	bb59      	cbnz	r1, 8008906 <HAL_DMA2D_ConfigLayer+0xa2>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80088ae:	681c      	ldr	r4, [r3, #0]
 80088b0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80088b2:	4823      	ldr	r0, [pc, #140]	@ (8008940 <HAL_DMA2D_ConfigLayer+0xdc>)
 80088b4:	4028      	ands	r0, r5
 80088b6:	4310      	orrs	r0, r2
 80088b8:	6260      	str	r0, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80088ba:	6818      	ldr	r0, [r3, #0]
 80088bc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80088c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80088c4:	6a14      	ldr	r4, [r2, #32]
 80088c6:	6184      	str	r4, [r0, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80088c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80088ca:	3a09      	subs	r2, #9
 80088cc:	2a01      	cmp	r2, #1
 80088ce:	d910      	bls.n	80088f2 <HAL_DMA2D_ConfigLayer+0x8e>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hdma2d);
 80088d6:	2000      	movs	r0, #0
 80088d8:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
}
 80088dc:	bc30      	pop	{r4, r5}
 80088de:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80088e0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80088e4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80088e8:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80088ea:	f000 407f 	and.w	r0, r0, #4278190080	@ 0xff000000
 80088ee:	4302      	orrs	r2, r0
 80088f0:	e7dc      	b.n	80088ac <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80088f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80088f6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80088fa:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80088fc:	6819      	ldr	r1, [r3, #0]
 80088fe:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8008902:	628a      	str	r2, [r1, #40]	@ 0x28
 8008904:	e7e4      	b.n	80088d0 <HAL_DMA2D_ConfigLayer+0x6c>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008906:	681c      	ldr	r4, [r3, #0]
 8008908:	69e5      	ldr	r5, [r4, #28]
 800890a:	480d      	ldr	r0, [pc, #52]	@ (8008940 <HAL_DMA2D_ConfigLayer+0xdc>)
 800890c:	4028      	ands	r0, r5
 800890e:	4310      	orrs	r0, r2
 8008910:	61e0      	str	r0, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008912:	6818      	ldr	r0, [r3, #0]
 8008914:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008918:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800891c:	6a14      	ldr	r4, [r2, #32]
 800891e:	6104      	str	r4, [r0, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008920:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008922:	3a09      	subs	r2, #9
 8008924:	2a01      	cmp	r2, #1
 8008926:	d8d3      	bhi.n	80088d0 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008928:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800892c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8008930:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008932:	6819      	ldr	r1, [r3, #0]
 8008934:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8008938:	620a      	str	r2, [r1, #32]
 800893a:	e7c9      	b.n	80088d0 <HAL_DMA2D_ConfigLayer+0x6c>
  __HAL_LOCK(hdma2d);
 800893c:	2002      	movs	r0, #2
}
 800893e:	4770      	bx	lr
 8008940:	00ccfff0 	.word	0x00ccfff0

08008944 <DSI_ConfigPacketHeader>:
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008944:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8008948:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800894c:	9b00      	ldr	r3, [sp, #0]
 800894e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008952:	66c2      	str	r2, [r0, #108]	@ 0x6c
}
 8008954:	4770      	bx	lr

08008956 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8008956:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800895a:	4605      	mov	r5, r0
 800895c:	4689      	mov	r9, r1
 800895e:	4617      	mov	r7, r2
 8008960:	4698      	mov	r8, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008962:	f7ff f907 	bl	8007b74 <HAL_GetTick>
 8008966:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008968:	682c      	ldr	r4, [r5, #0]
 800896a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800896c:	f013 0f01 	tst.w	r3, #1
 8008970:	d107      	bne.n	8008982 <DSI_ShortWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008972:	f7ff f8ff 	bl	8007b74 <HAL_GetTick>
 8008976:	1b80      	subs	r0, r0, r6
 8008978:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800897c:	d9f4      	bls.n	8008968 <DSI_ShortWrite+0x12>
    {
      return HAL_TIMEOUT;
 800897e:	2003      	movs	r0, #3
 8008980:	e008      	b.n	8008994 <DSI_ShortWrite+0x3e>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008982:	ea47 1389 	orr.w	r3, r7, r9, lsl #6
 8008986:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 800898a:	9a08      	ldr	r2, [sp, #32]
 800898c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008990:	66e3      	str	r3, [r4, #108]	@ 0x6c

  return HAL_OK;
 8008992:	2000      	movs	r0, #0
}
 8008994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008998 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8008998:	4770      	bx	lr
	...

0800899c <HAL_DSI_Init>:
  if (hdsi == NULL)
 800899c:	2800      	cmp	r0, #0
 800899e:	f000 8106 	beq.w	8008bae <HAL_DSI_Init+0x212>
{
 80089a2:	b570      	push	{r4, r5, r6, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	460d      	mov	r5, r1
 80089a8:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80089aa:	7c43      	ldrb	r3, [r0, #17]
 80089ac:	b31b      	cbz	r3, 80089f6 <HAL_DSI_Init+0x5a>
  hdsi->State = HAL_DSI_STATE_BUSY;
 80089ae:	2303      	movs	r3, #3
 80089b0:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 80089b2:	2300      	movs	r3, #0
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	6822      	ldr	r2, [r4, #0]
 80089b8:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80089bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089c0:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80089ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 80089d2:	f7ff f8cf 	bl	8007b74 <HAL_GetTick>
 80089d6:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80089de:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 80089e2:	d10b      	bne.n	80089fc <HAL_DSI_Init+0x60>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80089e4:	f7ff f8c6 	bl	8007b74 <HAL_GetTick>
 80089e8:	1b80      	subs	r0, r0, r6
 80089ea:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80089ee:	d9f3      	bls.n	80089d8 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 80089f0:	2003      	movs	r0, #3
}
 80089f2:	b004      	add	sp, #16
 80089f4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 80089f6:	f7ff ffcf 	bl	8008998 <HAL_DSI_MspInit>
 80089fa:	e7d8      	b.n	80089ae <HAL_DSI_Init+0x12>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80089fc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8008a00:	4a6c      	ldr	r2, [pc, #432]	@ (8008bb4 <HAL_DSI_Init+0x218>)
 8008a02:	400a      	ands	r2, r1
 8008a04:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008a08:	6821      	ldr	r1, [r4, #0]
 8008a0a:	f8d1 2430 	ldr.w	r2, [r1, #1072]	@ 0x430
 8008a0e:	6828      	ldr	r0, [r5, #0]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008a10:	686b      	ldr	r3, [r5, #4]
 8008a12:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008a14:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008a18:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008a1a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	f8c1 3430 	str.w	r3, [r1, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8008a24:	2300      	movs	r3, #0
 8008a26:	9301      	str	r3, [sp, #4]
 8008a28:	6822      	ldr	r2, [r4, #0]
 8008a2a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008a2e:	f043 0301 	orr.w	r3, r3, #1
 8008a32:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8008a3c:	f003 0301 	and.w	r3, r3, #1
 8008a40:	9301      	str	r3, [sp, #4]
 8008a42:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8008a44:	2001      	movs	r0, #1
 8008a46:	f7ff f89b 	bl	8007b80 <HAL_Delay>
  tickstart = HAL_GetTick();
 8008a4a:	f7ff f893 	bl	8007b74 <HAL_GetTick>
 8008a4e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008a56:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008a5a:	d107      	bne.n	8008a6c <HAL_DSI_Init+0xd0>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008a5c:	f7ff f88a 	bl	8007b74 <HAL_GetTick>
 8008a60:	1b80      	subs	r0, r0, r6
 8008a62:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008a66:	d9f3      	bls.n	8008a50 <HAL_DSI_Init+0xb4>
      return HAL_TIMEOUT;
 8008a68:	2003      	movs	r0, #3
 8008a6a:	e7c2      	b.n	80089f2 <HAL_DSI_Init+0x56>
  __HAL_DSI_ENABLE(hdsi);
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	9202      	str	r2, [sp, #8]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	f042 0201 	orr.w	r2, r2, #1
 8008a76:	605a      	str	r2, [r3, #4]
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	f002 0201 	and.w	r2, r2, #1
 8008a80:	9202      	str	r2, [sp, #8]
 8008a82:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008a8a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008a8c:	6822      	ldr	r2, [r4, #0]
 8008a8e:	6893      	ldr	r3, [r2, #8]
 8008a90:	68a1      	ldr	r1, [r4, #8]
 8008a92:	430b      	orrs	r3, r1
 8008a94:	6093      	str	r3, [r2, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8008a96:	6822      	ldr	r2, [r4, #0]
 8008a98:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8008a9c:	f043 0302 	orr.w	r3, r3, #2
 8008aa0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8008aa4:	6822      	ldr	r2, [r4, #0]
 8008aa6:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8008aaa:	f043 0304 	orr.w	r3, r3, #4
 8008aae:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008ab2:	6822      	ldr	r2, [r4, #0]
 8008ab4:	f8d2 30a4 	ldr.w	r3, [r2, #164]	@ 0xa4
 8008ab8:	f023 0303 	bic.w	r3, r3, #3
 8008abc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008ac0:	6822      	ldr	r2, [r4, #0]
 8008ac2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	@ 0xa4
 8008ac6:	68e1      	ldr	r1, [r4, #12]
 8008ac8:	430b      	orrs	r3, r1
 8008aca:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8008ace:	f7ff f851 	bl	8007b74 <HAL_GetTick>
 8008ad2:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ada:	f013 0f03 	tst.w	r3, #3
 8008ade:	d010      	beq.n	8008b02 <HAL_DSI_Init+0x166>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008ae6:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8008aea:	2b94      	cmp	r3, #148	@ 0x94
 8008aec:	d01a      	beq.n	8008b24 <HAL_DSI_Init+0x188>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008aee:	f7ff f841 	bl	8007b74 <HAL_GetTick>
 8008af2:	1b83      	subs	r3, r0, r6
 8008af4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008af8:	d9f2      	bls.n	8008ae0 <HAL_DSI_Init+0x144>
        __HAL_UNLOCK(hdsi);
 8008afa:	2300      	movs	r3, #0
 8008afc:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 8008afe:	2003      	movs	r0, #3
 8008b00:	e777      	b.n	80089f2 <HAL_DSI_Init+0x56>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008b08:	f003 0314 	and.w	r3, r3, #20
 8008b0c:	2b14      	cmp	r3, #20
 8008b0e:	d009      	beq.n	8008b24 <HAL_DSI_Init+0x188>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008b10:	f7ff f830 	bl	8007b74 <HAL_GetTick>
 8008b14:	1b80      	subs	r0, r0, r6
 8008b16:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008b1a:	d9f2      	bls.n	8008b02 <HAL_DSI_Init+0x166>
        __HAL_UNLOCK(hdsi);
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 8008b20:	2003      	movs	r0, #3
 8008b22:	e766      	b.n	80089f2 <HAL_DSI_Init+0x56>
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8008b24:	686b      	ldr	r3, [r5, #4]
 8008b26:	b903      	cbnz	r3, 8008b2a <HAL_DSI_Init+0x18e>
 8008b28:	2301      	movs	r3, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008b2a:	4a23      	ldr	r2, [pc, #140]	@ (8008bb8 <HAL_DSI_Init+0x21c>)
 8008b2c:	fb02 f303 	mul.w	r3, r2, r3
 8008b30:	68aa      	ldr	r2, [r5, #8]
 8008b32:	f002 0203 	and.w	r2, r2, #3
 8008b36:	4093      	lsls	r3, r2
 8008b38:	682a      	ldr	r2, [r5, #0]
 8008b3a:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8008b3e:	fb01 f202 	mul.w	r2, r1, r2
 8008b42:	fbb3 f3f2 	udiv	r3, r3, r2
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8008b46:	6821      	ldr	r1, [r4, #0]
 8008b48:	f8d1 2418 	ldr.w	r2, [r1, #1048]	@ 0x418
 8008b4c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8008b50:	f8c1 2418 	str.w	r2, [r1, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8008b54:	6821      	ldr	r1, [r4, #0]
 8008b56:	f8d1 2418 	ldr.w	r2, [r1, #1048]	@ 0x418
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	f8c1 3418 	str.w	r3, [r1, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	2000      	movs	r0, #0
 8008b64:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8008b6e:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 8008b70:	9003      	str	r0, [sp, #12]
 8008b72:	6822      	ldr	r2, [r4, #0]
 8008b74:	6853      	ldr	r3, [r2, #4]
 8008b76:	f023 0301 	bic.w	r3, r3, #1
 8008b7a:	6053      	str	r3, [r2, #4]
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	f002 0201 	and.w	r2, r2, #1
 8008b84:	9203      	str	r2, [sp, #12]
 8008b86:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008b88:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008b8c:	f022 0203 	bic.w	r2, r2, #3
 8008b90:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008b94:	6822      	ldr	r2, [r4, #0]
 8008b96:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8008b9a:	6861      	ldr	r1, [r4, #4]
 8008b9c:	430b      	orrs	r3, r1
 8008b9e:	f043 0301 	orr.w	r3, r3, #1
 8008ba2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008ba6:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8008bac:	e721      	b.n	80089f2 <HAL_DSI_Init+0x56>
    return HAL_ERROR;
 8008bae:	2001      	movs	r0, #1
}
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	fffc8603 	.word	0xfffc8603
 8008bb8:	003d0900 	.word	0x003d0900

08008bbc <HAL_DSI_MspDeInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8008bbc:	4770      	bx	lr

08008bbe <HAL_DSI_DeInit>:
  if (hdsi == NULL)
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d04a      	beq.n	8008c58 <HAL_DSI_DeInit+0x9a>
{
 8008bc2:	b530      	push	{r4, r5, lr}
 8008bc4:	b085      	sub	sp, #20
 8008bc6:	4604      	mov	r4, r0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8008bcc:	2500      	movs	r5, #0
 8008bce:	9500      	str	r5, [sp, #0]
 8008bd0:	6802      	ldr	r2, [r0, #0]
 8008bd2:	f8d2 3404 	ldr.w	r3, [r2, #1028]	@ 0x404
 8008bd6:	f023 0308 	bic.w	r3, r3, #8
 8008bda:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
 8008bde:	6803      	ldr	r3, [r0, #0]
 8008be0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8008be4:	f002 0208 	and.w	r2, r2, #8
 8008be8:	9200      	str	r2, [sp, #0]
 8008bea:	9a00      	ldr	r2, [sp, #0]
  __HAL_DSI_DISABLE(hdsi);
 8008bec:	9501      	str	r5, [sp, #4]
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	f022 0201 	bic.w	r2, r2, #1
 8008bf4:	605a      	str	r2, [r3, #4]
 8008bf6:	6803      	ldr	r3, [r0, #0]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	f002 0201 	and.w	r2, r2, #1
 8008bfe:	9201      	str	r2, [sp, #4]
 8008c00:	9a01      	ldr	r2, [sp, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008c02:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008c06:	f022 0206 	bic.w	r2, r2, #6
 8008c0a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 8008c0e:	9502      	str	r5, [sp, #8]
 8008c10:	6802      	ldr	r2, [r0, #0]
 8008c12:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008c16:	f023 0301 	bic.w	r3, r3, #1
 8008c1a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8008c1e:	6803      	ldr	r3, [r0, #0]
 8008c20:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8008c24:	f002 0201 	and.w	r2, r2, #1
 8008c28:	9202      	str	r2, [sp, #8]
 8008c2a:	9a02      	ldr	r2, [sp, #8]
  __HAL_DSI_REG_DISABLE(hdsi);
 8008c2c:	9503      	str	r5, [sp, #12]
 8008c2e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8008c32:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008c36:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8008c3a:	6803      	ldr	r3, [r0, #0]
 8008c3c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8008c40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c44:	9303      	str	r3, [sp, #12]
 8008c46:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_MspDeInit(hdsi);
 8008c48:	f7ff ffb8 	bl	8008bbc <HAL_DSI_MspDeInit>
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008c4c:	6165      	str	r5, [r4, #20]
  hdsi->State = HAL_DSI_STATE_RESET;
 8008c4e:	7465      	strb	r5, [r4, #17]
  __HAL_UNLOCK(hdsi);
 8008c50:	7425      	strb	r5, [r4, #16]
  return HAL_OK;
 8008c52:	4628      	mov	r0, r5
}
 8008c54:	b005      	add	sp, #20
 8008c56:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8008c58:	2001      	movs	r0, #1
}
 8008c5a:	4770      	bx	lr

08008c5c <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008c5c:	7c02      	ldrb	r2, [r0, #16]
 8008c5e:	2a01      	cmp	r2, #1
 8008c60:	f000 8123 	beq.w	8008eaa <HAL_DSI_ConfigVideoMode+0x24e>
{
 8008c64:	b430      	push	{r4, r5}
 8008c66:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008c68:	2201      	movs	r2, #1
 8008c6a:	7402      	strb	r2, [r0, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8008c6c:	6800      	ldr	r0, [r0, #0]
 8008c6e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008c70:	f022 0201 	bic.w	r2, r2, #1
 8008c74:	6342      	str	r2, [r0, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	f8d0 2400 	ldr.w	r2, [r0, #1024]	@ 0x400
 8008c7c:	f022 0201 	bic.w	r2, r2, #1
 8008c80:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8008c84:	6818      	ldr	r0, [r3, #0]
 8008c86:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008c88:	f022 0203 	bic.w	r2, r2, #3
 8008c8c:	6382      	str	r2, [r0, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8008c8e:	6818      	ldr	r0, [r3, #0]
 8008c90:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008c92:	68cc      	ldr	r4, [r1, #12]
 8008c94:	4322      	orrs	r2, r4
 8008c96:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c9c:	f36f 020d 	bfc	r2, #0, #14
 8008ca0:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8008ca2:	6818      	ldr	r0, [r3, #0]
 8008ca4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ca6:	690c      	ldr	r4, [r1, #16]
 8008ca8:	4322      	orrs	r2, r4
 8008caa:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8008cac:	6818      	ldr	r0, [r3, #0]
 8008cae:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8008cb0:	4c7f      	ldr	r4, [pc, #508]	@ (8008eb0 <HAL_DSI_ConfigVideoMode+0x254>)
 8008cb2:	4022      	ands	r2, r4
 8008cb4:	6402      	str	r2, [r0, #64]	@ 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8008cba:	694d      	ldr	r5, [r1, #20]
 8008cbc:	432a      	orrs	r2, r5
 8008cbe:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8008cc4:	4022      	ands	r2, r4
 8008cc6:	6442      	str	r2, [r0, #68]	@ 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8008cc8:	6818      	ldr	r0, [r3, #0]
 8008cca:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8008ccc:	698c      	ldr	r4, [r1, #24]
 8008cce:	4322      	orrs	r2, r4
 8008cd0:	6442      	str	r2, [r0, #68]	@ 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008cd2:	6818      	ldr	r0, [r3, #0]
 8008cd4:	68c2      	ldr	r2, [r0, #12]
 8008cd6:	f022 0203 	bic.w	r2, r2, #3
 8008cda:	60c2      	str	r2, [r0, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8008cdc:	6818      	ldr	r0, [r3, #0]
 8008cde:	68c2      	ldr	r2, [r0, #12]
 8008ce0:	680c      	ldr	r4, [r1, #0]
 8008ce2:	4322      	orrs	r2, r4
 8008ce4:	60c2      	str	r2, [r0, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008ce6:	6818      	ldr	r0, [r3, #0]
 8008ce8:	6942      	ldr	r2, [r0, #20]
 8008cea:	f022 0207 	bic.w	r2, r2, #7
 8008cee:	6142      	str	r2, [r0, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8008cf0:	681c      	ldr	r4, [r3, #0]
 8008cf2:	6960      	ldr	r0, [r4, #20]
 8008cf4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8008cf6:	6a0d      	ldr	r5, [r1, #32]
 8008cf8:	432a      	orrs	r2, r5
 8008cfa:	69cd      	ldr	r5, [r1, #28]
 8008cfc:	432a      	orrs	r2, r5
 8008cfe:	4302      	orrs	r2, r0
 8008d00:	6162      	str	r2, [r4, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008d02:	6818      	ldr	r0, [r3, #0]
 8008d04:	6902      	ldr	r2, [r0, #16]
 8008d06:	f022 020f 	bic.w	r2, r2, #15
 8008d0a:	6102      	str	r2, [r0, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	6902      	ldr	r2, [r0, #16]
 8008d10:	684c      	ldr	r4, [r1, #4]
 8008d12:	4322      	orrs	r2, r4
 8008d14:	6102      	str	r2, [r0, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008d16:	6818      	ldr	r0, [r3, #0]
 8008d18:	f8d0 2400 	ldr.w	r2, [r0, #1024]	@ 0x400
 8008d1c:	f022 020e 	bic.w	r2, r2, #14
 8008d20:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8008d24:	6818      	ldr	r0, [r3, #0]
 8008d26:	f8d0 2400 	ldr.w	r2, [r0, #1024]	@ 0x400
 8008d2a:	684c      	ldr	r4, [r1, #4]
 8008d2c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8008d30:	f8c0 2400 	str.w	r2, [r0, #1024]	@ 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8008d34:	684a      	ldr	r2, [r1, #4]
 8008d36:	2a03      	cmp	r2, #3
 8008d38:	f000 80ac 	beq.w	8008e94 <HAL_DSI_ConfigVideoMode+0x238>
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8008d3c:	6818      	ldr	r0, [r3, #0]
 8008d3e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8008d40:	4c5c      	ldr	r4, [pc, #368]	@ (8008eb4 <HAL_DSI_ConfigVideoMode+0x258>)
 8008d42:	4022      	ands	r2, r4
 8008d44:	6482      	str	r2, [r0, #72]	@ 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8008d46:	6818      	ldr	r0, [r3, #0]
 8008d48:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8008d4a:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8008d4c:	432a      	orrs	r2, r5
 8008d4e:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8008d54:	4022      	ands	r2, r4
 8008d56:	64c2      	str	r2, [r0, #76]	@ 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8008d58:	6818      	ldr	r0, [r3, #0]
 8008d5a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8008d5c:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8008d5e:	4322      	orrs	r2, r4
 8008d60:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8008d62:	6818      	ldr	r0, [r3, #0]
 8008d64:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8008d66:	f36f 020e 	bfc	r2, #0, #15
 8008d6a:	6502      	str	r2, [r0, #80]	@ 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8008d6c:	6818      	ldr	r0, [r3, #0]
 8008d6e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8008d70:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 8008d72:	4322      	orrs	r2, r4
 8008d74:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8008d76:	681c      	ldr	r4, [r3, #0]
 8008d78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d7a:	484f      	ldr	r0, [pc, #316]	@ (8008eb8 <HAL_DSI_ConfigVideoMode+0x25c>)
 8008d7c:	4002      	ands	r2, r0
 8008d7e:	6562      	str	r2, [r4, #84]	@ 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8008d80:	681c      	ldr	r4, [r3, #0]
 8008d82:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d84:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8008d86:	432a      	orrs	r2, r5
 8008d88:	6562      	str	r2, [r4, #84]	@ 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8008d8a:	681c      	ldr	r4, [r3, #0]
 8008d8c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8008d8e:	4002      	ands	r2, r0
 8008d90:	65a2      	str	r2, [r4, #88]	@ 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8008d92:	681c      	ldr	r4, [r3, #0]
 8008d94:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8008d96:	6b8d      	ldr	r5, [r1, #56]	@ 0x38
 8008d98:	432a      	orrs	r2, r5
 8008d9a:	65a2      	str	r2, [r4, #88]	@ 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8008d9c:	681c      	ldr	r4, [r3, #0]
 8008d9e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8008da0:	4002      	ands	r2, r0
 8008da2:	65e2      	str	r2, [r4, #92]	@ 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8008da8:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8008daa:	4322      	orrs	r2, r4
 8008dac:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8008dae:	6818      	ldr	r0, [r3, #0]
 8008db0:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8008db2:	f36f 020d 	bfc	r2, #0, #14
 8008db6:	6602      	str	r2, [r0, #96]	@ 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8008db8:	6818      	ldr	r0, [r3, #0]
 8008dba:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8008dbc:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 8008dbe:	4322      	orrs	r2, r4
 8008dc0:	6602      	str	r2, [r0, #96]	@ 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8008dc2:	6818      	ldr	r0, [r3, #0]
 8008dc4:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008dc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008dca:	6382      	str	r2, [r0, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8008dcc:	6818      	ldr	r0, [r3, #0]
 8008dce:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008dd0:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 8008dd2:	4322      	orrs	r2, r4
 8008dd4:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8008dd6:	6818      	ldr	r0, [r3, #0]
 8008dd8:	6982      	ldr	r2, [r0, #24]
 8008dda:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 8008dde:	6182      	str	r2, [r0, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	6982      	ldr	r2, [r0, #24]
 8008de4:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 8008de6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008dea:	6182      	str	r2, [r0, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8008dec:	6818      	ldr	r0, [r3, #0]
 8008dee:	6982      	ldr	r2, [r0, #24]
 8008df0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008df4:	6182      	str	r2, [r0, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8008df6:	6818      	ldr	r0, [r3, #0]
 8008df8:	6982      	ldr	r2, [r0, #24]
 8008dfa:	6ccc      	ldr	r4, [r1, #76]	@ 0x4c
 8008dfc:	4322      	orrs	r2, r4
 8008dfe:	6182      	str	r2, [r0, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8008e00:	6818      	ldr	r0, [r3, #0]
 8008e02:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e08:	6382      	str	r2, [r0, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8008e0a:	6818      	ldr	r0, [r3, #0]
 8008e0c:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e0e:	6d0c      	ldr	r4, [r1, #80]	@ 0x50
 8008e10:	4322      	orrs	r2, r4
 8008e12:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8008e14:	6818      	ldr	r0, [r3, #0]
 8008e16:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e18:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e1c:	6382      	str	r2, [r0, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e22:	6d4c      	ldr	r4, [r1, #84]	@ 0x54
 8008e24:	4322      	orrs	r2, r4
 8008e26:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e30:	6382      	str	r2, [r0, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e36:	6d8c      	ldr	r4, [r1, #88]	@ 0x58
 8008e38:	4322      	orrs	r2, r4
 8008e3a:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e44:	6382      	str	r2, [r0, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8008e46:	6818      	ldr	r0, [r3, #0]
 8008e48:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e4a:	6dcc      	ldr	r4, [r1, #92]	@ 0x5c
 8008e4c:	4322      	orrs	r2, r4
 8008e4e:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e54:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008e58:	6382      	str	r2, [r0, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e5e:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8008e60:	4322      	orrs	r2, r4
 8008e62:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8008e64:	6818      	ldr	r0, [r3, #0]
 8008e66:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e6c:	6382      	str	r2, [r0, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e72:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 8008e74:	4322      	orrs	r2, r4
 8008e76:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8008e78:	6818      	ldr	r0, [r3, #0]
 8008e7a:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e7c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e80:	6382      	str	r2, [r0, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8008e82:	6818      	ldr	r0, [r3, #0]
 8008e84:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8008e86:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 8008e90:	bc30      	pop	{r4, r5}
 8008e92:	4770      	bx	lr
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	6902      	ldr	r2, [r0, #16]
 8008e98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e9c:	6102      	str	r2, [r0, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8008e9e:	6818      	ldr	r0, [r3, #0]
 8008ea0:	6902      	ldr	r2, [r0, #16]
 8008ea2:	688c      	ldr	r4, [r1, #8]
 8008ea4:	4322      	orrs	r2, r4
 8008ea6:	6102      	str	r2, [r0, #16]
 8008ea8:	e748      	b.n	8008d3c <HAL_DSI_ConfigVideoMode+0xe0>
  __HAL_LOCK(hdsi);
 8008eaa:	2002      	movs	r0, #2
}
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	ffffe000 	.word	0xffffe000
 8008eb4:	fffff000 	.word	0xfffff000
 8008eb8:	fffffc00 	.word	0xfffffc00

08008ebc <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008ebc:	7c03      	ldrb	r3, [r0, #16]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d00e      	beq.n	8008ee0 <HAL_DSI_ConfigFlowControl+0x24>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008ec6:	6802      	ldr	r2, [r0, #0]
 8008ec8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008eca:	f023 031f 	bic.w	r3, r3, #31
 8008ece:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8008ed0:	6802      	ldr	r2, [r0, #0]
 8008ed2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008ed4:	430b      	orrs	r3, r1
 8008ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008ed8:	2300      	movs	r3, #0
 8008eda:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008edc:	4618      	mov	r0, r3
 8008ede:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008ee0:	2002      	movs	r0, #2
}
 8008ee2:	4770      	bx	lr

08008ee4 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008ee4:	7c02      	ldrb	r2, [r0, #16]
 8008ee6:	2a01      	cmp	r2, #1
 8008ee8:	d021      	beq.n	8008f2e <HAL_DSI_Start+0x4a>
{
 8008eea:	b082      	sub	sp, #8
 8008eec:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008eee:	2201      	movs	r2, #1
 8008ef0:	7402      	strb	r2, [r0, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	9000      	str	r0, [sp, #0]
 8008ef6:	6819      	ldr	r1, [r3, #0]
 8008ef8:	684a      	ldr	r2, [r1, #4]
 8008efa:	f042 0201 	orr.w	r2, r2, #1
 8008efe:	604a      	str	r2, [r1, #4]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	6851      	ldr	r1, [r2, #4]
 8008f04:	f001 0101 	and.w	r1, r1, #1
 8008f08:	9100      	str	r1, [sp, #0]
 8008f0a:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8008f0c:	9001      	str	r0, [sp, #4]
 8008f0e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8008f12:	f041 0108 	orr.w	r1, r1, #8
 8008f16:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8008f20:	f002 0208 	and.w	r2, r2, #8
 8008f24:	9201      	str	r2, [sp, #4]
 8008f26:	9a01      	ldr	r2, [sp, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008f28:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 8008f2a:	b002      	add	sp, #8
 8008f2c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008f2e:	2002      	movs	r0, #2
}
 8008f30:	4770      	bx	lr

08008f32 <HAL_DSI_Stop>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f32:	7c02      	ldrb	r2, [r0, #16]
 8008f34:	2a01      	cmp	r2, #1
 8008f36:	d021      	beq.n	8008f7c <HAL_DSI_Stop+0x4a>
{
 8008f38:	b082      	sub	sp, #8
 8008f3a:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	7402      	strb	r2, [r0, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8008f40:	2000      	movs	r0, #0
 8008f42:	9000      	str	r0, [sp, #0]
 8008f44:	6819      	ldr	r1, [r3, #0]
 8008f46:	684a      	ldr	r2, [r1, #4]
 8008f48:	f022 0201 	bic.w	r2, r2, #1
 8008f4c:	604a      	str	r2, [r1, #4]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	6851      	ldr	r1, [r2, #4]
 8008f52:	f001 0101 	and.w	r1, r1, #1
 8008f56:	9100      	str	r1, [sp, #0]
 8008f58:	9900      	ldr	r1, [sp, #0]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8008f5a:	9001      	str	r0, [sp, #4]
 8008f5c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8008f60:	f021 0108 	bic.w	r1, r1, #8
 8008f64:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8008f6e:	f002 0208 	and.w	r2, r2, #8
 8008f72:	9201      	str	r2, [sp, #4]
 8008f74:	9a01      	ldr	r2, [sp, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008f76:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
}
 8008f78:	b002      	add	sp, #8
 8008f7a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008f7c:	2002      	movs	r0, #2
}
 8008f7e:	4770      	bx	lr

08008f80 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8008f80:	b510      	push	{r4, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f86:	7c00      	ldrb	r0, [r0, #16]
 8008f88:	2801      	cmp	r0, #1
 8008f8a:	d00a      	beq.n	8008fa2 <HAL_DSI_ShortWrite+0x22>
 8008f8c:	2001      	movs	r0, #1
 8008f8e:	7420      	strb	r0, [r4, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8008f90:	9804      	ldr	r0, [sp, #16]
 8008f92:	9000      	str	r0, [sp, #0]
 8008f94:	4620      	mov	r0, r4
 8008f96:	f7ff fcde 	bl	8008956 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	7423      	strb	r3, [r4, #16]

  return status;
}
 8008f9e:	b002      	add	sp, #8
 8008fa0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdsi);
 8008fa2:	2002      	movs	r0, #2
 8008fa4:	e7fb      	b.n	8008f9e <HAL_DSI_ShortWrite+0x1e>

08008fa6 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8008fa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	461d      	mov	r5, r3
 8008fae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008fb0:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008fb4:	7c03      	ldrb	r3, [r0, #16]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d053      	beq.n	8009062 <HAL_DSI_LongWrite+0xbc>
 8008fba:	4604      	mov	r4, r0
 8008fbc:	468a      	mov	sl, r1
 8008fbe:	4617      	mov	r7, r2
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8008fc4:	f7fe fdd6 	bl	8007b74 <HAL_GetTick>
 8008fc8:	4681      	mov	r9, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008fca:	6822      	ldr	r2, [r4, #0]
 8008fcc:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8008fce:	f013 0f01 	tst.w	r3, #1
 8008fd2:	d10a      	bne.n	8008fea <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008fd4:	f7fe fdce 	bl	8007b74 <HAL_GetTick>
 8008fd8:	eba0 0009 	sub.w	r0, r0, r9
 8008fdc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008fe0:	d9f3      	bls.n	8008fca <HAL_DSI_LongWrite+0x24>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	7423      	strb	r3, [r4, #16]

      return HAL_TIMEOUT;
 8008fe6:	2003      	movs	r0, #3
 8008fe8:	e038      	b.n	800905c <HAL_DSI_LongWrite+0xb6>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8008fea:	46ac      	mov	ip, r5
 8008fec:	2d03      	cmp	r5, #3
 8008fee:	bf28      	it	cs
 8008ff0:	f04f 0c03 	movcs.w	ip, #3

  for (count = 0U; count < nbBytes; count++)
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	e005      	b.n	8009004 <HAL_DSI_LongWrite+0x5e>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8008ff8:	f818 1003 	ldrb.w	r1, [r8, r3]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	00d8      	lsls	r0, r3, #3
 8009000:	4081      	lsls	r1, r0
 8009002:	430e      	orrs	r6, r1
  for (count = 0U; count < nbBytes; count++)
 8009004:	4563      	cmp	r3, ip
 8009006:	d3f7      	bcc.n	8008ff8 <HAL_DSI_LongWrite+0x52>
  }
  hdsi->Instance->GPDR = fifoword;
 8009008:	6716      	str	r6, [r2, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 800900a:	eba5 060c 	sub.w	r6, r5, ip
  pparams += nbBytes;
 800900e:	eb08 000c 	add.w	r0, r8, ip
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8009012:	e00f      	b.n	8009034 <HAL_DSI_LongWrite+0x8e>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009014:	f810 e00c 	ldrb.w	lr, [r0, ip]
 8009018:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800901c:	fa0e fe02 	lsl.w	lr, lr, r2
 8009020:	ea43 030e 	orr.w	r3, r3, lr
    for (count = 0U; count < nbBytes; count++)
 8009024:	f10c 0c01 	add.w	ip, ip, #1
 8009028:	458c      	cmp	ip, r1
 800902a:	d3f3      	bcc.n	8009014 <HAL_DSI_LongWrite+0x6e>
    }
    hdsi->Instance->GPDR = fifoword;
 800902c:	6822      	ldr	r2, [r4, #0]
 800902e:	6713      	str	r3, [r2, #112]	@ 0x70

    uicounter -= nbBytes;
 8009030:	1a76      	subs	r6, r6, r1
    pparams += nbBytes;
 8009032:	4408      	add	r0, r1
  while (uicounter != 0U)
 8009034:	b136      	cbz	r6, 8009044 <HAL_DSI_LongWrite+0x9e>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009036:	4631      	mov	r1, r6
 8009038:	2e04      	cmp	r6, #4
 800903a:	bf28      	it	cs
 800903c:	2104      	movcs	r1, #4
    fifoword = 0U;
 800903e:	2300      	movs	r3, #0
    for (count = 0U; count < nbBytes; count++)
 8009040:	469c      	mov	ip, r3
 8009042:	e7f1      	b.n	8009028 <HAL_DSI_LongWrite+0x82>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8009044:	1c6b      	adds	r3, r5, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009046:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800904a:	9200      	str	r2, [sp, #0]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	463a      	mov	r2, r7
 8009050:	4651      	mov	r1, sl
 8009052:	6820      	ldr	r0, [r4, #0]
 8009054:	f7ff fc76 	bl	8008944 <DSI_ConfigPacketHeader>
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009058:	2000      	movs	r0, #0
 800905a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800905c:	b002      	add	sp, #8
 800905e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8009062:	2002      	movs	r0, #2
 8009064:	e7fa      	b.n	800905c <HAL_DSI_LongWrite+0xb6>

08009066 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8009066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	461c      	mov	r4, r3
 800906e:	9f08      	ldr	r7, [sp, #32]
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009070:	7c03      	ldrb	r3, [r0, #16]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d07d      	beq.n	8009172 <HAL_DSI_Read+0x10c>
 8009076:	4606      	mov	r6, r0
 8009078:	4688      	mov	r8, r1
 800907a:	4615      	mov	r5, r2
 800907c:	2301      	movs	r3, #1
 800907e:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8009080:	2c02      	cmp	r4, #2
 8009082:	d82c      	bhi.n	80090de <HAL_DSI_Read+0x78>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8009084:	2f14      	cmp	r7, #20
 8009086:	d04c      	beq.n	8009122 <HAL_DSI_Read+0xbc>
 8009088:	d836      	bhi.n	80090f8 <HAL_DSI_Read+0x92>
 800908a:	2f04      	cmp	r7, #4
 800908c:	d041      	beq.n	8009112 <HAL_DSI_Read+0xac>
 800908e:	2f06      	cmp	r7, #6
 8009090:	d151      	bne.n	8009136 <HAL_DSI_Read+0xd0>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8009092:	2300      	movs	r3, #0
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009098:	463a      	mov	r2, r7
 800909a:	4641      	mov	r1, r8
 800909c:	6830      	ldr	r0, [r6, #0]
 800909e:	f7ff fc51 	bl	8008944 <DSI_ConfigPacketHeader>

    return HAL_ERROR;
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80090a2:	f7fe fd67 	bl	8007b74 <HAL_GetTick>
 80090a6:	4607      	mov	r7, r0

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 80090a8:	2c00      	cmp	r4, #0
 80090aa:	dd5d      	ble.n	8009168 <HAL_DSI_Read+0x102>
  {
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80090ac:	6833      	ldr	r3, [r6, #0]
 80090ae:	6f59      	ldr	r1, [r3, #116]	@ 0x74
 80090b0:	f011 0110 	ands.w	r1, r1, #16
 80090b4:	d043      	beq.n	800913e <HAL_DSI_Read+0xd8>
        datasize--;
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80090b6:	f7fe fd5d 	bl	8007b74 <HAL_GetTick>
 80090ba:	1bc0      	subs	r0, r0, r7
 80090bc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80090c0:	d84e      	bhi.n	8009160 <HAL_DSI_Read+0xfa>

    /* Software workaround to avoid HAL_TIMEOUT when a DSI read command is   */
    /* issued to the panel and the read data is not captured by the DSI Host */
    /* which returns Packet Size Error.                                      */
    /* Need to ensure that the Read command has finished before checking PSE */
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 80090c2:	6833      	ldr	r3, [r6, #0]
 80090c4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80090c6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80090ca:	d1ed      	bne.n	80090a8 <HAL_DSI_Read+0x42>
    {
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 80090cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80090d0:	f013 0f20 	tst.w	r3, #32
 80090d4:	d0e8      	beq.n	80090a8 <HAL_DSI_Read+0x42>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80090d6:	2300      	movs	r3, #0
 80090d8:	7433      	strb	r3, [r6, #16]

        return HAL_ERROR;
 80090da:	2001      	movs	r0, #1
 80090dc:	e046      	b.n	800916c <HAL_DSI_Read+0x106>
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 80090de:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	b2e3      	uxtb	r3, r4
 80090e6:	2237      	movs	r2, #55	@ 0x37
 80090e8:	f7ff fc35 	bl	8008956 <DSI_ShortWrite>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d0c9      	beq.n	8009084 <HAL_DSI_Read+0x1e>
      __HAL_UNLOCK(hdsi);
 80090f0:	2300      	movs	r3, #0
 80090f2:	7433      	strb	r3, [r6, #16]
      return HAL_ERROR;
 80090f4:	2001      	movs	r0, #1
 80090f6:	e039      	b.n	800916c <HAL_DSI_Read+0x106>
 80090f8:	2f24      	cmp	r7, #36	@ 0x24
 80090fa:	d11c      	bne.n	8009136 <HAL_DSI_Read+0xd0>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80090fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	463a      	mov	r2, r7
 8009108:	4641      	mov	r1, r8
 800910a:	6830      	ldr	r0, [r6, #0]
 800910c:	f7ff fc1a 	bl	8008944 <DSI_ConfigPacketHeader>
 8009110:	e7c7      	b.n	80090a2 <HAL_DSI_Read+0x3c>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8009112:	2300      	movs	r3, #0
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	463a      	mov	r2, r7
 8009118:	4641      	mov	r1, r8
 800911a:	6830      	ldr	r0, [r6, #0]
 800911c:	f7ff fc12 	bl	8008944 <DSI_ConfigPacketHeader>
 8009120:	e7bf      	b.n	80090a2 <HAL_DSI_Read+0x3c>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8009122:	2300      	movs	r3, #0
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	463a      	mov	r2, r7
 800912c:	4641      	mov	r1, r8
 800912e:	6830      	ldr	r0, [r6, #0]
 8009130:	f7ff fc08 	bl	8008944 <DSI_ConfigPacketHeader>
 8009134:	e7b5      	b.n	80090a2 <HAL_DSI_Read+0x3c>
    __HAL_UNLOCK(hdsi);
 8009136:	2300      	movs	r3, #0
 8009138:	7433      	strb	r3, [r6, #16]
    return HAL_ERROR;
 800913a:	2001      	movs	r0, #1
 800913c:	e016      	b.n	800916c <HAL_DSI_Read+0x106>
      fifoword = hdsi->Instance->GPDR;
 800913e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8009140:	4623      	mov	r3, r4
 8009142:	2c04      	cmp	r4, #4
 8009144:	bf28      	it	cs
 8009146:	2304      	movcs	r3, #4
      for (count = 0U; count < nbbytes; count++)
 8009148:	e007      	b.n	800915a <HAL_DSI_Read+0xf4>
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800914a:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 800914e:	fa22 fc0c 	lsr.w	ip, r2, ip
 8009152:	f805 cb01 	strb.w	ip, [r5], #1
        datasize--;
 8009156:	3c01      	subs	r4, #1
      for (count = 0U; count < nbbytes; count++)
 8009158:	3101      	adds	r1, #1
 800915a:	4299      	cmp	r1, r3
 800915c:	d3f5      	bcc.n	800914a <HAL_DSI_Read+0xe4>
 800915e:	e7aa      	b.n	80090b6 <HAL_DSI_Read+0x50>
      __HAL_UNLOCK(hdsi);
 8009160:	2300      	movs	r3, #0
 8009162:	7433      	strb	r3, [r6, #16]
      return HAL_TIMEOUT;
 8009164:	2003      	movs	r0, #3
 8009166:	e001      	b.n	800916c <HAL_DSI_Read+0x106>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009168:	2000      	movs	r0, #0
 800916a:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
}
 800916c:	b002      	add	sp, #8
 800916e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 8009172:	2002      	movs	r0, #2
 8009174:	e7fa      	b.n	800916c <HAL_DSI_Read+0x106>
	...

08009178 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8009178:	2300      	movs	r3, #0
 800917a:	2b0f      	cmp	r3, #15
 800917c:	f200 80f4 	bhi.w	8009368 <HAL_GPIO_Init+0x1f0>
{
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	e066      	b.n	8009254 <HAL_GPIO_Init+0xdc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009186:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009188:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800918c:	2403      	movs	r4, #3
 800918e:	fa04 f40e 	lsl.w	r4, r4, lr
 8009192:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8009196:	68cc      	ldr	r4, [r1, #12]
 8009198:	fa04 f40e 	lsl.w	r4, r4, lr
 800919c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800919e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80091a0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80091a2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80091a6:	684a      	ldr	r2, [r1, #4]
 80091a8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80091ac:	409a      	lsls	r2, r3
 80091ae:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80091b0:	6042      	str	r2, [r0, #4]
 80091b2:	e05d      	b.n	8009270 <HAL_GPIO_Init+0xf8>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80091b4:	08dc      	lsrs	r4, r3, #3
 80091b6:	3408      	adds	r4, #8
 80091b8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80091bc:	f003 0507 	and.w	r5, r3, #7
 80091c0:	00ad      	lsls	r5, r5, #2
 80091c2:	f04f 0e0f 	mov.w	lr, #15
 80091c6:	fa0e fe05 	lsl.w	lr, lr, r5
 80091ca:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80091ce:	690a      	ldr	r2, [r1, #16]
 80091d0:	40aa      	lsls	r2, r5
 80091d2:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 80091d6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80091da:	e05d      	b.n	8009298 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80091dc:	2209      	movs	r2, #9
 80091de:	e000      	b.n	80091e2 <HAL_GPIO_Init+0x6a>
 80091e0:	2200      	movs	r2, #0
 80091e2:	fa02 f20e 	lsl.w	r2, r2, lr
 80091e6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 80091e8:	3402      	adds	r4, #2
 80091ea:	4d60      	ldr	r5, [pc, #384]	@ (800936c <HAL_GPIO_Init+0x1f4>)
 80091ec:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80091f0:	4a5f      	ldr	r2, [pc, #380]	@ (8009370 <HAL_GPIO_Init+0x1f8>)
 80091f2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80091f4:	ea6f 020c 	mvn.w	r2, ip
 80091f8:	ea24 050c 	bic.w	r5, r4, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80091fc:	684e      	ldr	r6, [r1, #4]
 80091fe:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8009202:	d001      	beq.n	8009208 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8009204:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8009208:	4c59      	ldr	r4, [pc, #356]	@ (8009370 <HAL_GPIO_Init+0x1f8>)
 800920a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800920c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800920e:	ea02 0504 	and.w	r5, r2, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009212:	684e      	ldr	r6, [r1, #4]
 8009214:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8009218:	d001      	beq.n	800921e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800921a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800921e:	4c54      	ldr	r4, [pc, #336]	@ (8009370 <HAL_GPIO_Init+0x1f8>)
 8009220:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8009222:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8009224:	ea02 0504 	and.w	r5, r2, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009228:	684e      	ldr	r6, [r1, #4]
 800922a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800922e:	d001      	beq.n	8009234 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8009230:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8009234:	4c4e      	ldr	r4, [pc, #312]	@ (8009370 <HAL_GPIO_Init+0x1f8>)
 8009236:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009238:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800923a:	4022      	ands	r2, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800923c:	684d      	ldr	r5, [r1, #4]
 800923e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8009242:	d001      	beq.n	8009248 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8009244:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8009248:	4c49      	ldr	r4, [pc, #292]	@ (8009370 <HAL_GPIO_Init+0x1f8>)
 800924a:	6022      	str	r2, [r4, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800924c:	3301      	adds	r3, #1
 800924e:	2b0f      	cmp	r3, #15
 8009250:	f200 8088 	bhi.w	8009364 <HAL_GPIO_Init+0x1ec>
    ioposition = ((uint32_t)0x01) << position;
 8009254:	2201      	movs	r2, #1
 8009256:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009258:	680c      	ldr	r4, [r1, #0]
 800925a:	ea04 0c02 	and.w	ip, r4, r2
    if (iocurrent == ioposition)
 800925e:	ea32 0404 	bics.w	r4, r2, r4
 8009262:	d1f3      	bne.n	800924c <HAL_GPIO_Init+0xd4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009264:	684c      	ldr	r4, [r1, #4]
 8009266:	f004 0403 	and.w	r4, r4, #3
 800926a:	3c01      	subs	r4, #1
 800926c:	2c01      	cmp	r4, #1
 800926e:	d98a      	bls.n	8009186 <HAL_GPIO_Init+0xe>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009270:	684a      	ldr	r2, [r1, #4]
 8009272:	f002 0203 	and.w	r2, r2, #3
 8009276:	2a03      	cmp	r2, #3
 8009278:	d009      	beq.n	800928e <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 800927a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800927c:	005d      	lsls	r5, r3, #1
 800927e:	2203      	movs	r2, #3
 8009280:	40aa      	lsls	r2, r5
 8009282:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009286:	688a      	ldr	r2, [r1, #8]
 8009288:	40aa      	lsls	r2, r5
 800928a:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800928c:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800928e:	684a      	ldr	r2, [r1, #4]
 8009290:	f002 0203 	and.w	r2, r2, #3
 8009294:	2a02      	cmp	r2, #2
 8009296:	d08d      	beq.n	80091b4 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8009298:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800929a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800929e:	2203      	movs	r2, #3
 80092a0:	fa02 f20e 	lsl.w	r2, r2, lr
 80092a4:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80092a8:	684a      	ldr	r2, [r1, #4]
 80092aa:	f002 0203 	and.w	r2, r2, #3
 80092ae:	fa02 f20e 	lsl.w	r2, r2, lr
 80092b2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80092b4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80092b6:	684a      	ldr	r2, [r1, #4]
 80092b8:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80092bc:	d0c6      	beq.n	800924c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092be:	4a2d      	ldr	r2, [pc, #180]	@ (8009374 <HAL_GPIO_Init+0x1fc>)
 80092c0:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80092c2:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80092c6:	6454      	str	r4, [r2, #68]	@ 0x44
 80092c8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80092ca:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80092ce:	9201      	str	r2, [sp, #4]
 80092d0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80092d2:	089c      	lsrs	r4, r3, #2
 80092d4:	1ca5      	adds	r5, r4, #2
 80092d6:	4a25      	ldr	r2, [pc, #148]	@ (800936c <HAL_GPIO_Init+0x1f4>)
 80092d8:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80092dc:	f003 0e03 	and.w	lr, r3, #3
 80092e0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80092e4:	220f      	movs	r2, #15
 80092e6:	fa02 f20e 	lsl.w	r2, r2, lr
 80092ea:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80092ee:	4a22      	ldr	r2, [pc, #136]	@ (8009378 <HAL_GPIO_Init+0x200>)
 80092f0:	4290      	cmp	r0, r2
 80092f2:	f43f af75 	beq.w	80091e0 <HAL_GPIO_Init+0x68>
 80092f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80092fa:	4290      	cmp	r0, r2
 80092fc:	d022      	beq.n	8009344 <HAL_GPIO_Init+0x1cc>
 80092fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009302:	4290      	cmp	r0, r2
 8009304:	d020      	beq.n	8009348 <HAL_GPIO_Init+0x1d0>
 8009306:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800930a:	4290      	cmp	r0, r2
 800930c:	d01e      	beq.n	800934c <HAL_GPIO_Init+0x1d4>
 800930e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009312:	4290      	cmp	r0, r2
 8009314:	d01c      	beq.n	8009350 <HAL_GPIO_Init+0x1d8>
 8009316:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800931a:	4290      	cmp	r0, r2
 800931c:	d01a      	beq.n	8009354 <HAL_GPIO_Init+0x1dc>
 800931e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009322:	4290      	cmp	r0, r2
 8009324:	d018      	beq.n	8009358 <HAL_GPIO_Init+0x1e0>
 8009326:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800932a:	4290      	cmp	r0, r2
 800932c:	d016      	beq.n	800935c <HAL_GPIO_Init+0x1e4>
 800932e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009332:	4290      	cmp	r0, r2
 8009334:	d014      	beq.n	8009360 <HAL_GPIO_Init+0x1e8>
 8009336:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800933a:	4290      	cmp	r0, r2
 800933c:	f43f af4e 	beq.w	80091dc <HAL_GPIO_Init+0x64>
 8009340:	220a      	movs	r2, #10
 8009342:	e74e      	b.n	80091e2 <HAL_GPIO_Init+0x6a>
 8009344:	2201      	movs	r2, #1
 8009346:	e74c      	b.n	80091e2 <HAL_GPIO_Init+0x6a>
 8009348:	2202      	movs	r2, #2
 800934a:	e74a      	b.n	80091e2 <HAL_GPIO_Init+0x6a>
 800934c:	2203      	movs	r2, #3
 800934e:	e748      	b.n	80091e2 <HAL_GPIO_Init+0x6a>
 8009350:	2204      	movs	r2, #4
 8009352:	e746      	b.n	80091e2 <HAL_GPIO_Init+0x6a>
 8009354:	2205      	movs	r2, #5
 8009356:	e744      	b.n	80091e2 <HAL_GPIO_Init+0x6a>
 8009358:	2206      	movs	r2, #6
 800935a:	e742      	b.n	80091e2 <HAL_GPIO_Init+0x6a>
 800935c:	2207      	movs	r2, #7
 800935e:	e740      	b.n	80091e2 <HAL_GPIO_Init+0x6a>
 8009360:	2208      	movs	r2, #8
 8009362:	e73e      	b.n	80091e2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8009364:	b002      	add	sp, #8
 8009366:	bd70      	pop	{r4, r5, r6, pc}
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	40013800 	.word	0x40013800
 8009370:	40013c00 	.word	0x40013c00
 8009374:	40023800 	.word	0x40023800
 8009378:	40020000 	.word	0x40020000

0800937c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800937c:	6903      	ldr	r3, [r0, #16]
 800937e:	4219      	tst	r1, r3
 8009380:	d001      	beq.n	8009386 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8009382:	2001      	movs	r0, #1
 8009384:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009386:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8009388:	4770      	bx	lr

0800938a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800938a:	b10a      	cbz	r2, 8009390 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800938c:	6181      	str	r1, [r0, #24]
 800938e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009390:	0409      	lsls	r1, r1, #16
 8009392:	6181      	str	r1, [r0, #24]
  }
}
 8009394:	4770      	bx	lr

08009396 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009396:	4770      	bx	lr

08009398 <HAL_GPIO_EXTI_IRQHandler>:
{
 8009398:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800939a:	4b05      	ldr	r3, [pc, #20]	@ (80093b0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	4203      	tst	r3, r0
 80093a0:	d100      	bne.n	80093a4 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80093a2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80093a4:	4b02      	ldr	r3, [pc, #8]	@ (80093b0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80093a6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80093a8:	f7ff fff5 	bl	8009396 <HAL_GPIO_EXTI_Callback>
}
 80093ac:	e7f9      	b.n	80093a2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80093ae:	bf00      	nop
 80093b0:	40013c00 	.word	0x40013c00

080093b4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80093b4:	6803      	ldr	r3, [r0, #0]
 80093b6:	699a      	ldr	r2, [r3, #24]
 80093b8:	f012 0f02 	tst.w	r2, #2
 80093bc:	d001      	beq.n	80093c2 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80093be:	2200      	movs	r2, #0
 80093c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093c2:	6803      	ldr	r3, [r0, #0]
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	f012 0f01 	tst.w	r2, #1
 80093ca:	d103      	bne.n	80093d4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80093cc:	699a      	ldr	r2, [r3, #24]
 80093ce:	f042 0201 	orr.w	r2, r2, #1
 80093d2:	619a      	str	r2, [r3, #24]
  }
}
 80093d4:	4770      	bx	lr

080093d6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80093d6:	b410      	push	{r4}
 80093d8:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093da:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80093de:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093e2:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093e4:	4321      	orrs	r1, r4
 80093e6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80093ea:	6802      	ldr	r2, [r0, #0]
 80093ec:	6853      	ldr	r3, [r2, #4]
 80093ee:	0d64      	lsrs	r4, r4, #21
 80093f0:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 80093f4:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 80093f8:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 80093fc:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8009400:	f044 0403 	orr.w	r4, r4, #3
 8009404:	ea23 0304 	bic.w	r3, r3, r4
 8009408:	430b      	orrs	r3, r1
 800940a:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800940c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009410:	4770      	bx	lr

08009412 <I2C_IsErrorOccurred>:
{
 8009412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009416:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8009418:	6803      	ldr	r3, [r0, #0]
 800941a:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800941c:	f016 0610 	ands.w	r6, r6, #16
 8009420:	d07e      	beq.n	8009520 <I2C_IsErrorOccurred+0x10e>
 8009422:	460d      	mov	r5, r1
 8009424:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009426:	2210      	movs	r2, #16
 8009428:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800942a:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 800942c:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	6998      	ldr	r0, [r3, #24]
 8009432:	f010 0f20 	tst.w	r0, #32
 8009436:	d132      	bne.n	800949e <I2C_IsErrorOccurred+0x8c>
 8009438:	bb8f      	cbnz	r7, 800949e <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 800943a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800943e:	d0f6      	beq.n	800942e <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009440:	f7fe fb98 	bl	8007b74 <HAL_GetTick>
 8009444:	eba0 0008 	sub.w	r0, r0, r8
 8009448:	42a8      	cmp	r0, r5
 800944a:	d801      	bhi.n	8009450 <I2C_IsErrorOccurred+0x3e>
 800944c:	2d00      	cmp	r5, #0
 800944e:	d1ee      	bne.n	800942e <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009450:	6821      	ldr	r1, [r4, #0]
 8009452:	684a      	ldr	r2, [r1, #4]
 8009454:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 8009458:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800945c:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800945e:	6988      	ldr	r0, [r1, #24]
 8009460:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8009464:	d004      	beq.n	8009470 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8009466:	3b20      	subs	r3, #32
 8009468:	bf18      	it	ne
 800946a:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 800946c:	b902      	cbnz	r2, 8009470 <I2C_IsErrorOccurred+0x5e>
 800946e:	b973      	cbnz	r3, 800948e <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	f013 0f20 	tst.w	r3, #32
 8009478:	d1d9      	bne.n	800942e <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800947a:	f7fe fb7b 	bl	8007b74 <HAL_GetTick>
 800947e:	eba0 0008 	sub.w	r0, r0, r8
 8009482:	2819      	cmp	r0, #25
 8009484:	d9f4      	bls.n	8009470 <I2C_IsErrorOccurred+0x5e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009486:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 800948a:	2701      	movs	r7, #1
              break;
 800948c:	e7cf      	b.n	800942e <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800948e:	684b      	ldr	r3, [r1, #4]
 8009490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009494:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8009496:	f7fe fb6d 	bl	8007b74 <HAL_GetTick>
 800949a:	4680      	mov	r8, r0
 800949c:	e7e8      	b.n	8009470 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 800949e:	b90f      	cbnz	r7, 80094a4 <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094a0:	2220      	movs	r2, #32
 80094a2:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80094a4:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80094a8:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 80094aa:	6822      	ldr	r2, [r4, #0]
 80094ac:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80094ae:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80094b2:	d005      	beq.n	80094c0 <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 80094b4:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80094b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80094bc:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80094be:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80094c0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80094c4:	d006      	beq.n	80094d4 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 80094c6:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80094ca:	6822      	ldr	r2, [r4, #0]
 80094cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80094d0:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80094d2:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80094d4:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80094d8:	d024      	beq.n	8009524 <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 80094da:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094e4:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80094e6:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80094e8:	4620      	mov	r0, r4
 80094ea:	f7ff ff63 	bl	80093b4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80094ee:	6822      	ldr	r2, [r4, #0]
 80094f0:	6853      	ldr	r3, [r2, #4]
 80094f2:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80094f6:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80094fa:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80094fe:	f023 0301 	bic.w	r3, r3, #1
 8009502:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8009504:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009506:	4333      	orrs	r3, r6
 8009508:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800950a:	2320      	movs	r3, #32
 800950c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009510:	2300      	movs	r3, #0
 8009512:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8009516:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800951a:	4628      	mov	r0, r5
 800951c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8009520:	2500      	movs	r5, #0
 8009522:	e7c2      	b.n	80094aa <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 8009524:	2d00      	cmp	r5, #0
 8009526:	d0f8      	beq.n	800951a <I2C_IsErrorOccurred+0x108>
 8009528:	e7de      	b.n	80094e8 <I2C_IsErrorOccurred+0xd6>

0800952a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800952a:	b570      	push	{r4, r5, r6, lr}
 800952c:	4604      	mov	r4, r0
 800952e:	460d      	mov	r5, r1
 8009530:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	f013 0f02 	tst.w	r3, #2
 800953a:	d122      	bne.n	8009582 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800953c:	4632      	mov	r2, r6
 800953e:	4629      	mov	r1, r5
 8009540:	4620      	mov	r0, r4
 8009542:	f7ff ff66 	bl	8009412 <I2C_IsErrorOccurred>
 8009546:	b9f0      	cbnz	r0, 8009586 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8009548:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800954c:	d0f1      	beq.n	8009532 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800954e:	f7fe fb11 	bl	8007b74 <HAL_GetTick>
 8009552:	1b80      	subs	r0, r0, r6
 8009554:	42a8      	cmp	r0, r5
 8009556:	d801      	bhi.n	800955c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8009558:	2d00      	cmp	r5, #0
 800955a:	d1ea      	bne.n	8009532 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800955c:	6823      	ldr	r3, [r4, #0]
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	f013 0f02 	tst.w	r3, #2
 8009564:	d1e5      	bne.n	8009532 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009566:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009568:	f043 0320 	orr.w	r3, r3, #32
 800956c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800956e:	2320      	movs	r3, #32
 8009570:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009574:	2300      	movs	r3, #0
 8009576:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800957a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 800957e:	2001      	movs	r0, #1
 8009580:	e000      	b.n	8009584 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 8009582:	2000      	movs	r0, #0
}
 8009584:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009586:	2001      	movs	r0, #1
 8009588:	e7fc      	b.n	8009584 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

0800958a <I2C_WaitOnFlagUntilTimeout>:
{
 800958a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800958e:	4605      	mov	r5, r0
 8009590:	4688      	mov	r8, r1
 8009592:	4617      	mov	r7, r2
 8009594:	461e      	mov	r6, r3
 8009596:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800959a:	682b      	ldr	r3, [r5, #0]
 800959c:	699c      	ldr	r4, [r3, #24]
 800959e:	ea38 0404 	bics.w	r4, r8, r4
 80095a2:	bf0c      	ite	eq
 80095a4:	2301      	moveq	r3, #1
 80095a6:	2300      	movne	r3, #0
 80095a8:	42bb      	cmp	r3, r7
 80095aa:	d127      	bne.n	80095fc <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80095ac:	464a      	mov	r2, r9
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	f7ff ff2e 	bl	8009412 <I2C_IsErrorOccurred>
 80095b6:	bb20      	cbnz	r0, 8009602 <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 80095b8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80095bc:	d0ed      	beq.n	800959a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095be:	f7fe fad9 	bl	8007b74 <HAL_GetTick>
 80095c2:	eba0 0009 	sub.w	r0, r0, r9
 80095c6:	42b0      	cmp	r0, r6
 80095c8:	d801      	bhi.n	80095ce <I2C_WaitOnFlagUntilTimeout+0x44>
 80095ca:	2e00      	cmp	r6, #0
 80095cc:	d1e5      	bne.n	800959a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80095ce:	682b      	ldr	r3, [r5, #0]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	ea38 0303 	bics.w	r3, r8, r3
 80095d6:	bf0c      	ite	eq
 80095d8:	2301      	moveq	r3, #1
 80095da:	2300      	movne	r3, #0
 80095dc:	42bb      	cmp	r3, r7
 80095de:	d1dc      	bne.n	800959a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095e0:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80095e2:	f043 0320 	orr.w	r3, r3, #32
 80095e6:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80095e8:	2320      	movs	r3, #32
 80095ea:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ee:	2300      	movs	r3, #0
 80095f0:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80095f4:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80095f8:	2001      	movs	r0, #1
 80095fa:	e000      	b.n	80095fe <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 80095fc:	2000      	movs	r0, #0
}
 80095fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8009602:	2001      	movs	r0, #1
 8009604:	e7fb      	b.n	80095fe <I2C_WaitOnFlagUntilTimeout+0x74>
	...

08009608 <I2C_RequestMemoryWrite>:
{
 8009608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800960c:	b082      	sub	sp, #8
 800960e:	4604      	mov	r4, r0
 8009610:	4690      	mov	r8, r2
 8009612:	461d      	mov	r5, r3
 8009614:	9e08      	ldr	r6, [sp, #32]
 8009616:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009618:	4b19      	ldr	r3, [pc, #100]	@ (8009680 <I2C_RequestMemoryWrite+0x78>)
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009620:	b2ea      	uxtb	r2, r5
 8009622:	f7ff fed8 	bl	80093d6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009626:	463a      	mov	r2, r7
 8009628:	4631      	mov	r1, r6
 800962a:	4620      	mov	r0, r4
 800962c:	f7ff ff7d 	bl	800952a <I2C_WaitOnTXISFlagUntilTimeout>
 8009630:	b9f8      	cbnz	r0, 8009672 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009632:	2d01      	cmp	r5, #1
 8009634:	d10e      	bne.n	8009654 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	fa5f f288 	uxtb.w	r2, r8
 800963c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800963e:	9700      	str	r7, [sp, #0]
 8009640:	4633      	mov	r3, r6
 8009642:	2200      	movs	r2, #0
 8009644:	2180      	movs	r1, #128	@ 0x80
 8009646:	4620      	mov	r0, r4
 8009648:	f7ff ff9f 	bl	800958a <I2C_WaitOnFlagUntilTimeout>
 800964c:	b9a8      	cbnz	r0, 800967a <I2C_RequestMemoryWrite+0x72>
}
 800964e:	b002      	add	sp, #8
 8009650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800965a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800965c:	463a      	mov	r2, r7
 800965e:	4631      	mov	r1, r6
 8009660:	4620      	mov	r0, r4
 8009662:	f7ff ff62 	bl	800952a <I2C_WaitOnTXISFlagUntilTimeout>
 8009666:	b930      	cbnz	r0, 8009676 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	fa5f f288 	uxtb.w	r2, r8
 800966e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009670:	e7e5      	b.n	800963e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8009672:	2001      	movs	r0, #1
 8009674:	e7eb      	b.n	800964e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8009676:	2001      	movs	r0, #1
 8009678:	e7e9      	b.n	800964e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800967a:	2001      	movs	r0, #1
 800967c:	e7e7      	b.n	800964e <I2C_RequestMemoryWrite+0x46>
 800967e:	bf00      	nop
 8009680:	80002000 	.word	0x80002000

08009684 <I2C_RequestMemoryRead>:
{
 8009684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009688:	b082      	sub	sp, #8
 800968a:	4604      	mov	r4, r0
 800968c:	4690      	mov	r8, r2
 800968e:	461d      	mov	r5, r3
 8009690:	9e08      	ldr	r6, [sp, #32]
 8009692:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009694:	4b18      	ldr	r3, [pc, #96]	@ (80096f8 <I2C_RequestMemoryRead+0x74>)
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	2300      	movs	r3, #0
 800969a:	b2ea      	uxtb	r2, r5
 800969c:	f7ff fe9b 	bl	80093d6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096a0:	463a      	mov	r2, r7
 80096a2:	4631      	mov	r1, r6
 80096a4:	4620      	mov	r0, r4
 80096a6:	f7ff ff40 	bl	800952a <I2C_WaitOnTXISFlagUntilTimeout>
 80096aa:	b9f8      	cbnz	r0, 80096ec <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096ac:	2d01      	cmp	r5, #1
 80096ae:	d10e      	bne.n	80096ce <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	fa5f f288 	uxtb.w	r2, r8
 80096b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80096b8:	9700      	str	r7, [sp, #0]
 80096ba:	4633      	mov	r3, r6
 80096bc:	2200      	movs	r2, #0
 80096be:	2140      	movs	r1, #64	@ 0x40
 80096c0:	4620      	mov	r0, r4
 80096c2:	f7ff ff62 	bl	800958a <I2C_WaitOnFlagUntilTimeout>
 80096c6:	b9a8      	cbnz	r0, 80096f4 <I2C_RequestMemoryRead+0x70>
}
 80096c8:	b002      	add	sp, #8
 80096ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80096d4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096d6:	463a      	mov	r2, r7
 80096d8:	4631      	mov	r1, r6
 80096da:	4620      	mov	r0, r4
 80096dc:	f7ff ff25 	bl	800952a <I2C_WaitOnTXISFlagUntilTimeout>
 80096e0:	b930      	cbnz	r0, 80096f0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	fa5f f288 	uxtb.w	r2, r8
 80096e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80096ea:	e7e5      	b.n	80096b8 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80096ec:	2001      	movs	r0, #1
 80096ee:	e7eb      	b.n	80096c8 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 80096f0:	2001      	movs	r0, #1
 80096f2:	e7e9      	b.n	80096c8 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 80096f4:	2001      	movs	r0, #1
 80096f6:	e7e7      	b.n	80096c8 <I2C_RequestMemoryRead+0x44>
 80096f8:	80002000 	.word	0x80002000

080096fc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	4604      	mov	r4, r0
 8009700:	460d      	mov	r5, r1
 8009702:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009704:	e004      	b.n	8009710 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	f013 0f20 	tst.w	r3, #32
 800970e:	d012      	beq.n	8009736 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	f013 0f20 	tst.w	r3, #32
 8009718:	d11b      	bne.n	8009752 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800971a:	4632      	mov	r2, r6
 800971c:	4629      	mov	r1, r5
 800971e:	4620      	mov	r0, r4
 8009720:	f7ff fe77 	bl	8009412 <I2C_IsErrorOccurred>
 8009724:	b9b8      	cbnz	r0, 8009756 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009726:	f7fe fa25 	bl	8007b74 <HAL_GetTick>
 800972a:	1b80      	subs	r0, r0, r6
 800972c:	42a8      	cmp	r0, r5
 800972e:	d8ea      	bhi.n	8009706 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8009730:	2d00      	cmp	r5, #0
 8009732:	d1ed      	bne.n	8009710 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8009734:	e7e7      	b.n	8009706 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009736:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009738:	f043 0320 	orr.w	r3, r3, #32
 800973c:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800973e:	2320      	movs	r3, #32
 8009740:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009744:	2300      	movs	r3, #0
 8009746:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800974a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 800974e:	2001      	movs	r0, #1
 8009750:	e000      	b.n	8009754 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 8009752:	2000      	movs	r0, #0
}
 8009754:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009756:	2001      	movs	r0, #1
 8009758:	e7fc      	b.n	8009754 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

0800975a <HAL_I2C_MspInit>:
}
 800975a:	4770      	bx	lr

0800975c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800975c:	2800      	cmp	r0, #0
 800975e:	d05d      	beq.n	800981c <HAL_I2C_Init+0xc0>
{
 8009760:	b510      	push	{r4, lr}
 8009762:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009764:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009768:	2b00      	cmp	r3, #0
 800976a:	d046      	beq.n	80097fa <HAL_I2C_Init+0x9e>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800976c:	2324      	movs	r3, #36	@ 0x24
 800976e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009772:	6822      	ldr	r2, [r4, #0]
 8009774:	6813      	ldr	r3, [r2, #0]
 8009776:	f023 0301 	bic.w	r3, r3, #1
 800977a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800977c:	6863      	ldr	r3, [r4, #4]
 800977e:	6822      	ldr	r2, [r4, #0]
 8009780:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8009784:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009786:	6822      	ldr	r2, [r4, #0]
 8009788:	6893      	ldr	r3, [r2, #8]
 800978a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800978e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009790:	68e3      	ldr	r3, [r4, #12]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d036      	beq.n	8009804 <HAL_I2C_Init+0xa8>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009796:	68a3      	ldr	r3, [r4, #8]
 8009798:	6822      	ldr	r2, [r4, #0]
 800979a:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 800979e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80097a0:	68e3      	ldr	r3, [r4, #12]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d034      	beq.n	8009810 <HAL_I2C_Init+0xb4>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80097a6:	6822      	ldr	r2, [r4, #0]
 80097a8:	6853      	ldr	r3, [r2, #4]
 80097aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80097ae:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80097b0:	6822      	ldr	r2, [r4, #0]
 80097b2:	6851      	ldr	r1, [r2, #4]
 80097b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009820 <HAL_I2C_Init+0xc4>)
 80097b6:	430b      	orrs	r3, r1
 80097b8:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80097ba:	6822      	ldr	r2, [r4, #0]
 80097bc:	68d3      	ldr	r3, [r2, #12]
 80097be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80097c2:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80097c4:	6923      	ldr	r3, [r4, #16]
 80097c6:	6962      	ldr	r2, [r4, #20]
 80097c8:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80097ca:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80097cc:	6822      	ldr	r2, [r4, #0]
 80097ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80097d2:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80097d4:	69e3      	ldr	r3, [r4, #28]
 80097d6:	6a21      	ldr	r1, [r4, #32]
 80097d8:	6822      	ldr	r2, [r4, #0]
 80097da:	430b      	orrs	r3, r1
 80097dc:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80097de:	6822      	ldr	r2, [r4, #0]
 80097e0:	6813      	ldr	r3, [r2, #0]
 80097e2:	f043 0301 	orr.w	r3, r3, #1
 80097e6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097e8:	2000      	movs	r0, #0
 80097ea:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80097ec:	2320      	movs	r3, #32
 80097ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80097f2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097f4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80097f8:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80097fa:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80097fe:	f7ff ffac 	bl	800975a <HAL_I2C_MspInit>
 8009802:	e7b3      	b.n	800976c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009804:	68a3      	ldr	r3, [r4, #8]
 8009806:	6822      	ldr	r2, [r4, #0]
 8009808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800980c:	6093      	str	r3, [r2, #8]
 800980e:	e7c7      	b.n	80097a0 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009810:	6822      	ldr	r2, [r4, #0]
 8009812:	6853      	ldr	r3, [r2, #4]
 8009814:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009818:	6053      	str	r3, [r2, #4]
 800981a:	e7c9      	b.n	80097b0 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 800981c:	2001      	movs	r0, #1
}
 800981e:	4770      	bx	lr
 8009820:	02008000 	.word	0x02008000

08009824 <HAL_I2C_MspDeInit>:
}
 8009824:	4770      	bx	lr

08009826 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8009826:	b1a8      	cbz	r0, 8009854 <HAL_I2C_DeInit+0x2e>
{
 8009828:	b510      	push	{r4, lr}
 800982a:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800982c:	2324      	movs	r3, #36	@ 0x24
 800982e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009832:	6802      	ldr	r2, [r0, #0]
 8009834:	6813      	ldr	r3, [r2, #0]
 8009836:	f023 0301 	bic.w	r3, r3, #1
 800983a:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800983c:	f7ff fff2 	bl	8009824 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009840:	2000      	movs	r0, #0
 8009842:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009844:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009848:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800984a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  __HAL_UNLOCK(hi2c);
 800984e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8009852:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009854:	2001      	movs	r0, #1
}
 8009856:	4770      	bx	lr

08009858 <HAL_I2C_Mem_Write>:
{
 8009858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	b083      	sub	sp, #12
 800985e:	460d      	mov	r5, r1
 8009860:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8009864:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009866:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800986a:	b2c9      	uxtb	r1, r1
 800986c:	2920      	cmp	r1, #32
 800986e:	f040 80bc 	bne.w	80099ea <HAL_I2C_Mem_Write+0x192>
 8009872:	4604      	mov	r4, r0
 8009874:	4690      	mov	r8, r2
 8009876:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8009878:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800987a:	f1ba 0f00 	cmp.w	sl, #0
 800987e:	bf18      	it	ne
 8009880:	2b00      	cmpne	r3, #0
 8009882:	d016      	beq.n	80098b2 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8009884:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009888:	2b01      	cmp	r3, #1
 800988a:	f000 80b2 	beq.w	80099f2 <HAL_I2C_Mem_Write+0x19a>
 800988e:	f04f 0b01 	mov.w	fp, #1
 8009892:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009896:	f7fe f96d 	bl	8007b74 <HAL_GetTick>
 800989a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800989c:	9000      	str	r0, [sp, #0]
 800989e:	2319      	movs	r3, #25
 80098a0:	465a      	mov	r2, fp
 80098a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80098a6:	4620      	mov	r0, r4
 80098a8:	f7ff fe6f 	bl	800958a <I2C_WaitOnFlagUntilTimeout>
 80098ac:	b130      	cbz	r0, 80098bc <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 80098ae:	2001      	movs	r0, #1
 80098b0:	e09c      	b.n	80099ec <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80098b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098b6:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 80098b8:	2001      	movs	r0, #1
 80098ba:	e097      	b.n	80099ec <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80098bc:	2321      	movs	r3, #33	@ 0x21
 80098be:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098c2:	2340      	movs	r3, #64	@ 0x40
 80098c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098c8:	2300      	movs	r3, #0
 80098ca:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80098cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80098ce:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80098d0:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80098d4:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80098d6:	9601      	str	r6, [sp, #4]
 80098d8:	9700      	str	r7, [sp, #0]
 80098da:	464b      	mov	r3, r9
 80098dc:	4642      	mov	r2, r8
 80098de:	4629      	mov	r1, r5
 80098e0:	4620      	mov	r0, r4
 80098e2:	f7ff fe91 	bl	8009608 <I2C_RequestMemoryWrite>
 80098e6:	b970      	cbnz	r0, 8009906 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098e8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	2bff      	cmp	r3, #255	@ 0xff
 80098ee:	d90f      	bls.n	8009910 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098f0:	22ff      	movs	r2, #255	@ 0xff
 80098f2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80098f4:	2300      	movs	r3, #0
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80098fc:	4629      	mov	r1, r5
 80098fe:	4620      	mov	r0, r4
 8009900:	f7ff fd69 	bl	80093d6 <I2C_TransferConfig>
 8009904:	e021      	b.n	800994a <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8009906:	2300      	movs	r3, #0
 8009908:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800990c:	4658      	mov	r0, fp
 800990e:	e06d      	b.n	80099ec <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8009910:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009912:	b292      	uxth	r2, r2
 8009914:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009916:	2300      	movs	r3, #0
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800991e:	b2d2      	uxtb	r2, r2
 8009920:	4629      	mov	r1, r5
 8009922:	4620      	mov	r0, r4
 8009924:	f7ff fd57 	bl	80093d6 <I2C_TransferConfig>
 8009928:	e00f      	b.n	800994a <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800992a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800992c:	b292      	uxth	r2, r2
 800992e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009930:	2300      	movs	r3, #0
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009938:	b2d2      	uxtb	r2, r2
 800993a:	4629      	mov	r1, r5
 800993c:	4620      	mov	r0, r4
 800993e:	f7ff fd4a 	bl	80093d6 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009942:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009944:	b29b      	uxth	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d033      	beq.n	80099b2 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800994a:	4632      	mov	r2, r6
 800994c:	4639      	mov	r1, r7
 800994e:	4620      	mov	r0, r4
 8009950:	f7ff fdeb 	bl	800952a <I2C_WaitOnTXISFlagUntilTimeout>
 8009954:	2800      	cmp	r0, #0
 8009956:	d14e      	bne.n	80099f6 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009958:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	7812      	ldrb	r2, [r2, #0]
 800995e:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009960:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009962:	3301      	adds	r3, #1
 8009964:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009966:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009968:	b29b      	uxth	r3, r3
 800996a:	3b01      	subs	r3, #1
 800996c:	b29b      	uxth	r3, r3
 800996e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009970:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8009972:	3b01      	subs	r3, #1
 8009974:	b29b      	uxth	r3, r3
 8009976:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009978:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800997a:	b292      	uxth	r2, r2
 800997c:	2a00      	cmp	r2, #0
 800997e:	d0e0      	beq.n	8009942 <HAL_I2C_Mem_Write+0xea>
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1de      	bne.n	8009942 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009984:	9600      	str	r6, [sp, #0]
 8009986:	463b      	mov	r3, r7
 8009988:	2200      	movs	r2, #0
 800998a:	2180      	movs	r1, #128	@ 0x80
 800998c:	4620      	mov	r0, r4
 800998e:	f7ff fdfc 	bl	800958a <I2C_WaitOnFlagUntilTimeout>
 8009992:	bb90      	cbnz	r0, 80099fa <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009994:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009996:	b29b      	uxth	r3, r3
 8009998:	2bff      	cmp	r3, #255	@ 0xff
 800999a:	d9c6      	bls.n	800992a <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800999c:	22ff      	movs	r2, #255	@ 0xff
 800999e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80099a0:	2300      	movs	r3, #0
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80099a8:	4629      	mov	r1, r5
 80099aa:	4620      	mov	r0, r4
 80099ac:	f7ff fd13 	bl	80093d6 <I2C_TransferConfig>
 80099b0:	e7c7      	b.n	8009942 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099b2:	4632      	mov	r2, r6
 80099b4:	4639      	mov	r1, r7
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff fea0 	bl	80096fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80099bc:	b9f8      	cbnz	r0, 80099fe <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	2220      	movs	r2, #32
 80099c2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80099c4:	6821      	ldr	r1, [r4, #0]
 80099c6:	684b      	ldr	r3, [r1, #4]
 80099c8:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80099cc:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80099d0:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80099d4:	f023 0301 	bic.w	r3, r3, #1
 80099d8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80099da:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80099de:	2300      	movs	r3, #0
 80099e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80099e4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 80099e8:	e000      	b.n	80099ec <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 80099ea:	2002      	movs	r0, #2
}
 80099ec:	b003      	add	sp, #12
 80099ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80099f2:	2002      	movs	r0, #2
 80099f4:	e7fa      	b.n	80099ec <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 80099f6:	2001      	movs	r0, #1
 80099f8:	e7f8      	b.n	80099ec <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 80099fa:	2001      	movs	r0, #1
 80099fc:	e7f6      	b.n	80099ec <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 80099fe:	2001      	movs	r0, #1
 8009a00:	e7f4      	b.n	80099ec <HAL_I2C_Mem_Write+0x194>
	...

08009a04 <HAL_I2C_Mem_Read>:
{
 8009a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a08:	b083      	sub	sp, #12
 8009a0a:	460d      	mov	r5, r1
 8009a0c:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8009a10:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a12:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8009a16:	b2c9      	uxtb	r1, r1
 8009a18:	2920      	cmp	r1, #32
 8009a1a:	f040 80bd 	bne.w	8009b98 <HAL_I2C_Mem_Read+0x194>
 8009a1e:	4604      	mov	r4, r0
 8009a20:	4690      	mov	r8, r2
 8009a22:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8009a24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a26:	f1ba 0f00 	cmp.w	sl, #0
 8009a2a:	bf18      	it	ne
 8009a2c:	2b00      	cmpne	r3, #0
 8009a2e:	d016      	beq.n	8009a5e <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8009a30:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	f000 80b3 	beq.w	8009ba0 <HAL_I2C_Mem_Read+0x19c>
 8009a3a:	f04f 0b01 	mov.w	fp, #1
 8009a3e:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009a42:	f7fe f897 	bl	8007b74 <HAL_GetTick>
 8009a46:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a48:	9000      	str	r0, [sp, #0]
 8009a4a:	2319      	movs	r3, #25
 8009a4c:	465a      	mov	r2, fp
 8009a4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009a52:	4620      	mov	r0, r4
 8009a54:	f7ff fd99 	bl	800958a <I2C_WaitOnFlagUntilTimeout>
 8009a58:	b130      	cbz	r0, 8009a68 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	e09d      	b.n	8009b9a <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009a5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a62:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 8009a64:	2001      	movs	r0, #1
 8009a66:	e098      	b.n	8009b9a <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a68:	2322      	movs	r3, #34	@ 0x22
 8009a6a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a6e:	2340      	movs	r3, #64	@ 0x40
 8009a70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a74:	2300      	movs	r3, #0
 8009a76:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8009a78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009a7a:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009a7c:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009a80:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a82:	9601      	str	r6, [sp, #4]
 8009a84:	9700      	str	r7, [sp, #0]
 8009a86:	464b      	mov	r3, r9
 8009a88:	4642      	mov	r2, r8
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f7ff fdf9 	bl	8009684 <I2C_RequestMemoryRead>
 8009a92:	b970      	cbnz	r0, 8009ab2 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a94:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	2bff      	cmp	r3, #255	@ 0xff
 8009a9a:	d90f      	bls.n	8009abc <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = 1U;
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009aa0:	4b43      	ldr	r3, [pc, #268]	@ (8009bb0 <HAL_I2C_Mem_Read+0x1ac>)
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f7ff fc93 	bl	80093d6 <I2C_TransferConfig>
 8009ab0:	e021      	b.n	8009af6 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009ab8:	4658      	mov	r0, fp
 8009aba:	e06e      	b.n	8009b9a <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8009abc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009abe:	b292      	uxth	r2, r2
 8009ac0:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8009bb0 <HAL_I2C_Mem_Read+0x1ac>)
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009aca:	b2d2      	uxtb	r2, r2
 8009acc:	4629      	mov	r1, r5
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f7ff fc81 	bl	80093d6 <I2C_TransferConfig>
 8009ad4:	e00f      	b.n	8009af6 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8009ad6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009ad8:	b292      	uxth	r2, r2
 8009ada:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009adc:	2300      	movs	r3, #0
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ae4:	b2d2      	uxtb	r2, r2
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f7ff fc74 	bl	80093d6 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009aee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d034      	beq.n	8009b60 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009af6:	9600      	str	r6, [sp, #0]
 8009af8:	463b      	mov	r3, r7
 8009afa:	2200      	movs	r2, #0
 8009afc:	2104      	movs	r1, #4
 8009afe:	4620      	mov	r0, r4
 8009b00:	f7ff fd43 	bl	800958a <I2C_WaitOnFlagUntilTimeout>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d14d      	bne.n	8009ba4 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009b0e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009b10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009b12:	3301      	adds	r3, #1
 8009b14:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8009b16:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8009b18:	3a01      	subs	r2, #1
 8009b1a:	b292      	uxth	r2, r2
 8009b1c:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8009b1e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	3b01      	subs	r3, #1
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b28:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0de      	beq.n	8009aee <HAL_I2C_Mem_Read+0xea>
 8009b30:	2a00      	cmp	r2, #0
 8009b32:	d1dc      	bne.n	8009aee <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b34:	9600      	str	r6, [sp, #0]
 8009b36:	463b      	mov	r3, r7
 8009b38:	2180      	movs	r1, #128	@ 0x80
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f7ff fd25 	bl	800958a <I2C_WaitOnFlagUntilTimeout>
 8009b40:	bb90      	cbnz	r0, 8009ba8 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b42:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	2bff      	cmp	r3, #255	@ 0xff
 8009b48:	d9c5      	bls.n	8009ad6 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = 1U;
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009b4e:	2300      	movs	r3, #0
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009b56:	4629      	mov	r1, r5
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f7ff fc3c 	bl	80093d6 <I2C_TransferConfig>
 8009b5e:	e7c6      	b.n	8009aee <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b60:	4632      	mov	r2, r6
 8009b62:	4639      	mov	r1, r7
 8009b64:	4620      	mov	r0, r4
 8009b66:	f7ff fdc9 	bl	80096fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009b6a:	b9f8      	cbnz	r0, 8009bac <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009b72:	6821      	ldr	r1, [r4, #0]
 8009b74:	684b      	ldr	r3, [r1, #4]
 8009b76:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8009b7a:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8009b7e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8009b82:	f023 0301 	bic.w	r3, r3, #1
 8009b86:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009b88:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8009b92:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8009b96:	e000      	b.n	8009b9a <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8009b98:	2002      	movs	r0, #2
}
 8009b9a:	b003      	add	sp, #12
 8009b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8009ba0:	2002      	movs	r0, #2
 8009ba2:	e7fa      	b.n	8009b9a <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	e7f8      	b.n	8009b9a <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8009ba8:	2001      	movs	r0, #1
 8009baa:	e7f6      	b.n	8009b9a <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8009bac:	2001      	movs	r0, #1
 8009bae:	e7f4      	b.n	8009b9a <HAL_I2C_Mem_Read+0x196>
 8009bb0:	80002400 	.word	0x80002400

08009bb4 <HAL_I2C_GetState>:
  return hi2c->State;
 8009bb4:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8009bb8:	4770      	bx	lr
	...

08009bbc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009bbc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009bbe:	684d      	ldr	r5, [r1, #4]
 8009bc0:	6803      	ldr	r3, [r0, #0]
 8009bc2:	68dc      	ldr	r4, [r3, #12]
 8009bc4:	f3c4 440b 	ubfx	r4, r4, #16, #12
 8009bc8:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009bca:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8009bce:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009bd2:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 8009bd6:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 8009bda:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009bde:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009be0:	6804      	ldr	r4, [r0, #0]
 8009be2:	68e6      	ldr	r6, [r4, #12]
 8009be4:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009be8:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009bea:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009bec:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009bf0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009bf4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009bf8:	68cd      	ldr	r5, [r1, #12]
 8009bfa:	6803      	ldr	r3, [r0, #0]
 8009bfc:	68dc      	ldr	r4, [r3, #12]
 8009bfe:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8009c02:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009c04:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009c08:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
 8009c0c:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 8009c10:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009c14:	688b      	ldr	r3, [r1, #8]
 8009c16:	6804      	ldr	r4, [r0, #0]
 8009c18:	68e6      	ldr	r6, [r4, #12]
 8009c1a:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 8009c1e:	4473      	add	r3, lr
 8009c20:	3301      	adds	r3, #1
 8009c22:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8009c26:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8009c2a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009c2e:	6803      	ldr	r3, [r0, #0]
 8009c30:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009c34:	f8d3 4094 	ldr.w	r4, [r3, #148]	@ 0x94
 8009c38:	f024 0407 	bic.w	r4, r4, #7
 8009c3c:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009c40:	6803      	ldr	r3, [r0, #0]
 8009c42:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009c46:	690c      	ldr	r4, [r1, #16]
 8009c48:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009c4c:	f891 e031 	ldrb.w	lr, [r1, #49]	@ 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009c50:	f891 6032 	ldrb.w	r6, [r1, #50]	@ 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009c54:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009c56:	6803      	ldr	r3, [r0, #0]
 8009c58:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009c5c:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 8009c60:	2400      	movs	r4, #0
 8009c62:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009c66:	f891 3030 	ldrb.w	r3, [r1, #48]	@ 0x30
 8009c6a:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8009c6e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009c72:	6806      	ldr	r6, [r0, #0]
 8009c74:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8009c78:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8009c7c:	f8ce 309c 	str.w	r3, [lr, #156]	@ 0x9c
 8009c80:	f10e 0e84 	add.w	lr, lr, #132	@ 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009c84:	6803      	ldr	r3, [r0, #0]
 8009c86:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009c8a:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 8009c8e:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8009c92:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009c96:	6803      	ldr	r3, [r0, #0]
 8009c98:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009c9c:	694d      	ldr	r5, [r1, #20]
 8009c9e:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009ca2:	6803      	ldr	r3, [r0, #0]
 8009ca4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009ca8:	f8d3 60a0 	ldr.w	r6, [r3, #160]	@ 0xa0
 8009cac:	4d2c      	ldr	r5, [pc, #176]	@ (8009d60 <LTDC_SetConfig+0x1a4>)
 8009cae:	4035      	ands	r5, r6
 8009cb0:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009cb4:	6a0d      	ldr	r5, [r1, #32]
 8009cb6:	6803      	ldr	r3, [r0, #0]
 8009cb8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009cbc:	69ce      	ldr	r6, [r1, #28]
 8009cbe:	4335      	orrs	r5, r6
 8009cc0:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009cc4:	6803      	ldr	r3, [r0, #0]
 8009cc6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009cca:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 8009cce:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009cd2:	6803      	ldr	r3, [r0, #0]
 8009cd4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009cd8:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8009cda:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009cde:	690b      	ldr	r3, [r1, #16]
 8009ce0:	2b07      	cmp	r3, #7
 8009ce2:	d805      	bhi.n	8009cf0 <LTDC_SetConfig+0x134>
 8009ce4:	e8df f003 	tbb	[pc, r3]
 8009ce8:	3634323a 	.word	0x3634323a
 8009cec:	38040434 	.word	0x38040434
 8009cf0:	2501      	movs	r5, #1
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009cf2:	6803      	ldr	r3, [r0, #0]
 8009cf4:	4463      	add	r3, ip
 8009cf6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009cfa:	f002 22e0 	and.w	r2, r2, #3758153728	@ 0xe000e000
 8009cfe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009d02:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8009d04:	fb05 f403 	mul.w	r4, r5, r3
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009d08:	684b      	ldr	r3, [r1, #4]
 8009d0a:	680a      	ldr	r2, [r1, #0]
 8009d0c:	1a9b      	subs	r3, r3, r2
 8009d0e:	fb05 f303 	mul.w	r3, r5, r3
 8009d12:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009d14:	6802      	ldr	r2, [r0, #0]
 8009d16:	4462      	add	r2, ip
 8009d18:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d1c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009d20:	6803      	ldr	r3, [r0, #0]
 8009d22:	4463      	add	r3, ip
 8009d24:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8009d28:	f36f 020a 	bfc	r2, #0, #11
 8009d2c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009d30:	6803      	ldr	r3, [r0, #0]
 8009d32:	4463      	add	r3, ip
 8009d34:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8009d36:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009d3a:	6803      	ldr	r3, [r0, #0]
 8009d3c:	4463      	add	r3, ip
 8009d3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009d42:	f042 0201 	orr.w	r2, r2, #1
 8009d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009d4c:	2503      	movs	r5, #3
 8009d4e:	e7d0      	b.n	8009cf2 <LTDC_SetConfig+0x136>
 8009d50:	2502      	movs	r5, #2
 8009d52:	e7ce      	b.n	8009cf2 <LTDC_SetConfig+0x136>
 8009d54:	2502      	movs	r5, #2
 8009d56:	e7cc      	b.n	8009cf2 <LTDC_SetConfig+0x136>
 8009d58:	2502      	movs	r5, #2
 8009d5a:	e7ca      	b.n	8009cf2 <LTDC_SetConfig+0x136>
 8009d5c:	2504      	movs	r5, #4
 8009d5e:	e7c8      	b.n	8009cf2 <LTDC_SetConfig+0x136>
 8009d60:	fffff8f8 	.word	0xfffff8f8

08009d64 <HAL_LTDC_MspInit>:
}
 8009d64:	4770      	bx	lr
	...

08009d68 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d072      	beq.n	8009e52 <HAL_LTDC_Init+0xea>
{
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009d70:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d067      	beq.n	8009e48 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009d78:	2302      	movs	r3, #2
 8009d7a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009d7e:	6822      	ldr	r2, [r4, #0]
 8009d80:	6993      	ldr	r3, [r2, #24]
 8009d82:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009d86:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d88:	6821      	ldr	r1, [r4, #0]
 8009d8a:	698a      	ldr	r2, [r1, #24]
 8009d8c:	6863      	ldr	r3, [r4, #4]
 8009d8e:	68a0      	ldr	r0, [r4, #8]
 8009d90:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d92:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d94:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d96:	6920      	ldr	r0, [r4, #16]
 8009d98:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009d9e:	6821      	ldr	r1, [r4, #0]
 8009da0:	688a      	ldr	r2, [r1, #8]
 8009da2:	4b2d      	ldr	r3, [pc, #180]	@ (8009e58 <HAL_LTDC_Init+0xf0>)
 8009da4:	401a      	ands	r2, r3
 8009da6:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009da8:	6820      	ldr	r0, [r4, #0]
 8009daa:	6882      	ldr	r2, [r0, #8]
 8009dac:	69a1      	ldr	r1, [r4, #24]
 8009dae:	6965      	ldr	r5, [r4, #20]
 8009db0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8009db4:	430a      	orrs	r2, r1
 8009db6:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009db8:	6821      	ldr	r1, [r4, #0]
 8009dba:	68ca      	ldr	r2, [r1, #12]
 8009dbc:	401a      	ands	r2, r3
 8009dbe:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009dc0:	6820      	ldr	r0, [r4, #0]
 8009dc2:	68c2      	ldr	r2, [r0, #12]
 8009dc4:	6a21      	ldr	r1, [r4, #32]
 8009dc6:	69e5      	ldr	r5, [r4, #28]
 8009dc8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009dd0:	6821      	ldr	r1, [r4, #0]
 8009dd2:	690a      	ldr	r2, [r1, #16]
 8009dd4:	401a      	ands	r2, r3
 8009dd6:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009dd8:	6820      	ldr	r0, [r4, #0]
 8009dda:	6902      	ldr	r2, [r0, #16]
 8009ddc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8009dde:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009de0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8009de4:	430a      	orrs	r2, r1
 8009de6:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009de8:	6821      	ldr	r1, [r4, #0]
 8009dea:	694a      	ldr	r2, [r1, #20]
 8009dec:	4013      	ands	r3, r2
 8009dee:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009df0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009df2:	6821      	ldr	r1, [r4, #0]
 8009df4:	694b      	ldr	r3, [r1, #20]
 8009df6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009df8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009e00:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009e04:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8009e08:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009e0a:	6821      	ldr	r1, [r4, #0]
 8009e0c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8009e0e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009e12:	62ca      	str	r2, [r1, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009e14:	6821      	ldr	r1, [r4, #0]
 8009e16:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8009e18:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009e1c:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8009e20:	4303      	orrs	r3, r0
 8009e22:	4313      	orrs	r3, r2
 8009e24:	62cb      	str	r3, [r1, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009e26:	6822      	ldr	r2, [r4, #0]
 8009e28:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8009e2a:	f043 0306 	orr.w	r3, r3, #6
 8009e2e:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8009e30:	6822      	ldr	r2, [r4, #0]
 8009e32:	6993      	ldr	r3, [r2, #24]
 8009e34:	f043 0301 	orr.w	r3, r3, #1
 8009e38:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8009e40:	2301      	movs	r3, #1
 8009e42:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8009e48:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8009e4c:	f7ff ff8a 	bl	8009d64 <HAL_LTDC_MspInit>
 8009e50:	e792      	b.n	8009d78 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8009e52:	2001      	movs	r0, #1
}
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	f000f800 	.word	0xf000f800

08009e5c <HAL_LTDC_ConfigLayer>:
{
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8009e5e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d02c      	beq.n	8009ec0 <HAL_LTDC_ConfigLayer+0x64>
 8009e66:	4604      	mov	r4, r0
 8009e68:	460d      	mov	r5, r1
 8009e6a:	4616      	mov	r6, r2
 8009e6c:	2701      	movs	r7, #1
 8009e6e:	f880 70a0 	strb.w	r7, [r0, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009e72:	2302      	movs	r3, #2
 8009e74:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009e78:	f04f 0c34 	mov.w	ip, #52	@ 0x34
 8009e7c:	fb0c 0c02 	mla	ip, ip, r2, r0
 8009e80:	f10c 0c38 	add.w	ip, ip, #56	@ 0x38
 8009e84:	468e      	mov	lr, r1
 8009e86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009e8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009e92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009e9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e9e:	f8de 3000 	ldr.w	r3, [lr]
 8009ea2:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009ea6:	4632      	mov	r2, r6
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f7ff fe86 	bl	8009bbc <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009eb0:	6823      	ldr	r3, [r4, #0]
 8009eb2:	625f      	str	r7, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009eb4:	f884 70a1 	strb.w	r7, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8009eb8:	2000      	movs	r0, #0
 8009eba:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
 8009ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8009ec0:	2002      	movs	r0, #2
 8009ec2:	e7fc      	b.n	8009ebe <HAL_LTDC_ConfigLayer+0x62>

08009ec4 <HAL_LTDCEx_StructInitFromVideoConfig>:
  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

#if !defined(POLARITIES_INVERSION_UPDATED)
  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8009ec4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8009ec6:	b10b      	cbz	r3, 8009ecc <HAL_LTDCEx_StructInitFromVideoConfig+0x8>
 8009ec8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8009ecc:	60c3      	str	r3, [r0, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8009ece:	6a0b      	ldr	r3, [r1, #32]
 8009ed0:	bb0b      	cbnz	r3, 8009f16 <HAL_LTDCEx_StructInitFromVideoConfig+0x52>
 8009ed2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ed6:	6083      	str	r3, [r0, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8009ed8:	69cb      	ldr	r3, [r1, #28]
 8009eda:	b9f3      	cbnz	r3, 8009f1a <HAL_LTDCEx_StructInitFromVideoConfig+0x56>
 8009edc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009ee0:	6043      	str	r3, [r0, #4]
  hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
  hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29;
#endif /* POLARITIES_INVERSION_UPDATED */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8009ee2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	6183      	str	r3, [r0, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8009ee8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009eea:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
 8009eec:	4413      	add	r3, r2
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	6203      	str	r3, [r0, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8009ef2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009ef4:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
 8009ef6:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8009ef8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8009efa:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8009efc:	3b01      	subs	r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8009efe:	6283      	str	r3, [r0, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8009f00:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009f02:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
 8009f04:	4413      	add	r3, r2
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8009f06:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8009f08:	4413      	add	r3, r2
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8009f0a:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8009f0c:	4413      	add	r3, r2
 8009f0e:	3b01      	subs	r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8009f10:	6303      	str	r3, [r0, #48]	@ 0x30

  return HAL_OK;
}
 8009f12:	2000      	movs	r0, #0
 8009f14:	4770      	bx	lr
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8009f16:	2300      	movs	r3, #0
 8009f18:	e7dd      	b.n	8009ed6 <HAL_LTDCEx_StructInitFromVideoConfig+0x12>
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	e7e0      	b.n	8009ee0 <HAL_LTDCEx_StructInitFromVideoConfig+0x1c>
	...

08009f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009f20:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009f22:	4b0a      	ldr	r3, [pc, #40]	@ (8009f4c <HAL_MspInit+0x2c>)
 8009f24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f26:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009f2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8009f2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f2e:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8009f32:	9200      	str	r2, [sp, #0]
 8009f34:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8009f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f44:	9301      	str	r3, [sp, #4]
 8009f46:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009f48:	b002      	add	sp, #8
 8009f4a:	4770      	bx	lr
 8009f4c:	40023800 	.word	0x40023800

08009f50 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f50:	4a02      	ldr	r2, [pc, #8]	@ (8009f5c <HAL_PWR_EnableBkUpAccess+0xc>)
 8009f52:	6813      	ldr	r3, [r2, #0]
 8009f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f58:	6013      	str	r3, [r2, #0]
}
 8009f5a:	4770      	bx	lr
 8009f5c:	40007000 	.word	0x40007000

08009f60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009f60:	b510      	push	{r4, lr}
 8009f62:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8009f64:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd4 <HAL_PWREx_EnableOverDrive+0x74>)
 8009f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f68:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009f6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8009f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f74:	9301      	str	r3, [sp, #4]
 8009f76:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009f78:	4a17      	ldr	r2, [pc, #92]	@ (8009fd8 <HAL_PWREx_EnableOverDrive+0x78>)
 8009f7a:	6813      	ldr	r3, [r2, #0]
 8009f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f82:	f7fd fdf7 	bl	8007b74 <HAL_GetTick>
 8009f86:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009f88:	4b13      	ldr	r3, [pc, #76]	@ (8009fd8 <HAL_PWREx_EnableOverDrive+0x78>)
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8009f90:	d108      	bne.n	8009fa4 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009f92:	f7fd fdef 	bl	8007b74 <HAL_GetTick>
 8009f96:	1b00      	subs	r0, r0, r4
 8009f98:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009f9c:	d9f4      	bls.n	8009f88 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8009f9e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8009fa0:	b002      	add	sp, #8
 8009fa2:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8009fd8 <HAL_PWREx_EnableOverDrive+0x78>)
 8009fa6:	6813      	ldr	r3, [r2, #0]
 8009fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fac:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8009fae:	f7fd fde1 	bl	8007b74 <HAL_GetTick>
 8009fb2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009fb4:	4b08      	ldr	r3, [pc, #32]	@ (8009fd8 <HAL_PWREx_EnableOverDrive+0x78>)
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009fbc:	d107      	bne.n	8009fce <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009fbe:	f7fd fdd9 	bl	8007b74 <HAL_GetTick>
 8009fc2:	1b00      	subs	r0, r0, r4
 8009fc4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009fc8:	d9f4      	bls.n	8009fb4 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8009fca:	2003      	movs	r0, #3
 8009fcc:	e7e8      	b.n	8009fa0 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8009fce:	2000      	movs	r0, #0
 8009fd0:	e7e6      	b.n	8009fa0 <HAL_PWREx_EnableOverDrive+0x40>
 8009fd2:	bf00      	nop
 8009fd4:	40023800 	.word	0x40023800
 8009fd8:	40007000 	.word	0x40007000

08009fdc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	f000 8206 	beq.w	800a3ee <HAL_RCC_OscConfig+0x412>
{
 8009fe2:	b570      	push	{r4, r5, r6, lr}
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fe8:	6803      	ldr	r3, [r0, #0]
 8009fea:	f013 0f01 	tst.w	r3, #1
 8009fee:	d029      	beq.n	800a044 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ff0:	4b95      	ldr	r3, [pc, #596]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	f003 030c 	and.w	r3, r3, #12
 8009ff8:	2b04      	cmp	r3, #4
 8009ffa:	d01a      	beq.n	800a032 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ffc:	4b92      	ldr	r3, [pc, #584]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f003 030c 	and.w	r3, r3, #12
 800a004:	2b08      	cmp	r3, #8
 800a006:	d00f      	beq.n	800a028 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a008:	6863      	ldr	r3, [r4, #4]
 800a00a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a00e:	d040      	beq.n	800a092 <HAL_RCC_OscConfig+0xb6>
 800a010:	2b00      	cmp	r3, #0
 800a012:	d154      	bne.n	800a0be <HAL_RCC_OscConfig+0xe2>
 800a014:	4b8c      	ldr	r3, [pc, #560]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	e039      	b.n	800a09c <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a028:	4b87      	ldr	r3, [pc, #540]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800a030:	d0ea      	beq.n	800a008 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a032:	4b85      	ldr	r3, [pc, #532]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a03a:	d003      	beq.n	800a044 <HAL_RCC_OscConfig+0x68>
 800a03c:	6863      	ldr	r3, [r4, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 81d7 	beq.w	800a3f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	f013 0f02 	tst.w	r3, #2
 800a04a:	d074      	beq.n	800a136 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a04c:	4b7e      	ldr	r3, [pc, #504]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f013 0f0c 	tst.w	r3, #12
 800a054:	d05e      	beq.n	800a114 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a056:	4b7c      	ldr	r3, [pc, #496]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f003 030c 	and.w	r3, r3, #12
 800a05e:	2b08      	cmp	r3, #8
 800a060:	d053      	beq.n	800a10a <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a062:	68e3      	ldr	r3, [r4, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 8089 	beq.w	800a17c <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a06a:	4a77      	ldr	r2, [pc, #476]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a06c:	6813      	ldr	r3, [r2, #0]
 800a06e:	f043 0301 	orr.w	r3, r3, #1
 800a072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a074:	f7fd fd7e 	bl	8007b74 <HAL_GetTick>
 800a078:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a07a:	4b73      	ldr	r3, [pc, #460]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f013 0f02 	tst.w	r3, #2
 800a082:	d172      	bne.n	800a16a <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a084:	f7fd fd76 	bl	8007b74 <HAL_GetTick>
 800a088:	1b40      	subs	r0, r0, r5
 800a08a:	2802      	cmp	r0, #2
 800a08c:	d9f5      	bls.n	800a07a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 800a08e:	2003      	movs	r0, #3
 800a090:	e1b4      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a092:	4a6d      	ldr	r2, [pc, #436]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a094:	6813      	ldr	r3, [r2, #0]
 800a096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a09a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a09c:	6863      	ldr	r3, [r4, #4]
 800a09e:	b32b      	cbz	r3, 800a0ec <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800a0a0:	f7fd fd68 	bl	8007b74 <HAL_GetTick>
 800a0a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0a6:	4b68      	ldr	r3, [pc, #416]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a0ae:	d1c9      	bne.n	800a044 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0b0:	f7fd fd60 	bl	8007b74 <HAL_GetTick>
 800a0b4:	1b40      	subs	r0, r0, r5
 800a0b6:	2864      	cmp	r0, #100	@ 0x64
 800a0b8:	d9f5      	bls.n	800a0a6 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800a0ba:	2003      	movs	r0, #3
 800a0bc:	e19e      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a0c2:	d009      	beq.n	800a0d8 <HAL_RCC_OscConfig+0xfc>
 800a0c4:	4b60      	ldr	r3, [pc, #384]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	e7e1      	b.n	800a09c <HAL_RCC_OscConfig+0xc0>
 800a0d8:	4b5b      	ldr	r3, [pc, #364]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a0e8:	601a      	str	r2, [r3, #0]
 800a0ea:	e7d7      	b.n	800a09c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 800a0ec:	f7fd fd42 	bl	8007b74 <HAL_GetTick>
 800a0f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0f2:	4b55      	ldr	r3, [pc, #340]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a0fa:	d0a3      	beq.n	800a044 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0fc:	f7fd fd3a 	bl	8007b74 <HAL_GetTick>
 800a100:	1b40      	subs	r0, r0, r5
 800a102:	2864      	cmp	r0, #100	@ 0x64
 800a104:	d9f5      	bls.n	800a0f2 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800a106:	2003      	movs	r0, #3
 800a108:	e178      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a10a:	4b4f      	ldr	r3, [pc, #316]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800a112:	d1a6      	bne.n	800a062 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a114:	4b4c      	ldr	r3, [pc, #304]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f013 0f02 	tst.w	r3, #2
 800a11c:	d003      	beq.n	800a126 <HAL_RCC_OscConfig+0x14a>
 800a11e:	68e3      	ldr	r3, [r4, #12]
 800a120:	2b01      	cmp	r3, #1
 800a122:	f040 8168 	bne.w	800a3f6 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a126:	4a48      	ldr	r2, [pc, #288]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a128:	6813      	ldr	r3, [r2, #0]
 800a12a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a12e:	6921      	ldr	r1, [r4, #16]
 800a130:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a134:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	f013 0f08 	tst.w	r3, #8
 800a13c:	d046      	beq.n	800a1cc <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a13e:	6963      	ldr	r3, [r4, #20]
 800a140:	b383      	cbz	r3, 800a1a4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a142:	4a41      	ldr	r2, [pc, #260]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a144:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800a146:	f043 0301 	orr.w	r3, r3, #1
 800a14a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a14c:	f7fd fd12 	bl	8007b74 <HAL_GetTick>
 800a150:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a152:	4b3d      	ldr	r3, [pc, #244]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a156:	f013 0f02 	tst.w	r3, #2
 800a15a:	d137      	bne.n	800a1cc <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a15c:	f7fd fd0a 	bl	8007b74 <HAL_GetTick>
 800a160:	1b40      	subs	r0, r0, r5
 800a162:	2802      	cmp	r0, #2
 800a164:	d9f5      	bls.n	800a152 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 800a166:	2003      	movs	r0, #3
 800a168:	e148      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a16a:	4a37      	ldr	r2, [pc, #220]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a16c:	6813      	ldr	r3, [r2, #0]
 800a16e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a172:	6921      	ldr	r1, [r4, #16]
 800a174:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a178:	6013      	str	r3, [r2, #0]
 800a17a:	e7dc      	b.n	800a136 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 800a17c:	4a32      	ldr	r2, [pc, #200]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a17e:	6813      	ldr	r3, [r2, #0]
 800a180:	f023 0301 	bic.w	r3, r3, #1
 800a184:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a186:	f7fd fcf5 	bl	8007b74 <HAL_GetTick>
 800a18a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a18c:	4b2e      	ldr	r3, [pc, #184]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f013 0f02 	tst.w	r3, #2
 800a194:	d0cf      	beq.n	800a136 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a196:	f7fd fced 	bl	8007b74 <HAL_GetTick>
 800a19a:	1b40      	subs	r0, r0, r5
 800a19c:	2802      	cmp	r0, #2
 800a19e:	d9f5      	bls.n	800a18c <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 800a1a0:	2003      	movs	r0, #3
 800a1a2:	e12b      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a1a4:	4a28      	ldr	r2, [pc, #160]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a1a6:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800a1a8:	f023 0301 	bic.w	r3, r3, #1
 800a1ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1ae:	f7fd fce1 	bl	8007b74 <HAL_GetTick>
 800a1b2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1b4:	4b24      	ldr	r3, [pc, #144]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a1b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1b8:	f013 0f02 	tst.w	r3, #2
 800a1bc:	d006      	beq.n	800a1cc <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1be:	f7fd fcd9 	bl	8007b74 <HAL_GetTick>
 800a1c2:	1b40      	subs	r0, r0, r5
 800a1c4:	2802      	cmp	r0, #2
 800a1c6:	d9f5      	bls.n	800a1b4 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 800a1c8:	2003      	movs	r0, #3
 800a1ca:	e117      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	f013 0f04 	tst.w	r3, #4
 800a1d2:	d07d      	beq.n	800a2d0 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1d4:	4b1c      	ldr	r3, [pc, #112]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a1d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800a1dc:	d11e      	bne.n	800a21c <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1de:	4b1a      	ldr	r3, [pc, #104]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a1e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a1e2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800a1e6:	641a      	str	r2, [r3, #64]	@ 0x40
 800a1e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a1f2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1f4:	4b15      	ldr	r3, [pc, #84]	@ (800a24c <HAL_RCC_OscConfig+0x270>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800a1fc:	d010      	beq.n	800a220 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1fe:	68a3      	ldr	r3, [r4, #8]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d025      	beq.n	800a250 <HAL_RCC_OscConfig+0x274>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d13b      	bne.n	800a280 <HAL_RCC_OscConfig+0x2a4>
 800a208:	4b0f      	ldr	r3, [pc, #60]	@ (800a248 <HAL_RCC_OscConfig+0x26c>)
 800a20a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a20c:	f022 0201 	bic.w	r2, r2, #1
 800a210:	671a      	str	r2, [r3, #112]	@ 0x70
 800a212:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a214:	f022 0204 	bic.w	r2, r2, #4
 800a218:	671a      	str	r2, [r3, #112]	@ 0x70
 800a21a:	e01e      	b.n	800a25a <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 800a21c:	2500      	movs	r5, #0
 800a21e:	e7e9      	b.n	800a1f4 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 800a220:	4a0a      	ldr	r2, [pc, #40]	@ (800a24c <HAL_RCC_OscConfig+0x270>)
 800a222:	6813      	ldr	r3, [r2, #0]
 800a224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a228:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800a22a:	f7fd fca3 	bl	8007b74 <HAL_GetTick>
 800a22e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a230:	4b06      	ldr	r3, [pc, #24]	@ (800a24c <HAL_RCC_OscConfig+0x270>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800a238:	d1e1      	bne.n	800a1fe <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a23a:	f7fd fc9b 	bl	8007b74 <HAL_GetTick>
 800a23e:	1b80      	subs	r0, r0, r6
 800a240:	2864      	cmp	r0, #100	@ 0x64
 800a242:	d9f5      	bls.n	800a230 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800a244:	2003      	movs	r0, #3
 800a246:	e0d9      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
 800a248:	40023800 	.word	0x40023800
 800a24c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a250:	4a72      	ldr	r2, [pc, #456]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a252:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800a254:	f043 0301 	orr.w	r3, r3, #1
 800a258:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a25a:	68a3      	ldr	r3, [r4, #8]
 800a25c:	b333      	cbz	r3, 800a2ac <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a25e:	f7fd fc89 	bl	8007b74 <HAL_GetTick>
 800a262:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a264:	4b6d      	ldr	r3, [pc, #436]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a268:	f013 0f02 	tst.w	r3, #2
 800a26c:	d12f      	bne.n	800a2ce <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a26e:	f7fd fc81 	bl	8007b74 <HAL_GetTick>
 800a272:	1b80      	subs	r0, r0, r6
 800a274:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a278:	4298      	cmp	r0, r3
 800a27a:	d9f3      	bls.n	800a264 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800a27c:	2003      	movs	r0, #3
 800a27e:	e0bd      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a280:	2b05      	cmp	r3, #5
 800a282:	d009      	beq.n	800a298 <HAL_RCC_OscConfig+0x2bc>
 800a284:	4b65      	ldr	r3, [pc, #404]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a286:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a288:	f022 0201 	bic.w	r2, r2, #1
 800a28c:	671a      	str	r2, [r3, #112]	@ 0x70
 800a28e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a290:	f022 0204 	bic.w	r2, r2, #4
 800a294:	671a      	str	r2, [r3, #112]	@ 0x70
 800a296:	e7e0      	b.n	800a25a <HAL_RCC_OscConfig+0x27e>
 800a298:	4b60      	ldr	r3, [pc, #384]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a29a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a29c:	f042 0204 	orr.w	r2, r2, #4
 800a2a0:	671a      	str	r2, [r3, #112]	@ 0x70
 800a2a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a2a4:	f042 0201 	orr.w	r2, r2, #1
 800a2a8:	671a      	str	r2, [r3, #112]	@ 0x70
 800a2aa:	e7d6      	b.n	800a25a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2ac:	f7fd fc62 	bl	8007b74 <HAL_GetTick>
 800a2b0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2b2:	4b5a      	ldr	r3, [pc, #360]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a2b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2b6:	f013 0f02 	tst.w	r3, #2
 800a2ba:	d008      	beq.n	800a2ce <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2bc:	f7fd fc5a 	bl	8007b74 <HAL_GetTick>
 800a2c0:	1b80      	subs	r0, r0, r6
 800a2c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a2c6:	4298      	cmp	r0, r3
 800a2c8:	d9f3      	bls.n	800a2b2 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800a2ca:	2003      	movs	r0, #3
 800a2cc:	e096      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a2ce:	b9fd      	cbnz	r5, 800a310 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2d0:	69a3      	ldr	r3, [r4, #24]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f000 8091 	beq.w	800a3fa <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2d8:	4a50      	ldr	r2, [pc, #320]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a2da:	6892      	ldr	r2, [r2, #8]
 800a2dc:	f002 020c 	and.w	r2, r2, #12
 800a2e0:	2a08      	cmp	r2, #8
 800a2e2:	d059      	beq.n	800a398 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d019      	beq.n	800a31c <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2e8:	4a4c      	ldr	r2, [pc, #304]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a2ea:	6813      	ldr	r3, [r2, #0]
 800a2ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a2f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2f2:	f7fd fc3f 	bl	8007b74 <HAL_GetTick>
 800a2f6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2f8:	4b48      	ldr	r3, [pc, #288]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800a300:	d048      	beq.n	800a394 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a302:	f7fd fc37 	bl	8007b74 <HAL_GetTick>
 800a306:	1b00      	subs	r0, r0, r4
 800a308:	2802      	cmp	r0, #2
 800a30a:	d9f5      	bls.n	800a2f8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800a30c:	2003      	movs	r0, #3
 800a30e:	e075      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a310:	4a42      	ldr	r2, [pc, #264]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a312:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a318:	6413      	str	r3, [r2, #64]	@ 0x40
 800a31a:	e7d9      	b.n	800a2d0 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 800a31c:	4a3f      	ldr	r2, [pc, #252]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a31e:	6813      	ldr	r3, [r2, #0]
 800a320:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a324:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a326:	f7fd fc25 	bl	8007b74 <HAL_GetTick>
 800a32a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a32c:	4b3b      	ldr	r3, [pc, #236]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800a334:	d006      	beq.n	800a344 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a336:	f7fd fc1d 	bl	8007b74 <HAL_GetTick>
 800a33a:	1b40      	subs	r0, r0, r5
 800a33c:	2802      	cmp	r0, #2
 800a33e:	d9f5      	bls.n	800a32c <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 800a340:	2003      	movs	r0, #3
 800a342:	e05b      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a344:	69e3      	ldr	r3, [r4, #28]
 800a346:	6a22      	ldr	r2, [r4, #32]
 800a348:	4313      	orrs	r3, r2
 800a34a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a34c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800a350:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a352:	0852      	lsrs	r2, r2, #1
 800a354:	3a01      	subs	r2, #1
 800a356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a35a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a35c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a360:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a362:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800a366:	4a2d      	ldr	r2, [pc, #180]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a368:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800a36a:	6813      	ldr	r3, [r2, #0]
 800a36c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a370:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a372:	f7fd fbff 	bl	8007b74 <HAL_GetTick>
 800a376:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a378:	4b28      	ldr	r3, [pc, #160]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800a380:	d106      	bne.n	800a390 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a382:	f7fd fbf7 	bl	8007b74 <HAL_GetTick>
 800a386:	1b00      	subs	r0, r0, r4
 800a388:	2802      	cmp	r0, #2
 800a38a:	d9f5      	bls.n	800a378 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 800a38c:	2003      	movs	r0, #3
 800a38e:	e035      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800a390:	2000      	movs	r0, #0
 800a392:	e033      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
 800a394:	2000      	movs	r0, #0
 800a396:	e031      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 800a398:	4a20      	ldr	r2, [pc, #128]	@ (800a41c <HAL_RCC_OscConfig+0x440>)
 800a39a:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d02f      	beq.n	800a400 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a3a4:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3a6:	428b      	cmp	r3, r1
 800a3a8:	d12c      	bne.n	800a404 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3aa:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 800a3ae:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3b0:	428b      	cmp	r3, r1
 800a3b2:	d129      	bne.n	800a408 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a3b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3b6:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800a3c0:	d124      	bne.n	800a40c <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a3c2:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 800a3c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a3c8:	085b      	lsrs	r3, r3, #1
 800a3ca:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a3cc:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800a3d0:	d11e      	bne.n	800a410 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a3d2:	f002 6370 	and.w	r3, r2, #251658240	@ 0xf000000
 800a3d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a3d8:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800a3dc:	d11a      	bne.n	800a414 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a3de:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 800a3e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a3e4:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 800a3e8:	d116      	bne.n	800a418 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	e006      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 800a3ee:	2001      	movs	r0, #1
}
 800a3f0:	4770      	bx	lr
        return HAL_ERROR;
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	e002      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	e000      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 800a3fa:	2000      	movs	r0, #0
}
 800a3fc:	b002      	add	sp, #8
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800a400:	2001      	movs	r0, #1
 800a402:	e7fb      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
 800a404:	2001      	movs	r0, #1
 800a406:	e7f9      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
 800a408:	2001      	movs	r0, #1
 800a40a:	e7f7      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
 800a40c:	2001      	movs	r0, #1
 800a40e:	e7f5      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
 800a410:	2001      	movs	r0, #1
 800a412:	e7f3      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
 800a414:	2001      	movs	r0, #1
 800a416:	e7f1      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
 800a418:	2001      	movs	r0, #1
 800a41a:	e7ef      	b.n	800a3fc <HAL_RCC_OscConfig+0x420>
 800a41c:	40023800 	.word	0x40023800

0800a420 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	b088      	sub	sp, #32
 800a424:	460c      	mov	r4, r1
 800a426:	4615      	mov	r5, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a428:	b9f8      	cbnz	r0, 800a46a <HAL_RCC_MCOConfig+0x4a>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a42a:	4e20      	ldr	r6, [pc, #128]	@ (800a4ac <HAL_RCC_MCOConfig+0x8c>)
 800a42c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800a42e:	f043 0301 	orr.w	r3, r3, #1
 800a432:	6333      	str	r3, [r6, #48]	@ 0x30
 800a434:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	9301      	str	r3, [sp, #4]
 800a43c:	9b01      	ldr	r3, [sp, #4]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a43e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a442:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a444:	2302      	movs	r3, #2
 800a446:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a448:	2303      	movs	r3, #3
 800a44a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a44c:	2300      	movs	r3, #0
 800a44e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a450:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a452:	a903      	add	r1, sp, #12
 800a454:	4816      	ldr	r0, [pc, #88]	@ (800a4b0 <HAL_RCC_MCOConfig+0x90>)
 800a456:	f7fe fe8f 	bl	8009178 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a45a:	68b3      	ldr	r3, [r6, #8]
 800a45c:	f023 63ec 	bic.w	r3, r3, #123731968	@ 0x7600000
 800a460:	4325      	orrs	r5, r4
 800a462:	431d      	orrs	r5, r3
 800a464:	60b5      	str	r5, [r6, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 800a466:	b008      	add	sp, #32
 800a468:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800a46a:	4e10      	ldr	r6, [pc, #64]	@ (800a4ac <HAL_RCC_MCOConfig+0x8c>)
 800a46c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800a46e:	f043 0304 	orr.w	r3, r3, #4
 800a472:	6333      	str	r3, [r6, #48]	@ 0x30
 800a474:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800a476:	f003 0304 	and.w	r3, r3, #4
 800a47a:	9302      	str	r3, [sp, #8]
 800a47c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a47e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a482:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a484:	2302      	movs	r3, #2
 800a486:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800a488:	2303      	movs	r3, #3
 800a48a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a48c:	2300      	movs	r3, #0
 800a48e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a490:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a492:	a903      	add	r1, sp, #12
 800a494:	4807      	ldr	r0, [pc, #28]	@ (800a4b4 <HAL_RCC_MCOConfig+0x94>)
 800a496:	f7fe fe6f 	bl	8009178 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800a49a:	68b3      	ldr	r3, [r6, #8]
 800a49c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800a4a0:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
 800a4a4:	431c      	orrs	r4, r3
 800a4a6:	60b4      	str	r4, [r6, #8]
}
 800a4a8:	e7dd      	b.n	800a466 <HAL_RCC_MCOConfig+0x46>
 800a4aa:	bf00      	nop
 800a4ac:	40023800 	.word	0x40023800
 800a4b0:	40020000 	.word	0x40020000
 800a4b4:	40020800 	.word	0x40020800

0800a4b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4b8:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4ba:	4b26      	ldr	r3, [pc, #152]	@ (800a554 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	f003 030c 	and.w	r3, r3, #12
 800a4c2:	2b04      	cmp	r3, #4
 800a4c4:	d041      	beq.n	800a54a <HAL_RCC_GetSysClockFreq+0x92>
 800a4c6:	2b08      	cmp	r3, #8
 800a4c8:	d141      	bne.n	800a54e <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a4ca:	4b22      	ldr	r3, [pc, #136]	@ (800a554 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800a4d8:	d012      	beq.n	800a500 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4da:	4b1e      	ldr	r3, [pc, #120]	@ (800a554 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a4dc:	6859      	ldr	r1, [r3, #4]
 800a4de:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800a4e2:	481d      	ldr	r0, [pc, #116]	@ (800a558 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	fba1 0100 	umull	r0, r1, r1, r0
 800a4ea:	f7f5 ff39 	bl	8000360 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a4ee:	4b19      	ldr	r3, [pc, #100]	@ (800a554 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800a4fa:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800a4fe:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a500:	4b14      	ldr	r3, [pc, #80]	@ (800a554 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a502:	6858      	ldr	r0, [r3, #4]
 800a504:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800a508:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800a50c:	ebbc 0c00 	subs.w	ip, ip, r0
 800a510:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800a514:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800a518:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800a51c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800a520:	ebb1 010c 	subs.w	r1, r1, ip
 800a524:	eb63 030e 	sbc.w	r3, r3, lr
 800a528:	00db      	lsls	r3, r3, #3
 800a52a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a52e:	00c9      	lsls	r1, r1, #3
 800a530:	eb11 0c00 	adds.w	ip, r1, r0
 800a534:	f143 0300 	adc.w	r3, r3, #0
 800a538:	0299      	lsls	r1, r3, #10
 800a53a:	2300      	movs	r3, #0
 800a53c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800a540:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800a544:	f7f5 ff0c 	bl	8000360 <__aeabi_uldivmod>
 800a548:	e7d1      	b.n	800a4ee <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800a54a:	4803      	ldr	r0, [pc, #12]	@ (800a558 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a54c:	e7d7      	b.n	800a4fe <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a54e:	4803      	ldr	r0, [pc, #12]	@ (800a55c <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 800a550:	e7d5      	b.n	800a4fe <HAL_RCC_GetSysClockFreq+0x46>
 800a552:	bf00      	nop
 800a554:	40023800 	.word	0x40023800
 800a558:	017d7840 	.word	0x017d7840
 800a55c:	00f42400 	.word	0x00f42400

0800a560 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800a560:	2800      	cmp	r0, #0
 800a562:	f000 80a0 	beq.w	800a6a6 <HAL_RCC_ClockConfig+0x146>
{
 800a566:	b570      	push	{r4, r5, r6, lr}
 800a568:	460d      	mov	r5, r1
 800a56a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a56c:	4b52      	ldr	r3, [pc, #328]	@ (800a6b8 <HAL_RCC_ClockConfig+0x158>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 030f 	and.w	r3, r3, #15
 800a574:	428b      	cmp	r3, r1
 800a576:	d20b      	bcs.n	800a590 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a578:	4a4f      	ldr	r2, [pc, #316]	@ (800a6b8 <HAL_RCC_ClockConfig+0x158>)
 800a57a:	6813      	ldr	r3, [r2, #0]
 800a57c:	f023 030f 	bic.w	r3, r3, #15
 800a580:	430b      	orrs	r3, r1
 800a582:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a584:	6813      	ldr	r3, [r2, #0]
 800a586:	f003 030f 	and.w	r3, r3, #15
 800a58a:	428b      	cmp	r3, r1
 800a58c:	f040 808d 	bne.w	800a6aa <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	f013 0f02 	tst.w	r3, #2
 800a596:	d017      	beq.n	800a5c8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a598:	f013 0f04 	tst.w	r3, #4
 800a59c:	d004      	beq.n	800a5a8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a59e:	4a47      	ldr	r2, [pc, #284]	@ (800a6bc <HAL_RCC_ClockConfig+0x15c>)
 800a5a0:	6893      	ldr	r3, [r2, #8]
 800a5a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a5a6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	f013 0f08 	tst.w	r3, #8
 800a5ae:	d004      	beq.n	800a5ba <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a5b0:	4a42      	ldr	r2, [pc, #264]	@ (800a6bc <HAL_RCC_ClockConfig+0x15c>)
 800a5b2:	6893      	ldr	r3, [r2, #8]
 800a5b4:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a5b8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5ba:	4a40      	ldr	r2, [pc, #256]	@ (800a6bc <HAL_RCC_ClockConfig+0x15c>)
 800a5bc:	6893      	ldr	r3, [r2, #8]
 800a5be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a5c2:	68a1      	ldr	r1, [r4, #8]
 800a5c4:	430b      	orrs	r3, r1
 800a5c6:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	f013 0f01 	tst.w	r3, #1
 800a5ce:	d031      	beq.n	800a634 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5d0:	6863      	ldr	r3, [r4, #4]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d020      	beq.n	800a618 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	d025      	beq.n	800a626 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5da:	4a38      	ldr	r2, [pc, #224]	@ (800a6bc <HAL_RCC_ClockConfig+0x15c>)
 800a5dc:	6812      	ldr	r2, [r2, #0]
 800a5de:	f012 0f02 	tst.w	r2, #2
 800a5e2:	d064      	beq.n	800a6ae <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a5e4:	4935      	ldr	r1, [pc, #212]	@ (800a6bc <HAL_RCC_ClockConfig+0x15c>)
 800a5e6:	688a      	ldr	r2, [r1, #8]
 800a5e8:	f022 0203 	bic.w	r2, r2, #3
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800a5f0:	f7fd fac0 	bl	8007b74 <HAL_GetTick>
 800a5f4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5f6:	4b31      	ldr	r3, [pc, #196]	@ (800a6bc <HAL_RCC_ClockConfig+0x15c>)
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	f003 030c 	and.w	r3, r3, #12
 800a5fe:	6862      	ldr	r2, [r4, #4]
 800a600:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a604:	d016      	beq.n	800a634 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a606:	f7fd fab5 	bl	8007b74 <HAL_GetTick>
 800a60a:	1b80      	subs	r0, r0, r6
 800a60c:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a610:	4298      	cmp	r0, r3
 800a612:	d9f0      	bls.n	800a5f6 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800a614:	2003      	movs	r0, #3
 800a616:	e045      	b.n	800a6a4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a618:	4a28      	ldr	r2, [pc, #160]	@ (800a6bc <HAL_RCC_ClockConfig+0x15c>)
 800a61a:	6812      	ldr	r2, [r2, #0]
 800a61c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800a620:	d1e0      	bne.n	800a5e4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800a622:	2001      	movs	r0, #1
 800a624:	e03e      	b.n	800a6a4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a626:	4a25      	ldr	r2, [pc, #148]	@ (800a6bc <HAL_RCC_ClockConfig+0x15c>)
 800a628:	6812      	ldr	r2, [r2, #0]
 800a62a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800a62e:	d1d9      	bne.n	800a5e4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800a630:	2001      	movs	r0, #1
 800a632:	e037      	b.n	800a6a4 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a634:	4b20      	ldr	r3, [pc, #128]	@ (800a6b8 <HAL_RCC_ClockConfig+0x158>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 030f 	and.w	r3, r3, #15
 800a63c:	42ab      	cmp	r3, r5
 800a63e:	d90a      	bls.n	800a656 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a640:	4a1d      	ldr	r2, [pc, #116]	@ (800a6b8 <HAL_RCC_ClockConfig+0x158>)
 800a642:	6813      	ldr	r3, [r2, #0]
 800a644:	f023 030f 	bic.w	r3, r3, #15
 800a648:	432b      	orrs	r3, r5
 800a64a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a64c:	6813      	ldr	r3, [r2, #0]
 800a64e:	f003 030f 	and.w	r3, r3, #15
 800a652:	42ab      	cmp	r3, r5
 800a654:	d12d      	bne.n	800a6b2 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	f013 0f04 	tst.w	r3, #4
 800a65c:	d006      	beq.n	800a66c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a65e:	4a17      	ldr	r2, [pc, #92]	@ (800a6bc <HAL_RCC_ClockConfig+0x15c>)
 800a660:	6893      	ldr	r3, [r2, #8]
 800a662:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800a666:	68e1      	ldr	r1, [r4, #12]
 800a668:	430b      	orrs	r3, r1
 800a66a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	f013 0f08 	tst.w	r3, #8
 800a672:	d007      	beq.n	800a684 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a674:	4a11      	ldr	r2, [pc, #68]	@ (800a6bc <HAL_RCC_ClockConfig+0x15c>)
 800a676:	6893      	ldr	r3, [r2, #8]
 800a678:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800a67c:	6921      	ldr	r1, [r4, #16]
 800a67e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a682:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a684:	f7ff ff18 	bl	800a4b8 <HAL_RCC_GetSysClockFreq>
 800a688:	4b0c      	ldr	r3, [pc, #48]	@ (800a6bc <HAL_RCC_ClockConfig+0x15c>)
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a690:	4a0b      	ldr	r2, [pc, #44]	@ (800a6c0 <HAL_RCC_ClockConfig+0x160>)
 800a692:	5cd3      	ldrb	r3, [r2, r3]
 800a694:	40d8      	lsrs	r0, r3
 800a696:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c4 <HAL_RCC_ClockConfig+0x164>)
 800a698:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800a69a:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c8 <HAL_RCC_ClockConfig+0x168>)
 800a69c:	6818      	ldr	r0, [r3, #0]
 800a69e:	f002 f9b3 	bl	800ca08 <HAL_InitTick>
  return HAL_OK;
 800a6a2:	2000      	movs	r0, #0
}
 800a6a4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a6a6:	2001      	movs	r0, #1
}
 800a6a8:	4770      	bx	lr
      return HAL_ERROR;
 800a6aa:	2001      	movs	r0, #1
 800a6ac:	e7fa      	b.n	800a6a4 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800a6ae:	2001      	movs	r0, #1
 800a6b0:	e7f8      	b.n	800a6a4 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800a6b2:	2001      	movs	r0, #1
 800a6b4:	e7f6      	b.n	800a6a4 <HAL_RCC_ClockConfig+0x144>
 800a6b6:	bf00      	nop
 800a6b8:	40023c00 	.word	0x40023c00
 800a6bc:	40023800 	.word	0x40023800
 800a6c0:	0804eb74 	.word	0x0804eb74
 800a6c4:	2000213c 	.word	0x2000213c
 800a6c8:	20002138 	.word	0x20002138

0800a6cc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800a6cc:	4b01      	ldr	r3, [pc, #4]	@ (800a6d4 <HAL_RCC_GetHCLKFreq+0x8>)
 800a6ce:	6818      	ldr	r0, [r3, #0]
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	2000213c 	.word	0x2000213c

0800a6d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6d8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a6da:	f7ff fff7 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 800a6de:	4b04      	ldr	r3, [pc, #16]	@ (800a6f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800a6e6:	4a03      	ldr	r2, [pc, #12]	@ (800a6f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a6e8:	5cd3      	ldrb	r3, [r2, r3]
}
 800a6ea:	40d8      	lsrs	r0, r3
 800a6ec:	bd08      	pop	{r3, pc}
 800a6ee:	bf00      	nop
 800a6f0:	40023800 	.word	0x40023800
 800a6f4:	0804eb6c 	.word	0x0804eb6c

0800a6f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6f8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a6fa:	f7ff ffe7 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 800a6fe:	4b04      	ldr	r3, [pc, #16]	@ (800a710 <HAL_RCC_GetPCLK2Freq+0x18>)
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800a706:	4a03      	ldr	r2, [pc, #12]	@ (800a714 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a708:	5cd3      	ldrb	r3, [r2, r3]
}
 800a70a:	40d8      	lsrs	r0, r3
 800a70c:	bd08      	pop	{r3, pc}
 800a70e:	bf00      	nop
 800a710:	40023800 	.word	0x40023800
 800a714:	0804eb6c 	.word	0x0804eb6c

0800a718 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a718:	230f      	movs	r3, #15
 800a71a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a71c:	4b0b      	ldr	r3, [pc, #44]	@ (800a74c <HAL_RCC_GetClockConfig+0x34>)
 800a71e:	689a      	ldr	r2, [r3, #8]
 800a720:	f002 0203 	and.w	r2, r2, #3
 800a724:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800a72c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a72e:	689a      	ldr	r2, [r3, #8]
 800a730:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 800a734:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	08db      	lsrs	r3, r3, #3
 800a73a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800a73e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a740:	4b03      	ldr	r3, [pc, #12]	@ (800a750 <HAL_RCC_GetClockConfig+0x38>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 030f 	and.w	r3, r3, #15
 800a748:	600b      	str	r3, [r1, #0]
}
 800a74a:	4770      	bx	lr
 800a74c:	40023800 	.word	0x40023800
 800a750:	40023c00 	.word	0x40023c00

0800a754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a754:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a756:	b083      	sub	sp, #12
 800a758:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a75a:	6806      	ldr	r6, [r0, #0]
 800a75c:	f016 0601 	ands.w	r6, r6, #1
 800a760:	d00d      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a762:	4bb5      	ldr	r3, [pc, #724]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a764:	689a      	ldr	r2, [r3, #8]
 800a766:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800a76a:	609a      	str	r2, [r3, #8]
 800a76c:	689a      	ldr	r2, [r3, #8]
 800a76e:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800a770:	430a      	orrs	r2, r1
 800a772:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a774:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a776:	2b00      	cmp	r3, #0
 800a778:	f000 8167 	beq.w	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  uint32_t plli2sused = 0;
 800a77c:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a77e:	6825      	ldr	r5, [r4, #0]
 800a780:	f415 2500 	ands.w	r5, r5, #524288	@ 0x80000
 800a784:	d011      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a786:	4aac      	ldr	r2, [pc, #688]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a788:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800a78c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a790:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800a792:	430b      	orrs	r3, r1
 800a794:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a798:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a79a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a79e:	f000 8156 	beq.w	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f000 8155 	beq.w	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  uint32_t pllsaiused = 0;
 800a7a8:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800a7b0:	d00f      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a7b2:	4aa1      	ldr	r2, [pc, #644]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a7b4:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800a7b8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a7bc:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800a7be:	430b      	orrs	r3, r1
 800a7c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a7c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a7c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a7ca:	f000 8144 	beq.w	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x302>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a7ce:	b903      	cbnz	r3, 800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 800a7d0:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800a7d8:	d000      	beq.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 800a7da:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a7dc:	f013 0f20 	tst.w	r3, #32
 800a7e0:	f040 813b 	bne.w	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x306>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	f013 0f10 	tst.w	r3, #16
 800a7ea:	d00c      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a7ec:	4b92      	ldr	r3, [pc, #584]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a7ee:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a7f2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a7f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800a7fa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a7fe:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a800:	430a      	orrs	r2, r1
 800a802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800a80c:	d008      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a80e:	4a8a      	ldr	r2, [pc, #552]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a810:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a814:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a818:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800a81a:	430b      	orrs	r3, r1
 800a81c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800a826:	d008      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a828:	4a83      	ldr	r2, [pc, #524]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a82a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a82e:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800a832:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a834:	430b      	orrs	r3, r1
 800a836:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800a840:	d008      	beq.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a842:	4a7d      	ldr	r2, [pc, #500]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a844:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a848:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a84c:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800a84e:	430b      	orrs	r3, r1
 800a850:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800a85a:	d008      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a85c:	4a76      	ldr	r2, [pc, #472]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a85e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a862:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a866:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800a868:	430b      	orrs	r3, r1
 800a86a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a874:	d008      	beq.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a876:	4a70      	ldr	r2, [pc, #448]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a878:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a87c:	f023 0303 	bic.w	r3, r3, #3
 800a880:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a882:	430b      	orrs	r3, r1
 800a884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a88e:	d008      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a890:	4a69      	ldr	r2, [pc, #420]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a892:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a896:	f023 030c 	bic.w	r3, r3, #12
 800a89a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a89c:	430b      	orrs	r3, r1
 800a89e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a8a2:	6823      	ldr	r3, [r4, #0]
 800a8a4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800a8a8:	d008      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a8aa:	4a63      	ldr	r2, [pc, #396]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a8ac:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a8b0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a8b4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800a8b6:	430b      	orrs	r3, r1
 800a8b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800a8c2:	d008      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a8c4:	4a5c      	ldr	r2, [pc, #368]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a8c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a8ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a8ce:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800a8d0:	430b      	orrs	r3, r1
 800a8d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a8d6:	6823      	ldr	r3, [r4, #0]
 800a8d8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800a8dc:	d008      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a8de:	4a56      	ldr	r2, [pc, #344]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a8e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a8e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8e8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800a8ea:	430b      	orrs	r3, r1
 800a8ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a8f0:	6823      	ldr	r3, [r4, #0]
 800a8f2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800a8f6:	d008      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a8f8:	4a4f      	ldr	r2, [pc, #316]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a8fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a8fe:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a902:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800a904:	430b      	orrs	r3, r1
 800a906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800a910:	d008      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a912:	4a49      	ldr	r2, [pc, #292]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a914:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a918:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a91c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800a91e:	430b      	orrs	r3, r1
 800a920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800a92a:	d008      	beq.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a92c:	4a42      	ldr	r2, [pc, #264]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a92e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a932:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800a936:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800a938:	430b      	orrs	r3, r1
 800a93a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800a944:	d008      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a946:	4a3c      	ldr	r2, [pc, #240]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a948:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a94c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a950:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800a952:	430b      	orrs	r3, r1
 800a954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800a95e:	d00d      	beq.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a960:	4a35      	ldr	r2, [pc, #212]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a962:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a966:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800a96a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800a96c:	430b      	orrs	r3, r1
 800a96e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a972:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800a974:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a978:	f000 80d5 	beq.w	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	f013 0f08 	tst.w	r3, #8
 800a982:	d000      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 800a984:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a986:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800a98a:	d008      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a98c:	4a2a      	ldr	r2, [pc, #168]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a98e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a992:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800a996:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800a998:	430b      	orrs	r3, r1
 800a99a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800a9a4:	d009      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a9a6:	4a24      	ldr	r2, [pc, #144]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a9a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a9ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9b0:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800a9b4:	430b      	orrs	r3, r1
 800a9b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800a9c0:	d009      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800a9c2:	4a1d      	ldr	r2, [pc, #116]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a9c4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800a9c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a9cc:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800a9dc:	d009      	beq.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a9de:	4a16      	ldr	r2, [pc, #88]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a9e0:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800a9e4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a9e8:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 800a9ec:	430b      	orrs	r3, r1
 800a9ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800a9f8:	d009      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a9fa:	4a0f      	ldr	r2, [pc, #60]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a9fc:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800aa00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa04:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 800aa08:	430b      	orrs	r3, r1
 800aa0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800aa0e:	b926      	cbnz	r6, 800aa1a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800aa16:	f000 8106 	beq.w	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800aa1a:	4a07      	ldr	r2, [pc, #28]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800aa1c:	6813      	ldr	r3, [r2, #0]
 800aa1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa24:	f7fd f8a6 	bl	8007b74 <HAL_GetTick>
 800aa28:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aa2a:	4b03      	ldr	r3, [pc, #12]	@ (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800aa32:	d07a      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 800aa34:	e002      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800aa36:	bf00      	nop
 800aa38:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800aa3c:	f7fd f89a 	bl	8007b74 <HAL_GetTick>
 800aa40:	1b80      	subs	r0, r0, r6
 800aa42:	2864      	cmp	r0, #100	@ 0x64
 800aa44:	d9f1      	bls.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa46:	2003      	movs	r0, #3
 800aa48:	e0f0      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      plli2sused = 1;
 800aa4a:	2601      	movs	r6, #1
 800aa4c:	e697      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800aa4e:	2601      	movs	r6, #1
 800aa50:	e6a7      	b.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 800aa52:	2501      	movs	r5, #1
 800aa54:	e6a9      	b.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 800aa56:	2601      	movs	r6, #1
 800aa58:	e6b9      	b.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 800aa5a:	4b7f      	ldr	r3, [pc, #508]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800aa5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa5e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800aa62:	641a      	str	r2, [r3, #64]	@ 0x40
 800aa64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa6a:	9301      	str	r3, [sp, #4]
 800aa6c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800aa6e:	4a7b      	ldr	r2, [pc, #492]	@ (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800aa70:	6813      	ldr	r3, [r2, #0]
 800aa72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa76:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800aa78:	f7fd f87c 	bl	8007b74 <HAL_GetTick>
 800aa7c:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800aa7e:	4b77      	ldr	r3, [pc, #476]	@ (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800aa86:	d106      	bne.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x342>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa88:	f7fd f874 	bl	8007b74 <HAL_GetTick>
 800aa8c:	1bc0      	subs	r0, r0, r7
 800aa8e:	2864      	cmp	r0, #100	@ 0x64
 800aa90:	d9f5      	bls.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x32a>
        return HAL_TIMEOUT;
 800aa92:	2003      	movs	r0, #3
 800aa94:	e0ca      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aa96:	4b70      	ldr	r3, [pc, #448]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800aa98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800aa9a:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800aa9e:	d015      	beq.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x378>
 800aaa0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800aaa2:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d010      	beq.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x378>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aaaa:	4b6b      	ldr	r3, [pc, #428]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800aaac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aaae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800aab2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800aab4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800aab8:	6719      	str	r1, [r3, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800aaba:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800aabc:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800aac0:	6719      	str	r1, [r3, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 800aac2:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800aac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aac6:	f013 0f01 	tst.w	r3, #1
 800aaca:	d112      	bne.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aacc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aace:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800aad2:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800aad6:	d01d      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800aad8:	4a5f      	ldr	r2, [pc, #380]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800aada:	6893      	ldr	r3, [r2, #8]
 800aadc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800aae0:	6093      	str	r3, [r2, #8]
 800aae2:	495d      	ldr	r1, [pc, #372]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800aae4:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 800aae6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800aae8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800aaec:	4313      	orrs	r3, r2
 800aaee:	670b      	str	r3, [r1, #112]	@ 0x70
 800aaf0:	e678      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 800aaf2:	f7fd f83f 	bl	8007b74 <HAL_GetTick>
 800aaf6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aaf8:	4b57      	ldr	r3, [pc, #348]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800aafa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aafc:	f013 0f02 	tst.w	r3, #2
 800ab00:	d1e4      	bne.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x378>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab02:	f7fd f837 	bl	8007b74 <HAL_GetTick>
 800ab06:	1bc0      	subs	r0, r0, r7
 800ab08:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ab0c:	4298      	cmp	r0, r3
 800ab0e:	d9f3      	bls.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
            return HAL_TIMEOUT;
 800ab10:	2003      	movs	r0, #3
 800ab12:	e08b      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab14:	4850      	ldr	r0, [pc, #320]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800ab16:	6882      	ldr	r2, [r0, #8]
 800ab18:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800ab1c:	4950      	ldr	r1, [pc, #320]	@ (800ac60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800ab1e:	4019      	ands	r1, r3
 800ab20:	430a      	orrs	r2, r1
 800ab22:	6082      	str	r2, [r0, #8]
 800ab24:	e7dd      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      pllsaiused = 1;
 800ab26:	2501      	movs	r5, #1
 800ab28:	e728      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ab2a:	6823      	ldr	r3, [r4, #0]
 800ab2c:	f013 0f01 	tst.w	r3, #1
 800ab30:	d013      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800ab32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab34:	b98b      	cbnz	r3, 800ab5a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ab36:	4a48      	ldr	r2, [pc, #288]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800ab38:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ab3c:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ab40:	6860      	ldr	r0, [r4, #4]
 800ab42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ab46:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800ab4a:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800ab4e:	430b      	orrs	r3, r1
 800ab50:	68a1      	ldr	r1, [r4, #8]
 800ab52:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800ab56:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800ab60:	d003      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ab62:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ab64:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800ab68:	d006      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800ab6a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800ab6e:	d01e      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x45a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ab70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab76:	d11a      	bne.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x45a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ab78:	4a37      	ldr	r2, [pc, #220]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800ab7a:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ab7e:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800ab82:	6860      	ldr	r0, [r4, #4]
 800ab84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ab88:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800ab8c:	68e0      	ldr	r0, [r4, #12]
 800ab8e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800ab92:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 800ab96:	430b      	orrs	r3, r1
 800ab98:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ab9c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800aba0:	f023 031f 	bic.w	r3, r3, #31
 800aba4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800aba6:	3901      	subs	r1, #1
 800aba8:	430b      	orrs	r3, r1
 800abaa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800abb4:	d011      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800abb6:	4a28      	ldr	r2, [pc, #160]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800abb8:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800abbc:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800abc0:	6866      	ldr	r6, [r4, #4]
 800abc2:	6923      	ldr	r3, [r4, #16]
 800abc4:	041b      	lsls	r3, r3, #16
 800abc6:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800abca:	f000 6070 	and.w	r0, r0, #251658240	@ 0xf000000
 800abce:	4303      	orrs	r3, r0
 800abd0:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 800abd4:	430b      	orrs	r3, r1
 800abd6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800abda:	6823      	ldr	r3, [r4, #0]
 800abdc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800abe0:	d00d      	beq.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800abe2:	6862      	ldr	r2, [r4, #4]
 800abe4:	6923      	ldr	r3, [r4, #16]
 800abe6:	041b      	lsls	r3, r3, #16
 800abe8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800abec:	68e2      	ldr	r2, [r4, #12]
 800abee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800abf2:	68a2      	ldr	r2, [r4, #8]
 800abf4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800abf8:	4a17      	ldr	r2, [pc, #92]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800abfa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800abfe:	4a16      	ldr	r2, [pc, #88]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800ac00:	6813      	ldr	r3, [r2, #0]
 800ac02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ac06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac08:	f7fc ffb4 	bl	8007b74 <HAL_GetTick>
 800ac0c:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ac0e:	4b12      	ldr	r3, [pc, #72]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800ac16:	d106      	bne.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ac18:	f7fc ffac 	bl	8007b74 <HAL_GetTick>
 800ac1c:	1b80      	subs	r0, r0, r6
 800ac1e:	2864      	cmp	r0, #100	@ 0x64
 800ac20:	d9f5      	bls.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ac22:	2003      	movs	r0, #3
 800ac24:	e002      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ac26:	2d01      	cmp	r5, #1
 800ac28:	d002      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800ac2a:	2000      	movs	r0, #0
}
 800ac2c:	b003      	add	sp, #12
 800ac2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800ac30:	4a09      	ldr	r2, [pc, #36]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800ac32:	6813      	ldr	r3, [r2, #0]
 800ac34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac38:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800ac3a:	f7fc ff9b 	bl	8007b74 <HAL_GetTick>
 800ac3e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ac40:	4b05      	ldr	r3, [pc, #20]	@ (800ac58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800ac48:	d00c      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x510>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ac4a:	f7fc ff93 	bl	8007b74 <HAL_GetTick>
 800ac4e:	1b40      	subs	r0, r0, r5
 800ac50:	2864      	cmp	r0, #100	@ 0x64
 800ac52:	d9f5      	bls.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        return HAL_TIMEOUT;
 800ac54:	2003      	movs	r0, #3
 800ac56:	e7e9      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800ac58:	40023800 	.word	0x40023800
 800ac5c:	40007000 	.word	0x40007000
 800ac60:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800ac6a:	d001      	beq.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 800ac6c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ac6e:	b122      	cbz	r2, 800ac7a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800ac70:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800ac74:	d01d      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ac76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac78:	b9db      	cbnz	r3, 800acb2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ac7a:	4a35      	ldr	r2, [pc, #212]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800ac7c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ac80:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ac84:	6960      	ldr	r0, [r4, #20]
 800ac86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac8a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800ac8e:	69a0      	ldr	r0, [r4, #24]
 800ac90:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800ac94:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 800ac98:	430b      	orrs	r3, r1
 800ac9a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ac9e:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800aca2:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800aca6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800aca8:	3901      	subs	r1, #1
 800acaa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800acae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800acb8:	d003      	beq.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800acba:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800acbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acc0:	d031      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	f013 0f08 	tst.w	r3, #8
 800acc8:	d019      	beq.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800acca:	4a21      	ldr	r2, [pc, #132]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800accc:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800acd0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800acd4:	6960      	ldr	r0, [r4, #20]
 800acd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800acda:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800acde:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800ace2:	430b      	orrs	r3, r1
 800ace4:	69e1      	ldr	r1, [r4, #28]
 800ace6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800acea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800acee:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800acf2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800acf6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800acf8:	430b      	orrs	r3, r1
 800acfa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800acfe:	4a14      	ldr	r2, [pc, #80]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800ad00:	6813      	ldr	r3, [r2, #0]
 800ad02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad06:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800ad08:	f7fc ff34 	bl	8007b74 <HAL_GetTick>
 800ad0c:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ad0e:	4b10      	ldr	r3, [pc, #64]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800ad16:	d119      	bne.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ad18:	f7fc ff2c 	bl	8007b74 <HAL_GetTick>
 800ad1c:	1b00      	subs	r0, r0, r4
 800ad1e:	2864      	cmp	r0, #100	@ 0x64
 800ad20:	d9f5      	bls.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
        return HAL_TIMEOUT;
 800ad22:	2003      	movs	r0, #3
 800ad24:	e782      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ad26:	4a0a      	ldr	r2, [pc, #40]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800ad28:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ad2c:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ad30:	6965      	ldr	r5, [r4, #20]
 800ad32:	6a23      	ldr	r3, [r4, #32]
 800ad34:	041b      	lsls	r3, r3, #16
 800ad36:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800ad3a:	f000 6070 	and.w	r0, r0, #251658240	@ 0xf000000
 800ad3e:	4303      	orrs	r3, r0
 800ad40:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 800ad44:	430b      	orrs	r3, r1
 800ad46:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800ad4a:	e7ba      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  return HAL_OK;
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	e76d      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800ad50:	40023800 	.word	0x40023800

0800ad54 <HAL_RCCEx_GetPeriphCLKConfig>:
{
  uint32_t tempreg = 0;

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800ad54:	4b5f      	ldr	r3, [pc, #380]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKConfig+0x180>)
 800ad56:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800ad58:	4b5f      	ldr	r3, [pc, #380]	@ (800aed8 <HAL_RCCEx_GetPeriphCLKConfig+0x184>)
 800ad5a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800ad5e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800ad62:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ad64:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800ad68:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800ad6c:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ad6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800ad72:	f3c2 6203 	ubfx	r2, r2, #24, #4
 800ad76:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ad78:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800ad7c:	f3c2 7202 	ubfx	r2, r2, #28, #3
 800ad80:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800ad82:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ad86:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800ad8a:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ad8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ad90:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800ad94:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ad96:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ad9a:	f3c2 6203 	ubfx	r2, r2, #24, #4
 800ad9e:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ada0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ada4:	f3c2 7202 	ubfx	r2, r2, #28, #3
 800ada8:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800adaa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800adae:	f002 021f 	and.w	r2, r2, #31
 800adb2:	6242      	str	r2, [r0, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800adb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800adb8:	f3c2 2204 	ubfx	r2, r2, #8, #5
 800adbc:	6282      	str	r2, [r0, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800adbe:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800adc2:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800adc6:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800adc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800adcc:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 800add0:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800add2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800add6:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 800adda:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800addc:	689a      	ldr	r2, [r3, #8]
 800adde:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 800ade2:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800ade4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ade8:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 800adec:	6642      	str	r2, [r0, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800adee:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800adf2:	f402 2240 	and.w	r2, r2, #786432	@ 0xc0000
 800adf6:	6682      	str	r2, [r0, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800adf8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800adfc:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 800ae00:	66c2      	str	r2, [r0, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800ae02:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae06:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 800ae0a:	6702      	str	r2, [r0, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800ae0c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae10:	f002 0203 	and.w	r2, r2, #3
 800ae14:	6442      	str	r2, [r0, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800ae16:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae1a:	f002 020c 	and.w	r2, r2, #12
 800ae1e:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800ae20:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae24:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 800ae28:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800ae2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae2e:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 800ae32:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800ae34:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae38:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800ae3c:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800ae3e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae42:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 800ae46:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800ae48:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae4c:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
 800ae50:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800ae52:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae56:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800ae5a:	6602      	str	r2, [r0, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ae5c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae60:	f002 7240 	and.w	r2, r2, #50331648	@ 0x3000000
 800ae64:	6742      	str	r2, [r0, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800ae66:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae6a:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 800ae6e:	6782      	str	r2, [r0, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800ae70:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae74:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800ae78:	67c2      	str	r2, [r0, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800ae7a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae7e:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800ae82:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 800ae86:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae8a:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 800ae8e:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 800ae92:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800ae96:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 800ae9a:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800ae9e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800aea2:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 800aea6:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800aeaa:	6899      	ldr	r1, [r3, #8]
 800aeac:	f401 11f8 	and.w	r1, r1, #2031616	@ 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800aeb0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aeb2:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800aeb6:	430a      	orrs	r2, r1
 800aeb8:	6302      	str	r2, [r0, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800aeba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aebe:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800aec2:	d102      	bne.n	800aeca <HAL_RCCEx_GetPeriphCLKConfig+0x176>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800aec4:	2300      	movs	r3, #0
 800aec6:	6383      	str	r3, [r0, #56]	@ 0x38
 800aec8:	4770      	bx	lr
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800aeca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aece:	6383      	str	r3, [r0, #56]	@ 0x38
  }
}
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	1cfffff1 	.word	0x1cfffff1
 800aed8:	40023800 	.word	0x40023800

0800aedc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800aedc:	4603      	mov	r3, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aede:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 800aee2:	d004      	beq.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0x12>
  uint32_t frequency = 0;
 800aee4:	2000      	movs	r0, #0
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800aee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aeea:	d071      	beq.n	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      }
    }
  }

  return frequency;
}
 800aeec:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 800aeee:	4a70      	ldr	r2, [pc, #448]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800aef0:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800aef4:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
    switch (saiclocksource)
 800aef8:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 800aefc:	d064      	beq.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800aefe:	d826      	bhi.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800af00:	b38a      	cbz	r2, 800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 800af02:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800af06:	d120      	bne.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800af08:	4a69      	ldr	r2, [pc, #420]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800af0a:	6852      	ldr	r2, [r2, #4]
 800af0c:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 800af10:	d152      	bne.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800af12:	4a67      	ldr	r2, [pc, #412]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800af14:	6851      	ldr	r1, [r2, #4]
 800af16:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 800af1a:	4a66      	ldr	r2, [pc, #408]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800af1c:	fbb2 fcf1 	udiv	ip, r2, r1
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800af20:	4a63      	ldr	r2, [pc, #396]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800af22:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
 800af26:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800af2a:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 800af2e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800af32:	fb0c f000 	mul.w	r0, ip, r0
 800af36:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800af3a:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800af3e:	f002 021f 	and.w	r2, r2, #31
 800af42:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 800af44:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 800af48:	e7cd      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 800af4a:	2000      	movs	r0, #0
 800af4c:	e7cb      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
 800af4e:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 800af52:	d106      	bne.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800af54:	4a56      	ldr	r2, [pc, #344]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800af56:	6852      	ldr	r2, [r2, #4]
 800af58:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 800af5c:	d136      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
          frequency = HSI_VALUE;
 800af5e:	4855      	ldr	r0, [pc, #340]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800af60:	e7c1      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 800af62:	2000      	movs	r0, #0
 800af64:	e7bf      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800af66:	4a52      	ldr	r2, [pc, #328]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800af68:	6852      	ldr	r2, [r2, #4]
 800af6a:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 800af6e:	d11b      	bne.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800af70:	4a4f      	ldr	r2, [pc, #316]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800af72:	6851      	ldr	r1, [r2, #4]
 800af74:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 800af78:	4a4e      	ldr	r2, [pc, #312]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800af7a:	fbb2 fcf1 	udiv	ip, r2, r1
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800af7e:	4a4c      	ldr	r2, [pc, #304]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800af80:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 800af84:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800af88:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 800af8c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800af90:	fb0c f000 	mul.w	r0, ip, r0
 800af94:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800af98:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800af9c:	f3c2 2204 	ubfx	r2, r2, #8, #5
 800afa0:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 800afa2:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 800afa6:	e79e      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800afa8:	4a41      	ldr	r2, [pc, #260]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800afaa:	6851      	ldr	r1, [r2, #4]
 800afac:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 800afb0:	4a41      	ldr	r2, [pc, #260]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800afb2:	fbb2 fcf1 	udiv	ip, r2, r1
 800afb6:	e7e2      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800afb8:	4a3d      	ldr	r2, [pc, #244]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800afba:	6851      	ldr	r1, [r2, #4]
 800afbc:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 800afc0:	4a3d      	ldr	r2, [pc, #244]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800afc2:	fbb2 fcf1 	udiv	ip, r2, r1
 800afc6:	e7ab      	b.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
        frequency = EXTERNAL_CLOCK_VALUE;
 800afc8:	483c      	ldr	r0, [pc, #240]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800afca:	e78c      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          frequency = HSE_VALUE;
 800afcc:	483a      	ldr	r0, [pc, #232]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800afce:	e78a      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    saiclocksource = RCC->DCKCFGR1;
 800afd0:	4b37      	ldr	r3, [pc, #220]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800afd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800afd6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
    switch (saiclocksource)
 800afda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800afde:	d062      	beq.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 800afe0:	d825      	bhi.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800afe2:	b37b      	cbz	r3, 800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800afe4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800afe8:	d120      	bne.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800afea:	4b31      	ldr	r3, [pc, #196]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800aff2:	d150      	bne.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800aff4:	4b2e      	ldr	r3, [pc, #184]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800affc:	492d      	ldr	r1, [pc, #180]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800affe:	fbb1 f1f3 	udiv	r1, r1, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b002:	4b2b      	ldr	r3, [pc, #172]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800b004:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800b008:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b00c:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b010:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800b014:	fb01 f000 	mul.w	r0, r1, r0
 800b018:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b01c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b020:	f003 031f 	and.w	r3, r3, #31
 800b024:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 800b026:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800b02a:	4770      	bx	lr
 800b02c:	4770      	bx	lr
    switch (saiclocksource)
 800b02e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b032:	d106      	bne.n	800b042 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b034:	4b1e      	ldr	r3, [pc, #120]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800b03c:	d135      	bne.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
          frequency = HSI_VALUE;
 800b03e:	481d      	ldr	r0, [pc, #116]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800b040:	4770      	bx	lr
 800b042:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b044:	4b1a      	ldr	r3, [pc, #104]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800b04c:	d11b      	bne.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b04e:	4b18      	ldr	r3, [pc, #96]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b056:	4917      	ldr	r1, [pc, #92]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800b058:	fbb1 f1f3 	udiv	r1, r1, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b05c:	4b14      	ldr	r3, [pc, #80]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800b05e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b062:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b066:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800b06a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800b06e:	fb01 f000 	mul.w	r0, r1, r0
 800b072:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b07a:	f3c3 2304 	ubfx	r3, r3, #8, #5
 800b07e:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 800b080:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800b084:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b086:	4b0a      	ldr	r3, [pc, #40]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b08e:	490a      	ldr	r1, [pc, #40]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800b090:	fbb1 f1f3 	udiv	r1, r1, r3
 800b094:	e7e2      	b.n	800b05c <HAL_RCCEx_GetPeriphCLKFreq+0x180>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b096:	4b06      	ldr	r3, [pc, #24]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b09e:	4906      	ldr	r1, [pc, #24]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800b0a0:	fbb1 f1f3 	udiv	r1, r1, r3
 800b0a4:	e7ad      	b.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b0a6:	4805      	ldr	r0, [pc, #20]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800b0a8:	4770      	bx	lr
          frequency = HSE_VALUE;
 800b0aa:	4803      	ldr	r0, [pc, #12]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
  return frequency;
 800b0ac:	e71e      	b.n	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 800b0ae:	bf00      	nop
 800b0b0:	40023800 	.word	0x40023800
 800b0b4:	00f42400 	.word	0x00f42400
 800b0b8:	017d7840 	.word	0x017d7840
 800b0bc:	00bb8000 	.word	0x00bb8000

0800b0c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b0c4:	6803      	ldr	r3, [r0, #0]
 800b0c6:	4a0a      	ldr	r2, [pc, #40]	@ (800b0f0 <HAL_RTC_WaitForSynchro+0x30>)
 800b0c8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b0ca:	f7fc fd53 	bl	8007b74 <HAL_GetTick>
 800b0ce:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b0d0:	6823      	ldr	r3, [r4, #0]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	f013 0f20 	tst.w	r3, #32
 800b0d8:	d107      	bne.n	800b0ea <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b0da:	f7fc fd4b 	bl	8007b74 <HAL_GetTick>
 800b0de:	1b40      	subs	r0, r0, r5
 800b0e0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b0e4:	d9f4      	bls.n	800b0d0 <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 800b0e6:	2003      	movs	r0, #3
 800b0e8:	e000      	b.n	800b0ec <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 800b0ea:	2000      	movs	r0, #0
}
 800b0ec:	bd38      	pop	{r3, r4, r5, pc}
 800b0ee:	bf00      	nop
 800b0f0:	0001ff5f 	.word	0x0001ff5f

0800b0f4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b0f4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b0f6:	6803      	ldr	r3, [r0, #0]
 800b0f8:	68da      	ldr	r2, [r3, #12]
 800b0fa:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800b0fe:	d002      	beq.n	800b106 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800b100:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 800b102:	4628      	mov	r0, r5
 800b104:	bd70      	pop	{r4, r5, r6, pc}
 800b106:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b108:	68da      	ldr	r2, [r3, #12]
 800b10a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b10e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800b110:	f7fc fd30 	bl	8007b74 <HAL_GetTick>
 800b114:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 800b116:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b120:	d1ef      	bne.n	800b102 <RTC_EnterInitMode+0xe>
 800b122:	2d00      	cmp	r5, #0
 800b124:	d1ed      	bne.n	800b102 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b126:	f7fc fd25 	bl	8007b74 <HAL_GetTick>
 800b12a:	1b83      	subs	r3, r0, r6
 800b12c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b130:	d9f2      	bls.n	800b118 <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b132:	2304      	movs	r3, #4
 800b134:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 800b136:	2501      	movs	r5, #1
 800b138:	e7ee      	b.n	800b118 <RTC_EnterInitMode+0x24>

0800b13a <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b13a:	6802      	ldr	r2, [r0, #0]
 800b13c:	68d3      	ldr	r3, [r2, #12]
 800b13e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b142:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b144:	6803      	ldr	r3, [r0, #0]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	f013 0f20 	tst.w	r3, #32
 800b14c:	d001      	beq.n	800b152 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800b14e:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 800b150:	4770      	bx	lr
{
 800b152:	b510      	push	{r4, lr}
 800b154:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b156:	f7ff ffb3 	bl	800b0c0 <HAL_RTC_WaitForSynchro>
 800b15a:	b110      	cbz	r0, 800b162 <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b15c:	2304      	movs	r3, #4
 800b15e:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 800b160:	2001      	movs	r0, #1
}
 800b162:	bd10      	pop	{r4, pc}

0800b164 <HAL_RTC_Init>:
  if (hrtc == NULL)
 800b164:	2800      	cmp	r0, #0
 800b166:	d048      	beq.n	800b1fa <HAL_RTC_Init+0x96>
{
 800b168:	b510      	push	{r4, lr}
 800b16a:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b16c:	7f43      	ldrb	r3, [r0, #29]
 800b16e:	b153      	cbz	r3, 800b186 <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b170:	2302      	movs	r3, #2
 800b172:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b174:	6823      	ldr	r3, [r4, #0]
 800b176:	68da      	ldr	r2, [r3, #12]
 800b178:	f012 0f10 	tst.w	r2, #16
 800b17c:	d007      	beq.n	800b18e <HAL_RTC_Init+0x2a>
    status = HAL_OK;
 800b17e:	2000      	movs	r0, #0
    hrtc->State = HAL_RTC_STATE_READY;
 800b180:	2301      	movs	r3, #1
 800b182:	7763      	strb	r3, [r4, #29]
}
 800b184:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800b186:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800b188:	f7f9 ff28 	bl	8004fdc <HAL_RTC_MspInit>
 800b18c:	e7f0      	b.n	800b170 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b18e:	22ca      	movs	r2, #202	@ 0xca
 800b190:	625a      	str	r2, [r3, #36]	@ 0x24
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	2253      	movs	r2, #83	@ 0x53
 800b196:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 800b198:	4620      	mov	r0, r4
 800b19a:	f7ff ffab 	bl	800b0f4 <RTC_EnterInitMode>
    if (status == HAL_OK)
 800b19e:	b128      	cbz	r0, 800b1ac <HAL_RTC_Init+0x48>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1a0:	6823      	ldr	r3, [r4, #0]
 800b1a2:	22ff      	movs	r2, #255	@ 0xff
 800b1a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d1ec      	bne.n	800b184 <HAL_RTC_Init+0x20>
 800b1aa:	e7e9      	b.n	800b180 <HAL_RTC_Init+0x1c>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b1ac:	6822      	ldr	r2, [r4, #0]
 800b1ae:	6891      	ldr	r1, [r2, #8]
 800b1b0:	4b13      	ldr	r3, [pc, #76]	@ (800b200 <HAL_RTC_Init+0x9c>)
 800b1b2:	400b      	ands	r3, r1
 800b1b4:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b1b6:	6821      	ldr	r1, [r4, #0]
 800b1b8:	688a      	ldr	r2, [r1, #8]
 800b1ba:	6863      	ldr	r3, [r4, #4]
 800b1bc:	6920      	ldr	r0, [r4, #16]
 800b1be:	4303      	orrs	r3, r0
 800b1c0:	6960      	ldr	r0, [r4, #20]
 800b1c2:	4303      	orrs	r3, r0
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b1c8:	6823      	ldr	r3, [r4, #0]
 800b1ca:	68e2      	ldr	r2, [r4, #12]
 800b1cc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b1ce:	6822      	ldr	r2, [r4, #0]
 800b1d0:	6913      	ldr	r3, [r2, #16]
 800b1d2:	68a1      	ldr	r1, [r4, #8]
 800b1d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b1d8:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f7ff ffad 	bl	800b13a <RTC_ExitInitMode>
    if (status == HAL_OK)
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	d1dd      	bne.n	800b1a0 <HAL_RTC_Init+0x3c>
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b1e4:	6822      	ldr	r2, [r4, #0]
 800b1e6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b1e8:	f023 0308 	bic.w	r3, r3, #8
 800b1ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b1ee:	6822      	ldr	r2, [r4, #0]
 800b1f0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b1f2:	69a1      	ldr	r1, [r4, #24]
 800b1f4:	430b      	orrs	r3, r1
 800b1f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b1f8:	e7d2      	b.n	800b1a0 <HAL_RTC_Init+0x3c>
    return HAL_ERROR;
 800b1fa:	2001      	movs	r0, #1
}
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop
 800b200:	ff8fffbf 	.word	0xff8fffbf

0800b204 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 800b204:	2300      	movs	r3, #0

  while (number >= 10U)
 800b206:	e002      	b.n	800b20e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 800b208:	3301      	adds	r3, #1
    number -= 10U;
 800b20a:	380a      	subs	r0, #10
 800b20c:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 800b20e:	2809      	cmp	r0, #9
 800b210:	d8fa      	bhi.n	800b208 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b212:	011b      	lsls	r3, r3, #4
 800b214:	b2db      	uxtb	r3, r3
}
 800b216:	4318      	orrs	r0, r3
 800b218:	4770      	bx	lr
	...

0800b21c <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 800b21c:	7f03      	ldrb	r3, [r0, #28]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d058      	beq.n	800b2d4 <HAL_RTC_SetTime+0xb8>
{
 800b222:	b570      	push	{r4, r5, r6, lr}
 800b224:	4604      	mov	r4, r0
 800b226:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 800b228:	2301      	movs	r3, #1
 800b22a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b22c:	2302      	movs	r3, #2
 800b22e:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 800b230:	bb32      	cbnz	r2, 800b280 <HAL_RTC_SetTime+0x64>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b232:	6803      	ldr	r3, [r0, #0]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b23a:	d101      	bne.n	800b240 <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 800b23c:	2300      	movs	r3, #0
 800b23e:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b240:	7830      	ldrb	r0, [r6, #0]
 800b242:	f7ff ffdf 	bl	800b204 <RTC_ByteToBcd2>
 800b246:	0405      	lsls	r5, r0, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b248:	7870      	ldrb	r0, [r6, #1]
 800b24a:	f7ff ffdb 	bl	800b204 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b24e:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b252:	78b0      	ldrb	r0, [r6, #2]
 800b254:	f7ff ffd6 	bl	800b204 <RTC_ByteToBcd2>
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b258:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b25a:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b25c:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	22ca      	movs	r2, #202	@ 0xca
 800b264:	625a      	str	r2, [r3, #36]	@ 0x24
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	2253      	movs	r2, #83	@ 0x53
 800b26a:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800b26c:	4620      	mov	r0, r4
 800b26e:	f7ff ff41 	bl	800b0f4 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800b272:	b1b8      	cbz	r0, 800b2a4 <HAL_RTC_SetTime+0x88>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	22ff      	movs	r2, #255	@ 0xff
 800b278:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800b27a:	2300      	movs	r3, #0
 800b27c:	7723      	strb	r3, [r4, #28]
}
 800b27e:	bd70      	pop	{r4, r5, r6, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b280:	6803      	ldr	r3, [r0, #0]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b288:	d101      	bne.n	800b28e <HAL_RTC_SetTime+0x72>
      sTime->TimeFormat = 0x00U;
 800b28a:	2300      	movs	r3, #0
 800b28c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b28e:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b290:	7875      	ldrb	r5, [r6, #1]
 800b292:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b294:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 800b298:	78b3      	ldrb	r3, [r6, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b29a:	431d      	orrs	r5, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b29c:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b29e:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
 800b2a2:	e7dd      	b.n	800b260 <HAL_RTC_SetTime+0x44>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b2a4:	6822      	ldr	r2, [r4, #0]
 800b2a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b2d8 <HAL_RTC_SetTime+0xbc>)
 800b2a8:	402b      	ands	r3, r5
 800b2aa:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b2ac:	6822      	ldr	r2, [r4, #0]
 800b2ae:	6893      	ldr	r3, [r2, #8]
 800b2b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b2b4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b2b6:	6821      	ldr	r1, [r4, #0]
 800b2b8:	688b      	ldr	r3, [r1, #8]
 800b2ba:	68f2      	ldr	r2, [r6, #12]
 800b2bc:	6930      	ldr	r0, [r6, #16]
 800b2be:	4302      	orrs	r2, r0
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f7ff ff38 	bl	800b13a <RTC_ExitInitMode>
  if (status == HAL_OK)
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d1d2      	bne.n	800b274 <HAL_RTC_SetTime+0x58>
    hrtc->State = HAL_RTC_STATE_READY;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	7763      	strb	r3, [r4, #29]
 800b2d2:	e7cf      	b.n	800b274 <HAL_RTC_SetTime+0x58>
  __HAL_LOCK(hrtc);
 800b2d4:	2002      	movs	r0, #2
}
 800b2d6:	4770      	bx	lr
 800b2d8:	007f7f7f 	.word	0x007f7f7f

0800b2dc <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 800b2dc:	7f03      	ldrb	r3, [r0, #28]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d046      	beq.n	800b370 <HAL_RTC_SetDate+0x94>
{
 800b2e2:	b570      	push	{r4, r5, r6, lr}
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b2ec:	2302      	movs	r3, #2
 800b2ee:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b2f0:	b1ca      	cbz	r2, 800b326 <HAL_RTC_SetDate+0x4a>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b2f2:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b2f4:	784d      	ldrb	r5, [r1, #1]
 800b2f6:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b2f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t) sDate->Date)                      | \
 800b2fc:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b2fe:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b300:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b302:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	22ca      	movs	r2, #202	@ 0xca
 800b30a:	625a      	str	r2, [r3, #36]	@ 0x24
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	2253      	movs	r2, #83	@ 0x53
 800b310:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800b312:	4620      	mov	r0, r4
 800b314:	f7ff feee 	bl	800b0f4 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800b318:	b1f0      	cbz	r0, 800b358 <HAL_RTC_SetDate+0x7c>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	22ff      	movs	r2, #255	@ 0xff
 800b31e:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800b320:	2300      	movs	r3, #0
 800b322:	7723      	strb	r3, [r4, #28]
}
 800b324:	bd70      	pop	{r4, r5, r6, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b326:	784b      	ldrb	r3, [r1, #1]
 800b328:	f013 0f10 	tst.w	r3, #16
 800b32c:	d003      	beq.n	800b336 <HAL_RTC_SetDate+0x5a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b32e:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 800b332:	330a      	adds	r3, #10
 800b334:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b336:	78f0      	ldrb	r0, [r6, #3]
 800b338:	f7ff ff64 	bl	800b204 <RTC_ByteToBcd2>
 800b33c:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b33e:	7870      	ldrb	r0, [r6, #1]
 800b340:	f7ff ff60 	bl	800b204 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b344:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b348:	78b0      	ldrb	r0, [r6, #2]
 800b34a:	f7ff ff5b 	bl	800b204 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b34e:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b350:	7833      	ldrb	r3, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b352:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
 800b356:	e7d6      	b.n	800b306 <HAL_RTC_SetDate+0x2a>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b358:	6822      	ldr	r2, [r4, #0]
 800b35a:	4b06      	ldr	r3, [pc, #24]	@ (800b374 <HAL_RTC_SetDate+0x98>)
 800b35c:	402b      	ands	r3, r5
 800b35e:	6053      	str	r3, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 800b360:	4620      	mov	r0, r4
 800b362:	f7ff feea 	bl	800b13a <RTC_ExitInitMode>
  if (status == HAL_OK)
 800b366:	2800      	cmp	r0, #0
 800b368:	d1d7      	bne.n	800b31a <HAL_RTC_SetDate+0x3e>
    hrtc->State = HAL_RTC_STATE_READY;
 800b36a:	2301      	movs	r3, #1
 800b36c:	7763      	strb	r3, [r4, #29]
 800b36e:	e7d4      	b.n	800b31a <HAL_RTC_SetDate+0x3e>
  __HAL_LOCK(hrtc);
 800b370:	2002      	movs	r0, #2
}
 800b372:	4770      	bx	lr
 800b374:	00ffff3f 	.word	0x00ffff3f

0800b378 <HAL_RTC_SetAlarm>:
{
 800b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800b37a:	7f03      	ldrb	r3, [r0, #28]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	f000 80b5 	beq.w	800b4ec <HAL_RTC_SetAlarm+0x174>
 800b382:	4604      	mov	r4, r0
 800b384:	460e      	mov	r6, r1
 800b386:	2301      	movs	r3, #1
 800b388:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b38a:	2302      	movs	r3, #2
 800b38c:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 800b38e:	2a00      	cmp	r2, #0
 800b390:	d153      	bne.n	800b43a <HAL_RTC_SetAlarm+0xc2>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b392:	6803      	ldr	r3, [r0, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b39a:	d101      	bne.n	800b3a0 <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b39c:	2300      	movs	r3, #0
 800b39e:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b3a0:	7830      	ldrb	r0, [r6, #0]
 800b3a2:	f7ff ff2f 	bl	800b204 <RTC_ByteToBcd2>
 800b3a6:	0405      	lsls	r5, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b3a8:	7870      	ldrb	r0, [r6, #1]
 800b3aa:	f7ff ff2b 	bl	800b204 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b3ae:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b3b2:	78b0      	ldrb	r0, [r6, #2]
 800b3b4:	f7ff ff26 	bl	800b204 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b3b8:	4305      	orrs	r5, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800b3ba:	78f3      	ldrb	r3, [r6, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b3bc:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b3c0:	f896 0020 	ldrb.w	r0, [r6, #32]
 800b3c4:	f7ff ff1e 	bl	800b204 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800b3c8:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800b3cc:	69f3      	ldr	r3, [r6, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b3ce:	431d      	orrs	r5, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b3d0:	6973      	ldr	r3, [r6, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b3d2:	431d      	orrs	r5, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b3d4:	6877      	ldr	r7, [r6, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b3d6:	69b3      	ldr	r3, [r6, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b3d8:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	22ca      	movs	r2, #202	@ 0xca
 800b3de:	625a      	str	r2, [r3, #36]	@ 0x24
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	2253      	movs	r2, #83	@ 0x53
 800b3e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800b3e6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800b3e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3ec:	d03f      	beq.n	800b46e <HAL_RTC_SetAlarm+0xf6>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b3ee:	6822      	ldr	r2, [r4, #0]
 800b3f0:	6893      	ldr	r3, [r2, #8]
 800b3f2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3f6:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800b3f8:	6822      	ldr	r2, [r4, #0]
 800b3fa:	6893      	ldr	r3, [r2, #8]
 800b3fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b400:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b402:	6822      	ldr	r2, [r4, #0]
 800b404:	68d3      	ldr	r3, [r2, #12]
 800b406:	b2db      	uxtb	r3, r3
 800b408:	f463 7320 	orn	r3, r3, #640	@ 0x280
 800b40c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800b40e:	f7fc fbb1 	bl	8007b74 <HAL_GetTick>
 800b412:	4606      	mov	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	68da      	ldr	r2, [r3, #12]
 800b418:	f012 0f02 	tst.w	r2, #2
 800b41c:	d156      	bne.n	800b4cc <HAL_RTC_SetAlarm+0x154>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b41e:	f7fc fba9 	bl	8007b74 <HAL_GetTick>
 800b422:	1b80      	subs	r0, r0, r6
 800b424:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b428:	d9f4      	bls.n	800b414 <HAL_RTC_SetAlarm+0x9c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	22ff      	movs	r2, #255	@ 0xff
 800b42e:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b430:	2003      	movs	r0, #3
 800b432:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800b434:	2300      	movs	r3, #0
 800b436:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 800b438:	e057      	b.n	800b4ea <HAL_RTC_SetAlarm+0x172>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b43a:	6803      	ldr	r3, [r0, #0]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b442:	d101      	bne.n	800b448 <HAL_RTC_SetAlarm+0xd0>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b444:	2300      	movs	r3, #0
 800b446:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b448:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b44a:	7875      	ldrb	r5, [r6, #1]
 800b44c:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b44e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b452:	78b3      	ldrb	r3, [r6, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b454:	431d      	orrs	r5, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800b456:	78f3      	ldrb	r3, [r6, #3]
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b458:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b45c:	f896 3020 	ldrb.w	r3, [r6, #32]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800b460:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800b464:	69f3      	ldr	r3, [r6, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b466:	431d      	orrs	r5, r3
              ((uint32_t) sAlarm->AlarmMask));
 800b468:	6973      	ldr	r3, [r6, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b46a:	431d      	orrs	r5, r3
 800b46c:	e7b2      	b.n	800b3d4 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b46e:	6822      	ldr	r2, [r4, #0]
 800b470:	6893      	ldr	r3, [r2, #8]
 800b472:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b476:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800b478:	6822      	ldr	r2, [r4, #0]
 800b47a:	6893      	ldr	r3, [r2, #8]
 800b47c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b480:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b482:	6822      	ldr	r2, [r4, #0]
 800b484:	68d3      	ldr	r3, [r2, #12]
 800b486:	b2db      	uxtb	r3, r3
 800b488:	f463 73c0 	orn	r3, r3, #384	@ 0x180
 800b48c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800b48e:	f7fc fb71 	bl	8007b74 <HAL_GetTick>
 800b492:	4606      	mov	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	68da      	ldr	r2, [r3, #12]
 800b498:	f012 0f01 	tst.w	r2, #1
 800b49c:	d10d      	bne.n	800b4ba <HAL_RTC_SetAlarm+0x142>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b49e:	f7fc fb69 	bl	8007b74 <HAL_GetTick>
 800b4a2:	1b80      	subs	r0, r0, r6
 800b4a4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b4a8:	d9f4      	bls.n	800b494 <HAL_RTC_SetAlarm+0x11c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	22ff      	movs	r2, #255	@ 0xff
 800b4ae:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b4b0:	2003      	movs	r0, #3
 800b4b2:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 800b4b8:	e017      	b.n	800b4ea <HAL_RTC_SetAlarm+0x172>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b4ba:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b4bc:	6823      	ldr	r3, [r4, #0]
 800b4be:	645f      	str	r7, [r3, #68]	@ 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b4c0:	6822      	ldr	r2, [r4, #0]
 800b4c2:	6893      	ldr	r3, [r2, #8]
 800b4c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b4c8:	6093      	str	r3, [r2, #8]
 800b4ca:	e007      	b.n	800b4dc <HAL_RTC_SetAlarm+0x164>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b4cc:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	649f      	str	r7, [r3, #72]	@ 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b4d2:	6822      	ldr	r2, [r4, #0]
 800b4d4:	6893      	ldr	r3, [r2, #8]
 800b4d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b4da:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4dc:	6823      	ldr	r3, [r4, #0]
 800b4de:	22ff      	movs	r2, #255	@ 0xff
 800b4e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	7720      	strb	r0, [r4, #28]
}
 800b4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 800b4ec:	2002      	movs	r0, #2
 800b4ee:	e7fc      	b.n	800b4ea <HAL_RTC_SetAlarm+0x172>

0800b4f0 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 800b4f0:	2901      	cmp	r1, #1
 800b4f2:	d00a      	beq.n	800b50a <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800b4f4:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b4f6:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800b4f8:	2a08      	cmp	r2, #8
 800b4fa:	d008      	beq.n	800b50e <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b4fc:	6842      	ldr	r2, [r0, #4]
 800b4fe:	3a02      	subs	r2, #2
 800b500:	2a01      	cmp	r2, #1
 800b502:	d90c      	bls.n	800b51e <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800b504:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 800b508:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 800b50a:	2309      	movs	r3, #9
 800b50c:	e7f3      	b.n	800b4f6 <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b50e:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b510:	2a01      	cmp	r2, #1
 800b512:	bf18      	it	ne
 800b514:	2a03      	cmpne	r2, #3
 800b516:	d1f1      	bne.n	800b4fc <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 800b518:	f043 0310 	orr.w	r3, r3, #16
 800b51c:	e7ee      	b.n	800b4fc <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800b51e:	f043 0060 	orr.w	r0, r3, #96	@ 0x60
 800b522:	4770      	bx	lr

0800b524 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800b524:	4b0e      	ldr	r3, [pc, #56]	@ (800b560 <SAI_Disable+0x3c>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a0e      	ldr	r2, [pc, #56]	@ (800b564 <SAI_Disable+0x40>)
 800b52a:	fba2 2303 	umull	r2, r3, r2, r3
 800b52e:	0b1b      	lsrs	r3, r3, #12
 800b530:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b532:	6801      	ldr	r1, [r0, #0]
 800b534:	680a      	ldr	r2, [r1, #0]
 800b536:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b53a:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800b53c:	461a      	mov	r2, r3
 800b53e:	3b01      	subs	r3, #1
 800b540:	b132      	cbz	r2, 800b550 <SAI_Disable+0x2c>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800b542:	6802      	ldr	r2, [r0, #0]
 800b544:	6812      	ldr	r2, [r2, #0]
 800b546:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 800b54a:	d1f7      	bne.n	800b53c <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800b54c:	2000      	movs	r0, #0

  return status;
}
 800b54e:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b550:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800b554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b558:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800b55c:	2003      	movs	r0, #3
      break;
 800b55e:	4770      	bx	lr
 800b560:	2000213c 	.word	0x2000213c
 800b564:	95cbec1b 	.word	0x95cbec1b

0800b568 <HAL_SAI_MspInit>:
}
 800b568:	4770      	bx	lr
	...

0800b56c <HAL_SAI_Init>:
  if (hsai == NULL)
 800b56c:	2800      	cmp	r0, #0
 800b56e:	f000 80eb 	beq.w	800b748 <HAL_SAI_Init+0x1dc>
{
 800b572:	b538      	push	{r3, r4, r5, lr}
 800b574:	4604      	mov	r4, r0
  if (hsai->State == HAL_SAI_STATE_RESET)
 800b576:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 800b57a:	b163      	cbz	r3, 800b596 <HAL_SAI_Init+0x2a>
  hsai->State = HAL_SAI_STATE_BUSY;
 800b57c:	2302      	movs	r3, #2
 800b57e:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  SAI_Disable(hsai);
 800b582:	4620      	mov	r0, r4
 800b584:	f7ff ffce 	bl	800b524 <SAI_Disable>
  switch (hsai->Init.SynchroExt)
 800b588:	68e3      	ldr	r3, [r4, #12]
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d008      	beq.n	800b5a0 <HAL_SAI_Init+0x34>
 800b58e:	2b02      	cmp	r3, #2
 800b590:	d113      	bne.n	800b5ba <HAL_SAI_Init+0x4e>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b592:	2220      	movs	r2, #32
 800b594:	e005      	b.n	800b5a2 <HAL_SAI_Init+0x36>
    hsai->Lock = HAL_UNLOCKED;
 800b596:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    HAL_SAI_MspInit(hsai);
 800b59a:	f7ff ffe5 	bl	800b568 <HAL_SAI_MspInit>
 800b59e:	e7ed      	b.n	800b57c <HAL_SAI_Init+0x10>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b5a0:	2210      	movs	r2, #16
  switch (hsai->Init.Synchro)
 800b5a2:	68a3      	ldr	r3, [r4, #8]
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	f000 80ac 	beq.w	800b702 <HAL_SAI_Init+0x196>
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d007      	beq.n	800b5be <HAL_SAI_Init+0x52>
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	f040 80aa 	bne.w	800b708 <HAL_SAI_Init+0x19c>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b5b4:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800b5b8:	e005      	b.n	800b5c6 <HAL_SAI_Init+0x5a>
  switch (hsai->Init.SynchroExt)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	e7f1      	b.n	800b5a2 <HAL_SAI_Init+0x36>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b5be:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b5c2:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b5c6:	6823      	ldr	r3, [r4, #0]
 800b5c8:	4860      	ldr	r0, [pc, #384]	@ (800b74c <HAL_SAI_Init+0x1e0>)
 800b5ca:	4961      	ldr	r1, [pc, #388]	@ (800b750 <HAL_SAI_Init+0x1e4>)
 800b5cc:	428b      	cmp	r3, r1
 800b5ce:	bf18      	it	ne
 800b5d0:	4283      	cmpne	r3, r0
 800b5d2:	f040 809b 	bne.w	800b70c <HAL_SAI_Init+0x1a0>
    SAI1->GCR = tmpregisterGCR;
 800b5d6:	4b5f      	ldr	r3, [pc, #380]	@ (800b754 <HAL_SAI_Init+0x1e8>)
 800b5d8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b5dc:	69e3      	ldr	r3, [r4, #28]
 800b5de:	b33b      	cbz	r3, 800b630 <HAL_SAI_Init+0xc4>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b5e0:	6823      	ldr	r3, [r4, #0]
 800b5e2:	495a      	ldr	r1, [pc, #360]	@ (800b74c <HAL_SAI_Init+0x1e0>)
 800b5e4:	4a5a      	ldr	r2, [pc, #360]	@ (800b750 <HAL_SAI_Init+0x1e4>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	bf18      	it	ne
 800b5ea:	428b      	cmpne	r3, r1
 800b5ec:	f000 8092 	beq.w	800b714 <HAL_SAI_Init+0x1a8>
    uint32_t freq = 0;
 800b5f0:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	4958      	ldr	r1, [pc, #352]	@ (800b758 <HAL_SAI_Init+0x1ec>)
 800b5f6:	4a59      	ldr	r2, [pc, #356]	@ (800b75c <HAL_SAI_Init+0x1f0>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	bf18      	it	ne
 800b5fc:	428b      	cmpne	r3, r1
 800b5fe:	f000 808e 	beq.w	800b71e <HAL_SAI_Init+0x1b2>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800b602:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b606:	0040      	lsls	r0, r0, #1
 800b608:	69e3      	ldr	r3, [r4, #28]
 800b60a:	025b      	lsls	r3, r3, #9
 800b60c:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 800b610:	4b53      	ldr	r3, [pc, #332]	@ (800b760 <HAL_SAI_Init+0x1f4>)
 800b612:	fba3 2300 	umull	r2, r3, r3, r0
 800b616:	08db      	lsrs	r3, r3, #3
 800b618:	6223      	str	r3, [r4, #32]
    if ((tmpval % 10) > 8)
 800b61a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800b61e:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 800b622:	2808      	cmp	r0, #8
 800b624:	d901      	bls.n	800b62a <HAL_SAI_Init+0xbe>
      hsai->Init.Mckdiv += 1;
 800b626:	3301      	adds	r3, #1
 800b628:	6223      	str	r3, [r4, #32]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b62a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b62c:	2b04      	cmp	r3, #4
 800b62e:	d07b      	beq.n	800b728 <HAL_SAI_Init+0x1bc>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b630:	6863      	ldr	r3, [r4, #4]
 800b632:	2b02      	cmp	r3, #2
 800b634:	bf18      	it	ne
 800b636:	2b00      	cmpne	r3, #0
 800b638:	d17d      	bne.n	800b736 <HAL_SAI_Init+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800b63a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d077      	beq.n	800b730 <HAL_SAI_Init+0x1c4>
 800b640:	f44f 7c00 	mov.w	ip, #512	@ 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b644:	6822      	ldr	r2, [r4, #0]
 800b646:	6811      	ldr	r1, [r2, #0]
 800b648:	4b46      	ldr	r3, [pc, #280]	@ (800b764 <HAL_SAI_Init+0x1f8>)
 800b64a:	400b      	ands	r3, r1
 800b64c:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b64e:	6822      	ldr	r2, [r4, #0]
 800b650:	6811      	ldr	r1, [r2, #0]
 800b652:	6863      	ldr	r3, [r4, #4]
 800b654:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800b656:	4303      	orrs	r3, r0
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b658:	6b60      	ldr	r0, [r4, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b65a:	4303      	orrs	r3, r0
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b65c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800b65e:	4303      	orrs	r3, r0
 800b660:	ea43 030c 	orr.w	r3, r3, ip
                          ckstr_bits | syncen_bits |                               \
 800b664:	432b      	orrs	r3, r5
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b666:	6a60      	ldr	r0, [r4, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800b668:	4303      	orrs	r3, r0
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b66a:	6920      	ldr	r0, [r4, #16]
 800b66c:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b66e:	6960      	ldr	r0, [r4, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b670:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b672:	6a20      	ldr	r0, [r4, #32]
 800b674:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b678:	430b      	orrs	r3, r1
 800b67a:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b67c:	6822      	ldr	r2, [r4, #0]
 800b67e:	6851      	ldr	r1, [r2, #4]
 800b680:	4b39      	ldr	r3, [pc, #228]	@ (800b768 <HAL_SAI_Init+0x1fc>)
 800b682:	400b      	ands	r3, r1
 800b684:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b686:	6821      	ldr	r1, [r4, #0]
 800b688:	684a      	ldr	r2, [r1, #4]
 800b68a:	69a3      	ldr	r3, [r4, #24]
 800b68c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800b68e:	4303      	orrs	r3, r0
 800b690:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800b692:	4303      	orrs	r3, r0
 800b694:	4313      	orrs	r3, r2
 800b696:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b698:	6822      	ldr	r2, [r4, #0]
 800b69a:	6891      	ldr	r1, [r2, #8]
 800b69c:	4b33      	ldr	r3, [pc, #204]	@ (800b76c <HAL_SAI_Init+0x200>)
 800b69e:	400b      	ands	r3, r1
 800b6a0:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b6a2:	6820      	ldr	r0, [r4, #0]
 800b6a4:	6882      	ldr	r2, [r0, #8]
 800b6a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6a8:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 800b6aa:	6d21      	ldr	r1, [r4, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b6ac:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 800b6ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800b6b0:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 800b6b2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800b6b4:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800b6b6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b6b8:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 800b6ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800b6c2:	6822      	ldr	r2, [r4, #0]
 800b6c4:	68d3      	ldr	r3, [r2, #12]
 800b6c6:	f423 637d 	bic.w	r3, r3, #4048	@ 0xfd0
 800b6ca:	f023 030f 	bic.w	r3, r3, #15
 800b6ce:	041b      	lsls	r3, r3, #16
 800b6d0:	0c1b      	lsrs	r3, r3, #16
 800b6d2:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b6d4:	6820      	ldr	r0, [r4, #0]
 800b6d6:	68c2      	ldr	r2, [r0, #12]
 800b6d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b6da:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800b6dc:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800b6de:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800b6e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b6e4:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800b6e6:	3901      	subs	r1, #1
 800b6e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  hsai->State = HAL_SAI_STATE_READY;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  __HAL_UNLOCK(hsai);
 800b6fc:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
}
 800b700:	bd38      	pop	{r3, r4, r5, pc}
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b702:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800b706:	e75e      	b.n	800b5c6 <HAL_SAI_Init+0x5a>
  switch (hsai->Init.Synchro)
 800b708:	2500      	movs	r5, #0
 800b70a:	e75c      	b.n	800b5c6 <HAL_SAI_Init+0x5a>
    SAI2->GCR = tmpregisterGCR;
 800b70c:	4b11      	ldr	r3, [pc, #68]	@ (800b754 <HAL_SAI_Init+0x1e8>)
 800b70e:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 800b712:	e763      	b.n	800b5dc <HAL_SAI_Init+0x70>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b714:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b718:	f7ff fbe0 	bl	800aedc <HAL_RCCEx_GetPeriphCLKFreq>
 800b71c:	e769      	b.n	800b5f2 <HAL_SAI_Init+0x86>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b71e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b722:	f7ff fbdb 	bl	800aedc <HAL_RCCEx_GetPeriphCLKFreq>
 800b726:	e76c      	b.n	800b602 <HAL_SAI_Init+0x96>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b728:	6a23      	ldr	r3, [r4, #32]
 800b72a:	085b      	lsrs	r3, r3, #1
 800b72c:	6223      	str	r3, [r4, #32]
 800b72e:	e77f      	b.n	800b630 <HAL_SAI_Init+0xc4>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800b730:	f04f 0c00 	mov.w	ip, #0
 800b734:	e786      	b.n	800b644 <HAL_SAI_Init+0xd8>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800b736:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d002      	beq.n	800b742 <HAL_SAI_Init+0x1d6>
 800b73c:	f04f 0c00 	mov.w	ip, #0
 800b740:	e780      	b.n	800b644 <HAL_SAI_Init+0xd8>
 800b742:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 800b746:	e77d      	b.n	800b644 <HAL_SAI_Init+0xd8>
    return HAL_ERROR;
 800b748:	2001      	movs	r0, #1
}
 800b74a:	4770      	bx	lr
 800b74c:	40015804 	.word	0x40015804
 800b750:	40015824 	.word	0x40015824
 800b754:	40015000 	.word	0x40015000
 800b758:	40015c04 	.word	0x40015c04
 800b75c:	40015c24 	.word	0x40015c24
 800b760:	cccccccd 	.word	0xcccccccd
 800b764:	ff05c010 	.word	0xff05c010
 800b768:	ffff1ff0 	.word	0xffff1ff0
 800b76c:	fff88000 	.word	0xfff88000

0800b770 <HAL_SAI_MspDeInit>:
}
 800b770:	4770      	bx	lr

0800b772 <HAL_SAI_DeInit>:
  if (hsai == NULL)
 800b772:	b1e8      	cbz	r0, 800b7b0 <HAL_SAI_DeInit+0x3e>
{
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4604      	mov	r4, r0
  hsai->State = HAL_SAI_STATE_BUSY;
 800b778:	2302      	movs	r3, #2
 800b77a:	f880 307d 	strb.w	r3, [r0, #125]	@ 0x7d
  hsai->Instance->IMR = 0;
 800b77e:	6803      	ldr	r3, [r0, #0]
 800b780:	2500      	movs	r5, #0
 800b782:	611d      	str	r5, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b784:	6803      	ldr	r3, [r0, #0]
 800b786:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b78a:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 800b78c:	f7ff feca 	bl	800b524 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800b790:	6822      	ldr	r2, [r4, #0]
 800b792:	6853      	ldr	r3, [r2, #4]
 800b794:	f043 0308 	orr.w	r3, r3, #8
 800b798:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 800b79a:	4620      	mov	r0, r4
 800b79c:	f7ff ffe8 	bl	800b770 <HAL_SAI_MspDeInit>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b7a0:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
  hsai->State = HAL_SAI_STATE_RESET;
 800b7a4:	f884 507d 	strb.w	r5, [r4, #125]	@ 0x7d
  __HAL_UNLOCK(hsai);
 800b7a8:	f884 507c 	strb.w	r5, [r4, #124]	@ 0x7c
  return HAL_OK;
 800b7ac:	4628      	mov	r0, r5
}
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b7b0:	2001      	movs	r0, #1
}
 800b7b2:	4770      	bx	lr

0800b7b4 <HAL_SAI_Transmit_DMA>:
{
 800b7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	4688      	mov	r8, r1
 800b7bc:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800b7be:	f7fc f9d9 	bl	8007b74 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0))
 800b7c2:	2e00      	cmp	r6, #0
 800b7c4:	bf18      	it	ne
 800b7c6:	f1b8 0f00 	cmpne.w	r8, #0
 800b7ca:	d061      	beq.n	800b890 <HAL_SAI_Transmit_DMA+0xdc>
 800b7cc:	4605      	mov	r5, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 800b7ce:	f894 707d 	ldrb.w	r7, [r4, #125]	@ 0x7d
 800b7d2:	b2ff      	uxtb	r7, r7
 800b7d4:	2f01      	cmp	r7, #1
 800b7d6:	d15f      	bne.n	800b898 <HAL_SAI_Transmit_DMA+0xe4>
    __HAL_LOCK(hsai);
 800b7d8:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d05d      	beq.n	800b89c <HAL_SAI_Transmit_DMA+0xe8>
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    hsai->pBuffPtr = pData;
 800b7e6:	f8c4 8064 	str.w	r8, [r4, #100]	@ 0x64
    hsai->XferSize = Size;
 800b7ea:	f8a4 6068 	strh.w	r6, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 800b7ee:	f8a4 606a 	strh.w	r6, [r4, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800b7f8:	2212      	movs	r2, #18
 800b7fa:	f884 207d 	strb.w	r2, [r4, #125]	@ 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b7fe:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800b800:	4927      	ldr	r1, [pc, #156]	@ (800b8a0 <HAL_SAI_Transmit_DMA+0xec>)
 800b802:	6411      	str	r1, [r2, #64]	@ 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b804:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800b806:	4927      	ldr	r1, [pc, #156]	@ (800b8a4 <HAL_SAI_Transmit_DMA+0xf0>)
 800b808:	63d1      	str	r1, [r2, #60]	@ 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800b80a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800b80c:	4926      	ldr	r1, [pc, #152]	@ (800b8a8 <HAL_SAI_Transmit_DMA+0xf4>)
 800b80e:	64d1      	str	r1, [r2, #76]	@ 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800b810:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800b812:	6513      	str	r3, [r2, #80]	@ 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800b814:	6822      	ldr	r2, [r4, #0]
 800b816:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 800b81a:	321c      	adds	r2, #28
 800b81c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800b81e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800b820:	f7fc fdbe 	bl	80083a0 <HAL_DMA_Start_IT>
 800b824:	4606      	mov	r6, r0
 800b826:	bb10      	cbnz	r0, 800b86e <HAL_SAI_Transmit_DMA+0xba>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b828:	2100      	movs	r1, #0
 800b82a:	4620      	mov	r0, r4
 800b82c:	f7ff fe60 	bl	800b4f0 <SAI_InterruptFlag>
 800b830:	6822      	ldr	r2, [r4, #0]
 800b832:	6913      	ldr	r3, [r2, #16]
 800b834:	4303      	orrs	r3, r0
 800b836:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b838:	6822      	ldr	r2, [r4, #0]
 800b83a:	6813      	ldr	r3, [r2, #0]
 800b83c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b840:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b842:	6823      	ldr	r3, [r4, #0]
 800b844:	695a      	ldr	r2, [r3, #20]
 800b846:	f412 2fe0 	tst.w	r2, #458752	@ 0x70000
 800b84a:	d114      	bne.n	800b876 <HAL_SAI_Transmit_DMA+0xc2>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800b84c:	f7fc f992 	bl	8007b74 <HAL_GetTick>
 800b850:	1b43      	subs	r3, r0, r5
 800b852:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b856:	d9f4      	bls.n	800b842 <HAL_SAI_Transmit_DMA+0x8e>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b858:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b85c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b860:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        __HAL_UNLOCK(hsai);
 800b864:	2300      	movs	r3, #0
 800b866:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 800b86a:	2703      	movs	r7, #3
 800b86c:	e011      	b.n	800b892 <HAL_SAI_Transmit_DMA+0xde>
      __HAL_UNLOCK(hsai);
 800b86e:	2300      	movs	r3, #0
 800b870:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
      return  HAL_ERROR;
 800b874:	e00d      	b.n	800b892 <HAL_SAI_Transmit_DMA+0xde>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 800b87c:	d103      	bne.n	800b886 <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b884:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800b886:	2300      	movs	r3, #0
 800b888:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 800b88c:	4637      	mov	r7, r6
 800b88e:	e000      	b.n	800b892 <HAL_SAI_Transmit_DMA+0xde>
    return  HAL_ERROR;
 800b890:	2701      	movs	r7, #1
}
 800b892:	4638      	mov	r0, r7
 800b894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800b898:	2702      	movs	r7, #2
 800b89a:	e7fa      	b.n	800b892 <HAL_SAI_Transmit_DMA+0xde>
    __HAL_LOCK(hsai);
 800b89c:	2702      	movs	r7, #2
 800b89e:	e7f8      	b.n	800b892 <HAL_SAI_Transmit_DMA+0xde>
 800b8a0:	0800b9a7 	.word	0x0800b9a7
 800b8a4:	0800b96d 	.word	0x0800b96d
 800b8a8:	0800b9f5 	.word	0x0800b9f5

0800b8ac <HAL_SAI_Receive_DMA>:
{
 800b8ac:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0))
 800b8ae:	2a00      	cmp	r2, #0
 800b8b0:	bf18      	it	ne
 800b8b2:	2900      	cmpne	r1, #0
 800b8b4:	d04c      	beq.n	800b950 <HAL_SAI_Receive_DMA+0xa4>
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	4613      	mov	r3, r2
  if (hsai->State == HAL_SAI_STATE_READY)
 800b8ba:	f894 507d 	ldrb.w	r5, [r4, #125]	@ 0x7d
 800b8be:	b2ed      	uxtb	r5, r5
 800b8c0:	2d01      	cmp	r5, #1
 800b8c2:	d148      	bne.n	800b956 <HAL_SAI_Receive_DMA+0xaa>
    __HAL_LOCK(hsai);
 800b8c4:	f894 207c 	ldrb.w	r2, [r4, #124]	@ 0x7c
 800b8c8:	2a01      	cmp	r2, #1
 800b8ca:	d046      	beq.n	800b95a <HAL_SAI_Receive_DMA+0xae>
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f884 207c 	strb.w	r2, [r4, #124]	@ 0x7c
    hsai->pBuffPtr = pData;
 800b8d2:	6661      	str	r1, [r4, #100]	@ 0x64
    hsai->XferSize = Size;
 800b8d4:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 800b8d8:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800b8e2:	2222      	movs	r2, #34	@ 0x22
 800b8e4:	f884 207d 	strb.w	r2, [r4, #125]	@ 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800b8e8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800b8ea:	491d      	ldr	r1, [pc, #116]	@ (800b960 <HAL_SAI_Receive_DMA+0xb4>)
 800b8ec:	6411      	str	r1, [r2, #64]	@ 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800b8ee:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800b8f0:	491c      	ldr	r1, [pc, #112]	@ (800b964 <HAL_SAI_Receive_DMA+0xb8>)
 800b8f2:	63d1      	str	r1, [r2, #60]	@ 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800b8f4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800b8f6:	491c      	ldr	r1, [pc, #112]	@ (800b968 <HAL_SAI_Receive_DMA+0xbc>)
 800b8f8:	64d1      	str	r1, [r2, #76]	@ 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 800b8fa:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800b8fc:	6513      	str	r3, [r2, #80]	@ 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800b8fe:	6821      	ldr	r1, [r4, #0]
 800b900:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 800b904:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b906:	311c      	adds	r1, #28
 800b908:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800b90a:	f7fc fd49 	bl	80083a0 <HAL_DMA_Start_IT>
 800b90e:	4606      	mov	r6, r0
 800b910:	b118      	cbz	r0, 800b91a <HAL_SAI_Receive_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 800b912:	2300      	movs	r3, #0
 800b914:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
      return  HAL_ERROR;
 800b918:	e01b      	b.n	800b952 <HAL_SAI_Receive_DMA+0xa6>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b91a:	2100      	movs	r1, #0
 800b91c:	4620      	mov	r0, r4
 800b91e:	f7ff fde7 	bl	800b4f0 <SAI_InterruptFlag>
 800b922:	6822      	ldr	r2, [r4, #0]
 800b924:	6913      	ldr	r3, [r2, #16]
 800b926:	4303      	orrs	r3, r0
 800b928:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b92a:	6822      	ldr	r2, [r4, #0]
 800b92c:	6813      	ldr	r3, [r2, #0]
 800b92e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b932:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800b934:	6823      	ldr	r3, [r4, #0]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 800b93c:	d103      	bne.n	800b946 <HAL_SAI_Receive_DMA+0x9a>
      __HAL_SAI_ENABLE(hsai);
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b944:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800b946:	2300      	movs	r3, #0
 800b948:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 800b94c:	4635      	mov	r5, r6
 800b94e:	e000      	b.n	800b952 <HAL_SAI_Receive_DMA+0xa6>
    return  HAL_ERROR;
 800b950:	2501      	movs	r5, #1
}
 800b952:	4628      	mov	r0, r5
 800b954:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800b956:	2502      	movs	r5, #2
 800b958:	e7fb      	b.n	800b952 <HAL_SAI_Receive_DMA+0xa6>
    __HAL_LOCK(hsai);
 800b95a:	2502      	movs	r5, #2
 800b95c:	e7f9      	b.n	800b952 <HAL_SAI_Receive_DMA+0xa6>
 800b95e:	bf00      	nop
 800b960:	0800b9eb 	.word	0x0800b9eb
 800b964:	0800b9b1 	.word	0x0800b9b1
 800b968:	0800b9f5 	.word	0x0800b9f5

0800b96c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800b96c:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b96e:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b970:	69c3      	ldr	r3, [r0, #28]
 800b972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b976:	d012      	beq.n	800b99e <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 800b978:	2100      	movs	r1, #0
 800b97a:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b97e:	6822      	ldr	r2, [r4, #0]
 800b980:	6813      	ldr	r3, [r2, #0]
 800b982:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b986:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b988:	4620      	mov	r0, r4
 800b98a:	f7ff fdb1 	bl	800b4f0 <SAI_InterruptFlag>
 800b98e:	6822      	ldr	r2, [r4, #0]
 800b990:	6913      	ldr	r3, [r2, #16]
 800b992:	ea23 0300 	bic.w	r3, r3, r0
 800b996:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b998:	2301      	movs	r3, #1
 800b99a:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f7fa fbef 	bl	8006182 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800b9a4:	bd10      	pop	{r4, pc}

0800b9a6 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b9a6:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800b9a8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800b9aa:	f7fa fbef 	bl	800618c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800b9ae:	bd08      	pop	{r3, pc}

0800b9b0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800b9b0:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9b2:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b9b4:	69c3      	ldr	r3, [r0, #28]
 800b9b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9ba:	d012      	beq.n	800b9e2 <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b9bc:	6822      	ldr	r2, [r4, #0]
 800b9be:	6813      	ldr	r3, [r2, #0]
 800b9c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b9c4:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f7ff fd8f 	bl	800b4f0 <SAI_InterruptFlag>
 800b9d2:	6822      	ldr	r2, [r4, #0]
 800b9d4:	6913      	ldr	r3, [r2, #16]
 800b9d6:	ea23 0300 	bic.w	r3, r3, r0
 800b9da:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f7fa fd44 	bl	8006470 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800b9e8:	bd10      	pop	{r4, pc}

0800b9ea <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b9ea:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800b9ec:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800b9ee:	f7fa ffd3 	bl	8006998 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800b9f2:	bd08      	pop	{r3, pc}

0800b9f4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b9f4:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9f6:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b9f8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b9fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba00:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800ba04:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800ba06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d007      	beq.n	800ba1c <SAI_DMAError+0x28>
 800ba0c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ba0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d003      	beq.n	800ba1c <SAI_DMAError+0x28>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ba14:	4620      	mov	r0, r4
 800ba16:	f7fa ffd7 	bl	80069c8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ba1a:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ba1c:	6822      	ldr	r2, [r4, #0]
 800ba1e:	6813      	ldr	r3, [r2, #0]
 800ba20:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ba24:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 800ba26:	4620      	mov	r0, r4
 800ba28:	f7ff fd7c 	bl	800b524 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    hsai->XferCount = 0U;
 800ba32:	2300      	movs	r3, #0
 800ba34:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 800ba38:	e7ec      	b.n	800ba14 <SAI_DMAError+0x20>

0800ba3a <HAL_SAI_GetState>:
  return hsai->State;
 800ba3a:	f890 007d 	ldrb.w	r0, [r0, #125]	@ 0x7d
}
 800ba3e:	4770      	bx	lr

0800ba40 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800ba46:	2300      	movs	r3, #0
 800ba48:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ba4a:	6800      	ldr	r0, [r0, #0]
 800ba4c:	f001 fce0 	bl	800d410 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba50:	4605      	mov	r5, r0
 800ba52:	b110      	cbz	r0, 800ba5a <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 800ba54:	4628      	mov	r0, r5
 800ba56:	b002      	add	sp, #8
 800ba58:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ba5a:	6820      	ldr	r0, [r4, #0]
 800ba5c:	f001 ffd2 	bl	800da04 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba60:	b938      	cbnz	r0, 800ba72 <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ba62:	2301      	movs	r3, #1
 800ba64:	64a3      	str	r3, [r4, #72]	@ 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ba66:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d00b      	beq.n	800ba84 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ba6c:	462e      	mov	r6, r5
 800ba6e:	4628      	mov	r0, r5
 800ba70:	e014      	b.n	800ba9c <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ba72:	2300      	movs	r3, #0
 800ba74:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ba76:	6820      	ldr	r0, [r4, #0]
 800ba78:	f001 fcca 	bl	800d410 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d0f2      	beq.n	800ba66 <SD_PowerON+0x26>
      return errorstate;
 800ba80:	4605      	mov	r5, r0
 800ba82:	e7e7      	b.n	800ba54 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ba84:	2100      	movs	r1, #0
 800ba86:	6820      	ldr	r0, [r4, #0]
 800ba88:	f001 fe2a 	bl	800d6e0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d0ed      	beq.n	800ba6c <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba90:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800ba94:	e7de      	b.n	800ba54 <SD_PowerON+0x14>
    count++;
 800ba96:	9b01      	ldr	r3, [sp, #4]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ba9c:	9a01      	ldr	r2, [sp, #4]
 800ba9e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d813      	bhi.n	800bace <SD_PowerON+0x8e>
 800baa6:	b996      	cbnz	r6, 800bace <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800baa8:	2100      	movs	r1, #0
 800baaa:	6820      	ldr	r0, [r4, #0]
 800baac:	f001 fe18 	bl	800d6e0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bab0:	b9e0      	cbnz	r0, 800baec <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bab2:	4912      	ldr	r1, [pc, #72]	@ (800bafc <SD_PowerON+0xbc>)
 800bab4:	6820      	ldr	r0, [r4, #0]
 800bab6:	f001 fef1 	bl	800d89c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800baba:	4606      	mov	r6, r0
 800babc:	b9c0      	cbnz	r0, 800baf0 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800babe:	2100      	movs	r1, #0
 800bac0:	6820      	ldr	r0, [r4, #0]
 800bac2:	f001 fc90 	bl	800d3e6 <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bac6:	0fc3      	lsrs	r3, r0, #31
 800bac8:	d0e5      	beq.n	800ba96 <SD_PowerON+0x56>
 800baca:	461e      	mov	r6, r3
 800bacc:	e7e3      	b.n	800ba96 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bace:	9a01      	ldr	r2, [sp, #4]
 800bad0:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d80e      	bhi.n	800baf6 <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bad8:	f010 4380 	ands.w	r3, r0, #1073741824	@ 0x40000000
 800badc:	d002      	beq.n	800bae4 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bade:	2301      	movs	r3, #1
 800bae0:	6463      	str	r3, [r4, #68]	@ 0x44
 800bae2:	e7b7      	b.n	800ba54 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 800bae4:	2200      	movs	r2, #0
 800bae6:	6462      	str	r2, [r4, #68]	@ 0x44
  return HAL_SD_ERROR_NONE;
 800bae8:	461d      	mov	r5, r3
 800baea:	e7b3      	b.n	800ba54 <SD_PowerON+0x14>
      return errorstate;
 800baec:	4605      	mov	r5, r0
 800baee:	e7b1      	b.n	800ba54 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800baf0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800baf4:	e7ae      	b.n	800ba54 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800baf6:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 800bafa:	e7ab      	b.n	800ba54 <SD_PowerON+0x14>
 800bafc:	c1100000 	.word	0xc1100000

0800bb00 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bb00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb02:	b089      	sub	sp, #36	@ 0x24
 800bb04:	4604      	mov	r4, r0
 800bb06:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bb08:	f7fc f834 	bl	8007b74 <HAL_GetTick>
 800bb0c:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 800bb0e:	2300      	movs	r3, #0
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bb14:	2108      	movs	r1, #8
 800bb16:	6820      	ldr	r0, [r4, #0]
 800bb18:	f001 fd38 	bl	800d58c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	b110      	cbz	r0, 800bb26 <SD_FindSCR+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800bb20:	4628      	mov	r0, r5
 800bb22:	b009      	add	sp, #36	@ 0x24
 800bb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bb26:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800bb28:	0409      	lsls	r1, r1, #16
 800bb2a:	6820      	ldr	r0, [r4, #0]
 800bb2c:	f001 fdd8 	bl	800d6e0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb30:	4605      	mov	r5, r0
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d1f4      	bne.n	800bb20 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bb36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb3a:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 800bb3c:	2308      	movs	r3, #8
 800bb3e:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bb40:	2330      	movs	r3, #48	@ 0x30
 800bb42:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bb44:	2302      	movs	r3, #2
 800bb46:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bb50:	a902      	add	r1, sp, #8
 800bb52:	6820      	ldr	r0, [r4, #0]
 800bb54:	f001 fc4a 	bl	800d3ec <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bb58:	6820      	ldr	r0, [r4, #0]
 800bb5a:	f001 fdf1 	bl	800d740 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb5e:	4605      	mov	r5, r0
 800bb60:	b158      	cbz	r0, 800bb7a <SD_FindSCR+0x7a>
 800bb62:	e7dd      	b.n	800bb20 <SD_FindSCR+0x20>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800bb64:	f001 fc1c 	bl	800d3a0 <SDMMC_ReadFIFO>
 800bb68:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
      index++;
 800bb6c:	3501      	adds	r5, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bb6e:	f7fc f801 	bl	8007b74 <HAL_GetTick>
 800bb72:	1b83      	subs	r3, r0, r6
 800bb74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb78:	d03f      	beq.n	800bbfa <SD_FindSCR+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800bb7a:	6820      	ldr	r0, [r4, #0]
 800bb7c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bb7e:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 800bb82:	d107      	bne.n	800bb94 <SD_FindSCR+0x94>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800bb84:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bb86:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800bb8a:	d1eb      	bne.n	800bb64 <SD_FindSCR+0x64>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800bb8c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bb8e:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800bb92:	d1ec      	bne.n	800bb6e <SD_FindSCR+0x6e>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bb94:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bb96:	f013 0f08 	tst.w	r3, #8
 800bb9a:	d125      	bne.n	800bbe8 <SD_FindSCR+0xe8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bb9c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bb9e:	f013 0f02 	tst.w	r3, #2
 800bba2:	d124      	bne.n	800bbee <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bba4:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 800bba6:	f015 0520 	ands.w	r5, r5, #32
 800bbaa:	d123      	bne.n	800bbf4 <SD_FindSCR+0xf4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bbac:	f240 533a 	movw	r3, #1338	@ 0x53a
 800bbb0:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bbb2:	9a01      	ldr	r2, [sp, #4]
 800bbb4:	0213      	lsls	r3, r2, #8
 800bbb6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bbba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bbbe:	0a11      	lsrs	r1, r2, #8
 800bbc0:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bbc4:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bbc6:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bbca:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bbcc:	9a00      	ldr	r2, [sp, #0]
 800bbce:	0213      	lsls	r3, r2, #8
 800bbd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bbd4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bbd8:	0a11      	lsrs	r1, r2, #8
 800bbda:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bbde:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bbe0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bbe4:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800bbe6:	e79b      	b.n	800bb20 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bbe8:	2508      	movs	r5, #8
 800bbea:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bbec:	e798      	b.n	800bb20 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bbee:	2502      	movs	r5, #2
 800bbf0:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bbf2:	e795      	b.n	800bb20 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bbf4:	2520      	movs	r5, #32
 800bbf6:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800bbf8:	e792      	b.n	800bb20 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 800bbfa:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 800bbfe:	e78f      	b.n	800bb20 <SD_FindSCR+0x20>

0800bc00 <SD_WideBus_Enable>:
{
 800bc00:	b510      	push	{r4, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 800bc06:	2100      	movs	r1, #0
 800bc08:	9100      	str	r1, [sp, #0]
 800bc0a:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bc0c:	6800      	ldr	r0, [r0, #0]
 800bc0e:	f001 fbea 	bl	800d3e6 <SDMMC_GetResponse>
 800bc12:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800bc16:	d113      	bne.n	800bc40 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800bc18:	4669      	mov	r1, sp
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f7ff ff70 	bl	800bb00 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc20:	b980      	cbnz	r0, 800bc44 <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bc22:	9b01      	ldr	r3, [sp, #4]
 800bc24:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800bc28:	d00e      	beq.n	800bc48 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc2a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800bc2c:	0409      	lsls	r1, r1, #16
 800bc2e:	6820      	ldr	r0, [r4, #0]
 800bc30:	f001 fd56 	bl	800d6e0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc34:	b930      	cbnz	r0, 800bc44 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bc36:	2102      	movs	r1, #2
 800bc38:	6820      	ldr	r0, [r4, #0]
 800bc3a:	f001 fd69 	bl	800d710 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc3e:	e001      	b.n	800bc44 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bc40:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 800bc44:	b002      	add	sp, #8
 800bc46:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bc48:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800bc4c:	e7fa      	b.n	800bc44 <SD_WideBus_Enable+0x44>

0800bc4e <SD_WideBus_Disable>:
{
 800bc4e:	b510      	push	{r4, lr}
 800bc50:	b082      	sub	sp, #8
 800bc52:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 800bc54:	2100      	movs	r1, #0
 800bc56:	9100      	str	r1, [sp, #0]
 800bc58:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bc5a:	6800      	ldr	r0, [r0, #0]
 800bc5c:	f001 fbc3 	bl	800d3e6 <SDMMC_GetResponse>
 800bc60:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800bc64:	d113      	bne.n	800bc8e <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800bc66:	4669      	mov	r1, sp
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f7ff ff49 	bl	800bb00 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc6e:	b980      	cbnz	r0, 800bc92 <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bc70:	9b01      	ldr	r3, [sp, #4]
 800bc72:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800bc76:	d00e      	beq.n	800bc96 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc78:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800bc7a:	0409      	lsls	r1, r1, #16
 800bc7c:	6820      	ldr	r0, [r4, #0]
 800bc7e:	f001 fd2f 	bl	800d6e0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc82:	b930      	cbnz	r0, 800bc92 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bc84:	2100      	movs	r1, #0
 800bc86:	6820      	ldr	r0, [r4, #0]
 800bc88:	f001 fd42 	bl	800d710 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc8c:	e001      	b.n	800bc92 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bc8e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 800bc92:	b002      	add	sp, #8
 800bc94:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bc96:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800bc9a:	e7fa      	b.n	800bc92 <SD_WideBus_Disable+0x44>

0800bc9c <SD_SendStatus>:
{
 800bc9c:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 800bc9e:	b181      	cbz	r1, 800bcc2 <SD_SendStatus+0x26>
 800bca0:	4604      	mov	r4, r0
 800bca2:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bca4:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800bca6:	0409      	lsls	r1, r1, #16
 800bca8:	6800      	ldr	r0, [r0, #0]
 800bcaa:	f001 fd61 	bl	800d770 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcae:	4605      	mov	r5, r0
 800bcb0:	b108      	cbz	r0, 800bcb6 <SD_SendStatus+0x1a>
}
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	6820      	ldr	r0, [r4, #0]
 800bcba:	f001 fb94 	bl	800d3e6 <SDMMC_GetResponse>
 800bcbe:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 800bcc0:	e7f7      	b.n	800bcb2 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 800bcc2:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 800bcc6:	e7f4      	b.n	800bcb2 <SD_SendStatus+0x16>

0800bcc8 <HAL_SD_MspInit>:
}
 800bcc8:	4770      	bx	lr
	...

0800bccc <HAL_SD_ReadBlocks>:
{
 800bccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd0:	b087      	sub	sp, #28
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	4616      	mov	r6, r2
 800bcd8:	469b      	mov	fp, r3
 800bcda:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800bcde:	f7fb ff49 	bl	8007b74 <HAL_GetTick>
  if(NULL == pData)
 800bce2:	2c00      	cmp	r4, #0
 800bce4:	d036      	beq.n	800bd54 <HAL_SD_ReadBlocks+0x88>
 800bce6:	4681      	mov	r9, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800bce8:	f895 7034 	ldrb.w	r7, [r5, #52]	@ 0x34
 800bcec:	b2ff      	uxtb	r7, r7
 800bcee:	2f01      	cmp	r7, #1
 800bcf0:	f040 8104 	bne.w	800befc <HAL_SD_ReadBlocks+0x230>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	63ab      	str	r3, [r5, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bcf8:	eb06 030b 	add.w	r3, r6, fp
 800bcfc:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d82e      	bhi.n	800bd60 <HAL_SD_ReadBlocks+0x94>
    hsd->State = HAL_SD_STATE_BUSY;
 800bd02:	2303      	movs	r3, #3
 800bd04:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bd0e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d000      	beq.n	800bd16 <HAL_SD_ReadBlocks+0x4a>
      add *= 512U;
 800bd14:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bd16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd1a:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bd1c:	ea4f 234b 	mov.w	r3, fp, lsl #9
 800bd20:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bd22:	2390      	movs	r3, #144	@ 0x90
 800bd24:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bd26:	2302      	movs	r3, #2
 800bd28:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bd32:	4669      	mov	r1, sp
 800bd34:	6828      	ldr	r0, [r5, #0]
 800bd36:	f001 fb59 	bl	800d3ec <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 800bd3a:	f1bb 0f01 	cmp.w	fp, #1
 800bd3e:	d914      	bls.n	800bd6a <HAL_SD_ReadBlocks+0x9e>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800bd40:	2302      	movs	r3, #2
 800bd42:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bd44:	4631      	mov	r1, r6
 800bd46:	6828      	ldr	r0, [r5, #0]
 800bd48:	f001 fc50 	bl	800d5ec <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd4c:	b9a0      	cbnz	r0, 800bd78 <HAL_SD_ReadBlocks+0xac>
    dataremaining = config.DataLength;
 800bd4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bd52:	e038      	b.n	800bdc6 <HAL_SD_ReadBlocks+0xfa>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bd54:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800bd56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bd5a:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 800bd5c:	2701      	movs	r7, #1
 800bd5e:	e0d2      	b.n	800bf06 <HAL_SD_ReadBlocks+0x23a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bd60:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800bd62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bd66:	63ab      	str	r3, [r5, #56]	@ 0x38
      return HAL_ERROR;
 800bd68:	e0cd      	b.n	800bf06 <HAL_SD_ReadBlocks+0x23a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bd6e:	4631      	mov	r1, r6
 800bd70:	6828      	ldr	r0, [r5, #0]
 800bd72:	f001 fc23 	bl	800d5bc <SDMMC_CmdReadSingleBlock>
 800bd76:	e7e9      	b.n	800bd4c <HAL_SD_ReadBlocks+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	4a65      	ldr	r2, [pc, #404]	@ (800bf10 <HAL_SD_ReadBlocks+0x244>)
 800bd7c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800bd7e:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800bd80:	4303      	orrs	r3, r0
 800bd82:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bd84:	2301      	movs	r3, #1
 800bd86:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800bd8e:	e0ba      	b.n	800bf06 <HAL_SD_ReadBlocks+0x23a>
          data = SDMMC_ReadFIFO(hsd->Instance);
 800bd90:	6828      	ldr	r0, [r5, #0]
 800bd92:	f001 fb05 	bl	800d3a0 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800bd96:	7020      	strb	r0, [r4, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bd98:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800bd9c:	7063      	strb	r3, [r4, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bd9e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800bda2:	70a3      	strb	r3, [r4, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800bda4:	0e00      	lsrs	r0, r0, #24
 800bda6:	70e0      	strb	r0, [r4, #3]
          tempbuff++;
 800bda8:	3404      	adds	r4, #4
          dataremaining--;
 800bdaa:	f1a8 0804 	sub.w	r8, r8, #4
        for(count = 0U; count < 8U; count++)
 800bdae:	3601      	adds	r6, #1
 800bdb0:	2e07      	cmp	r6, #7
 800bdb2:	d9ed      	bls.n	800bd90 <HAL_SD_ReadBlocks+0xc4>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bdb4:	f7fb fede 	bl	8007b74 <HAL_GetTick>
 800bdb8:	eba0 0009 	sub.w	r0, r0, r9
 800bdbc:	4550      	cmp	r0, sl
 800bdbe:	d20f      	bcs.n	800bde0 <HAL_SD_ReadBlocks+0x114>
 800bdc0:	f1ba 0f00 	cmp.w	sl, #0
 800bdc4:	d00c      	beq.n	800bde0 <HAL_SD_ReadBlocks+0x114>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bdc6:	6828      	ldr	r0, [r5, #0]
 800bdc8:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 800bdca:	f416 7695 	ands.w	r6, r6, #298	@ 0x12a
 800bdce:	d115      	bne.n	800bdfc <HAL_SD_ReadBlocks+0x130>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800bdd0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bdd2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800bdd6:	d0ed      	beq.n	800bdb4 <HAL_SD_ReadBlocks+0xe8>
 800bdd8:	f1b8 0f00 	cmp.w	r8, #0
 800bddc:	d0ea      	beq.n	800bdb4 <HAL_SD_ReadBlocks+0xe8>
 800bdde:	e7e7      	b.n	800bdb0 <HAL_SD_ReadBlocks+0xe4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	4a4b      	ldr	r2, [pc, #300]	@ (800bf10 <HAL_SD_ReadBlocks+0x244>)
 800bde4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800bde6:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800bde8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bdec:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_TIMEOUT;
 800bdf8:	2703      	movs	r7, #3
 800bdfa:	e084      	b.n	800bf06 <HAL_SD_ReadBlocks+0x23a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bdfc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bdfe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800be02:	d005      	beq.n	800be10 <HAL_SD_ReadBlocks+0x144>
 800be04:	f1bb 0f01 	cmp.w	fp, #1
 800be08:	d902      	bls.n	800be10 <HAL_SD_ReadBlocks+0x144>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800be0a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800be0c:	2b03      	cmp	r3, #3
 800be0e:	d138      	bne.n	800be82 <HAL_SD_ReadBlocks+0x1b6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800be10:	682b      	ldr	r3, [r5, #0]
 800be12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be14:	f012 0f08 	tst.w	r2, #8
 800be18:	d144      	bne.n	800bea4 <HAL_SD_ReadBlocks+0x1d8>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800be1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be1c:	f012 0f02 	tst.w	r2, #2
 800be20:	d14c      	bne.n	800bebc <HAL_SD_ReadBlocks+0x1f0>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800be22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be24:	f012 0f20 	tst.w	r2, #32
 800be28:	d154      	bne.n	800bed4 <HAL_SD_ReadBlocks+0x208>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800be2a:	6828      	ldr	r0, [r5, #0]
 800be2c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800be2e:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800be32:	d05b      	beq.n	800beec <HAL_SD_ReadBlocks+0x220>
 800be34:	f1b8 0f00 	cmp.w	r8, #0
 800be38:	d058      	beq.n	800beec <HAL_SD_ReadBlocks+0x220>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800be3a:	f001 fab1 	bl	800d3a0 <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 800be3e:	7020      	strb	r0, [r4, #0]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800be40:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800be44:	7063      	strb	r3, [r4, #1]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800be46:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800be4a:	70a3      	strb	r3, [r4, #2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800be4c:	0e00      	lsrs	r0, r0, #24
 800be4e:	70e0      	strb	r0, [r4, #3]
      tempbuff++;
 800be50:	3404      	adds	r4, #4
      dataremaining--;
 800be52:	f1a8 0804 	sub.w	r8, r8, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800be56:	f7fb fe8d 	bl	8007b74 <HAL_GetTick>
 800be5a:	eba0 0009 	sub.w	r0, r0, r9
 800be5e:	4550      	cmp	r0, sl
 800be60:	d202      	bcs.n	800be68 <HAL_SD_ReadBlocks+0x19c>
 800be62:	f1ba 0f00 	cmp.w	sl, #0
 800be66:	d1e0      	bne.n	800be2a <HAL_SD_ReadBlocks+0x15e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be68:	682b      	ldr	r3, [r5, #0]
 800be6a:	4a29      	ldr	r2, [pc, #164]	@ (800bf10 <HAL_SD_ReadBlocks+0x244>)
 800be6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800be6e:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800be70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800be74:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800be76:	2301      	movs	r3, #1
 800be78:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800be7c:	2300      	movs	r3, #0
 800be7e:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_ERROR;
 800be80:	e041      	b.n	800bf06 <HAL_SD_ReadBlocks+0x23a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800be82:	f001 fbfb 	bl	800d67c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800be86:	4603      	mov	r3, r0
 800be88:	2800      	cmp	r0, #0
 800be8a:	d0c1      	beq.n	800be10 <HAL_SD_ReadBlocks+0x144>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be8c:	682a      	ldr	r2, [r5, #0]
 800be8e:	4920      	ldr	r1, [pc, #128]	@ (800bf10 <HAL_SD_ReadBlocks+0x244>)
 800be90:	6391      	str	r1, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800be92:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800be94:	4313      	orrs	r3, r2
 800be96:	63ab      	str	r3, [r5, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800be98:	2301      	movs	r3, #1
 800be9a:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800be9e:	2300      	movs	r3, #0
 800bea0:	632b      	str	r3, [r5, #48]	@ 0x30
          return HAL_ERROR;
 800bea2:	e030      	b.n	800bf06 <HAL_SD_ReadBlocks+0x23a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bea4:	4a1a      	ldr	r2, [pc, #104]	@ (800bf10 <HAL_SD_ReadBlocks+0x244>)
 800bea6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bea8:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800beaa:	f043 0308 	orr.w	r3, r3, #8
 800beae:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800beb0:	2301      	movs	r3, #1
 800beb2:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800beb6:	2300      	movs	r3, #0
 800beb8:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800beba:	e024      	b.n	800bf06 <HAL_SD_ReadBlocks+0x23a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bebc:	4a14      	ldr	r2, [pc, #80]	@ (800bf10 <HAL_SD_ReadBlocks+0x244>)
 800bebe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bec0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800bec2:	f043 0302 	orr.w	r3, r3, #2
 800bec6:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bec8:	2301      	movs	r3, #1
 800beca:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bece:	2300      	movs	r3, #0
 800bed0:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800bed2:	e018      	b.n	800bf06 <HAL_SD_ReadBlocks+0x23a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bed4:	4a0e      	ldr	r2, [pc, #56]	@ (800bf10 <HAL_SD_ReadBlocks+0x244>)
 800bed6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bed8:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800beda:	f043 0320 	orr.w	r3, r3, #32
 800bede:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bee0:	2301      	movs	r3, #1
 800bee2:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bee6:	2300      	movs	r3, #0
 800bee8:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800beea:	e00c      	b.n	800bf06 <HAL_SD_ReadBlocks+0x23a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800beec:	f240 533a 	movw	r3, #1338	@ 0x53a
 800bef0:	6383      	str	r3, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bef2:	2301      	movs	r3, #1
 800bef4:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_OK;
 800bef8:	2700      	movs	r7, #0
 800befa:	e004      	b.n	800bf06 <HAL_SD_ReadBlocks+0x23a>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800befc:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800befe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bf02:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 800bf04:	2701      	movs	r7, #1
}
 800bf06:	4638      	mov	r0, r7
 800bf08:	b007      	add	sp, #28
 800bf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0e:	bf00      	nop
 800bf10:	004005ff 	.word	0x004005ff

0800bf14 <HAL_SD_WriteBlocks>:
{
 800bf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf18:	b08b      	sub	sp, #44	@ 0x2c
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	460c      	mov	r4, r1
 800bf1e:	4616      	mov	r6, r2
 800bf20:	469b      	mov	fp, r3
 800bf22:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 800bf26:	f7fb fe25 	bl	8007b74 <HAL_GetTick>
  if(NULL == pData)
 800bf2a:	2c00      	cmp	r4, #0
 800bf2c:	d037      	beq.n	800bf9e <HAL_SD_WriteBlocks+0x8a>
 800bf2e:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800bf30:	f895 7034 	ldrb.w	r7, [r5, #52]	@ 0x34
 800bf34:	b2ff      	uxtb	r7, r7
 800bf36:	2f01      	cmp	r7, #1
 800bf38:	f040 80e1 	bne.w	800c0fe <HAL_SD_WriteBlocks+0x1ea>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	63ab      	str	r3, [r5, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bf40:	eb06 030b 	add.w	r3, r6, fp
 800bf44:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d82f      	bhi.n	800bfaa <HAL_SD_WriteBlocks+0x96>
    hsd->State = HAL_SD_STATE_BUSY;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 800bf50:	682b      	ldr	r3, [r5, #0]
 800bf52:	2200      	movs	r2, #0
 800bf54:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bf56:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d000      	beq.n	800bf5e <HAL_SD_WriteBlocks+0x4a>
      add *= 512U;
 800bf5c:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf62:	9304      	str	r3, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bf64:	ea4f 234b 	mov.w	r3, fp, lsl #9
 800bf68:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bf6a:	2390      	movs	r3, #144	@ 0x90
 800bf6c:	9306      	str	r3, [sp, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bf72:	9308      	str	r3, [sp, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800bf74:	2301      	movs	r3, #1
 800bf76:	9309      	str	r3, [sp, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bf78:	a904      	add	r1, sp, #16
 800bf7a:	6828      	ldr	r0, [r5, #0]
 800bf7c:	f001 fa36 	bl	800d3ec <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 800bf80:	f1bb 0f01 	cmp.w	fp, #1
 800bf84:	d916      	bls.n	800bfb4 <HAL_SD_WriteBlocks+0xa0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800bf86:	2320      	movs	r3, #32
 800bf88:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bf8a:	4631      	mov	r1, r6
 800bf8c:	6828      	ldr	r0, [r5, #0]
 800bf8e:	f001 fb5d 	bl	800d64c <SDMMC_CmdWriteMultiBlock>
 800bf92:	9001      	str	r0, [sp, #4]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf94:	9b01      	ldr	r3, [sp, #4]
 800bf96:	b9ab      	cbnz	r3, 800bfc4 <HAL_SD_WriteBlocks+0xb0>
    dataremaining = config.DataLength;
 800bf98:	f8dd 9014 	ldr.w	r9, [sp, #20]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bf9c:	e040      	b.n	800c020 <HAL_SD_WriteBlocks+0x10c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bf9e:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800bfa0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bfa4:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 800bfa6:	2701      	movs	r7, #1
 800bfa8:	e0ae      	b.n	800c108 <HAL_SD_WriteBlocks+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bfaa:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800bfac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bfb0:	63ab      	str	r3, [r5, #56]	@ 0x38
      return HAL_ERROR;
 800bfb2:	e0a9      	b.n	800c108 <HAL_SD_WriteBlocks+0x1f4>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800bfb4:	2310      	movs	r3, #16
 800bfb6:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bfb8:	4631      	mov	r1, r6
 800bfba:	6828      	ldr	r0, [r5, #0]
 800bfbc:	f001 fb2e 	bl	800d61c <SDMMC_CmdWriteSingleBlock>
 800bfc0:	9001      	str	r0, [sp, #4]
 800bfc2:	e7e7      	b.n	800bf94 <HAL_SD_WriteBlocks+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfc4:	682b      	ldr	r3, [r5, #0]
 800bfc6:	4a52      	ldr	r2, [pc, #328]	@ (800c110 <HAL_SD_WriteBlocks+0x1fc>)
 800bfc8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800bfca:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800bfcc:	9a01      	ldr	r2, [sp, #4]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800bfdc:	e094      	b.n	800c108 <HAL_SD_WriteBlocks+0x1f4>
          data = (uint32_t)(*tempbuff);
 800bfde:	7823      	ldrb	r3, [r4, #0]
 800bfe0:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 8U);
 800bfe2:	7862      	ldrb	r2, [r4, #1]
 800bfe4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bfe8:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 16U);
 800bfea:	78a2      	ldrb	r2, [r4, #2]
 800bfec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bff0:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800bff2:	78e2      	ldrb	r2, [r4, #3]
 800bff4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bff8:	9303      	str	r3, [sp, #12]
          tempbuff++;
 800bffa:	3404      	adds	r4, #4
          dataremaining--;
 800bffc:	f1a9 0904 	sub.w	r9, r9, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c000:	a903      	add	r1, sp, #12
 800c002:	6828      	ldr	r0, [r5, #0]
 800c004:	f001 f9cf 	bl	800d3a6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c008:	3601      	adds	r6, #1
 800c00a:	2e07      	cmp	r6, #7
 800c00c:	d9e7      	bls.n	800bfde <HAL_SD_WriteBlocks+0xca>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c00e:	f7fb fdb1 	bl	8007b74 <HAL_GetTick>
 800c012:	eba0 0008 	sub.w	r0, r0, r8
 800c016:	4550      	cmp	r0, sl
 800c018:	d20f      	bcs.n	800c03a <HAL_SD_WriteBlocks+0x126>
 800c01a:	f1ba 0f00 	cmp.w	sl, #0
 800c01e:	d00c      	beq.n	800c03a <HAL_SD_WriteBlocks+0x126>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c020:	6828      	ldr	r0, [r5, #0]
 800c022:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 800c024:	f416 768d 	ands.w	r6, r6, #282	@ 0x11a
 800c028:	d115      	bne.n	800c056 <HAL_SD_WriteBlocks+0x142>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800c02a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c02c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800c030:	d0ed      	beq.n	800c00e <HAL_SD_WriteBlocks+0xfa>
 800c032:	f1b9 0f00 	cmp.w	r9, #0
 800c036:	d0ea      	beq.n	800c00e <HAL_SD_WriteBlocks+0xfa>
 800c038:	e7e7      	b.n	800c00a <HAL_SD_WriteBlocks+0xf6>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c03a:	682b      	ldr	r3, [r5, #0]
 800c03c:	4a34      	ldr	r2, [pc, #208]	@ (800c110 <HAL_SD_WriteBlocks+0x1fc>)
 800c03e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800c040:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800c042:	9a01      	ldr	r2, [sp, #4]
 800c044:	4313      	orrs	r3, r2
 800c046:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c048:	2301      	movs	r3, #1
 800c04a:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c04e:	2300      	movs	r3, #0
 800c050:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_TIMEOUT;
 800c052:	2703      	movs	r7, #3
 800c054:	e058      	b.n	800c108 <HAL_SD_WriteBlocks+0x1f4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c056:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c058:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800c05c:	d005      	beq.n	800c06a <HAL_SD_WriteBlocks+0x156>
 800c05e:	f1bb 0f01 	cmp.w	fp, #1
 800c062:	d902      	bls.n	800c06a <HAL_SD_WriteBlocks+0x156>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c064:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800c066:	2b03      	cmp	r3, #3
 800c068:	d118      	bne.n	800c09c <HAL_SD_WriteBlocks+0x188>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c06a:	682b      	ldr	r3, [r5, #0]
 800c06c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c06e:	f012 0f08 	tst.w	r2, #8
 800c072:	d124      	bne.n	800c0be <HAL_SD_WriteBlocks+0x1aa>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c076:	f012 0f02 	tst.w	r2, #2
 800c07a:	d12c      	bne.n	800c0d6 <HAL_SD_WriteBlocks+0x1c2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c07c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c07e:	f012 0f10 	tst.w	r2, #16
 800c082:	d034      	beq.n	800c0ee <HAL_SD_WriteBlocks+0x1da>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c084:	4a22      	ldr	r2, [pc, #136]	@ (800c110 <HAL_SD_WriteBlocks+0x1fc>)
 800c086:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c088:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800c08a:	f043 0310 	orr.w	r3, r3, #16
 800c08e:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c090:	2301      	movs	r3, #1
 800c092:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c096:	2300      	movs	r3, #0
 800c098:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800c09a:	e035      	b.n	800c108 <HAL_SD_WriteBlocks+0x1f4>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c09c:	f001 faee 	bl	800d67c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d0e1      	beq.n	800c06a <HAL_SD_WriteBlocks+0x156>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0a6:	682a      	ldr	r2, [r5, #0]
 800c0a8:	4919      	ldr	r1, [pc, #100]	@ (800c110 <HAL_SD_WriteBlocks+0x1fc>)
 800c0aa:	6391      	str	r1, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c0ac:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	63ab      	str	r3, [r5, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	632b      	str	r3, [r5, #48]	@ 0x30
          return HAL_ERROR;
 800c0bc:	e024      	b.n	800c108 <HAL_SD_WriteBlocks+0x1f4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0be:	4a14      	ldr	r2, [pc, #80]	@ (800c110 <HAL_SD_WriteBlocks+0x1fc>)
 800c0c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c0c2:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800c0c4:	f043 0308 	orr.w	r3, r3, #8
 800c0c8:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800c0d4:	e018      	b.n	800c108 <HAL_SD_WriteBlocks+0x1f4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0d6:	4a0e      	ldr	r2, [pc, #56]	@ (800c110 <HAL_SD_WriteBlocks+0x1fc>)
 800c0d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c0da:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800c0dc:	f043 0302 	orr.w	r3, r3, #2
 800c0e0:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800c0ec:	e00c      	b.n	800c108 <HAL_SD_WriteBlocks+0x1f4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c0ee:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c0f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_OK;
 800c0fa:	2700      	movs	r7, #0
 800c0fc:	e004      	b.n	800c108 <HAL_SD_WriteBlocks+0x1f4>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c0fe:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800c100:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c104:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 800c106:	2701      	movs	r7, #1
}
 800c108:	4638      	mov	r0, r7
 800c10a:	b00b      	add	sp, #44	@ 0x2c
 800c10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c110:	004005ff 	.word	0x004005ff

0800c114 <HAL_SD_GetCardCSD>:
{
 800c114:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c116:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800c118:	0f92      	lsrs	r2, r2, #30
 800c11a:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c11c:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800c11e:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800c122:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c124:	f890 2067 	ldrb.w	r2, [r0, #103]	@ 0x67
 800c128:	f002 0203 	and.w	r2, r2, #3
 800c12c:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c12e:	f890 2066 	ldrb.w	r2, [r0, #102]	@ 0x66
 800c132:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c134:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 800c138:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c13a:	f890 2064 	ldrb.w	r2, [r0, #100]	@ 0x64
 800c13e:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c140:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800c142:	0d12      	lsrs	r2, r2, #20
 800c144:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c146:	f8b0 206a 	ldrh.w	r2, [r0, #106]	@ 0x6a
 800c14a:	f002 020f 	and.w	r2, r2, #15
 800c14e:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c150:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800c152:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800c156:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c158:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800c15a:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800c15e:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c160:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800c162:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800c166:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c168:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800c16a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800c16e:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c170:	2200      	movs	r2, #0
 800c172:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800c174:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800c176:	2a00      	cmp	r2, #0
 800c178:	f040 8086 	bne.w	800c288 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c17c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c17e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800c182:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 800c186:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c188:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800c18c:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c18e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c190:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 800c194:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c196:	f893 206f 	ldrb.w	r2, [r3, #111]	@ 0x6f
 800c19a:	f002 0207 	and.w	r2, r2, #7
 800c19e:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c1a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c1a2:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800c1a6:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c1a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c1aa:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800c1ae:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c1b0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c1b2:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800c1b6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c1b8:	690a      	ldr	r2, [r1, #16]
 800c1ba:	3201      	adds	r2, #1
 800c1bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c1be:	7e08      	ldrb	r0, [r1, #24]
 800c1c0:	f000 0007 	and.w	r0, r0, #7
 800c1c4:	3002      	adds	r0, #2
 800c1c6:	4082      	lsls	r2, r0
 800c1c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c1ca:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c1ce:	f00c 0c0f 	and.w	ip, ip, #15
 800c1d2:	2001      	movs	r0, #1
 800c1d4:	fa00 f00c 	lsl.w	r0, r0, ip
 800c1d8:	6598      	str	r0, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c1da:	0a40      	lsrs	r0, r0, #9
 800c1dc:	fb00 f202 	mul.w	r2, r0, r2
 800c1e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c1e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c1e6:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c1e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c1ea:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800c1ee:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c1f0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c1f2:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800c1f6:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c1f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c1fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c1fe:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c200:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c202:	0fd2      	lsrs	r2, r2, #31
 800c204:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c206:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c208:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800c20c:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c20e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c210:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800c214:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c216:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c218:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800c21c:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c21e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c220:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800c224:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800c228:	2000      	movs	r0, #0
 800c22a:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c22e:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800c232:	f002 0201 	and.w	r2, r2, #1
 800c236:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c23a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c23c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800c240:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c244:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c246:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800c24a:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c24e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c250:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800c254:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c258:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c25a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800c25e:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c262:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c264:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800c268:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c26c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c26e:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800c272:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c278:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800c27c:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 800c280:	2301      	movs	r3, #1
 800c282:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 800c286:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c288:	2a01      	cmp	r2, #1
 800c28a:	d111      	bne.n	800c2b0 <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c28c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800c28e:	0412      	lsls	r2, r2, #16
 800c290:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 800c294:	f8b0 006e 	ldrh.w	r0, [r0, #110]	@ 0x6e
 800c298:	4302      	orrs	r2, r0
 800c29a:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c29c:	690a      	ldr	r2, [r1, #16]
 800c29e:	3201      	adds	r2, #1
 800c2a0:	0292      	lsls	r2, r2, #10
 800c2a2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c2a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c2a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2aa:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c2ac:	661a      	str	r2, [r3, #96]	@ 0x60
 800c2ae:	e79b      	b.n	800c1e8 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2b0:	6802      	ldr	r2, [r0, #0]
 800c2b2:	4905      	ldr	r1, [pc, #20]	@ (800c2c8 <HAL_SD_GetCardCSD+0x1b4>)
 800c2b4:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c2b6:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800c2b8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800c2bc:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c2be:	2001      	movs	r0, #1
 800c2c0:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	004005ff 	.word	0x004005ff

0800c2cc <SD_InitCard>:
{
 800c2cc:	b570      	push	{r4, r5, r6, lr}
 800c2ce:	b090      	sub	sp, #64	@ 0x40
 800c2d0:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c2d8:	6800      	ldr	r0, [r0, #0]
 800c2da:	f001 f86d 	bl	800d3b8 <SDMMC_GetPowerState>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d06c      	beq.n	800c3bc <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c2e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800c2e4:	2b03      	cmp	r3, #3
 800c2e6:	d145      	bne.n	800c374 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c2e8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800c2ea:	2b03      	cmp	r3, #3
 800c2ec:	d15d      	bne.n	800c3aa <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c2ee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800c2f0:	2b03      	cmp	r3, #3
 800c2f2:	d01d      	beq.n	800c330 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 800c2f4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800c2f8:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c2fa:	0409      	lsls	r1, r1, #16
 800c2fc:	6820      	ldr	r0, [r4, #0]
 800c2fe:	f001 fa92 	bl	800d826 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c302:	4605      	mov	r5, r0
 800c304:	2800      	cmp	r0, #0
 800c306:	d15b      	bne.n	800c3c0 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c308:	2100      	movs	r1, #0
 800c30a:	6820      	ldr	r0, [r4, #0]
 800c30c:	f001 f86b 	bl	800d3e6 <SDMMC_GetResponse>
 800c310:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c312:	2104      	movs	r1, #4
 800c314:	6820      	ldr	r0, [r4, #0]
 800c316:	f001 f866 	bl	800d3e6 <SDMMC_GetResponse>
 800c31a:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c31c:	2108      	movs	r1, #8
 800c31e:	6820      	ldr	r0, [r4, #0]
 800c320:	f001 f861 	bl	800d3e6 <SDMMC_GetResponse>
 800c324:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c326:	210c      	movs	r1, #12
 800c328:	6820      	ldr	r0, [r4, #0]
 800c32a:	f001 f85c 	bl	800d3e6 <SDMMC_GetResponse>
 800c32e:	6720      	str	r0, [r4, #112]	@ 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c330:	2104      	movs	r1, #4
 800c332:	6820      	ldr	r0, [r4, #0]
 800c334:	f001 f857 	bl	800d3e6 <SDMMC_GetResponse>
 800c338:	0d00      	lsrs	r0, r0, #20
 800c33a:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c33c:	a905      	add	r1, sp, #20
 800c33e:	4620      	mov	r0, r4
 800c340:	f7ff fee8 	bl	800c114 <HAL_SD_GetCardCSD>
 800c344:	2800      	cmp	r0, #0
 800c346:	d13e      	bne.n	800c3c6 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c348:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800c34a:	0412      	lsls	r2, r2, #16
 800c34c:	2300      	movs	r3, #0
 800c34e:	6820      	ldr	r0, [r4, #0]
 800c350:	f001 f9ae 	bl	800d6b0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c354:	4605      	mov	r5, r0
 800c356:	bb98      	cbnz	r0, 800c3c0 <SD_InitCard+0xf4>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c358:	4623      	mov	r3, r4
 800c35a:	f853 6b10 	ldr.w	r6, [r3], #16
 800c35e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c362:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c366:	3404      	adds	r4, #4
 800c368:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c36c:	4630      	mov	r0, r6
 800c36e:	f000 fffd 	bl	800d36c <SDMMC_Init>
  return HAL_SD_ERROR_NONE;
 800c372:	e025      	b.n	800c3c0 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c374:	6820      	ldr	r0, [r4, #0]
 800c376:	f001 fa41 	bl	800d7fc <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c37a:	4605      	mov	r5, r0
 800c37c:	bb00      	cbnz	r0, 800c3c0 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c37e:	2100      	movs	r1, #0
 800c380:	6820      	ldr	r0, [r4, #0]
 800c382:	f001 f830 	bl	800d3e6 <SDMMC_GetResponse>
 800c386:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c388:	2104      	movs	r1, #4
 800c38a:	6820      	ldr	r0, [r4, #0]
 800c38c:	f001 f82b 	bl	800d3e6 <SDMMC_GetResponse>
 800c390:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c392:	2108      	movs	r1, #8
 800c394:	6820      	ldr	r0, [r4, #0]
 800c396:	f001 f826 	bl	800d3e6 <SDMMC_GetResponse>
 800c39a:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c39c:	210c      	movs	r1, #12
 800c39e:	6820      	ldr	r0, [r4, #0]
 800c3a0:	f001 f821 	bl	800d3e6 <SDMMC_GetResponse>
 800c3a4:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 800c3a8:	e79e      	b.n	800c2e8 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c3aa:	f10d 0112 	add.w	r1, sp, #18
 800c3ae:	6820      	ldr	r0, [r4, #0]
 800c3b0:	f001 fade 	bl	800d970 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d099      	beq.n	800c2ee <SD_InitCard+0x22>
 800c3ba:	e001      	b.n	800c3c0 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c3bc:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
}
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	b010      	add	sp, #64	@ 0x40
 800c3c4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c3c6:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800c3ca:	e7f9      	b.n	800c3c0 <SD_InitCard+0xf4>

0800c3cc <HAL_SD_InitCard>:
{
 800c3cc:	b530      	push	{r4, r5, lr}
 800c3ce:	b08b      	sub	sp, #44	@ 0x2c
 800c3d0:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c3d6:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c3d8:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c3da:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c3dc:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c3de:	2376      	movs	r3, #118	@ 0x76
 800c3e0:	9309      	str	r3, [sp, #36]	@ 0x24
  status = SDMMC_Init(hsd->Instance, Init);
 800c3e2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c3e4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800c3e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c3ec:	ab04      	add	r3, sp, #16
 800c3ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c3f0:	6820      	ldr	r0, [r4, #0]
 800c3f2:	f000 ffbb 	bl	800d36c <SDMMC_Init>
  if(status != HAL_OK)
 800c3f6:	b118      	cbz	r0, 800c400 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 800c3f8:	2501      	movs	r5, #1
}
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	b00b      	add	sp, #44	@ 0x2c
 800c3fe:	bd30      	pop	{r4, r5, pc}
 800c400:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 800c402:	6822      	ldr	r2, [r4, #0]
 800c404:	6853      	ldr	r3, [r2, #4]
 800c406:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c40a:	6053      	str	r3, [r2, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c40c:	6820      	ldr	r0, [r4, #0]
 800c40e:	f000 ffcf 	bl	800d3b0 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800c412:	6822      	ldr	r2, [r4, #0]
 800c414:	6853      	ldr	r3, [r2, #4]
 800c416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c41a:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 800c41c:	2002      	movs	r0, #2
 800c41e:	f7fb fbaf 	bl	8007b80 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 800c422:	4620      	mov	r0, r4
 800c424:	f7ff fb0c 	bl	800ba40 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c428:	b130      	cbz	r0, 800c438 <HAL_SD_InitCard+0x6c>
    hsd->State = HAL_SD_STATE_READY;
 800c42a:	2501      	movs	r5, #1
 800c42c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c430:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c432:	4303      	orrs	r3, r0
 800c434:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 800c436:	e7e0      	b.n	800c3fa <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 800c438:	4620      	mov	r0, r4
 800c43a:	f7ff ff47 	bl	800c2cc <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c43e:	b130      	cbz	r0, 800c44e <HAL_SD_InitCard+0x82>
    hsd->State = HAL_SD_STATE_READY;
 800c440:	2501      	movs	r5, #1
 800c442:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c446:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c448:	4303      	orrs	r3, r0
 800c44a:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 800c44c:	e7d5      	b.n	800c3fa <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c44e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c452:	6820      	ldr	r0, [r4, #0]
 800c454:	f001 f89a 	bl	800d58c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c458:	2800      	cmp	r0, #0
 800c45a:	d0ce      	beq.n	800c3fa <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c45c:	6823      	ldr	r3, [r4, #0]
 800c45e:	4904      	ldr	r1, [pc, #16]	@ (800c470 <HAL_SD_InitCard+0xa4>)
 800c460:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c462:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c464:	4303      	orrs	r3, r0
 800c466:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c468:	2501      	movs	r5, #1
 800c46a:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800c46e:	e7c4      	b.n	800c3fa <HAL_SD_InitCard+0x2e>
 800c470:	004005ff 	.word	0x004005ff

0800c474 <HAL_SD_Init>:
  if(hsd == NULL)
 800c474:	b1a8      	cbz	r0, 800c4a2 <HAL_SD_Init+0x2e>
{
 800c476:	b510      	push	{r4, lr}
 800c478:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 800c47a:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800c47e:	b163      	cbz	r3, 800c49a <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 800c480:	2303      	movs	r3, #3
 800c482:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c486:	4620      	mov	r0, r4
 800c488:	f7ff ffa0 	bl	800c3cc <HAL_SD_InitCard>
 800c48c:	b958      	cbnz	r0, 800c4a6 <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c48e:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800c490:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 800c492:	2301      	movs	r3, #1
 800c494:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800c498:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 800c49a:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 800c49c:	f7ff fc14 	bl	800bcc8 <HAL_SD_MspInit>
 800c4a0:	e7ee      	b.n	800c480 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 800c4a2:	2001      	movs	r0, #1
}
 800c4a4:	4770      	bx	lr
    return HAL_ERROR;
 800c4a6:	2001      	movs	r0, #1
 800c4a8:	e7f6      	b.n	800c498 <HAL_SD_Init+0x24>

0800c4aa <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c4aa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800c4ac:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c4ae:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800c4b0:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c4b2:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800c4b4:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c4b6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800c4b8:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c4ba:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c4bc:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c4be:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800c4c0:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c4c2:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800c4c4:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c4c6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800c4c8:	61cb      	str	r3, [r1, #28]
}
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	4770      	bx	lr
	...

0800c4d0 <HAL_SD_ConfigWideBusOperation>:
{
 800c4d0:	b530      	push	{r4, r5, lr}
 800c4d2:	b08b      	sub	sp, #44	@ 0x2c
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c4de:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800c4e0:	2b03      	cmp	r3, #3
 800c4e2:	d01c      	beq.n	800c51e <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c4e4:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800c4e8:	d008      	beq.n	800c4fc <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c4ea:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800c4ee:	d00a      	beq.n	800c506 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c4f0:	b179      	cbz	r1, 800c512 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c4f2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c4f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c4f8:	6383      	str	r3, [r0, #56]	@ 0x38
 800c4fa:	e014      	b.n	800c526 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c4fc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c4fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c502:	6383      	str	r3, [r0, #56]	@ 0x38
 800c504:	e00f      	b.n	800c526 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 800c506:	f7ff fb7b 	bl	800bc00 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 800c50a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c50c:	4303      	orrs	r3, r0
 800c50e:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c510:	e009      	b.n	800c526 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 800c512:	f7ff fb9c 	bl	800bc4e <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 800c516:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c518:	4303      	orrs	r3, r0
 800c51a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c51c:	e003      	b.n	800c526 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c51e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c524:	6383      	str	r3, [r0, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c526:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c528:	b1c3      	cbz	r3, 800c55c <HAL_SD_ConfigWideBusOperation+0x8c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	4a17      	ldr	r2, [pc, #92]	@ (800c58c <HAL_SD_ConfigWideBusOperation+0xbc>)
 800c52e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c530:	2501      	movs	r5, #1
 800c532:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c536:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c53a:	6820      	ldr	r0, [r4, #0]
 800c53c:	f001 f826 	bl	800d58c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c540:	b130      	cbz	r0, 800c550 <HAL_SD_ConfigWideBusOperation+0x80>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	4911      	ldr	r1, [pc, #68]	@ (800c58c <HAL_SD_ConfigWideBusOperation+0xbc>)
 800c546:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c548:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c54a:	4303      	orrs	r3, r0
 800c54c:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 800c54e:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 800c550:	2301      	movs	r3, #1
 800c552:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800c556:	4628      	mov	r0, r5
 800c558:	b00b      	add	sp, #44	@ 0x2c
 800c55a:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c55c:	6863      	ldr	r3, [r4, #4]
 800c55e:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c560:	68a3      	ldr	r3, [r4, #8]
 800c562:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c564:	68e3      	ldr	r3, [r4, #12]
 800c566:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 800c568:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c56a:	6963      	ldr	r3, [r4, #20]
 800c56c:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c56e:	69a3      	ldr	r3, [r4, #24]
 800c570:	9309      	str	r3, [sp, #36]	@ 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 800c572:	ab0a      	add	r3, sp, #40	@ 0x28
 800c574:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800c578:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c57c:	ab04      	add	r3, sp, #16
 800c57e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c580:	6820      	ldr	r0, [r4, #0]
 800c582:	f000 fef3 	bl	800d36c <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800c586:	2500      	movs	r5, #0
 800c588:	e7d5      	b.n	800c536 <HAL_SD_ConfigWideBusOperation+0x66>
 800c58a:	bf00      	nop
 800c58c:	004005ff 	.word	0x004005ff

0800c590 <HAL_SD_GetCardState>:
{
 800c590:	b510      	push	{r4, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 800c59a:	a901      	add	r1, sp, #4
 800c59c:	f7ff fb7e 	bl	800bc9c <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5a0:	b110      	cbz	r0, 800c5a8 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 800c5a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c5a4:	4303      	orrs	r3, r0
 800c5a6:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800c5a8:	9801      	ldr	r0, [sp, #4]
 800c5aa:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800c5ae:	b002      	add	sp, #8
 800c5b0:	bd10      	pop	{r4, pc}

0800c5b2 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800c5b2:	4770      	bx	lr

0800c5b4 <HAL_SDRAM_Init>:
  if (hsdram == NULL)
 800c5b4:	b1e0      	cbz	r0, 800c5f0 <HAL_SDRAM_Init+0x3c>
{
 800c5b6:	b538      	push	{r3, r4, r5, lr}
 800c5b8:	460d      	mov	r5, r1
 800c5ba:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c5bc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800c5c0:	b18b      	cbz	r3, 800c5e6 <HAL_SDRAM_Init+0x32>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	f851 0b04 	ldr.w	r0, [r1], #4
 800c5ce:	f000 fe07 	bl	800d1e0 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c5d2:	6862      	ldr	r2, [r4, #4]
 800c5d4:	4629      	mov	r1, r5
 800c5d6:	6820      	ldr	r0, [r4, #0]
 800c5d8:	f000 fe3a 	bl	800d250 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  return HAL_OK;
 800c5e2:	2000      	movs	r0, #0
}
 800c5e4:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800c5e6:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800c5ea:	f7ff ffe2 	bl	800c5b2 <HAL_SDRAM_MspInit>
 800c5ee:	e7e8      	b.n	800c5c2 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800c5f0:	2001      	movs	r0, #1
}
 800c5f2:	4770      	bx	lr

0800c5f4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c5f4:	b538      	push	{r3, r4, r5, lr}
 800c5f6:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c5f8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800c5fc:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c5fe:	2802      	cmp	r0, #2
 800c600:	d005      	beq.n	800c60e <HAL_SDRAM_SendCommand+0x1a>
 800c602:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c604:	2805      	cmp	r0, #5
 800c606:	bf18      	it	ne
 800c608:	2801      	cmpne	r0, #1
 800c60a:	d001      	beq.n	800c610 <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800c60c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800c60e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c610:	2302      	movs	r3, #2
 800c612:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c616:	6820      	ldr	r0, [r4, #0]
 800c618:	f000 fe6e 	bl	800d2f8 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c61c:	682b      	ldr	r3, [r5, #0]
 800c61e:	2b02      	cmp	r3, #2
 800c620:	d004      	beq.n	800c62c <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c622:	2301      	movs	r3, #1
 800c624:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  return HAL_OK;
 800c628:	2000      	movs	r0, #0
 800c62a:	e7f0      	b.n	800c60e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c62c:	2305      	movs	r3, #5
 800c62e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  return HAL_OK;
 800c632:	2000      	movs	r0, #0
 800c634:	e7eb      	b.n	800c60e <HAL_SDRAM_SendCommand+0x1a>

0800c636 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c636:	b510      	push	{r4, lr}
 800c638:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c63a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800c63e:	b2d8      	uxtb	r0, r3
 800c640:	2802      	cmp	r0, #2
 800c642:	d005      	beq.n	800c650 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c644:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d001      	beq.n	800c652 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800c64e:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800c650:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c652:	2302      	movs	r3, #2
 800c654:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c658:	6820      	ldr	r0, [r4, #0]
 800c65a:	f000 fe62 	bl	800d322 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c65e:	2301      	movs	r3, #1
 800c660:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  return HAL_OK;
 800c664:	2000      	movs	r0, #0
 800c666:	e7f3      	b.n	800c650 <HAL_SDRAM_ProgramRefreshRate+0x1a>

0800c668 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c668:	4770      	bx	lr
	...

0800c66c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c66c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c670:	b2db      	uxtb	r3, r3
 800c672:	2b01      	cmp	r3, #1
 800c674:	d13a      	bne.n	800c6ec <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c676:	2302      	movs	r3, #2
 800c678:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c67c:	6802      	ldr	r2, [r0, #0]
 800c67e:	68d3      	ldr	r3, [r2, #12]
 800c680:	f043 0301 	orr.w	r3, r3, #1
 800c684:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c686:	6803      	ldr	r3, [r0, #0]
 800c688:	4a1a      	ldr	r2, [pc, #104]	@ (800c6f4 <HAL_TIM_Base_Start_IT+0x88>)
 800c68a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c68e:	bf18      	it	ne
 800c690:	4293      	cmpne	r3, r2
 800c692:	d01d      	beq.n	800c6d0 <HAL_TIM_Base_Start_IT+0x64>
 800c694:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c698:	4293      	cmp	r3, r2
 800c69a:	d019      	beq.n	800c6d0 <HAL_TIM_Base_Start_IT+0x64>
 800c69c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d015      	beq.n	800c6d0 <HAL_TIM_Base_Start_IT+0x64>
 800c6a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d011      	beq.n	800c6d0 <HAL_TIM_Base_Start_IT+0x64>
 800c6ac:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d00d      	beq.n	800c6d0 <HAL_TIM_Base_Start_IT+0x64>
 800c6b4:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d009      	beq.n	800c6d0 <HAL_TIM_Base_Start_IT+0x64>
 800c6bc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d005      	beq.n	800c6d0 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	f042 0201 	orr.w	r2, r2, #1
 800c6ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6d0:	6899      	ldr	r1, [r3, #8]
 800c6d2:	4a09      	ldr	r2, [pc, #36]	@ (800c6f8 <HAL_TIM_Base_Start_IT+0x8c>)
 800c6d4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6d6:	2a06      	cmp	r2, #6
 800c6d8:	bf18      	it	ne
 800c6da:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 800c6de:	d007      	beq.n	800c6f0 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800c6e0:	681a      	ldr	r2, [r3, #0]
 800c6e2:	f042 0201 	orr.w	r2, r2, #1
 800c6e6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	4770      	bx	lr
    return HAL_ERROR;
 800c6ec:	2001      	movs	r0, #1
 800c6ee:	4770      	bx	lr
  return HAL_OK;
 800c6f0:	2000      	movs	r0, #0
}
 800c6f2:	4770      	bx	lr
 800c6f4:	40010000 	.word	0x40010000
 800c6f8:	00010007 	.word	0x00010007

0800c6fc <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c6fc:	4770      	bx	lr

0800c6fe <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c6fe:	4770      	bx	lr

0800c700 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c700:	4770      	bx	lr

0800c702 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c702:	4770      	bx	lr

0800c704 <HAL_TIM_IRQHandler>:
{
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800c708:	6803      	ldr	r3, [r0, #0]
 800c70a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c70c:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c70e:	f015 0f02 	tst.w	r5, #2
 800c712:	d010      	beq.n	800c736 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c714:	f016 0f02 	tst.w	r6, #2
 800c718:	d00d      	beq.n	800c736 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c71a:	f06f 0202 	mvn.w	r2, #2
 800c71e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c720:	2301      	movs	r3, #1
 800c722:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c724:	6803      	ldr	r3, [r0, #0]
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	f013 0f03 	tst.w	r3, #3
 800c72c:	d064      	beq.n	800c7f8 <HAL_TIM_IRQHandler+0xf4>
          HAL_TIM_IC_CaptureCallback(htim);
 800c72e:	f7ff ffe6 	bl	800c6fe <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c732:	2300      	movs	r3, #0
 800c734:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c736:	f015 0f04 	tst.w	r5, #4
 800c73a:	d012      	beq.n	800c762 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c73c:	f016 0f04 	tst.w	r6, #4
 800c740:	d00f      	beq.n	800c762 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c742:	6823      	ldr	r3, [r4, #0]
 800c744:	f06f 0204 	mvn.w	r2, #4
 800c748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c74a:	2302      	movs	r3, #2
 800c74c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	699b      	ldr	r3, [r3, #24]
 800c752:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c756:	d055      	beq.n	800c804 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 800c758:	4620      	mov	r0, r4
 800c75a:	f7ff ffd0 	bl	800c6fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c75e:	2300      	movs	r3, #0
 800c760:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c762:	f015 0f08 	tst.w	r5, #8
 800c766:	d012      	beq.n	800c78e <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c768:	f016 0f08 	tst.w	r6, #8
 800c76c:	d00f      	beq.n	800c78e <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c76e:	6823      	ldr	r3, [r4, #0]
 800c770:	f06f 0208 	mvn.w	r2, #8
 800c774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c776:	2304      	movs	r3, #4
 800c778:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	f013 0f03 	tst.w	r3, #3
 800c782:	d046      	beq.n	800c812 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 800c784:	4620      	mov	r0, r4
 800c786:	f7ff ffba 	bl	800c6fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c78a:	2300      	movs	r3, #0
 800c78c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c78e:	f015 0f10 	tst.w	r5, #16
 800c792:	d012      	beq.n	800c7ba <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c794:	f016 0f10 	tst.w	r6, #16
 800c798:	d00f      	beq.n	800c7ba <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	f06f 0210 	mvn.w	r2, #16
 800c7a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7a2:	2308      	movs	r3, #8
 800c7a4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7a6:	6823      	ldr	r3, [r4, #0]
 800c7a8:	69db      	ldr	r3, [r3, #28]
 800c7aa:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c7ae:	d037      	beq.n	800c820 <HAL_TIM_IRQHandler+0x11c>
        HAL_TIM_IC_CaptureCallback(htim);
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f7ff ffa4 	bl	800c6fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c7ba:	f015 0f01 	tst.w	r5, #1
 800c7be:	d002      	beq.n	800c7c6 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c7c0:	f016 0f01 	tst.w	r6, #1
 800c7c4:	d133      	bne.n	800c82e <HAL_TIM_IRQHandler+0x12a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c7c6:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 800c7ca:	d002      	beq.n	800c7d2 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c7cc:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800c7d0:	d135      	bne.n	800c83e <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c7d2:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800c7d6:	d002      	beq.n	800c7de <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c7d8:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800c7dc:	d137      	bne.n	800c84e <HAL_TIM_IRQHandler+0x14a>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c7de:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800c7e2:	d002      	beq.n	800c7ea <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c7e4:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800c7e8:	d139      	bne.n	800c85e <HAL_TIM_IRQHandler+0x15a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c7ea:	f015 0f20 	tst.w	r5, #32
 800c7ee:	d002      	beq.n	800c7f6 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c7f0:	f016 0f20 	tst.w	r6, #32
 800c7f4:	d13b      	bne.n	800c86e <HAL_TIM_IRQHandler+0x16a>
}
 800c7f6:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7f8:	f7ff ff80 	bl	800c6fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f7ff ff7f 	bl	800c700 <HAL_TIM_PWM_PulseFinishedCallback>
 800c802:	e796      	b.n	800c732 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c804:	4620      	mov	r0, r4
 800c806:	f7ff ff79 	bl	800c6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c80a:	4620      	mov	r0, r4
 800c80c:	f7ff ff78 	bl	800c700 <HAL_TIM_PWM_PulseFinishedCallback>
 800c810:	e7a5      	b.n	800c75e <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c812:	4620      	mov	r0, r4
 800c814:	f7ff ff72 	bl	800c6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c818:	4620      	mov	r0, r4
 800c81a:	f7ff ff71 	bl	800c700 <HAL_TIM_PWM_PulseFinishedCallback>
 800c81e:	e7b4      	b.n	800c78a <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c820:	4620      	mov	r0, r4
 800c822:	f7ff ff6b 	bl	800c6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c826:	4620      	mov	r0, r4
 800c828:	f7ff ff6a 	bl	800c700 <HAL_TIM_PWM_PulseFinishedCallback>
 800c82c:	e7c3      	b.n	800c7b6 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c82e:	6823      	ldr	r3, [r4, #0]
 800c830:	f06f 0201 	mvn.w	r2, #1
 800c834:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c836:	4620      	mov	r0, r4
 800c838:	f7f7 fd50 	bl	80042dc <HAL_TIM_PeriodElapsedCallback>
 800c83c:	e7c3      	b.n	800c7c6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c844:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c846:	4620      	mov	r0, r4
 800c848:	f000 f8db 	bl	800ca02 <HAL_TIMEx_BreakCallback>
 800c84c:	e7c1      	b.n	800c7d2 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c854:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c856:	4620      	mov	r0, r4
 800c858:	f000 f8d4 	bl	800ca04 <HAL_TIMEx_Break2Callback>
 800c85c:	e7bf      	b.n	800c7de <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c864:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c866:	4620      	mov	r0, r4
 800c868:	f7ff ff4b 	bl	800c702 <HAL_TIM_TriggerCallback>
 800c86c:	e7bd      	b.n	800c7ea <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	f06f 0220 	mvn.w	r2, #32
 800c874:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800c876:	4620      	mov	r0, r4
 800c878:	f000 f8c2 	bl	800ca00 <HAL_TIMEx_CommutCallback>
}
 800c87c:	e7bb      	b.n	800c7f6 <HAL_TIM_IRQHandler+0xf2>
	...

0800c880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c880:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c882:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c884:	4a3f      	ldr	r2, [pc, #252]	@ (800c984 <TIM_Base_SetConfig+0x104>)
 800c886:	4290      	cmp	r0, r2
 800c888:	bf14      	ite	ne
 800c88a:	f04f 0e00 	movne.w	lr, #0
 800c88e:	f04f 0e01 	moveq.w	lr, #1
 800c892:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800c896:	bf14      	ite	ne
 800c898:	4672      	movne	r2, lr
 800c89a:	f04e 0201 	orreq.w	r2, lr, #1
 800c89e:	b9aa      	cbnz	r2, 800c8cc <TIM_Base_SetConfig+0x4c>
 800c8a0:	4c39      	ldr	r4, [pc, #228]	@ (800c988 <TIM_Base_SetConfig+0x108>)
 800c8a2:	42a0      	cmp	r0, r4
 800c8a4:	bf14      	ite	ne
 800c8a6:	2400      	movne	r4, #0
 800c8a8:	2401      	moveq	r4, #1
 800c8aa:	4d38      	ldr	r5, [pc, #224]	@ (800c98c <TIM_Base_SetConfig+0x10c>)
 800c8ac:	42a8      	cmp	r0, r5
 800c8ae:	d00d      	beq.n	800c8cc <TIM_Base_SetConfig+0x4c>
 800c8b0:	b964      	cbnz	r4, 800c8cc <TIM_Base_SetConfig+0x4c>
 800c8b2:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800c8b6:	f504 3482 	add.w	r4, r4, #66560	@ 0x10400
 800c8ba:	42a0      	cmp	r0, r4
 800c8bc:	bf14      	ite	ne
 800c8be:	2400      	movne	r4, #0
 800c8c0:	2401      	moveq	r4, #1
 800c8c2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800c8c6:	42a8      	cmp	r0, r5
 800c8c8:	d000      	beq.n	800c8cc <TIM_Base_SetConfig+0x4c>
 800c8ca:	b11c      	cbz	r4, 800c8d4 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800c8d0:	684c      	ldr	r4, [r1, #4]
 800c8d2:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8d4:	2a00      	cmp	r2, #0
 800c8d6:	d133      	bne.n	800c940 <TIM_Base_SetConfig+0xc0>
 800c8d8:	4a2b      	ldr	r2, [pc, #172]	@ (800c988 <TIM_Base_SetConfig+0x108>)
 800c8da:	4290      	cmp	r0, r2
 800c8dc:	bf14      	ite	ne
 800c8de:	2200      	movne	r2, #0
 800c8e0:	2201      	moveq	r2, #1
 800c8e2:	4c2a      	ldr	r4, [pc, #168]	@ (800c98c <TIM_Base_SetConfig+0x10c>)
 800c8e4:	42a0      	cmp	r0, r4
 800c8e6:	d02b      	beq.n	800c940 <TIM_Base_SetConfig+0xc0>
 800c8e8:	bb52      	cbnz	r2, 800c940 <TIM_Base_SetConfig+0xc0>
 800c8ea:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800c8ee:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400
 800c8f2:	4290      	cmp	r0, r2
 800c8f4:	bf14      	ite	ne
 800c8f6:	2200      	movne	r2, #0
 800c8f8:	2201      	moveq	r2, #1
 800c8fa:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800c8fe:	42a0      	cmp	r0, r4
 800c900:	d01e      	beq.n	800c940 <TIM_Base_SetConfig+0xc0>
 800c902:	b9ea      	cbnz	r2, 800c940 <TIM_Base_SetConfig+0xc0>
 800c904:	4a22      	ldr	r2, [pc, #136]	@ (800c990 <TIM_Base_SetConfig+0x110>)
 800c906:	4290      	cmp	r0, r2
 800c908:	bf14      	ite	ne
 800c90a:	2200      	movne	r2, #0
 800c90c:	2201      	moveq	r2, #1
 800c90e:	f504 349a 	add.w	r4, r4, #78848	@ 0x13400
 800c912:	42a0      	cmp	r0, r4
 800c914:	d014      	beq.n	800c940 <TIM_Base_SetConfig+0xc0>
 800c916:	b99a      	cbnz	r2, 800c940 <TIM_Base_SetConfig+0xc0>
 800c918:	4a1e      	ldr	r2, [pc, #120]	@ (800c994 <TIM_Base_SetConfig+0x114>)
 800c91a:	4290      	cmp	r0, r2
 800c91c:	bf14      	ite	ne
 800c91e:	2200      	movne	r2, #0
 800c920:	2201      	moveq	r2, #1
 800c922:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800c926:	42a0      	cmp	r0, r4
 800c928:	d00a      	beq.n	800c940 <TIM_Base_SetConfig+0xc0>
 800c92a:	b94a      	cbnz	r2, 800c940 <TIM_Base_SetConfig+0xc0>
 800c92c:	4a1a      	ldr	r2, [pc, #104]	@ (800c998 <TIM_Base_SetConfig+0x118>)
 800c92e:	4290      	cmp	r0, r2
 800c930:	bf14      	ite	ne
 800c932:	2200      	movne	r2, #0
 800c934:	2201      	moveq	r2, #1
 800c936:	f5a4 3496 	sub.w	r4, r4, #76800	@ 0x12c00
 800c93a:	42a0      	cmp	r0, r4
 800c93c:	d000      	beq.n	800c940 <TIM_Base_SetConfig+0xc0>
 800c93e:	b122      	cbz	r2, 800c94a <TIM_Base_SetConfig+0xca>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c940:	f423 7c40 	bic.w	ip, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c944:	68cb      	ldr	r3, [r1, #12]
 800c946:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c94a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c94e:	694a      	ldr	r2, [r1, #20]
 800c950:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800c952:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c954:	688a      	ldr	r2, [r1, #8]
 800c956:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c958:	680a      	ldr	r2, [r1, #0]
 800c95a:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c95c:	4a0f      	ldr	r2, [pc, #60]	@ (800c99c <TIM_Base_SetConfig+0x11c>)
 800c95e:	4290      	cmp	r0, r2
 800c960:	bf14      	ite	ne
 800c962:	4673      	movne	r3, lr
 800c964:	f04e 0301 	orreq.w	r3, lr, #1
 800c968:	b10b      	cbz	r3, 800c96e <TIM_Base_SetConfig+0xee>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c96a:	690b      	ldr	r3, [r1, #16]
 800c96c:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c96e:	2301      	movs	r3, #1
 800c970:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c972:	6903      	ldr	r3, [r0, #16]
 800c974:	f013 0f01 	tst.w	r3, #1
 800c978:	d003      	beq.n	800c982 <TIM_Base_SetConfig+0x102>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c97a:	6903      	ldr	r3, [r0, #16]
 800c97c:	f023 0301 	bic.w	r3, r3, #1
 800c980:	6103      	str	r3, [r0, #16]
  }
}
 800c982:	bd30      	pop	{r4, r5, pc}
 800c984:	40010000 	.word	0x40010000
 800c988:	40000800 	.word	0x40000800
 800c98c:	40000400 	.word	0x40000400
 800c990:	40014400 	.word	0x40014400
 800c994:	40001800 	.word	0x40001800
 800c998:	40002000 	.word	0x40002000
 800c99c:	40010400 	.word	0x40010400

0800c9a0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c9a0:	b360      	cbz	r0, 800c9fc <HAL_TIM_Base_Init+0x5c>
{
 800c9a2:	b510      	push	{r4, lr}
 800c9a4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800c9a6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c9aa:	b313      	cbz	r3, 800c9f2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9b2:	4621      	mov	r1, r4
 800c9b4:	f851 0b04 	ldr.w	r0, [r1], #4
 800c9b8:	f7ff ff62 	bl	800c880 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9c2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800c9c6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800c9ca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800c9ce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800c9d2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c9d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9da:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c9de:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c9e2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800c9e6:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c9ea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800c9ee:	2000      	movs	r0, #0
}
 800c9f0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800c9f2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c9f6:	f7ff fe37 	bl	800c668 <HAL_TIM_Base_MspInit>
 800c9fa:	e7d7      	b.n	800c9ac <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800c9fc:	2001      	movs	r0, #1
}
 800c9fe:	4770      	bx	lr

0800ca00 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca00:	4770      	bx	lr

0800ca02 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca02:	4770      	bx	lr

0800ca04 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ca04:	4770      	bx	lr
	...

0800ca08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ca08:	b530      	push	{r4, r5, lr}
 800ca0a:	b089      	sub	sp, #36	@ 0x24
 800ca0c:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800ca0e:	4b21      	ldr	r3, [pc, #132]	@ (800ca94 <HAL_InitTick+0x8c>)
 800ca10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ca12:	f042 0210 	orr.w	r2, r2, #16
 800ca16:	641a      	str	r2, [r3, #64]	@ 0x40
 800ca18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca1a:	f003 0310 	and.w	r3, r3, #16
 800ca1e:	9301      	str	r3, [sp, #4]
 800ca20:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ca22:	a902      	add	r1, sp, #8
 800ca24:	a803      	add	r0, sp, #12
 800ca26:	f7fd fe77 	bl	800a718 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800ca2a:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800ca2c:	b9cb      	cbnz	r3, 800ca62 <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800ca2e:	f7fd fe53 	bl	800a6d8 <HAL_RCC_GetPCLK1Freq>
 800ca32:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ca34:	4a18      	ldr	r2, [pc, #96]	@ (800ca98 <HAL_InitTick+0x90>)
 800ca36:	fba2 2303 	umull	r2, r3, r2, r3
 800ca3a:	0c9b      	lsrs	r3, r3, #18
 800ca3c:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800ca3e:	4817      	ldr	r0, [pc, #92]	@ (800ca9c <HAL_InitTick+0x94>)
 800ca40:	4a17      	ldr	r2, [pc, #92]	@ (800caa0 <HAL_InitTick+0x98>)
 800ca42:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800ca44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800ca48:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ca4a:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca50:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ca52:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800ca54:	f7ff ffa4 	bl	800c9a0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800ca58:	4605      	mov	r5, r0
 800ca5a:	b130      	cbz	r0, 800ca6a <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	b009      	add	sp, #36	@ 0x24
 800ca60:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800ca62:	f7fd fe39 	bl	800a6d8 <HAL_RCC_GetPCLK1Freq>
 800ca66:	0043      	lsls	r3, r0, #1
 800ca68:	e7e4      	b.n	800ca34 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim6);
 800ca6a:	480c      	ldr	r0, [pc, #48]	@ (800ca9c <HAL_InitTick+0x94>)
 800ca6c:	f7ff fdfe 	bl	800c66c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800ca70:	4605      	mov	r5, r0
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d1f2      	bne.n	800ca5c <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ca76:	2036      	movs	r0, #54	@ 0x36
 800ca78:	f7fb f8ea 	bl	8007c50 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ca7c:	2c0f      	cmp	r4, #15
 800ca7e:	d901      	bls.n	800ca84 <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 800ca80:	2501      	movs	r5, #1
 800ca82:	e7eb      	b.n	800ca5c <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800ca84:	2200      	movs	r2, #0
 800ca86:	4621      	mov	r1, r4
 800ca88:	2036      	movs	r0, #54	@ 0x36
 800ca8a:	f7fb f8d1 	bl	8007c30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ca8e:	4b05      	ldr	r3, [pc, #20]	@ (800caa4 <HAL_InitTick+0x9c>)
 800ca90:	601c      	str	r4, [r3, #0]
 800ca92:	e7e3      	b.n	800ca5c <HAL_InitTick+0x54>
 800ca94:	40023800 	.word	0x40023800
 800ca98:	431bde83 	.word	0x431bde83
 800ca9c:	2001e708 	.word	0x2001e708
 800caa0:	40001000 	.word	0x40001000
 800caa4:	20002138 	.word	0x20002138

0800caa8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800caa8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caaa:	e852 3f00 	ldrex	r3, [r2]
 800caae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab2:	e842 3100 	strex	r1, r3, [r2]
 800cab6:	2900      	cmp	r1, #0
 800cab8:	d1f6      	bne.n	800caa8 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cabc:	f102 0308 	add.w	r3, r2, #8
 800cac0:	e853 3f00 	ldrex	r3, [r3]
 800cac4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac8:	3208      	adds	r2, #8
 800caca:	e842 3100 	strex	r1, r3, [r2]
 800cace:	2900      	cmp	r1, #0
 800cad0:	d1f3      	bne.n	800caba <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cad2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d006      	beq.n	800cae6 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cad8:	2320      	movs	r3, #32
 800cada:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cade:	2300      	movs	r3, #0
 800cae0:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cae2:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800cae4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cae6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae8:	e852 3f00 	ldrex	r3, [r2]
 800caec:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf0:	e842 3100 	strex	r1, r3, [r2]
 800caf4:	2900      	cmp	r1, #0
 800caf6:	d1f6      	bne.n	800cae6 <UART_EndRxTransfer+0x3e>
 800caf8:	e7ee      	b.n	800cad8 <UART_EndRxTransfer+0x30>
	...

0800cafc <UART_SetConfig>:
{
 800cafc:	b510      	push	{r4, lr}
 800cafe:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb00:	6883      	ldr	r3, [r0, #8]
 800cb02:	6902      	ldr	r2, [r0, #16]
 800cb04:	4313      	orrs	r3, r2
 800cb06:	6942      	ldr	r2, [r0, #20]
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	69c2      	ldr	r2, [r0, #28]
 800cb0c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb0e:	6801      	ldr	r1, [r0, #0]
 800cb10:	6808      	ldr	r0, [r1, #0]
 800cb12:	4a91      	ldr	r2, [pc, #580]	@ (800cd58 <UART_SetConfig+0x25c>)
 800cb14:	4002      	ands	r2, r0
 800cb16:	431a      	orrs	r2, r3
 800cb18:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb1a:	6822      	ldr	r2, [r4, #0]
 800cb1c:	6853      	ldr	r3, [r2, #4]
 800cb1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800cb22:	68e1      	ldr	r1, [r4, #12]
 800cb24:	430b      	orrs	r3, r1
 800cb26:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb28:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800cb2a:	6a23      	ldr	r3, [r4, #32]
 800cb2c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb2e:	6821      	ldr	r1, [r4, #0]
 800cb30:	688b      	ldr	r3, [r1, #8]
 800cb32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800cb36:	4313      	orrs	r3, r2
 800cb38:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb3a:	6823      	ldr	r3, [r4, #0]
 800cb3c:	4a87      	ldr	r2, [pc, #540]	@ (800cd5c <UART_SetConfig+0x260>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d018      	beq.n	800cb74 <UART_SetConfig+0x78>
 800cb42:	4a87      	ldr	r2, [pc, #540]	@ (800cd60 <UART_SetConfig+0x264>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d03a      	beq.n	800cbbe <UART_SetConfig+0xc2>
 800cb48:	4a86      	ldr	r2, [pc, #536]	@ (800cd64 <UART_SetConfig+0x268>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d04f      	beq.n	800cbee <UART_SetConfig+0xf2>
 800cb4e:	4a86      	ldr	r2, [pc, #536]	@ (800cd68 <UART_SetConfig+0x26c>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d05e      	beq.n	800cc12 <UART_SetConfig+0x116>
 800cb54:	4a85      	ldr	r2, [pc, #532]	@ (800cd6c <UART_SetConfig+0x270>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d06d      	beq.n	800cc36 <UART_SetConfig+0x13a>
 800cb5a:	4a85      	ldr	r2, [pc, #532]	@ (800cd70 <UART_SetConfig+0x274>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d07f      	beq.n	800cc60 <UART_SetConfig+0x164>
 800cb60:	4a84      	ldr	r2, [pc, #528]	@ (800cd74 <UART_SetConfig+0x278>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	f000 8091 	beq.w	800cc8a <UART_SetConfig+0x18e>
 800cb68:	4a83      	ldr	r2, [pc, #524]	@ (800cd78 <UART_SetConfig+0x27c>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	f000 80a2 	beq.w	800ccb4 <UART_SetConfig+0x1b8>
 800cb70:	2310      	movs	r3, #16
 800cb72:	e00b      	b.n	800cb8c <UART_SetConfig+0x90>
 800cb74:	4b81      	ldr	r3, [pc, #516]	@ (800cd7c <UART_SetConfig+0x280>)
 800cb76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb7a:	f003 0303 	and.w	r3, r3, #3
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	d81b      	bhi.n	800cbba <UART_SetConfig+0xbe>
 800cb82:	e8df f003 	tbb	[pc, r3]
 800cb86:	1602      	.short	0x1602
 800cb88:	18ab      	.short	0x18ab
 800cb8a:	2301      	movs	r3, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb8c:	69e0      	ldr	r0, [r4, #28]
 800cb8e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800cb92:	f000 80d7 	beq.w	800cd44 <UART_SetConfig+0x248>
    switch (clocksource)
 800cb96:	2b08      	cmp	r3, #8
 800cb98:	f200 8138 	bhi.w	800ce0c <UART_SetConfig+0x310>
 800cb9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cba0:	01270114 	.word	0x01270114
 800cba4:	01360112 	.word	0x01360112
 800cba8:	0136012a 	.word	0x0136012a
 800cbac:	01360136 	.word	0x01360136
 800cbb0:	012d      	.short	0x012d
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbb2:	2304      	movs	r3, #4
 800cbb4:	e7ea      	b.n	800cb8c <UART_SetConfig+0x90>
 800cbb6:	2308      	movs	r3, #8
 800cbb8:	e7e8      	b.n	800cb8c <UART_SetConfig+0x90>
 800cbba:	2310      	movs	r3, #16
 800cbbc:	e7e6      	b.n	800cb8c <UART_SetConfig+0x90>
 800cbbe:	4b6f      	ldr	r3, [pc, #444]	@ (800cd7c <UART_SetConfig+0x280>)
 800cbc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbc4:	f003 030c 	and.w	r3, r3, #12
 800cbc8:	2b0c      	cmp	r3, #12
 800cbca:	d80e      	bhi.n	800cbea <UART_SetConfig+0xee>
 800cbcc:	e8df f003 	tbb	[pc, r3]
 800cbd0:	0d0d0d07 	.word	0x0d0d0d07
 800cbd4:	0d0d0d09 	.word	0x0d0d0d09
 800cbd8:	0d0d0d88 	.word	0x0d0d0d88
 800cbdc:	0b          	.byte	0x0b
 800cbdd:	00          	.byte	0x00
 800cbde:	2300      	movs	r3, #0
 800cbe0:	e7d4      	b.n	800cb8c <UART_SetConfig+0x90>
 800cbe2:	2304      	movs	r3, #4
 800cbe4:	e7d2      	b.n	800cb8c <UART_SetConfig+0x90>
 800cbe6:	2308      	movs	r3, #8
 800cbe8:	e7d0      	b.n	800cb8c <UART_SetConfig+0x90>
 800cbea:	2310      	movs	r3, #16
 800cbec:	e7ce      	b.n	800cb8c <UART_SetConfig+0x90>
 800cbee:	4b63      	ldr	r3, [pc, #396]	@ (800cd7c <UART_SetConfig+0x280>)
 800cbf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbf4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cbf8:	2b20      	cmp	r3, #32
 800cbfa:	d073      	beq.n	800cce4 <UART_SetConfig+0x1e8>
 800cbfc:	d805      	bhi.n	800cc0a <UART_SetConfig+0x10e>
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d072      	beq.n	800cce8 <UART_SetConfig+0x1ec>
 800cc02:	2b10      	cmp	r3, #16
 800cc04:	d172      	bne.n	800ccec <UART_SetConfig+0x1f0>
 800cc06:	2304      	movs	r3, #4
 800cc08:	e7c0      	b.n	800cb8c <UART_SetConfig+0x90>
 800cc0a:	2b30      	cmp	r3, #48	@ 0x30
 800cc0c:	d170      	bne.n	800ccf0 <UART_SetConfig+0x1f4>
 800cc0e:	2308      	movs	r3, #8
 800cc10:	e7bc      	b.n	800cb8c <UART_SetConfig+0x90>
 800cc12:	4b5a      	ldr	r3, [pc, #360]	@ (800cd7c <UART_SetConfig+0x280>)
 800cc14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc18:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cc1c:	2b80      	cmp	r3, #128	@ 0x80
 800cc1e:	d069      	beq.n	800ccf4 <UART_SetConfig+0x1f8>
 800cc20:	d805      	bhi.n	800cc2e <UART_SetConfig+0x132>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d068      	beq.n	800ccf8 <UART_SetConfig+0x1fc>
 800cc26:	2b40      	cmp	r3, #64	@ 0x40
 800cc28:	d168      	bne.n	800ccfc <UART_SetConfig+0x200>
 800cc2a:	2304      	movs	r3, #4
 800cc2c:	e7ae      	b.n	800cb8c <UART_SetConfig+0x90>
 800cc2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc30:	d166      	bne.n	800cd00 <UART_SetConfig+0x204>
 800cc32:	2308      	movs	r3, #8
 800cc34:	e7aa      	b.n	800cb8c <UART_SetConfig+0x90>
 800cc36:	4b51      	ldr	r3, [pc, #324]	@ (800cd7c <UART_SetConfig+0x280>)
 800cc38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cc40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc44:	d05e      	beq.n	800cd04 <UART_SetConfig+0x208>
 800cc46:	d806      	bhi.n	800cc56 <UART_SetConfig+0x15a>
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d05d      	beq.n	800cd08 <UART_SetConfig+0x20c>
 800cc4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc50:	d15c      	bne.n	800cd0c <UART_SetConfig+0x210>
 800cc52:	2304      	movs	r3, #4
 800cc54:	e79a      	b.n	800cb8c <UART_SetConfig+0x90>
 800cc56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc5a:	d159      	bne.n	800cd10 <UART_SetConfig+0x214>
 800cc5c:	2308      	movs	r3, #8
 800cc5e:	e795      	b.n	800cb8c <UART_SetConfig+0x90>
 800cc60:	4b46      	ldr	r3, [pc, #280]	@ (800cd7c <UART_SetConfig+0x280>)
 800cc62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc66:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cc6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc6e:	d051      	beq.n	800cd14 <UART_SetConfig+0x218>
 800cc70:	d806      	bhi.n	800cc80 <UART_SetConfig+0x184>
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d050      	beq.n	800cd18 <UART_SetConfig+0x21c>
 800cc76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc7a:	d14f      	bne.n	800cd1c <UART_SetConfig+0x220>
 800cc7c:	2304      	movs	r3, #4
 800cc7e:	e785      	b.n	800cb8c <UART_SetConfig+0x90>
 800cc80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cc84:	d14c      	bne.n	800cd20 <UART_SetConfig+0x224>
 800cc86:	2308      	movs	r3, #8
 800cc88:	e780      	b.n	800cb8c <UART_SetConfig+0x90>
 800cc8a:	4b3c      	ldr	r3, [pc, #240]	@ (800cd7c <UART_SetConfig+0x280>)
 800cc8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc90:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800cc94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc98:	d044      	beq.n	800cd24 <UART_SetConfig+0x228>
 800cc9a:	d806      	bhi.n	800ccaa <UART_SetConfig+0x1ae>
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d043      	beq.n	800cd28 <UART_SetConfig+0x22c>
 800cca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cca4:	d142      	bne.n	800cd2c <UART_SetConfig+0x230>
 800cca6:	2304      	movs	r3, #4
 800cca8:	e770      	b.n	800cb8c <UART_SetConfig+0x90>
 800ccaa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ccae:	d13f      	bne.n	800cd30 <UART_SetConfig+0x234>
 800ccb0:	2308      	movs	r3, #8
 800ccb2:	e76b      	b.n	800cb8c <UART_SetConfig+0x90>
 800ccb4:	4b31      	ldr	r3, [pc, #196]	@ (800cd7c <UART_SetConfig+0x280>)
 800ccb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ccbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ccc2:	d037      	beq.n	800cd34 <UART_SetConfig+0x238>
 800ccc4:	d805      	bhi.n	800ccd2 <UART_SetConfig+0x1d6>
 800ccc6:	b3bb      	cbz	r3, 800cd38 <UART_SetConfig+0x23c>
 800ccc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cccc:	d136      	bne.n	800cd3c <UART_SetConfig+0x240>
 800ccce:	2304      	movs	r3, #4
 800ccd0:	e75c      	b.n	800cb8c <UART_SetConfig+0x90>
 800ccd2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ccd6:	d133      	bne.n	800cd40 <UART_SetConfig+0x244>
 800ccd8:	2308      	movs	r3, #8
 800ccda:	e757      	b.n	800cb8c <UART_SetConfig+0x90>
 800ccdc:	2302      	movs	r3, #2
 800ccde:	e755      	b.n	800cb8c <UART_SetConfig+0x90>
 800cce0:	2302      	movs	r3, #2
 800cce2:	e753      	b.n	800cb8c <UART_SetConfig+0x90>
 800cce4:	2302      	movs	r3, #2
 800cce6:	e751      	b.n	800cb8c <UART_SetConfig+0x90>
 800cce8:	2300      	movs	r3, #0
 800ccea:	e74f      	b.n	800cb8c <UART_SetConfig+0x90>
 800ccec:	2310      	movs	r3, #16
 800ccee:	e74d      	b.n	800cb8c <UART_SetConfig+0x90>
 800ccf0:	2310      	movs	r3, #16
 800ccf2:	e74b      	b.n	800cb8c <UART_SetConfig+0x90>
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	e749      	b.n	800cb8c <UART_SetConfig+0x90>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	e747      	b.n	800cb8c <UART_SetConfig+0x90>
 800ccfc:	2310      	movs	r3, #16
 800ccfe:	e745      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd00:	2310      	movs	r3, #16
 800cd02:	e743      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd04:	2302      	movs	r3, #2
 800cd06:	e741      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd08:	2300      	movs	r3, #0
 800cd0a:	e73f      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd0c:	2310      	movs	r3, #16
 800cd0e:	e73d      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd10:	2310      	movs	r3, #16
 800cd12:	e73b      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd14:	2302      	movs	r3, #2
 800cd16:	e739      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e737      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd1c:	2310      	movs	r3, #16
 800cd1e:	e735      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd20:	2310      	movs	r3, #16
 800cd22:	e733      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd24:	2302      	movs	r3, #2
 800cd26:	e731      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	e72f      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd2c:	2310      	movs	r3, #16
 800cd2e:	e72d      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd30:	2310      	movs	r3, #16
 800cd32:	e72b      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd34:	2302      	movs	r3, #2
 800cd36:	e729      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	e727      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd3c:	2310      	movs	r3, #16
 800cd3e:	e725      	b.n	800cb8c <UART_SetConfig+0x90>
 800cd40:	2310      	movs	r3, #16
 800cd42:	e723      	b.n	800cb8c <UART_SetConfig+0x90>
    switch (clocksource)
 800cd44:	2b08      	cmp	r3, #8
 800cd46:	d85b      	bhi.n	800ce00 <UART_SetConfig+0x304>
 800cd48:	e8df f003 	tbb	[pc, r3]
 800cd4c:	5a3a341a 	.word	0x5a3a341a
 800cd50:	5a5a5a37 	.word	0x5a5a5a37
 800cd54:	1e          	.byte	0x1e
 800cd55:	00          	.byte	0x00
 800cd56:	bf00      	nop
 800cd58:	efff69f3 	.word	0xefff69f3
 800cd5c:	40011000 	.word	0x40011000
 800cd60:	40004400 	.word	0x40004400
 800cd64:	40004800 	.word	0x40004800
 800cd68:	40004c00 	.word	0x40004c00
 800cd6c:	40005000 	.word	0x40005000
 800cd70:	40011400 	.word	0x40011400
 800cd74:	40007800 	.word	0x40007800
 800cd78:	40007c00 	.word	0x40007c00
 800cd7c:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd80:	f7fd fcaa 	bl	800a6d8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d03d      	beq.n	800ce04 <UART_SetConfig+0x308>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cd88:	6862      	ldr	r2, [r4, #4]
 800cd8a:	0853      	lsrs	r3, r2, #1
 800cd8c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800cd90:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd94:	f1a3 0110 	sub.w	r1, r3, #16
 800cd98:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800cd9c:	4291      	cmp	r1, r2
 800cd9e:	d833      	bhi.n	800ce08 <UART_SetConfig+0x30c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cda6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800cdaa:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800cdac:	6822      	ldr	r2, [r4, #0]
 800cdae:	60d3      	str	r3, [r2, #12]
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	e030      	b.n	800ce16 <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800cdb4:	f7fd fca0 	bl	800a6f8 <HAL_RCC_GetPCLK2Freq>
        break;
 800cdb8:	e7e4      	b.n	800cd84 <UART_SetConfig+0x288>
        pclk = HAL_RCC_GetSysClockFreq();
 800cdba:	f7fd fb7d 	bl	800a4b8 <HAL_RCC_GetSysClockFreq>
        break;
 800cdbe:	e7e1      	b.n	800cd84 <UART_SetConfig+0x288>
        pclk = (uint32_t) HSI_VALUE;
 800cdc0:	4817      	ldr	r0, [pc, #92]	@ (800ce20 <UART_SetConfig+0x324>)
 800cdc2:	e7e1      	b.n	800cd88 <UART_SetConfig+0x28c>
    switch (clocksource)
 800cdc4:	4816      	ldr	r0, [pc, #88]	@ (800ce20 <UART_SetConfig+0x324>)
 800cdc6:	e002      	b.n	800cdce <UART_SetConfig+0x2d2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800cdc8:	f7fd fc86 	bl	800a6d8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800cdcc:	b300      	cbz	r0, 800ce10 <UART_SetConfig+0x314>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cdce:	6863      	ldr	r3, [r4, #4]
 800cdd0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800cdd4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdd8:	f1a0 0210 	sub.w	r2, r0, #16
 800cddc:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d817      	bhi.n	800ce14 <UART_SetConfig+0x318>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cde4:	6823      	ldr	r3, [r4, #0]
 800cde6:	b280      	uxth	r0, r0
 800cde8:	60d8      	str	r0, [r3, #12]
 800cdea:	2000      	movs	r0, #0
 800cdec:	e013      	b.n	800ce16 <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800cdee:	f7fd fc83 	bl	800a6f8 <HAL_RCC_GetPCLK2Freq>
        break;
 800cdf2:	e7eb      	b.n	800cdcc <UART_SetConfig+0x2d0>
        pclk = HAL_RCC_GetSysClockFreq();
 800cdf4:	f7fd fb60 	bl	800a4b8 <HAL_RCC_GetSysClockFreq>
        break;
 800cdf8:	e7e8      	b.n	800cdcc <UART_SetConfig+0x2d0>
        pclk = (uint32_t) LSE_VALUE;
 800cdfa:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cdfe:	e7e6      	b.n	800cdce <UART_SetConfig+0x2d2>
    switch (clocksource)
 800ce00:	2001      	movs	r0, #1
 800ce02:	e008      	b.n	800ce16 <UART_SetConfig+0x31a>
 800ce04:	2000      	movs	r0, #0
 800ce06:	e006      	b.n	800ce16 <UART_SetConfig+0x31a>
        ret = HAL_ERROR;
 800ce08:	2001      	movs	r0, #1
 800ce0a:	e004      	b.n	800ce16 <UART_SetConfig+0x31a>
    switch (clocksource)
 800ce0c:	2001      	movs	r0, #1
 800ce0e:	e002      	b.n	800ce16 <UART_SetConfig+0x31a>
 800ce10:	2000      	movs	r0, #0
 800ce12:	e000      	b.n	800ce16 <UART_SetConfig+0x31a>
        ret = HAL_ERROR;
 800ce14:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800ce16:	2300      	movs	r3, #0
 800ce18:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800ce1a:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 800ce1c:	bd10      	pop	{r4, pc}
 800ce1e:	bf00      	nop
 800ce20:	00f42400 	.word	0x00f42400

0800ce24 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce24:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ce26:	f013 0f08 	tst.w	r3, #8
 800ce2a:	d006      	beq.n	800ce3a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce2c:	6802      	ldr	r2, [r0, #0]
 800ce2e:	6853      	ldr	r3, [r2, #4]
 800ce30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ce34:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800ce36:	430b      	orrs	r3, r1
 800ce38:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce3a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ce3c:	f013 0f01 	tst.w	r3, #1
 800ce40:	d006      	beq.n	800ce50 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce42:	6802      	ldr	r2, [r0, #0]
 800ce44:	6853      	ldr	r3, [r2, #4]
 800ce46:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ce4a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ce4c:	430b      	orrs	r3, r1
 800ce4e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce50:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ce52:	f013 0f02 	tst.w	r3, #2
 800ce56:	d006      	beq.n	800ce66 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce58:	6802      	ldr	r2, [r0, #0]
 800ce5a:	6853      	ldr	r3, [r2, #4]
 800ce5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce60:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800ce62:	430b      	orrs	r3, r1
 800ce64:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce66:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ce68:	f013 0f04 	tst.w	r3, #4
 800ce6c:	d006      	beq.n	800ce7c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce6e:	6802      	ldr	r2, [r0, #0]
 800ce70:	6853      	ldr	r3, [r2, #4]
 800ce72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ce76:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800ce78:	430b      	orrs	r3, r1
 800ce7a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce7c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ce7e:	f013 0f10 	tst.w	r3, #16
 800ce82:	d006      	beq.n	800ce92 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce84:	6802      	ldr	r2, [r0, #0]
 800ce86:	6893      	ldr	r3, [r2, #8]
 800ce88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce8c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800ce8e:	430b      	orrs	r3, r1
 800ce90:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce92:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ce94:	f013 0f20 	tst.w	r3, #32
 800ce98:	d006      	beq.n	800cea8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce9a:	6802      	ldr	r2, [r0, #0]
 800ce9c:	6893      	ldr	r3, [r2, #8]
 800ce9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cea2:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800cea4:	430b      	orrs	r3, r1
 800cea6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cea8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ceaa:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800ceae:	d00a      	beq.n	800cec6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ceb0:	6802      	ldr	r2, [r0, #0]
 800ceb2:	6853      	ldr	r3, [r2, #4]
 800ceb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ceb8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800ceba:	430b      	orrs	r3, r1
 800cebc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cebe:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cec0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cec4:	d00b      	beq.n	800cede <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cec6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cec8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cecc:	d006      	beq.n	800cedc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cece:	6802      	ldr	r2, [r0, #0]
 800ced0:	6853      	ldr	r3, [r2, #4]
 800ced2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800ced6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800ced8:	430b      	orrs	r3, r1
 800ceda:	6053      	str	r3, [r2, #4]
}
 800cedc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cede:	6802      	ldr	r2, [r0, #0]
 800cee0:	6853      	ldr	r3, [r2, #4]
 800cee2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800cee6:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800cee8:	430b      	orrs	r3, r1
 800ceea:	6053      	str	r3, [r2, #4]
 800ceec:	e7eb      	b.n	800cec6 <UART_AdvFeatureConfig+0xa2>

0800ceee <UART_WaitOnFlagUntilTimeout>:
{
 800ceee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef2:	4605      	mov	r5, r0
 800cef4:	460e      	mov	r6, r1
 800cef6:	4617      	mov	r7, r2
 800cef8:	4699      	mov	r9, r3
 800cefa:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cefe:	682b      	ldr	r3, [r5, #0]
 800cf00:	69dc      	ldr	r4, [r3, #28]
 800cf02:	ea36 0404 	bics.w	r4, r6, r4
 800cf06:	bf0c      	ite	eq
 800cf08:	2401      	moveq	r4, #1
 800cf0a:	2400      	movne	r4, #0
 800cf0c:	42bc      	cmp	r4, r7
 800cf0e:	d13a      	bne.n	800cf86 <UART_WaitOnFlagUntilTimeout+0x98>
    if (Timeout != HAL_MAX_DELAY)
 800cf10:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800cf14:	d0f3      	beq.n	800cefe <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf16:	f7fa fe2d 	bl	8007b74 <HAL_GetTick>
 800cf1a:	eba0 0009 	sub.w	r0, r0, r9
 800cf1e:	4540      	cmp	r0, r8
 800cf20:	d834      	bhi.n	800cf8c <UART_WaitOnFlagUntilTimeout+0x9e>
 800cf22:	f1b8 0f00 	cmp.w	r8, #0
 800cf26:	d033      	beq.n	800cf90 <UART_WaitOnFlagUntilTimeout+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cf28:	682b      	ldr	r3, [r5, #0]
 800cf2a:	681a      	ldr	r2, [r3, #0]
 800cf2c:	f012 0f04 	tst.w	r2, #4
 800cf30:	d0e5      	beq.n	800cefe <UART_WaitOnFlagUntilTimeout+0x10>
 800cf32:	f1b6 0240 	subs.w	r2, r6, #64	@ 0x40
 800cf36:	bf18      	it	ne
 800cf38:	2201      	movne	r2, #1
 800cf3a:	2e80      	cmp	r6, #128	@ 0x80
 800cf3c:	d0df      	beq.n	800cefe <UART_WaitOnFlagUntilTimeout+0x10>
 800cf3e:	2a00      	cmp	r2, #0
 800cf40:	d0dd      	beq.n	800cefe <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf42:	69da      	ldr	r2, [r3, #28]
 800cf44:	f012 0f08 	tst.w	r2, #8
 800cf48:	d111      	bne.n	800cf6e <UART_WaitOnFlagUntilTimeout+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf4a:	69da      	ldr	r2, [r3, #28]
 800cf4c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800cf50:	d0d5      	beq.n	800cefe <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf56:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800cf58:	4628      	mov	r0, r5
 800cf5a:	f7ff fda5 	bl	800caa8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf5e:	2320      	movs	r3, #32
 800cf60:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800cf64:	2300      	movs	r3, #0
 800cf66:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_TIMEOUT;
 800cf6a:	2003      	movs	r0, #3
 800cf6c:	e00c      	b.n	800cf88 <UART_WaitOnFlagUntilTimeout+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf6e:	2408      	movs	r4, #8
 800cf70:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 800cf72:	4628      	mov	r0, r5
 800cf74:	f7ff fd98 	bl	800caa8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf78:	f8c5 4084 	str.w	r4, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_ERROR;
 800cf82:	2001      	movs	r0, #1
 800cf84:	e000      	b.n	800cf88 <UART_WaitOnFlagUntilTimeout+0x9a>
  return HAL_OK;
 800cf86:	2000      	movs	r0, #0
}
 800cf88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800cf8c:	2003      	movs	r0, #3
 800cf8e:	e7fb      	b.n	800cf88 <UART_WaitOnFlagUntilTimeout+0x9a>
 800cf90:	2003      	movs	r0, #3
 800cf92:	e7f9      	b.n	800cf88 <UART_WaitOnFlagUntilTimeout+0x9a>

0800cf94 <HAL_UART_Transmit>:
{
 800cf94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf98:	b082      	sub	sp, #8
 800cf9a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800cf9c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800cf9e:	2b20      	cmp	r3, #32
 800cfa0:	d157      	bne.n	800d052 <HAL_UART_Transmit+0xbe>
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	460d      	mov	r5, r1
 800cfa6:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800cfa8:	2a00      	cmp	r2, #0
 800cfaa:	bf18      	it	ne
 800cfac:	2900      	cmpne	r1, #0
 800cfae:	d101      	bne.n	800cfb4 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 800cfb0:	2001      	movs	r0, #1
 800cfb2:	e04f      	b.n	800d054 <HAL_UART_Transmit+0xc0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cfba:	2321      	movs	r3, #33	@ 0x21
 800cfbc:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800cfbe:	f7fa fdd9 	bl	8007b74 <HAL_GetTick>
 800cfc2:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800cfc4:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 800cfc8:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfcc:	68a3      	ldr	r3, [r4, #8]
 800cfce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfd2:	d002      	beq.n	800cfda <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 800cfd4:	f04f 0800 	mov.w	r8, #0
 800cfd8:	e015      	b.n	800d006 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfda:	6923      	ldr	r3, [r4, #16]
 800cfdc:	b33b      	cbz	r3, 800d02e <HAL_UART_Transmit+0x9a>
      pdata16bits = NULL;
 800cfde:	f04f 0800 	mov.w	r8, #0
 800cfe2:	e010      	b.n	800d006 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 800cfe4:	2320      	movs	r3, #32
 800cfe6:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 800cfe8:	2003      	movs	r0, #3
 800cfea:	e033      	b.n	800d054 <HAL_UART_Transmit+0xc0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cfec:	f838 3b02 	ldrh.w	r3, [r8], #2
 800cff0:	6822      	ldr	r2, [r4, #0]
 800cff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cff6:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800cff8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800cffc:	b292      	uxth	r2, r2
 800cffe:	3a01      	subs	r2, #1
 800d000:	b292      	uxth	r2, r2
 800d002:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800d006:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	b193      	cbz	r3, 800d034 <HAL_UART_Transmit+0xa0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d00e:	9600      	str	r6, [sp, #0]
 800d010:	463b      	mov	r3, r7
 800d012:	2200      	movs	r2, #0
 800d014:	2180      	movs	r1, #128	@ 0x80
 800d016:	4620      	mov	r0, r4
 800d018:	f7ff ff69 	bl	800ceee <UART_WaitOnFlagUntilTimeout>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	d1e1      	bne.n	800cfe4 <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 800d020:	2d00      	cmp	r5, #0
 800d022:	d0e3      	beq.n	800cfec <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d024:	f815 2b01 	ldrb.w	r2, [r5], #1
 800d028:	6823      	ldr	r3, [r4, #0]
 800d02a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d02c:	e7e4      	b.n	800cff8 <HAL_UART_Transmit+0x64>
      pdata16bits = (const uint16_t *) pData;
 800d02e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800d030:	2500      	movs	r5, #0
 800d032:	e7e8      	b.n	800d006 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d034:	9600      	str	r6, [sp, #0]
 800d036:	463b      	mov	r3, r7
 800d038:	2200      	movs	r2, #0
 800d03a:	2140      	movs	r1, #64	@ 0x40
 800d03c:	4620      	mov	r0, r4
 800d03e:	f7ff ff56 	bl	800ceee <UART_WaitOnFlagUntilTimeout>
 800d042:	b910      	cbnz	r0, 800d04a <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800d044:	2320      	movs	r3, #32
 800d046:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 800d048:	e004      	b.n	800d054 <HAL_UART_Transmit+0xc0>
      huart->gState = HAL_UART_STATE_READY;
 800d04a:	2320      	movs	r3, #32
 800d04c:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800d04e:	2003      	movs	r0, #3
 800d050:	e000      	b.n	800d054 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 800d052:	2002      	movs	r0, #2
}
 800d054:	b002      	add	sp, #8
 800d056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d05a <UART_CheckIdleState>:
{
 800d05a:	b530      	push	{r4, r5, lr}
 800d05c:	b083      	sub	sp, #12
 800d05e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d060:	2300      	movs	r3, #0
 800d062:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 800d066:	f7fa fd85 	bl	8007b74 <HAL_GetTick>
 800d06a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d06c:	6822      	ldr	r2, [r4, #0]
 800d06e:	6812      	ldr	r2, [r2, #0]
 800d070:	f012 0f08 	tst.w	r2, #8
 800d074:	d10f      	bne.n	800d096 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d076:	6823      	ldr	r3, [r4, #0]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f013 0f04 	tst.w	r3, #4
 800d07e:	d126      	bne.n	800d0ce <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 800d080:	2320      	movs	r3, #32
 800d082:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d084:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d088:	2000      	movs	r0, #0
 800d08a:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d08c:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 800d08e:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 800d092:	b003      	add	sp, #12
 800d094:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d096:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d09a:	9300      	str	r3, [sp, #0]
 800d09c:	4603      	mov	r3, r0
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f7ff ff22 	bl	800ceee <UART_WaitOnFlagUntilTimeout>
 800d0aa:	2800      	cmp	r0, #0
 800d0ac:	d0e3      	beq.n	800d076 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d0ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b0:	e852 3f00 	ldrex	r3, [r2]
 800d0b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b8:	e842 3100 	strex	r1, r3, [r2]
 800d0bc:	2900      	cmp	r1, #0
 800d0be:	d1f6      	bne.n	800d0ae <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 800d0c0:	2320      	movs	r3, #32
 800d0c2:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 800d0ca:	2003      	movs	r0, #3
 800d0cc:	e7e1      	b.n	800d092 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d0d2:	9300      	str	r3, [sp, #0]
 800d0d4:	462b      	mov	r3, r5
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f7ff ff06 	bl	800ceee <UART_WaitOnFlagUntilTimeout>
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	d0cc      	beq.n	800d080 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d0e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0e8:	e852 3f00 	ldrex	r3, [r2]
 800d0ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f0:	e842 3100 	strex	r1, r3, [r2]
 800d0f4:	2900      	cmp	r1, #0
 800d0f6:	d1f6      	bne.n	800d0e6 <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0f8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fa:	f102 0308 	add.w	r3, r2, #8
 800d0fe:	e853 3f00 	ldrex	r3, [r3]
 800d102:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d106:	3208      	adds	r2, #8
 800d108:	e842 3100 	strex	r1, r3, [r2]
 800d10c:	2900      	cmp	r1, #0
 800d10e:	d1f3      	bne.n	800d0f8 <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 800d110:	2320      	movs	r3, #32
 800d112:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      __HAL_UNLOCK(huart);
 800d116:	2300      	movs	r3, #0
 800d118:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 800d11c:	2003      	movs	r0, #3
 800d11e:	e7b8      	b.n	800d092 <UART_CheckIdleState+0x38>

0800d120 <HAL_UART_Init>:
  if (huart == NULL)
 800d120:	b368      	cbz	r0, 800d17e <HAL_UART_Init+0x5e>
{
 800d122:	b510      	push	{r4, lr}
 800d124:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800d126:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800d128:	b303      	cbz	r3, 800d16c <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800d12a:	2324      	movs	r3, #36	@ 0x24
 800d12c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800d12e:	6822      	ldr	r2, [r4, #0]
 800d130:	6813      	ldr	r3, [r2, #0]
 800d132:	f023 0301 	bic.w	r3, r3, #1
 800d136:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d138:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d13a:	b9e3      	cbnz	r3, 800d176 <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d13c:	4620      	mov	r0, r4
 800d13e:	f7ff fcdd 	bl	800cafc <UART_SetConfig>
 800d142:	2801      	cmp	r0, #1
 800d144:	d011      	beq.n	800d16a <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d146:	6822      	ldr	r2, [r4, #0]
 800d148:	6853      	ldr	r3, [r2, #4]
 800d14a:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800d14e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d150:	6822      	ldr	r2, [r4, #0]
 800d152:	6893      	ldr	r3, [r2, #8]
 800d154:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800d158:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800d15a:	6822      	ldr	r2, [r4, #0]
 800d15c:	6813      	ldr	r3, [r2, #0]
 800d15e:	f043 0301 	orr.w	r3, r3, #1
 800d162:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800d164:	4620      	mov	r0, r4
 800d166:	f7ff ff78 	bl	800d05a <UART_CheckIdleState>
}
 800d16a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800d16c:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800d170:	f000 fcd4 	bl	800db1c <HAL_UART_MspInit>
 800d174:	e7d9      	b.n	800d12a <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800d176:	4620      	mov	r0, r4
 800d178:	f7ff fe54 	bl	800ce24 <UART_AdvFeatureConfig>
 800d17c:	e7de      	b.n	800d13c <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 800d17e:	2001      	movs	r0, #1
}
 800d180:	4770      	bx	lr

0800d182 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d182:	e7fe      	b.n	800d182 <NMI_Handler>

0800d184 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d184:	e7fe      	b.n	800d184 <HardFault_Handler>

0800d186 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d186:	e7fe      	b.n	800d186 <MemManage_Handler>

0800d188 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d188:	e7fe      	b.n	800d188 <BusFault_Handler>

0800d18a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d18a:	e7fe      	b.n	800d18a <UsageFault_Handler>

0800d18c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d18c:	4770      	bx	lr

0800d18e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d18e:	4770      	bx	lr

0800d190 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d190:	4770      	bx	lr

0800d192 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d192:	4770      	bx	lr

0800d194 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 800d194:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800d196:	4802      	ldr	r0, [pc, #8]	@ (800d1a0 <TIM6_DAC_IRQHandler+0xc>)
 800d198:	f7ff fab4 	bl	800c704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d19c:	bd08      	pop	{r3, pc}
 800d19e:	bf00      	nop
 800d1a0:	2001e708 	.word	0x2001e708

0800d1a4 <DMA2_Stream0_IRQHandler>:

/* USER CODE BEGIN 1 */

void DMA2_Stream0_IRQHandler(void)
{
 800d1a4:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(hAudioInTopLeftFilter.hdmaReg);
 800d1a6:	4b02      	ldr	r3, [pc, #8]	@ (800d1b0 <DMA2_Stream0_IRQHandler+0xc>)
 800d1a8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d1aa:	f7fb f933 	bl	8008414 <HAL_DMA_IRQHandler>
}
 800d1ae:	bd08      	pop	{r3, pc}
 800d1b0:	2001e208 	.word	0x2001e208

0800d1b4 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800d1b4:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(hAudioInTopRightFilter.hdmaReg);
 800d1b6:	4b02      	ldr	r3, [pc, #8]	@ (800d1c0 <DMA2_Stream5_IRQHandler+0xc>)
 800d1b8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d1ba:	f7fb f92b 	bl	8008414 <HAL_DMA_IRQHandler>
}
 800d1be:	bd08      	pop	{r3, pc}
 800d1c0:	2001e1b4 	.word	0x2001e1b4

0800d1c4 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800d1c4:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800d1c6:	4b02      	ldr	r3, [pc, #8]	@ (800d1d0 <DMA2_Stream1_IRQHandler+0xc>)
 800d1c8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800d1ca:	f7fb f923 	bl	8008414 <HAL_DMA_IRQHandler>
}
 800d1ce:	bd08      	pop	{r3, pc}
 800d1d0:	2001e358 	.word	0x2001e358

0800d1d4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800d1d4:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(TS_INT_PIN);
 800d1d6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d1da:	f7fc f8dd 	bl	8009398 <HAL_GPIO_EXTI_IRQHandler>
}
 800d1de:	bd08      	pop	{r3, pc}

0800d1e0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d1e0:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d1e2:	680b      	ldr	r3, [r1, #0]
 800d1e4:	b9cb      	cbnz	r3, 800d21a <FMC_SDRAM_Init+0x3a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d1e6:	6802      	ldr	r2, [r0, #0]
 800d1e8:	f36f 020e 	bfc	r2, #0, #15
 800d1ec:	684b      	ldr	r3, [r1, #4]
 800d1ee:	688c      	ldr	r4, [r1, #8]
 800d1f0:	4323      	orrs	r3, r4
 800d1f2:	68cc      	ldr	r4, [r1, #12]
 800d1f4:	4323      	orrs	r3, r4
 800d1f6:	690c      	ldr	r4, [r1, #16]
 800d1f8:	4323      	orrs	r3, r4
 800d1fa:	694c      	ldr	r4, [r1, #20]
 800d1fc:	4323      	orrs	r3, r4
 800d1fe:	698c      	ldr	r4, [r1, #24]
 800d200:	4323      	orrs	r3, r4
 800d202:	69cc      	ldr	r4, [r1, #28]
 800d204:	4323      	orrs	r3, r4
 800d206:	6a0c      	ldr	r4, [r1, #32]
 800d208:	4323      	orrs	r3, r4
 800d20a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800d20c:	430b      	orrs	r3, r1
 800d20e:	4313      	orrs	r3, r2
 800d210:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800d212:	2000      	movs	r0, #0
 800d214:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d218:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d21a:	6803      	ldr	r3, [r0, #0]
 800d21c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800d220:	69ca      	ldr	r2, [r1, #28]
 800d222:	6a0c      	ldr	r4, [r1, #32]
 800d224:	4322      	orrs	r2, r4
 800d226:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800d228:	4322      	orrs	r2, r4
 800d22a:	4313      	orrs	r3, r2
 800d22c:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d22e:	6842      	ldr	r2, [r0, #4]
 800d230:	f36f 020e 	bfc	r2, #0, #15
 800d234:	684b      	ldr	r3, [r1, #4]
 800d236:	688c      	ldr	r4, [r1, #8]
 800d238:	4323      	orrs	r3, r4
 800d23a:	68cc      	ldr	r4, [r1, #12]
 800d23c:	4323      	orrs	r3, r4
 800d23e:	690c      	ldr	r4, [r1, #16]
 800d240:	4323      	orrs	r3, r4
 800d242:	694c      	ldr	r4, [r1, #20]
 800d244:	4323      	orrs	r3, r4
 800d246:	6989      	ldr	r1, [r1, #24]
 800d248:	430b      	orrs	r3, r1
 800d24a:	4313      	orrs	r3, r2
 800d24c:	6043      	str	r3, [r0, #4]
 800d24e:	e7e0      	b.n	800d212 <FMC_SDRAM_Init+0x32>

0800d250 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d250:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d252:	bb3a      	cbnz	r2, 800d2a4 <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d254:	6882      	ldr	r2, [r0, #8]
 800d256:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800d25a:	680b      	ldr	r3, [r1, #0]
 800d25c:	3b01      	subs	r3, #1
 800d25e:	684c      	ldr	r4, [r1, #4]
 800d260:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800d264:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 800d268:	688c      	ldr	r4, [r1, #8]
 800d26a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800d26e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800d272:	68cc      	ldr	r4, [r1, #12]
 800d274:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800d278:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 800d27c:	690c      	ldr	r4, [r1, #16]
 800d27e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800d282:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800d286:	694c      	ldr	r4, [r1, #20]
 800d288:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800d28c:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800d290:	6989      	ldr	r1, [r1, #24]
 800d292:	3901      	subs	r1, #1
 800d294:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800d298:	4313      	orrs	r3, r2
 800d29a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800d29c:	2000      	movs	r0, #0
 800d29e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2a2:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d2a4:	6883      	ldr	r3, [r0, #8]
 800d2a6:	4a13      	ldr	r2, [pc, #76]	@ (800d2f4 <FMC_SDRAM_Timing_Init+0xa4>)
 800d2a8:	401a      	ands	r2, r3
 800d2aa:	68cb      	ldr	r3, [r1, #12]
 800d2ac:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
 800d2b0:	694b      	ldr	r3, [r1, #20]
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	051b      	lsls	r3, r3, #20
 800d2b6:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 800d2ba:	431a      	orrs	r2, r3
 800d2bc:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d2be:	68c2      	ldr	r2, [r0, #12]
 800d2c0:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800d2c4:	680b      	ldr	r3, [r1, #0]
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	684c      	ldr	r4, [r1, #4]
 800d2ca:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800d2ce:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 800d2d2:	688c      	ldr	r4, [r1, #8]
 800d2d4:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800d2d8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800d2dc:	690c      	ldr	r4, [r1, #16]
 800d2de:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800d2e2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800d2e6:	6989      	ldr	r1, [r1, #24]
 800d2e8:	3901      	subs	r1, #1
 800d2ea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	60c3      	str	r3, [r0, #12]
 800d2f2:	e7d3      	b.n	800d29c <FMC_SDRAM_Timing_Init+0x4c>
 800d2f4:	ff0f0fff 	.word	0xff0f0fff

0800d2f8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d2f8:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d2fa:	6902      	ldr	r2, [r0, #16]
 800d2fc:	f36f 0215 	bfc	r2, #0, #22
 800d300:	680b      	ldr	r3, [r1, #0]
 800d302:	684c      	ldr	r4, [r1, #4]
 800d304:	4323      	orrs	r3, r4
 800d306:	688c      	ldr	r4, [r1, #8]
 800d308:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800d30c:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
 800d310:	68c9      	ldr	r1, [r1, #12]
 800d312:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800d316:	4313      	orrs	r3, r2
 800d318:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800d31a:	2000      	movs	r0, #0
 800d31c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d320:	4770      	bx	lr

0800d322 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d322:	6943      	ldr	r3, [r0, #20]
 800d324:	f36f 034d 	bfc	r3, #1, #13
 800d328:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800d32c:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800d32e:	2000      	movs	r0, #0
 800d330:	4770      	bx	lr
	...

0800d334 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d334:	4b0b      	ldr	r3, [pc, #44]	@ (800d364 <SDMMC_GetCmdError+0x30>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a0b      	ldr	r2, [pc, #44]	@ (800d368 <SDMMC_GetCmdError+0x34>)
 800d33a:	fba2 2303 	umull	r2, r3, r2, r3
 800d33e:	0a5b      	lsrs	r3, r3, #9
 800d340:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d344:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d348:	461a      	mov	r2, r3
 800d34a:	3b01      	subs	r3, #1
 800d34c:	b13a      	cbz	r2, 800d35e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d34e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d350:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800d354:	d0f8      	beq.n	800d348 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d356:	23c5      	movs	r3, #197	@ 0xc5
 800d358:	6383      	str	r3, [r0, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d35a:	2000      	movs	r0, #0
 800d35c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800d35e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d362:	4770      	bx	lr
 800d364:	2000213c 	.word	0x2000213c
 800d368:	10624dd3 	.word	0x10624dd3

0800d36c <SDMMC_Init>:
{
 800d36c:	b084      	sub	sp, #16
 800d36e:	f10d 0c04 	add.w	ip, sp, #4
 800d372:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800d376:	460b      	mov	r3, r1
 800d378:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800d37a:	9a03      	ldr	r2, [sp, #12]
             Init.ClockBypass         |\
 800d37c:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800d37e:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 800d380:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 800d382:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 800d384:	4313      	orrs	r3, r2
             Init.ClockDiv
 800d386:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 800d388:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d38a:	6841      	ldr	r1, [r0, #4]
 800d38c:	4a03      	ldr	r2, [pc, #12]	@ (800d39c <SDMMC_Init+0x30>)
 800d38e:	400a      	ands	r2, r1
 800d390:	4313      	orrs	r3, r2
 800d392:	6043      	str	r3, [r0, #4]
}
 800d394:	2000      	movs	r0, #0
 800d396:	b004      	add	sp, #16
 800d398:	4770      	bx	lr
 800d39a:	bf00      	nop
 800d39c:	ffff8100 	.word	0xffff8100

0800d3a0 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800d3a0:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800d3a4:	4770      	bx	lr

0800d3a6 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800d3a6:	680b      	ldr	r3, [r1, #0]
 800d3a8:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	4770      	bx	lr

0800d3b0 <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d3b0:	2303      	movs	r3, #3
 800d3b2:	6003      	str	r3, [r0, #0]
}
 800d3b4:	2000      	movs	r0, #0
 800d3b6:	4770      	bx	lr

0800d3b8 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d3b8:	6800      	ldr	r0, [r0, #0]
}
 800d3ba:	f000 0003 	and.w	r0, r0, #3
 800d3be:	4770      	bx	lr

0800d3c0 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800d3c0:	680b      	ldr	r3, [r1, #0]
 800d3c2:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3c4:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 800d3c6:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3c8:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800d3ca:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 800d3cc:	4313      	orrs	r3, r2
                       Command->CPSM);
 800d3ce:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 800d3d0:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d3d2:	68c2      	ldr	r2, [r0, #12]
 800d3d4:	f36f 020b 	bfc	r2, #0, #12
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	60c3      	str	r3, [r0, #12]
}
 800d3dc:	2000      	movs	r0, #0
 800d3de:	4770      	bx	lr

0800d3e0 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 800d3e0:	6900      	ldr	r0, [r0, #16]
}
 800d3e2:	b2c0      	uxtb	r0, r0
 800d3e4:	4770      	bx	lr

0800d3e6 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d3e6:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800d3e8:	5840      	ldr	r0, [r0, r1]
}  
 800d3ea:	4770      	bx	lr

0800d3ec <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d3ec:	680b      	ldr	r3, [r1, #0]
 800d3ee:	6243      	str	r3, [r0, #36]	@ 0x24
  SDMMCx->DLEN = Data->DataLength;
 800d3f0:	684b      	ldr	r3, [r1, #4]
 800d3f2:	6283      	str	r3, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d3f4:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800d3f6:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d3f8:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 800d3fa:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 800d3fc:	4313      	orrs	r3, r2
                       Data->DPSM);
 800d3fe:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 800d400:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d402:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800d404:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
 800d408:	4313      	orrs	r3, r2
 800d40a:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 800d40c:	2000      	movs	r0, #0
 800d40e:	4770      	bx	lr

0800d410 <SDMMC_CmdGoIdleState>:
{
 800d410:	b510      	push	{r4, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800d416:	2300      	movs	r3, #0
 800d418:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d41a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d41c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d41e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d420:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d424:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d426:	a901      	add	r1, sp, #4
 800d428:	f7ff ffca 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d42c:	4620      	mov	r0, r4
 800d42e:	f7ff ff81 	bl	800d334 <SDMMC_GetCmdError>
}
 800d432:	b006      	add	sp, #24
 800d434:	bd10      	pop	{r4, pc}
	...

0800d438 <SDMMC_GetCmdResp1>:
{
 800d438:	b538      	push	{r3, r4, r5, lr}
 800d43a:	4604      	mov	r4, r0
 800d43c:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d43e:	4b50      	ldr	r3, [pc, #320]	@ (800d580 <SDMMC_GetCmdResp1+0x148>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4950      	ldr	r1, [pc, #320]	@ (800d584 <SDMMC_GetCmdResp1+0x14c>)
 800d444:	fba1 1303 	umull	r1, r3, r1, r3
 800d448:	0a5b      	lsrs	r3, r3, #9
 800d44a:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800d44e:	4613      	mov	r3, r2
 800d450:	3a01      	subs	r2, #1
 800d452:	2b00      	cmp	r3, #0
 800d454:	d05d      	beq.n	800d512 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDMMCx->STA;
 800d456:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d458:	f013 0f45 	tst.w	r3, #69	@ 0x45
 800d45c:	d0f7      	beq.n	800d44e <SDMMC_GetCmdResp1+0x16>
 800d45e:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800d462:	d1f4      	bne.n	800d44e <SDMMC_GetCmdResp1+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d464:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d466:	f013 0f04 	tst.w	r3, #4
 800d46a:	d106      	bne.n	800d47a <SDMMC_GetCmdResp1+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d46c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d46e:	f013 0f01 	tst.w	r3, #1
 800d472:	d005      	beq.n	800d480 <SDMMC_GetCmdResp1+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d474:	2001      	movs	r0, #1
 800d476:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d478:	e04d      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d47a:	2004      	movs	r0, #4
 800d47c:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d47e:	e04a      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d480:	23c5      	movs	r3, #197	@ 0xc5
 800d482:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d484:	4620      	mov	r0, r4
 800d486:	f7ff ffab 	bl	800d3e0 <SDMMC_GetCommandResponse>
 800d48a:	42a8      	cmp	r0, r5
 800d48c:	d001      	beq.n	800d492 <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d48e:	2001      	movs	r0, #1
 800d490:	e041      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d492:	2100      	movs	r1, #0
 800d494:	4620      	mov	r0, r4
 800d496:	f7ff ffa6 	bl	800d3e6 <SDMMC_GetResponse>
 800d49a:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d49c:	483a      	ldr	r0, [pc, #232]	@ (800d588 <SDMMC_GetCmdResp1+0x150>)
 800d49e:	4018      	ands	r0, r3
 800d4a0:	b3c8      	cbz	r0, 800d516 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	db38      	blt.n	800d518 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d4a6:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d4aa:	d138      	bne.n	800d51e <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d4ac:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800d4b0:	d137      	bne.n	800d522 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d4b2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800d4b6:	d136      	bne.n	800d526 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d4b8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800d4bc:	d136      	bne.n	800d52c <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d4be:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800d4c2:	d136      	bne.n	800d532 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d4c4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800d4c8:	d136      	bne.n	800d538 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d4ca:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800d4ce:	d136      	bne.n	800d53e <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d4d0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800d4d4:	d136      	bne.n	800d544 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d4d6:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800d4da:	d136      	bne.n	800d54a <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d4dc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800d4e0:	d136      	bne.n	800d550 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d4e2:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800d4e6:	d136      	bne.n	800d556 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d4e8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800d4ec:	d136      	bne.n	800d55c <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d4ee:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800d4f2:	d136      	bne.n	800d562 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d4f4:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800d4f8:	d136      	bne.n	800d568 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d4fa:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800d4fe:	d136      	bne.n	800d56e <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d500:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800d504:	d136      	bne.n	800d574 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d506:	f013 0f08 	tst.w	r3, #8
 800d50a:	d036      	beq.n	800d57a <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d50c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800d510:	e001      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 800d512:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d516:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d518:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d51c:	e7fb      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d51e:	2040      	movs	r0, #64	@ 0x40
 800d520:	e7f9      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d522:	2080      	movs	r0, #128	@ 0x80
 800d524:	e7f7      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d526:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d52a:	e7f4      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d52c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d530:	e7f1      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d532:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d536:	e7ee      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d538:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d53c:	e7eb      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d53e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d542:	e7e8      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d544:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d548:	e7e5      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d54a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d54e:	e7e2      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 800d550:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d554:	e7df      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d556:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d55a:	e7dc      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d55c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d560:	e7d9      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d562:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d566:	e7d6      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d568:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d56c:	e7d3      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d56e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d572:	e7d0      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 800d574:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d578:	e7cd      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d57a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d57e:	e7ca      	b.n	800d516 <SDMMC_GetCmdResp1+0xde>
 800d580:	2000213c 	.word	0x2000213c
 800d584:	10624dd3 	.word	0x10624dd3
 800d588:	fdffe008 	.word	0xfdffe008

0800d58c <SDMMC_CmdBlockLength>:
{
 800d58c:	b530      	push	{r4, r5, lr}
 800d58e:	b087      	sub	sp, #28
 800d590:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d592:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d594:	2510      	movs	r5, #16
 800d596:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d598:	2340      	movs	r3, #64	@ 0x40
 800d59a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d59c:	2300      	movs	r3, #0
 800d59e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5a4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5a6:	a901      	add	r1, sp, #4
 800d5a8:	f7ff ff0a 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d5ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f7ff ff40 	bl	800d438 <SDMMC_GetCmdResp1>
}
 800d5b8:	b007      	add	sp, #28
 800d5ba:	bd30      	pop	{r4, r5, pc}

0800d5bc <SDMMC_CmdReadSingleBlock>:
{
 800d5bc:	b530      	push	{r4, r5, lr}
 800d5be:	b087      	sub	sp, #28
 800d5c0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d5c2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d5c4:	2511      	movs	r5, #17
 800d5c6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5c8:	2340      	movs	r3, #64	@ 0x40
 800d5ca:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5d4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5d6:	a901      	add	r1, sp, #4
 800d5d8:	f7ff fef2 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d5dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5e0:	4629      	mov	r1, r5
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f7ff ff28 	bl	800d438 <SDMMC_GetCmdResp1>
}
 800d5e8:	b007      	add	sp, #28
 800d5ea:	bd30      	pop	{r4, r5, pc}

0800d5ec <SDMMC_CmdReadMultiBlock>:
{
 800d5ec:	b530      	push	{r4, r5, lr}
 800d5ee:	b087      	sub	sp, #28
 800d5f0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d5f2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d5f4:	2512      	movs	r5, #18
 800d5f6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5f8:	2340      	movs	r3, #64	@ 0x40
 800d5fa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d600:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d604:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d606:	a901      	add	r1, sp, #4
 800d608:	f7ff feda 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d60c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d610:	4629      	mov	r1, r5
 800d612:	4620      	mov	r0, r4
 800d614:	f7ff ff10 	bl	800d438 <SDMMC_GetCmdResp1>
}
 800d618:	b007      	add	sp, #28
 800d61a:	bd30      	pop	{r4, r5, pc}

0800d61c <SDMMC_CmdWriteSingleBlock>:
{
 800d61c:	b530      	push	{r4, r5, lr}
 800d61e:	b087      	sub	sp, #28
 800d620:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d622:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d624:	2518      	movs	r5, #24
 800d626:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d628:	2340      	movs	r3, #64	@ 0x40
 800d62a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d62c:	2300      	movs	r3, #0
 800d62e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d630:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d634:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d636:	a901      	add	r1, sp, #4
 800d638:	f7ff fec2 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d63c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d640:	4629      	mov	r1, r5
 800d642:	4620      	mov	r0, r4
 800d644:	f7ff fef8 	bl	800d438 <SDMMC_GetCmdResp1>
}
 800d648:	b007      	add	sp, #28
 800d64a:	bd30      	pop	{r4, r5, pc}

0800d64c <SDMMC_CmdWriteMultiBlock>:
{
 800d64c:	b530      	push	{r4, r5, lr}
 800d64e:	b087      	sub	sp, #28
 800d650:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d652:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d654:	2519      	movs	r5, #25
 800d656:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d658:	2340      	movs	r3, #64	@ 0x40
 800d65a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d65c:	2300      	movs	r3, #0
 800d65e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d664:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d666:	a901      	add	r1, sp, #4
 800d668:	f7ff feaa 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d66c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d670:	4629      	mov	r1, r5
 800d672:	4620      	mov	r0, r4
 800d674:	f7ff fee0 	bl	800d438 <SDMMC_GetCmdResp1>
}
 800d678:	b007      	add	sp, #28
 800d67a:	bd30      	pop	{r4, r5, pc}

0800d67c <SDMMC_CmdStopTransfer>:
{
 800d67c:	b530      	push	{r4, r5, lr}
 800d67e:	b087      	sub	sp, #28
 800d680:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800d682:	2300      	movs	r3, #0
 800d684:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d686:	250c      	movs	r5, #12
 800d688:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d68a:	2240      	movs	r2, #64	@ 0x40
 800d68c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d68e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d694:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d696:	a901      	add	r1, sp, #4
 800d698:	f7ff fe92 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d69c:	4a03      	ldr	r2, [pc, #12]	@ (800d6ac <SDMMC_CmdStopTransfer+0x30>)
 800d69e:	4629      	mov	r1, r5
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f7ff fec9 	bl	800d438 <SDMMC_GetCmdResp1>
}
 800d6a6:	b007      	add	sp, #28
 800d6a8:	bd30      	pop	{r4, r5, pc}
 800d6aa:	bf00      	nop
 800d6ac:	05f5e100 	.word	0x05f5e100

0800d6b0 <SDMMC_CmdSelDesel>:
{
 800d6b0:	b530      	push	{r4, r5, lr}
 800d6b2:	b087      	sub	sp, #28
 800d6b4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d6b6:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d6b8:	2507      	movs	r5, #7
 800d6ba:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6bc:	2340      	movs	r3, #64	@ 0x40
 800d6be:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6c8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6ca:	a901      	add	r1, sp, #4
 800d6cc:	f7ff fe78 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d6d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6d4:	4629      	mov	r1, r5
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f7ff feae 	bl	800d438 <SDMMC_GetCmdResp1>
}
 800d6dc:	b007      	add	sp, #28
 800d6de:	bd30      	pop	{r4, r5, pc}

0800d6e0 <SDMMC_CmdAppCommand>:
{
 800d6e0:	b530      	push	{r4, r5, lr}
 800d6e2:	b087      	sub	sp, #28
 800d6e4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d6e6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d6e8:	2537      	movs	r5, #55	@ 0x37
 800d6ea:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6ec:	2340      	movs	r3, #64	@ 0x40
 800d6ee:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6f8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6fa:	a901      	add	r1, sp, #4
 800d6fc:	f7ff fe60 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d700:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d704:	4629      	mov	r1, r5
 800d706:	4620      	mov	r0, r4
 800d708:	f7ff fe96 	bl	800d438 <SDMMC_GetCmdResp1>
}
 800d70c:	b007      	add	sp, #28
 800d70e:	bd30      	pop	{r4, r5, pc}

0800d710 <SDMMC_CmdBusWidth>:
{
 800d710:	b530      	push	{r4, r5, lr}
 800d712:	b087      	sub	sp, #28
 800d714:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d716:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d718:	2506      	movs	r5, #6
 800d71a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d71c:	2340      	movs	r3, #64	@ 0x40
 800d71e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d720:	2300      	movs	r3, #0
 800d722:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d724:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d728:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d72a:	a901      	add	r1, sp, #4
 800d72c:	f7ff fe48 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d730:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d734:	4629      	mov	r1, r5
 800d736:	4620      	mov	r0, r4
 800d738:	f7ff fe7e 	bl	800d438 <SDMMC_GetCmdResp1>
}
 800d73c:	b007      	add	sp, #28
 800d73e:	bd30      	pop	{r4, r5, pc}

0800d740 <SDMMC_CmdSendSCR>:
{
 800d740:	b530      	push	{r4, r5, lr}
 800d742:	b087      	sub	sp, #28
 800d744:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800d746:	2300      	movs	r3, #0
 800d748:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d74a:	2533      	movs	r5, #51	@ 0x33
 800d74c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d74e:	2240      	movs	r2, #64	@ 0x40
 800d750:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d752:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d754:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d758:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d75a:	a901      	add	r1, sp, #4
 800d75c:	f7ff fe30 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d760:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d764:	4629      	mov	r1, r5
 800d766:	4620      	mov	r0, r4
 800d768:	f7ff fe66 	bl	800d438 <SDMMC_GetCmdResp1>
}
 800d76c:	b007      	add	sp, #28
 800d76e:	bd30      	pop	{r4, r5, pc}

0800d770 <SDMMC_CmdSendStatus>:
{
 800d770:	b530      	push	{r4, r5, lr}
 800d772:	b087      	sub	sp, #28
 800d774:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800d776:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d778:	250d      	movs	r5, #13
 800d77a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d77c:	2340      	movs	r3, #64	@ 0x40
 800d77e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d780:	2300      	movs	r3, #0
 800d782:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d784:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d788:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d78a:	a901      	add	r1, sp, #4
 800d78c:	f7ff fe18 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d790:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d794:	4629      	mov	r1, r5
 800d796:	4620      	mov	r0, r4
 800d798:	f7ff fe4e 	bl	800d438 <SDMMC_GetCmdResp1>
}
 800d79c:	b007      	add	sp, #28
 800d79e:	bd30      	pop	{r4, r5, pc}

0800d7a0 <SDMMC_GetCmdResp2>:
{
 800d7a0:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d7a2:	4b14      	ldr	r3, [pc, #80]	@ (800d7f4 <SDMMC_GetCmdResp2+0x54>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a14      	ldr	r2, [pc, #80]	@ (800d7f8 <SDMMC_GetCmdResp2+0x58>)
 800d7a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d7ac:	0a5b      	lsrs	r3, r3, #9
 800d7ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7b2:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	b1ba      	cbz	r2, 800d7ec <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
 800d7bc:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7be:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800d7c2:	d0f8      	beq.n	800d7b6 <SDMMC_GetCmdResp2+0x16>
 800d7c4:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800d7c8:	d1f5      	bne.n	800d7b6 <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d7ca:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d7cc:	f013 0f04 	tst.w	r3, #4
 800d7d0:	d106      	bne.n	800d7e0 <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d7d2:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800d7d4:	f010 0001 	ands.w	r0, r0, #1
 800d7d8:	d105      	bne.n	800d7e6 <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d7da:	23c5      	movs	r3, #197	@ 0xc5
 800d7dc:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800d7de:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7e0:	2004      	movs	r0, #4
 800d7e2:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7e4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d7e6:	2001      	movs	r0, #1
 800d7e8:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7ea:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800d7ec:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	2000213c 	.word	0x2000213c
 800d7f8:	10624dd3 	.word	0x10624dd3

0800d7fc <SDMMC_CmdSendCID>:
{
 800d7fc:	b510      	push	{r4, lr}
 800d7fe:	b086      	sub	sp, #24
 800d800:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800d802:	2300      	movs	r3, #0
 800d804:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d806:	2202      	movs	r2, #2
 800d808:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d80a:	22c0      	movs	r2, #192	@ 0xc0
 800d80c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d80e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d810:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d814:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d816:	a901      	add	r1, sp, #4
 800d818:	f7ff fdd2 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d81c:	4620      	mov	r0, r4
 800d81e:	f7ff ffbf 	bl	800d7a0 <SDMMC_GetCmdResp2>
}
 800d822:	b006      	add	sp, #24
 800d824:	bd10      	pop	{r4, pc}

0800d826 <SDMMC_CmdSendCSD>:
{
 800d826:	b510      	push	{r4, lr}
 800d828:	b086      	sub	sp, #24
 800d82a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800d82c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d82e:	2309      	movs	r3, #9
 800d830:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d832:	23c0      	movs	r3, #192	@ 0xc0
 800d834:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d836:	2300      	movs	r3, #0
 800d838:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d83a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d83e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d840:	a901      	add	r1, sp, #4
 800d842:	f7ff fdbd 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d846:	4620      	mov	r0, r4
 800d848:	f7ff ffaa 	bl	800d7a0 <SDMMC_GetCmdResp2>
}
 800d84c:	b006      	add	sp, #24
 800d84e:	bd10      	pop	{r4, pc}

0800d850 <SDMMC_GetCmdResp3>:
{
 800d850:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d852:	4b10      	ldr	r3, [pc, #64]	@ (800d894 <SDMMC_GetCmdResp3+0x44>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a10      	ldr	r2, [pc, #64]	@ (800d898 <SDMMC_GetCmdResp3+0x48>)
 800d858:	fba2 2303 	umull	r2, r3, r2, r3
 800d85c:	0a5b      	lsrs	r3, r3, #9
 800d85e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d862:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800d866:	461a      	mov	r2, r3
 800d868:	3b01      	subs	r3, #1
 800d86a:	b182      	cbz	r2, 800d88e <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
 800d86c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d86e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800d872:	d0f8      	beq.n	800d866 <SDMMC_GetCmdResp3+0x16>
 800d874:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800d878:	d1f5      	bne.n	800d866 <SDMMC_GetCmdResp3+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d87a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800d87c:	f010 0004 	ands.w	r0, r0, #4
 800d880:	d102      	bne.n	800d888 <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d882:	23c5      	movs	r3, #197	@ 0xc5
 800d884:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800d886:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d888:	2004      	movs	r0, #4
 800d88a:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d88c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800d88e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d892:	4770      	bx	lr
 800d894:	2000213c 	.word	0x2000213c
 800d898:	10624dd3 	.word	0x10624dd3

0800d89c <SDMMC_CmdAppOperCommand>:
{
 800d89c:	b510      	push	{r4, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d8a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d8cc <SDMMC_CmdAppOperCommand+0x30>)
 800d8a4:	430b      	orrs	r3, r1
 800d8a6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d8a8:	2329      	movs	r3, #41	@ 0x29
 800d8aa:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8ac:	2340      	movs	r3, #64	@ 0x40
 800d8ae:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8b8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8ba:	a901      	add	r1, sp, #4
 800d8bc:	f7ff fd80 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f7ff ffc5 	bl	800d850 <SDMMC_GetCmdResp3>
}
 800d8c6:	b006      	add	sp, #24
 800d8c8:	bd10      	pop	{r4, pc}
 800d8ca:	bf00      	nop
 800d8cc:	80100000 	.word	0x80100000

0800d8d0 <SDMMC_GetCmdResp6>:
{
 800d8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	460e      	mov	r6, r1
 800d8d6:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d8d8:	4b23      	ldr	r3, [pc, #140]	@ (800d968 <SDMMC_GetCmdResp6+0x98>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a23      	ldr	r2, [pc, #140]	@ (800d96c <SDMMC_GetCmdResp6+0x9c>)
 800d8de:	fba2 2303 	umull	r2, r3, r2, r3
 800d8e2:	0a5b      	lsrs	r3, r3, #9
 800d8e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d8e8:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	3b01      	subs	r3, #1
 800d8f0:	b38a      	cbz	r2, 800d956 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 800d8f2:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8f4:	f014 0f45 	tst.w	r4, #69	@ 0x45
 800d8f8:	d0f8      	beq.n	800d8ec <SDMMC_GetCmdResp6+0x1c>
 800d8fa:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 800d8fe:	d1f5      	bne.n	800d8ec <SDMMC_GetCmdResp6+0x1c>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d900:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d902:	f013 0f04 	tst.w	r3, #4
 800d906:	d106      	bne.n	800d916 <SDMMC_GetCmdResp6+0x46>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d908:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d90a:	f013 0f01 	tst.w	r3, #1
 800d90e:	d005      	beq.n	800d91c <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d910:	2001      	movs	r0, #1
 800d912:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d914:	e021      	b.n	800d95a <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d916:	2004      	movs	r0, #4
 800d918:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d91a:	e01e      	b.n	800d95a <SDMMC_GetCmdResp6+0x8a>
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d91c:	4628      	mov	r0, r5
 800d91e:	f7ff fd5f 	bl	800d3e0 <SDMMC_GetCommandResponse>
 800d922:	42b0      	cmp	r0, r6
 800d924:	d001      	beq.n	800d92a <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d926:	2001      	movs	r0, #1
 800d928:	e017      	b.n	800d95a <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d92a:	23c5      	movs	r3, #197	@ 0xc5
 800d92c:	63ab      	str	r3, [r5, #56]	@ 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d92e:	2100      	movs	r1, #0
 800d930:	4628      	mov	r0, r5
 800d932:	f7ff fd58 	bl	800d3e6 <SDMMC_GetResponse>
 800d936:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d938:	f410 4060 	ands.w	r0, r0, #57344	@ 0xe000
 800d93c:	d008      	beq.n	800d950 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d93e:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800d942:	d10b      	bne.n	800d95c <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d944:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800d948:	d00b      	beq.n	800d962 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d94a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d94e:	e004      	b.n	800d95a <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d950:	0c1b      	lsrs	r3, r3, #16
 800d952:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 800d954:	e001      	b.n	800d95a <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800d956:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d95c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d960:	e7fb      	b.n	800d95a <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d962:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d966:	e7f8      	b.n	800d95a <SDMMC_GetCmdResp6+0x8a>
 800d968:	2000213c 	.word	0x2000213c
 800d96c:	10624dd3 	.word	0x10624dd3

0800d970 <SDMMC_CmdSetRelAdd>:
{
 800d970:	b570      	push	{r4, r5, r6, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	4604      	mov	r4, r0
 800d976:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800d978:	2300      	movs	r3, #0
 800d97a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d97c:	2603      	movs	r6, #3
 800d97e:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d980:	2240      	movs	r2, #64	@ 0x40
 800d982:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d984:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d98a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d98c:	a901      	add	r1, sp, #4
 800d98e:	f7ff fd17 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d992:	462a      	mov	r2, r5
 800d994:	4631      	mov	r1, r6
 800d996:	4620      	mov	r0, r4
 800d998:	f7ff ff9a 	bl	800d8d0 <SDMMC_GetCmdResp6>
}
 800d99c:	b006      	add	sp, #24
 800d99e:	bd70      	pop	{r4, r5, r6, pc}

0800d9a0 <SDMMC_GetCmdResp7>:
{
 800d9a0:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d9a2:	4b16      	ldr	r3, [pc, #88]	@ (800d9fc <SDMMC_GetCmdResp7+0x5c>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4a16      	ldr	r2, [pc, #88]	@ (800da00 <SDMMC_GetCmdResp7+0x60>)
 800d9a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ac:	0a5b      	lsrs	r3, r3, #9
 800d9ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9b2:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	b1e2      	cbz	r2, 800d9f6 <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
 800d9bc:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9be:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800d9c2:	d0f8      	beq.n	800d9b6 <SDMMC_GetCmdResp7+0x16>
 800d9c4:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800d9c8:	d1f5      	bne.n	800d9b6 <SDMMC_GetCmdResp7+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9ca:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d9cc:	f013 0f04 	tst.w	r3, #4
 800d9d0:	d10b      	bne.n	800d9ea <SDMMC_GetCmdResp7+0x4a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9d2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d9d4:	f013 0301 	ands.w	r3, r3, #1
 800d9d8:	d10a      	bne.n	800d9f0 <SDMMC_GetCmdResp7+0x50>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d9da:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800d9dc:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 800d9e0:	d00b      	beq.n	800d9fa <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d9e2:	2240      	movs	r2, #64	@ 0x40
 800d9e4:	638a      	str	r2, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d9ea:	2004      	movs	r0, #4
 800d9ec:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9ee:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d9f0:	2001      	movs	r0, #1
 800d9f2:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9f4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800d9f6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d9fa:	4770      	bx	lr
 800d9fc:	2000213c 	.word	0x2000213c
 800da00:	10624dd3 	.word	0x10624dd3

0800da04 <SDMMC_CmdOperCond>:
{
 800da04:	b510      	push	{r4, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800da0a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800da0e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800da10:	2308      	movs	r3, #8
 800da12:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da14:	2340      	movs	r3, #64	@ 0x40
 800da16:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da18:	2300      	movs	r3, #0
 800da1a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da20:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da22:	a901      	add	r1, sp, #4
 800da24:	f7ff fccc 	bl	800d3c0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800da28:	4620      	mov	r0, r4
 800da2a:	f7ff ffb9 	bl	800d9a0 <SDMMC_GetCmdResp7>
}
 800da2e:	b006      	add	sp, #24
 800da30:	bd10      	pop	{r4, pc}

0800da32 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800da32:	b570      	push	{r4, r5, r6, lr}
 800da34:	460c      	mov	r4, r1
 800da36:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da38:	2500      	movs	r5, #0
 800da3a:	e006      	b.n	800da4a <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800da3c:	f3af 8000 	nop.w
 800da40:	4621      	mov	r1, r4
 800da42:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da46:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800da48:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da4a:	42b5      	cmp	r5, r6
 800da4c:	dbf6      	blt.n	800da3c <_read+0xa>
  }

  return len;
}
 800da4e:	4630      	mov	r0, r6
 800da50:	bd70      	pop	{r4, r5, r6, pc}

0800da52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800da52:	b570      	push	{r4, r5, r6, lr}
 800da54:	460c      	mov	r4, r1
 800da56:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da58:	2500      	movs	r5, #0
 800da5a:	e004      	b.n	800da66 <_write+0x14>
  {
    __io_putchar(*ptr++);
 800da5c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800da60:	f000 f8ae 	bl	800dbc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da64:	3501      	adds	r5, #1
 800da66:	42b5      	cmp	r5, r6
 800da68:	dbf8      	blt.n	800da5c <_write+0xa>
  }
  return len;
}
 800da6a:	4630      	mov	r0, r6
 800da6c:	bd70      	pop	{r4, r5, r6, pc}

0800da6e <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800da6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da72:	4770      	bx	lr

0800da74 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800da74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800da78:	604b      	str	r3, [r1, #4]
  return 0;
}
 800da7a:	2000      	movs	r0, #0
 800da7c:	4770      	bx	lr

0800da7e <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800da7e:	2001      	movs	r0, #1
 800da80:	4770      	bx	lr

0800da82 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800da82:	2000      	movs	r0, #0
 800da84:	4770      	bx	lr
	...

0800da88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800da88:	b510      	push	{r4, lr}
 800da8a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800da8c:	4a0c      	ldr	r2, [pc, #48]	@ (800dac0 <_sbrk+0x38>)
 800da8e:	490d      	ldr	r1, [pc, #52]	@ (800dac4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800da90:	480d      	ldr	r0, [pc, #52]	@ (800dac8 <_sbrk+0x40>)
 800da92:	6800      	ldr	r0, [r0, #0]
 800da94:	b140      	cbz	r0, 800daa8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800da96:	480c      	ldr	r0, [pc, #48]	@ (800dac8 <_sbrk+0x40>)
 800da98:	6800      	ldr	r0, [r0, #0]
 800da9a:	4403      	add	r3, r0
 800da9c:	1a52      	subs	r2, r2, r1
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d806      	bhi.n	800dab0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800daa2:	4a09      	ldr	r2, [pc, #36]	@ (800dac8 <_sbrk+0x40>)
 800daa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800daa6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800daa8:	4807      	ldr	r0, [pc, #28]	@ (800dac8 <_sbrk+0x40>)
 800daaa:	4c08      	ldr	r4, [pc, #32]	@ (800dacc <_sbrk+0x44>)
 800daac:	6004      	str	r4, [r0, #0]
 800daae:	e7f2      	b.n	800da96 <_sbrk+0xe>
    errno = ENOMEM;
 800dab0:	f003 fadc 	bl	801106c <__errno>
 800dab4:	230c      	movs	r3, #12
 800dab6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800dab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dabc:	e7f3      	b.n	800daa6 <_sbrk+0x1e>
 800dabe:	bf00      	nop
 800dac0:	20080000 	.word	0x20080000
 800dac4:	00000800 	.word	0x00000800
 800dac8:	2001e754 	.word	0x2001e754
 800dacc:	2001e938 	.word	0x2001e938

0800dad0 <SystemInit>:
 */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800dad0:	4a03      	ldr	r2, [pc, #12]	@ (800dae0 <SystemInit+0x10>)
 800dad2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800dad6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dada:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                                 /* USER_VECT_TAB_ADDRESS */
}
 800dade:	4770      	bx	lr
 800dae0:	e000ed00 	.word	0xe000ed00

0800dae4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800dae4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800dae6:	480b      	ldr	r0, [pc, #44]	@ (800db14 <MX_USART1_UART_Init+0x30>)
 800dae8:	4b0b      	ldr	r3, [pc, #44]	@ (800db18 <MX_USART1_UART_Init+0x34>)
 800daea:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800daec:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800daf0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800daf2:	2300      	movs	r3, #0
 800daf4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800daf6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800daf8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800dafa:	220c      	movs	r2, #12
 800dafc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dafe:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800db00:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800db02:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db04:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800db06:	f7ff fb0b 	bl	800d120 <HAL_UART_Init>
 800db0a:	b900      	cbnz	r0, 800db0e <MX_USART1_UART_Init+0x2a>
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 800db0c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800db0e:	f7f6 fbf1 	bl	80042f4 <Error_Handler>
}
 800db12:	e7fb      	b.n	800db0c <MX_USART1_UART_Init+0x28>
 800db14:	2001e758 	.word	0x2001e758
 800db18:	40011000 	.word	0x40011000

0800db1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 800db1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db1e:	b0ad      	sub	sp, #180	@ 0xb4
 800db20:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db22:	2100      	movs	r1, #0
 800db24:	9127      	str	r1, [sp, #156]	@ 0x9c
 800db26:	9128      	str	r1, [sp, #160]	@ 0xa0
 800db28:	9129      	str	r1, [sp, #164]	@ 0xa4
 800db2a:	912a      	str	r1, [sp, #168]	@ 0xa8
 800db2c:	912b      	str	r1, [sp, #172]	@ 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800db2e:	2290      	movs	r2, #144	@ 0x90
 800db30:	a803      	add	r0, sp, #12
 800db32:	f003 fa83 	bl	801103c <memset>
  if (uartHandle->Instance == USART1)
 800db36:	6822      	ldr	r2, [r4, #0]
 800db38:	4b1e      	ldr	r3, [pc, #120]	@ (800dbb4 <HAL_UART_MspInit+0x98>)
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d001      	beq.n	800db42 <HAL_UART_MspInit+0x26>

    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }
}
 800db3e:	b02d      	add	sp, #180	@ 0xb4
 800db40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800db42:	2340      	movs	r3, #64	@ 0x40
 800db44:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800db46:	a803      	add	r0, sp, #12
 800db48:	f7fc fe04 	bl	800a754 <HAL_RCCEx_PeriphCLKConfig>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	d12e      	bne.n	800dbae <HAL_UART_MspInit+0x92>
    __HAL_RCC_USART1_CLK_ENABLE();
 800db50:	4b19      	ldr	r3, [pc, #100]	@ (800dbb8 <HAL_UART_MspInit+0x9c>)
 800db52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800db54:	f042 0210 	orr.w	r2, r2, #16
 800db58:	645a      	str	r2, [r3, #68]	@ 0x44
 800db5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800db5c:	f002 0210 	and.w	r2, r2, #16
 800db60:	9201      	str	r2, [sp, #4]
 800db62:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db66:	f042 0201 	orr.w	r2, r2, #1
 800db6a:	631a      	str	r2, [r3, #48]	@ 0x30
 800db6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	9302      	str	r3, [sp, #8]
 800db74:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800db76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db7a:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db7c:	2702      	movs	r7, #2
 800db7e:	9728      	str	r7, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db80:	2400      	movs	r4, #0
 800db82:	9429      	str	r4, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db84:	2303      	movs	r3, #3
 800db86:	932a      	str	r3, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800db88:	2607      	movs	r6, #7
 800db8a:	962b      	str	r6, [sp, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800db8c:	4d0b      	ldr	r5, [pc, #44]	@ (800dbbc <HAL_UART_MspInit+0xa0>)
 800db8e:	a927      	add	r1, sp, #156	@ 0x9c
 800db90:	4628      	mov	r0, r5
 800db92:	f7fb faf1 	bl	8009178 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800db96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db9a:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db9c:	9728      	str	r7, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db9e:	9429      	str	r4, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dba0:	942a      	str	r4, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800dba2:	962b      	str	r6, [sp, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800dba4:	a927      	add	r1, sp, #156	@ 0x9c
 800dba6:	4628      	mov	r0, r5
 800dba8:	f7fb fae6 	bl	8009178 <HAL_GPIO_Init>
}
 800dbac:	e7c7      	b.n	800db3e <HAL_UART_MspInit+0x22>
      Error_Handler();
 800dbae:	f7f6 fba1 	bl	80042f4 <Error_Handler>
 800dbb2:	e7cd      	b.n	800db50 <HAL_UART_MspInit+0x34>
 800dbb4:	40011000 	.word	0x40011000
 800dbb8:	40023800 	.word	0x40023800
 800dbbc:	40020000 	.word	0x40020000

0800dbc0 <__io_putchar>:
    /* USER CODE END USART1_MspDeInit 1 */
  }
}

int __io_putchar(int ch)
{
 800dbc0:	b500      	push	{lr}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800dbc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dbca:	2201      	movs	r2, #1
 800dbcc:	a901      	add	r1, sp, #4
 800dbce:	4803      	ldr	r0, [pc, #12]	@ (800dbdc <__io_putchar+0x1c>)
 800dbd0:	f7ff f9e0 	bl	800cf94 <HAL_UART_Transmit>
  return ch;
}
 800dbd4:	9801      	ldr	r0, [sp, #4]
 800dbd6:	b003      	add	sp, #12
 800dbd8:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbdc:	2001e758 	.word	0x2001e758

0800dbe0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800dbe0:	b508      	push	{r3, lr}
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800dbe2:	f7f7 fdbf 	bl	8005764 <AUDIO_IO_Write>
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
}
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	bd08      	pop	{r3, pc}
	...

0800dbec <wm8994_SetMute>:
{
 800dbec:	b538      	push	{r3, r4, r5, lr}
 800dbee:	4603      	mov	r3, r0
  if (outputEnabled != 0)
 800dbf0:	4a13      	ldr	r2, [pc, #76]	@ (800dc40 <wm8994_SetMute+0x54>)
 800dbf2:	6810      	ldr	r0, [r2, #0]
 800dbf4:	b180      	cbz	r0, 800dc18 <wm8994_SetMute+0x2c>
    if(Cmd == AUDIO_MUTE_ON)
 800dbf6:	2901      	cmp	r1, #1
 800dbf8:	d00f      	beq.n	800dc1a <wm8994_SetMute+0x2e>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800dbfa:	b2dd      	uxtb	r5, r3
 800dbfc:	2210      	movs	r2, #16
 800dbfe:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800dc02:	4628      	mov	r0, r5
 800dc04:	f7ff ffec 	bl	800dbe0 <CODEC_IO_Write>
 800dc08:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800dc0a:	2210      	movs	r2, #16
 800dc0c:	f240 4122 	movw	r1, #1058	@ 0x422
 800dc10:	4628      	mov	r0, r5
 800dc12:	f7ff ffe5 	bl	800dbe0 <CODEC_IO_Write>
 800dc16:	4420      	add	r0, r4
}
 800dc18:	bd38      	pop	{r3, r4, r5, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800dc1a:	b2dd      	uxtb	r5, r3
 800dc1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc20:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800dc24:	4628      	mov	r0, r5
 800dc26:	f7ff ffdb 	bl	800dbe0 <CODEC_IO_Write>
 800dc2a:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800dc2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc30:	f240 4122 	movw	r1, #1058	@ 0x422
 800dc34:	4628      	mov	r0, r5
 800dc36:	f7ff ffd3 	bl	800dbe0 <CODEC_IO_Write>
 800dc3a:	4420      	add	r0, r4
 800dc3c:	e7ec      	b.n	800dc18 <wm8994_SetMute+0x2c>
 800dc3e:	bf00      	nop
 800dc40:	2001e7e4 	.word	0x2001e7e4

0800dc44 <wm8994_Play>:
{
 800dc44:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800dc46:	2100      	movs	r1, #0
 800dc48:	f7ff ffd0 	bl	800dbec <wm8994_SetMute>
}
 800dc4c:	bd08      	pop	{r3, pc}

0800dc4e <wm8994_Resume>:
{
 800dc4e:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800dc50:	2100      	movs	r1, #0
 800dc52:	f7ff ffcb 	bl	800dbec <wm8994_SetMute>
}
 800dc56:	bd08      	pop	{r3, pc}

0800dc58 <wm8994_Pause>:
{  
 800dc58:	b538      	push	{r3, r4, r5, lr}
 800dc5a:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800dc5c:	2101      	movs	r1, #1
 800dc5e:	f7ff ffc5 	bl	800dbec <wm8994_SetMute>
 800dc62:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 800dc64:	2201      	movs	r2, #1
 800dc66:	2102      	movs	r1, #2
 800dc68:	b2e8      	uxtb	r0, r5
 800dc6a:	f7ff ffb9 	bl	800dbe0 <CODEC_IO_Write>
}
 800dc6e:	4420      	add	r0, r4
 800dc70:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dc74 <wm8994_Stop>:
{
 800dc74:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 800dc76:	4b1d      	ldr	r3, [pc, #116]	@ (800dcec <wm8994_Stop+0x78>)
 800dc78:	681c      	ldr	r4, [r3, #0]
 800dc7a:	b90c      	cbnz	r4, 800dc80 <wm8994_Stop+0xc>
}
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	bd70      	pop	{r4, r5, r6, pc}
 800dc80:	4605      	mov	r5, r0
 800dc82:	460e      	mov	r6, r1
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800dc84:	2101      	movs	r1, #1
 800dc86:	f7ff ffb1 	bl	800dbec <wm8994_SetMute>
 800dc8a:	4604      	mov	r4, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 800dc8c:	2e02      	cmp	r6, #2
 800dc8e:	d0f5      	beq.n	800dc7c <wm8994_Stop+0x8>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800dc90:	b2ed      	uxtb	r5, r5
 800dc92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc96:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	f7ff ffa0 	bl	800dbe0 <CODEC_IO_Write>
 800dca0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800dca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dca6:	f240 4122 	movw	r1, #1058	@ 0x422
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f7ff ff98 	bl	800dbe0 <CODEC_IO_Write>
 800dcb0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	212d      	movs	r1, #45	@ 0x2d
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	f7ff ff92 	bl	800dbe0 <CODEC_IO_Write>
 800dcbc:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	212e      	movs	r1, #46	@ 0x2e
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	f7ff ff8c 	bl	800dbe0 <CODEC_IO_Write>
 800dcc8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 800dcca:	2200      	movs	r2, #0
 800dccc:	2105      	movs	r1, #5
 800dcce:	4628      	mov	r0, r5
 800dcd0:	f7ff ff86 	bl	800dbe0 <CODEC_IO_Write>
 800dcd4:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	4611      	mov	r1, r2
 800dcda:	4628      	mov	r0, r5
 800dcdc:	f7ff ff80 	bl	800dbe0 <CODEC_IO_Write>
 800dce0:	4404      	add	r4, r0
      outputEnabled = 0;
 800dce2:	4b02      	ldr	r3, [pc, #8]	@ (800dcec <wm8994_Stop+0x78>)
 800dce4:	2200      	movs	r2, #0
 800dce6:	601a      	str	r2, [r3, #0]
  return counter;
 800dce8:	e7c8      	b.n	800dc7c <wm8994_Stop+0x8>
 800dcea:	bf00      	nop
 800dcec:	2001e7e4 	.word	0x2001e7e4

0800dcf0 <wm8994_SetVolume>:
{
 800dcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcf4:	4606      	mov	r6, r0
 800dcf6:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800dcf8:	2964      	cmp	r1, #100	@ 0x64
 800dcfa:	d825      	bhi.n	800dd48 <wm8994_SetVolume+0x58>
 800dcfc:	ebc1 1781 	rsb	r7, r1, r1, lsl #6
 800dd00:	4b46      	ldr	r3, [pc, #280]	@ (800de1c <wm8994_SetVolume+0x12c>)
 800dd02:	fb83 2307 	smull	r2, r3, r3, r7
 800dd06:	17ff      	asrs	r7, r7, #31
 800dd08:	ebc7 1763 	rsb	r7, r7, r3, asr #5
 800dd0c:	b2ff      	uxtb	r7, r7
  if (outputEnabled != 0)
 800dd0e:	4b44      	ldr	r3, [pc, #272]	@ (800de20 <wm8994_SetVolume+0x130>)
 800dd10:	681d      	ldr	r5, [r3, #0]
 800dd12:	b145      	cbz	r5, 800dd26 <wm8994_SetVolume+0x36>
    if(convertedvol > 0x3E)
 800dd14:	2f3e      	cmp	r7, #62	@ 0x3e
 800dd16:	d819      	bhi.n	800dd4c <wm8994_SetVolume+0x5c>
    else if (Volume == 0)
 800dd18:	2c00      	cmp	r4, #0
 800dd1a:	d13a      	bne.n	800dd92 <wm8994_SetVolume+0xa2>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800dd1c:	2101      	movs	r1, #1
 800dd1e:	4630      	mov	r0, r6
 800dd20:	f7ff ff64 	bl	800dbec <wm8994_SetMute>
 800dd24:	4605      	mov	r5, r0
  if (inputEnabled != 0)
 800dd26:	4b3f      	ldr	r3, [pc, #252]	@ (800de24 <wm8994_SetVolume+0x134>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d073      	beq.n	800de16 <wm8994_SetVolume+0x126>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800dd2e:	2c63      	cmp	r4, #99	@ 0x63
 800dd30:	d851      	bhi.n	800ddd6 <wm8994_SetVolume+0xe6>
 800dd32:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800dd36:	0124      	lsls	r4, r4, #4
 800dd38:	4b38      	ldr	r3, [pc, #224]	@ (800de1c <wm8994_SetVolume+0x12c>)
 800dd3a:	fb83 2304 	smull	r2, r3, r3, r4
 800dd3e:	17e4      	asrs	r4, r4, #31
 800dd40:	ebc4 1463 	rsb	r4, r4, r3, asr #5
 800dd44:	b2e4      	uxtb	r4, r4
 800dd46:	e047      	b.n	800ddd8 <wm8994_SetVolume+0xe8>
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800dd48:	2764      	movs	r7, #100	@ 0x64
 800dd4a:	e7e0      	b.n	800dd0e <wm8994_SetVolume+0x1e>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800dd4c:	2100      	movs	r1, #0
 800dd4e:	4630      	mov	r0, r6
 800dd50:	f7ff ff4c 	bl	800dbec <wm8994_SetMute>
 800dd54:	4607      	mov	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800dd56:	b2f5      	uxtb	r5, r6
 800dd58:	f240 127f 	movw	r2, #383	@ 0x17f
 800dd5c:	211c      	movs	r1, #28
 800dd5e:	4628      	mov	r0, r5
 800dd60:	f7ff ff3e 	bl	800dbe0 <CODEC_IO_Write>
 800dd64:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 800dd66:	f240 127f 	movw	r2, #383	@ 0x17f
 800dd6a:	211d      	movs	r1, #29
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f7ff ff37 	bl	800dbe0 <CODEC_IO_Write>
 800dd72:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 800dd74:	f240 127f 	movw	r2, #383	@ 0x17f
 800dd78:	2126      	movs	r1, #38	@ 0x26
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	f7ff ff30 	bl	800dbe0 <CODEC_IO_Write>
 800dd80:	4407      	add	r7, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800dd82:	f240 127f 	movw	r2, #383	@ 0x17f
 800dd86:	2127      	movs	r1, #39	@ 0x27
 800dd88:	4628      	mov	r0, r5
 800dd8a:	f7ff ff29 	bl	800dbe0 <CODEC_IO_Write>
 800dd8e:	19c5      	adds	r5, r0, r7
 800dd90:	e7c9      	b.n	800dd26 <wm8994_SetVolume+0x36>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800dd92:	2100      	movs	r1, #0
 800dd94:	4630      	mov	r0, r6
 800dd96:	f7ff ff29 	bl	800dbec <wm8994_SetMute>
 800dd9a:	4680      	mov	r8, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800dd9c:	b2f5      	uxtb	r5, r6
 800dd9e:	f447 77a0 	orr.w	r7, r7, #320	@ 0x140
 800dda2:	463a      	mov	r2, r7
 800dda4:	211c      	movs	r1, #28
 800dda6:	4628      	mov	r0, r5
 800dda8:	f7ff ff1a 	bl	800dbe0 <CODEC_IO_Write>
 800ddac:	4480      	add	r8, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 800ddae:	463a      	mov	r2, r7
 800ddb0:	211d      	movs	r1, #29
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	f7ff ff14 	bl	800dbe0 <CODEC_IO_Write>
 800ddb8:	4480      	add	r8, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800ddba:	463a      	mov	r2, r7
 800ddbc:	2126      	movs	r1, #38	@ 0x26
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	f7ff ff0e 	bl	800dbe0 <CODEC_IO_Write>
 800ddc4:	4480      	add	r8, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 800ddc6:	463a      	mov	r2, r7
 800ddc8:	2127      	movs	r1, #39	@ 0x27
 800ddca:	4628      	mov	r0, r5
 800ddcc:	f7ff ff08 	bl	800dbe0 <CODEC_IO_Write>
 800ddd0:	eb00 0508 	add.w	r5, r0, r8
 800ddd4:	e7a7      	b.n	800dd26 <wm8994_SetVolume+0x36>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800ddd6:	24ef      	movs	r4, #239	@ 0xef
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800ddd8:	b2f6      	uxtb	r6, r6
 800ddda:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 800ddde:	4622      	mov	r2, r4
 800dde0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800dde4:	4630      	mov	r0, r6
 800dde6:	f7ff fefb 	bl	800dbe0 <CODEC_IO_Write>
 800ddea:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800ddec:	4622      	mov	r2, r4
 800ddee:	f240 4101 	movw	r1, #1025	@ 0x401
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f7ff fef4 	bl	800dbe0 <CODEC_IO_Write>
 800ddf8:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 800ddfa:	4622      	mov	r2, r4
 800ddfc:	f240 4104 	movw	r1, #1028	@ 0x404
 800de00:	4630      	mov	r0, r6
 800de02:	f7ff feed 	bl	800dbe0 <CODEC_IO_Write>
 800de06:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800de08:	4622      	mov	r2, r4
 800de0a:	f240 4105 	movw	r1, #1029	@ 0x405
 800de0e:	4630      	mov	r0, r6
 800de10:	f7ff fee6 	bl	800dbe0 <CODEC_IO_Write>
 800de14:	4405      	add	r5, r0
}
 800de16:	4628      	mov	r0, r5
 800de18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de1c:	51eb851f 	.word	0x51eb851f
 800de20:	2001e7e4 	.word	0x2001e7e4
 800de24:	2001e7e0 	.word	0x2001e7e0

0800de28 <wm8994_Init>:
{
 800de28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de2c:	4680      	mov	r8, r0
 800de2e:	4691      	mov	r9, r2
 800de30:	469a      	mov	sl, r3
  uint16_t output_device = OutputInputDevice & 0xFF;
 800de32:	b2cf      	uxtb	r7, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800de34:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
  AUDIO_IO_Init();
 800de38:	f7f7 fc8a 	bl	8005750 <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800de3c:	fa5f f488 	uxtb.w	r4, r8
 800de40:	2203      	movs	r2, #3
 800de42:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800de46:	4620      	mov	r0, r4
 800de48:	f7ff feca 	bl	800dbe0 <CODEC_IO_Write>
 800de4c:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 800de4e:	2200      	movs	r2, #0
 800de50:	f640 0117 	movw	r1, #2071	@ 0x817
 800de54:	4620      	mov	r0, r4
 800de56:	f7ff fec3 	bl	800dbe0 <CODEC_IO_Write>
 800de5a:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 800de5c:	2200      	movs	r2, #0
 800de5e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800de62:	4620      	mov	r0, r4
 800de64:	f7ff febc 	bl	800dbe0 <CODEC_IO_Write>
 800de68:	eb00 0b06 	add.w	fp, r0, r6
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 800de6c:	226c      	movs	r2, #108	@ 0x6c
 800de6e:	2139      	movs	r1, #57	@ 0x39
 800de70:	4620      	mov	r0, r4
 800de72:	f7ff feb5 	bl	800dbe0 <CODEC_IO_Write>
 800de76:	4483      	add	fp, r0
  if (input_device > 0)
 800de78:	b3d5      	cbz	r5, 800def0 <wm8994_Init+0xc8>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800de7a:	2213      	movs	r2, #19
 800de7c:	2101      	movs	r1, #1
 800de7e:	4620      	mov	r0, r4
 800de80:	f7ff feae 	bl	800dbe0 <CODEC_IO_Write>
 800de84:	eb00 060b 	add.w	r6, r0, fp
  AUDIO_IO_Delay(50);
 800de88:	2032      	movs	r0, #50	@ 0x32
 800de8a:	f7f7 fca3 	bl	80057d4 <AUDIO_IO_Delay>
  if (output_device > 0)
 800de8e:	2f00      	cmp	r7, #0
 800de90:	f000 80c9 	beq.w	800e026 <wm8994_Init+0x1fe>
    outputEnabled = 1;
 800de94:	4bdb      	ldr	r3, [pc, #876]	@ (800e204 <wm8994_Init+0x3dc>)
 800de96:	2201      	movs	r2, #1
 800de98:	601a      	str	r2, [r3, #0]
    switch (output_device)
 800de9a:	2f02      	cmp	r7, #2
 800de9c:	d030      	beq.n	800df00 <wm8994_Init+0xd8>
 800de9e:	2f03      	cmp	r7, #3
 800dea0:	d052      	beq.n	800df48 <wm8994_Init+0x120>
 800dea2:	4297      	cmp	r7, r2
 800dea4:	f040 809b 	bne.w	800dfde <wm8994_Init+0x1b6>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800dea8:	f640 420c 	movw	r2, #3084	@ 0xc0c
 800deac:	2105      	movs	r1, #5
 800deae:	4620      	mov	r0, r4
 800deb0:	f7ff fe96 	bl	800dbe0 <CODEC_IO_Write>
 800deb4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800deb6:	2200      	movs	r2, #0
 800deb8:	f240 6101 	movw	r1, #1537	@ 0x601
 800debc:	4620      	mov	r0, r4
 800debe:	f7ff fe8f 	bl	800dbe0 <CODEC_IO_Write>
 800dec2:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800dec4:	2200      	movs	r2, #0
 800dec6:	f240 6102 	movw	r1, #1538	@ 0x602
 800deca:	4620      	mov	r0, r4
 800decc:	f7ff fe88 	bl	800dbe0 <CODEC_IO_Write>
 800ded0:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800ded2:	2202      	movs	r2, #2
 800ded4:	f240 6104 	movw	r1, #1540	@ 0x604
 800ded8:	4620      	mov	r0, r4
 800deda:	f7ff fe81 	bl	800dbe0 <CODEC_IO_Write>
 800dede:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800dee0:	2202      	movs	r2, #2
 800dee2:	f240 6105 	movw	r1, #1541	@ 0x605
 800dee6:	4620      	mov	r0, r4
 800dee8:	f7ff fe7a 	bl	800dbe0 <CODEC_IO_Write>
 800deec:	4406      	add	r6, r0
      break;
 800deee:	e09d      	b.n	800e02c <wm8994_Init+0x204>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 800def0:	2203      	movs	r2, #3
 800def2:	2101      	movs	r1, #1
 800def4:	4620      	mov	r0, r4
 800def6:	f7ff fe73 	bl	800dbe0 <CODEC_IO_Write>
 800defa:	eb00 060b 	add.w	r6, r0, fp
 800defe:	e7c3      	b.n	800de88 <wm8994_Init+0x60>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800df00:	f240 3203 	movw	r2, #771	@ 0x303
 800df04:	2105      	movs	r1, #5
 800df06:	4620      	mov	r0, r4
 800df08:	f7ff fe6a 	bl	800dbe0 <CODEC_IO_Write>
 800df0c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800df0e:	2201      	movs	r2, #1
 800df10:	f240 6101 	movw	r1, #1537	@ 0x601
 800df14:	4620      	mov	r0, r4
 800df16:	f7ff fe63 	bl	800dbe0 <CODEC_IO_Write>
 800df1a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800df1c:	2201      	movs	r2, #1
 800df1e:	f240 6102 	movw	r1, #1538	@ 0x602
 800df22:	4620      	mov	r0, r4
 800df24:	f7ff fe5c 	bl	800dbe0 <CODEC_IO_Write>
 800df28:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800df2a:	2200      	movs	r2, #0
 800df2c:	f240 6104 	movw	r1, #1540	@ 0x604
 800df30:	4620      	mov	r0, r4
 800df32:	f7ff fe55 	bl	800dbe0 <CODEC_IO_Write>
 800df36:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800df38:	2200      	movs	r2, #0
 800df3a:	f240 6105 	movw	r1, #1541	@ 0x605
 800df3e:	4620      	mov	r0, r4
 800df40:	f7ff fe4e 	bl	800dbe0 <CODEC_IO_Write>
 800df44:	4406      	add	r6, r0
      break;
 800df46:	e071      	b.n	800e02c <wm8994_Init+0x204>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800df48:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800df4c:	d023      	beq.n	800df96 <wm8994_Init+0x16e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800df4e:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800df52:	2105      	movs	r1, #5
 800df54:	4620      	mov	r0, r4
 800df56:	f7ff fe43 	bl	800dbe0 <CODEC_IO_Write>
 800df5a:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800df5c:	2201      	movs	r2, #1
 800df5e:	f240 6101 	movw	r1, #1537	@ 0x601
 800df62:	4620      	mov	r0, r4
 800df64:	f7ff fe3c 	bl	800dbe0 <CODEC_IO_Write>
 800df68:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800df6a:	2201      	movs	r2, #1
 800df6c:	f240 6102 	movw	r1, #1538	@ 0x602
 800df70:	4620      	mov	r0, r4
 800df72:	f7ff fe35 	bl	800dbe0 <CODEC_IO_Write>
 800df76:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800df78:	2202      	movs	r2, #2
 800df7a:	f240 6104 	movw	r1, #1540	@ 0x604
 800df7e:	4620      	mov	r0, r4
 800df80:	f7ff fe2e 	bl	800dbe0 <CODEC_IO_Write>
 800df84:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 800df86:	2202      	movs	r2, #2
 800df88:	f240 6105 	movw	r1, #1541	@ 0x605
 800df8c:	4620      	mov	r0, r4
 800df8e:	f7ff fe27 	bl	800dbe0 <CODEC_IO_Write>
 800df92:	4406      	add	r6, r0
 800df94:	e04a      	b.n	800e02c <wm8994_Init+0x204>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800df96:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800df9a:	2105      	movs	r1, #5
 800df9c:	4620      	mov	r0, r4
 800df9e:	f7ff fe1f 	bl	800dbe0 <CODEC_IO_Write>
 800dfa2:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800dfa4:	2203      	movs	r2, #3
 800dfa6:	f240 6101 	movw	r1, #1537	@ 0x601
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f7ff fe18 	bl	800dbe0 <CODEC_IO_Write>
 800dfb0:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 800dfb2:	2203      	movs	r2, #3
 800dfb4:	f240 6102 	movw	r1, #1538	@ 0x602
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f7ff fe11 	bl	800dbe0 <CODEC_IO_Write>
 800dfbe:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800dfc0:	2203      	movs	r2, #3
 800dfc2:	f240 6104 	movw	r1, #1540	@ 0x604
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f7ff fe0a 	bl	800dbe0 <CODEC_IO_Write>
 800dfcc:	4406      	add	r6, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 800dfce:	2203      	movs	r2, #3
 800dfd0:	f240 6105 	movw	r1, #1541	@ 0x605
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f7ff fe03 	bl	800dbe0 <CODEC_IO_Write>
 800dfda:	4406      	add	r6, r0
 800dfdc:	e026      	b.n	800e02c <wm8994_Init+0x204>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800dfde:	f240 3203 	movw	r2, #771	@ 0x303
 800dfe2:	2105      	movs	r1, #5
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f7ff fdfb 	bl	800dbe0 <CODEC_IO_Write>
 800dfea:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800dfec:	2201      	movs	r2, #1
 800dfee:	f240 6101 	movw	r1, #1537	@ 0x601
 800dff2:	4620      	mov	r0, r4
 800dff4:	f7ff fdf4 	bl	800dbe0 <CODEC_IO_Write>
 800dff8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800dffa:	2201      	movs	r2, #1
 800dffc:	f240 6102 	movw	r1, #1538	@ 0x602
 800e000:	4620      	mov	r0, r4
 800e002:	f7ff fded 	bl	800dbe0 <CODEC_IO_Write>
 800e006:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800e008:	2200      	movs	r2, #0
 800e00a:	f240 6104 	movw	r1, #1540	@ 0x604
 800e00e:	4620      	mov	r0, r4
 800e010:	f7ff fde6 	bl	800dbe0 <CODEC_IO_Write>
 800e014:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800e016:	2200      	movs	r2, #0
 800e018:	f240 6105 	movw	r1, #1541	@ 0x605
 800e01c:	4620      	mov	r0, r4
 800e01e:	f7ff fddf 	bl	800dbe0 <CODEC_IO_Write>
 800e022:	4406      	add	r6, r0
      break;
 800e024:	e002      	b.n	800e02c <wm8994_Init+0x204>
    outputEnabled = 0;
 800e026:	4b77      	ldr	r3, [pc, #476]	@ (800e204 <wm8994_Init+0x3dc>)
 800e028:	2200      	movs	r2, #0
 800e02a:	601a      	str	r2, [r3, #0]
  if (input_device > 0)
 800e02c:	2d00      	cmp	r5, #0
 800e02e:	f000 80ed 	beq.w	800e20c <wm8994_Init+0x3e4>
    inputEnabled = 1;
 800e032:	4b75      	ldr	r3, [pc, #468]	@ (800e208 <wm8994_Init+0x3e0>)
 800e034:	2201      	movs	r2, #1
 800e036:	601a      	str	r2, [r3, #0]
    switch (input_device)
 800e038:	f5b5 7f40 	cmp.w	r5, #768	@ 0x300
 800e03c:	d077      	beq.n	800e12e <wm8994_Init+0x306>
 800e03e:	d832      	bhi.n	800e0a6 <wm8994_Init+0x27e>
 800e040:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800e044:	f000 80b0 	beq.w	800e1a8 <wm8994_Init+0x380>
 800e048:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800e04c:	f040 80d7 	bne.w	800e1fe <wm8994_Init+0x3d6>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 800e050:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 800e054:	2104      	movs	r1, #4
 800e056:	4620      	mov	r0, r4
 800e058:	f7ff fdc2 	bl	800dbe0 <CODEC_IO_Write>
 800e05c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800e05e:	22db      	movs	r2, #219	@ 0xdb
 800e060:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800e064:	4620      	mov	r0, r4
 800e066:	f7ff fdbb 	bl	800dbe0 <CODEC_IO_Write>
 800e06a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 800e06c:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 800e070:	2102      	movs	r1, #2
 800e072:	4620      	mov	r0, r4
 800e074:	f7ff fdb4 	bl	800dbe0 <CODEC_IO_Write>
 800e078:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800e07a:	2202      	movs	r2, #2
 800e07c:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 800e080:	4620      	mov	r0, r4
 800e082:	f7ff fdad 	bl	800dbe0 <CODEC_IO_Write>
 800e086:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800e088:	2202      	movs	r2, #2
 800e08a:	f240 6109 	movw	r1, #1545	@ 0x609
 800e08e:	4620      	mov	r0, r4
 800e090:	f7ff fda6 	bl	800dbe0 <CODEC_IO_Write>
 800e094:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800e096:	220e      	movs	r2, #14
 800e098:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800e09c:	4620      	mov	r0, r4
 800e09e:	f7ff fd9f 	bl	800dbe0 <CODEC_IO_Write>
 800e0a2:	4406      	add	r6, r0
      break;
 800e0a4:	e0b5      	b.n	800e212 <wm8994_Init+0x3ea>
    switch (input_device)
 800e0a6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800e0aa:	f040 80a8 	bne.w	800e1fe <wm8994_Init+0x3d6>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 800e0ae:	f640 723c 	movw	r2, #3900	@ 0xf3c
 800e0b2:	2104      	movs	r1, #4
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f7ff fd93 	bl	800dbe0 <CODEC_IO_Write>
 800e0ba:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800e0bc:	22db      	movs	r2, #219	@ 0xdb
 800e0be:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	f7ff fd8c 	bl	800dbe0 <CODEC_IO_Write>
 800e0c8:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800e0ca:	22db      	movs	r2, #219	@ 0xdb
 800e0cc:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f7ff fd85 	bl	800dbe0 <CODEC_IO_Write>
 800e0d6:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800e0d8:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 800e0dc:	2102      	movs	r1, #2
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f7ff fd7e 	bl	800dbe0 <CODEC_IO_Write>
 800e0e4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800e0e6:	2202      	movs	r2, #2
 800e0e8:	f240 6106 	movw	r1, #1542	@ 0x606
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	f7ff fd77 	bl	800dbe0 <CODEC_IO_Write>
 800e0f2:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800e0f4:	2202      	movs	r2, #2
 800e0f6:	f240 6107 	movw	r1, #1543	@ 0x607
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	f7ff fd70 	bl	800dbe0 <CODEC_IO_Write>
 800e100:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800e102:	2202      	movs	r2, #2
 800e104:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 800e108:	4620      	mov	r0, r4
 800e10a:	f7ff fd69 	bl	800dbe0 <CODEC_IO_Write>
 800e10e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800e110:	2202      	movs	r2, #2
 800e112:	f240 6109 	movw	r1, #1545	@ 0x609
 800e116:	4620      	mov	r0, r4
 800e118:	f7ff fd62 	bl	800dbe0 <CODEC_IO_Write>
 800e11c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800e11e:	220d      	movs	r2, #13
 800e120:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800e124:	4620      	mov	r0, r4
 800e126:	f7ff fd5b 	bl	800dbe0 <CODEC_IO_Write>
 800e12a:	4406      	add	r6, r0
      break;    
 800e12c:	e071      	b.n	800e212 <wm8994_Init+0x3ea>
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800e12e:	2211      	movs	r2, #17
 800e130:	2128      	movs	r1, #40	@ 0x28
 800e132:	4620      	mov	r0, r4
 800e134:	f7ff fd54 	bl	800dbe0 <CODEC_IO_Write>
 800e138:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800e13a:	2235      	movs	r2, #53	@ 0x35
 800e13c:	2129      	movs	r1, #41	@ 0x29
 800e13e:	4620      	mov	r0, r4
 800e140:	f7ff fd4e 	bl	800dbe0 <CODEC_IO_Write>
 800e144:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 800e146:	2235      	movs	r2, #53	@ 0x35
 800e148:	212a      	movs	r1, #42	@ 0x2a
 800e14a:	4620      	mov	r0, r4
 800e14c:	f7ff fd48 	bl	800dbe0 <CODEC_IO_Write>
 800e150:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800e152:	f240 3203 	movw	r2, #771	@ 0x303
 800e156:	2104      	movs	r1, #4
 800e158:	4620      	mov	r0, r4
 800e15a:	f7ff fd41 	bl	800dbe0 <CODEC_IO_Write>
 800e15e:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800e160:	22db      	movs	r2, #219	@ 0xdb
 800e162:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800e166:	4620      	mov	r0, r4
 800e168:	f7ff fd3a 	bl	800dbe0 <CODEC_IO_Write>
 800e16c:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800e16e:	f246 3250 	movw	r2, #25424	@ 0x6350
 800e172:	2102      	movs	r1, #2
 800e174:	4620      	mov	r0, r4
 800e176:	f7ff fd33 	bl	800dbe0 <CODEC_IO_Write>
 800e17a:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800e17c:	2202      	movs	r2, #2
 800e17e:	f240 6106 	movw	r1, #1542	@ 0x606
 800e182:	4620      	mov	r0, r4
 800e184:	f7ff fd2c 	bl	800dbe0 <CODEC_IO_Write>
 800e188:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800e18a:	2202      	movs	r2, #2
 800e18c:	f240 6107 	movw	r1, #1543	@ 0x607
 800e190:	4620      	mov	r0, r4
 800e192:	f7ff fd25 	bl	800dbe0 <CODEC_IO_Write>
 800e196:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800e198:	220d      	movs	r2, #13
 800e19a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f7ff fd1e 	bl	800dbe0 <CODEC_IO_Write>
 800e1a4:	4406      	add	r6, r0
      break;
 800e1a6:	e034      	b.n	800e212 <wm8994_Init+0x3ea>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 800e1a8:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 800e1ac:	2104      	movs	r1, #4
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f7ff fd16 	bl	800dbe0 <CODEC_IO_Write>
 800e1b4:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800e1b6:	22db      	movs	r2, #219	@ 0xdb
 800e1b8:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800e1bc:	4620      	mov	r0, r4
 800e1be:	f7ff fd0f 	bl	800dbe0 <CODEC_IO_Write>
 800e1c2:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800e1c4:	f246 3250 	movw	r2, #25424	@ 0x6350
 800e1c8:	2102      	movs	r1, #2
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f7ff fd08 	bl	800dbe0 <CODEC_IO_Write>
 800e1d0:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800e1d2:	2202      	movs	r2, #2
 800e1d4:	f240 6106 	movw	r1, #1542	@ 0x606
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f7ff fd01 	bl	800dbe0 <CODEC_IO_Write>
 800e1de:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800e1e0:	2202      	movs	r2, #2
 800e1e2:	f240 6107 	movw	r1, #1543	@ 0x607
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f7ff fcfa 	bl	800dbe0 <CODEC_IO_Write>
 800e1ec:	4406      	add	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800e1ee:	220d      	movs	r2, #13
 800e1f0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f7ff fcf3 	bl	800dbe0 <CODEC_IO_Write>
 800e1fa:	4406      	add	r6, r0
      break; 
 800e1fc:	e009      	b.n	800e212 <wm8994_Init+0x3ea>
      counter++;
 800e1fe:	3601      	adds	r6, #1
      break;
 800e200:	e007      	b.n	800e212 <wm8994_Init+0x3ea>
 800e202:	bf00      	nop
 800e204:	2001e7e4 	.word	0x2001e7e4
 800e208:	2001e7e0 	.word	0x2001e7e0
    inputEnabled = 0;
 800e20c:	4be4      	ldr	r3, [pc, #912]	@ (800e5a0 <wm8994_Init+0x778>)
 800e20e:	2200      	movs	r2, #0
 800e210:	601a      	str	r2, [r3, #0]
  switch (AudioFreq)
 800e212:	f5ba 4ffa 	cmp.w	sl, #32000	@ 0x7d00
 800e216:	f000 8121 	beq.w	800e45c <wm8994_Init+0x634>
 800e21a:	d821      	bhi.n	800e260 <wm8994_Init+0x438>
 800e21c:	f5ba 5f7a 	cmp.w	sl, #16000	@ 0x3e80
 800e220:	f000 8114 	beq.w	800e44c <wm8994_Init+0x624>
 800e224:	d80f      	bhi.n	800e246 <wm8994_Init+0x41e>
 800e226:	f5ba 5ffa 	cmp.w	sl, #8000	@ 0x1f40
 800e22a:	d02f      	beq.n	800e28c <wm8994_Init+0x464>
 800e22c:	f642 3311 	movw	r3, #11025	@ 0x2b11
 800e230:	459a      	cmp	sl, r3
 800e232:	f040 812b 	bne.w	800e48c <wm8994_Init+0x664>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800e236:	2213      	movs	r2, #19
 800e238:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e23c:	4620      	mov	r0, r4
 800e23e:	f7ff fccf 	bl	800dbe0 <CODEC_IO_Write>
 800e242:	4406      	add	r6, r0
    break;
 800e244:	e029      	b.n	800e29a <wm8994_Init+0x472>
  switch (AudioFreq)
 800e246:	f245 6322 	movw	r3, #22050	@ 0x5622
 800e24a:	459a      	cmp	sl, r3
 800e24c:	f040 811e 	bne.w	800e48c <wm8994_Init+0x664>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800e250:	2243      	movs	r2, #67	@ 0x43
 800e252:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e256:	4620      	mov	r0, r4
 800e258:	f7ff fcc2 	bl	800dbe0 <CODEC_IO_Write>
 800e25c:	4406      	add	r6, r0
    break;
 800e25e:	e01c      	b.n	800e29a <wm8994_Init+0x472>
  switch (AudioFreq)
 800e260:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e264:	459a      	cmp	sl, r3
 800e266:	f000 8101 	beq.w	800e46c <wm8994_Init+0x644>
 800e26a:	4bce      	ldr	r3, [pc, #824]	@ (800e5a4 <wm8994_Init+0x77c>)
 800e26c:	459a      	cmp	sl, r3
 800e26e:	f000 8105 	beq.w	800e47c <wm8994_Init+0x654>
 800e272:	f64a 4344 	movw	r3, #44100	@ 0xac44
 800e276:	459a      	cmp	sl, r3
 800e278:	f040 8108 	bne.w	800e48c <wm8994_Init+0x664>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800e27c:	2273      	movs	r2, #115	@ 0x73
 800e27e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e282:	4620      	mov	r0, r4
 800e284:	f7ff fcac 	bl	800dbe0 <CODEC_IO_Write>
 800e288:	4406      	add	r6, r0
    break; 
 800e28a:	e006      	b.n	800e29a <wm8994_Init+0x472>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800e28c:	2203      	movs	r2, #3
 800e28e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e292:	4620      	mov	r0, r4
 800e294:	f7ff fca4 	bl	800dbe0 <CODEC_IO_Write>
 800e298:	4406      	add	r6, r0
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800e29a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800e29e:	f000 80fd 	beq.w	800e49c <wm8994_Init+0x674>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 800e2a2:	f244 0210 	movw	r2, #16400	@ 0x4010
 800e2a6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	f7ff fc98 	bl	800dbe0 <CODEC_IO_Write>
 800e2b0:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	f240 3102 	movw	r1, #770	@ 0x302
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f7ff fc91 	bl	800dbe0 <CODEC_IO_Write>
 800e2be:	4406      	add	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800e2c0:	220a      	movs	r2, #10
 800e2c2:	f44f 7102 	mov.w	r1, #520	@ 0x208
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	f7ff fc8a 	bl	800dbe0 <CODEC_IO_Write>
 800e2cc:	eb00 0a06 	add.w	sl, r0, r6
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f7ff fc82 	bl	800dbe0 <CODEC_IO_Write>
 800e2dc:	4482      	add	sl, r0
  if (output_device > 0)  /* Audio output selected */
 800e2de:	2f00      	cmp	r7, #0
 800e2e0:	f000 809a 	beq.w	800e418 <wm8994_Init+0x5f0>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800e2e4:	2f02      	cmp	r7, #2
 800e2e6:	f000 80e2 	beq.w	800e4ae <wm8994_Init+0x686>
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 800e2ea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800e2ee:	2103      	movs	r1, #3
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f7ff fc75 	bl	800dbe0 <CODEC_IO_Write>
 800e2f6:	eb00 060a 	add.w	r6, r0, sl
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	2122      	movs	r1, #34	@ 0x22
 800e2fe:	4620      	mov	r0, r4
 800e300:	f7ff fc6e 	bl	800dbe0 <CODEC_IO_Write>
 800e304:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800e306:	2200      	movs	r2, #0
 800e308:	2123      	movs	r1, #35	@ 0x23
 800e30a:	4620      	mov	r0, r4
 800e30c:	f7ff fc68 	bl	800dbe0 <CODEC_IO_Write>
 800e310:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800e312:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800e316:	2136      	movs	r1, #54	@ 0x36
 800e318:	4620      	mov	r0, r4
 800e31a:	f7ff fc61 	bl	800dbe0 <CODEC_IO_Write>
 800e31e:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 800e320:	f243 0203 	movw	r2, #12291	@ 0x3003
 800e324:	2101      	movs	r1, #1
 800e326:	4620      	mov	r0, r4
 800e328:	f7ff fc5a 	bl	800dbe0 <CODEC_IO_Write>
 800e32c:	4406      	add	r6, r0
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800e32e:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800e332:	f000 80f2 	beq.w	800e51a <wm8994_Init+0x6f2>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 800e336:	2205      	movs	r2, #5
 800e338:	2151      	movs	r1, #81	@ 0x51
 800e33a:	4620      	mov	r0, r4
 800e33c:	f7ff fc50 	bl	800dbe0 <CODEC_IO_Write>
 800e340:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800e342:	f243 3203 	movw	r2, #13059	@ 0x3303
 800e346:	2101      	movs	r1, #1
 800e348:	4620      	mov	r0, r4
 800e34a:	f7ff fc49 	bl	800dbe0 <CODEC_IO_Write>
 800e34e:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800e350:	2222      	movs	r2, #34	@ 0x22
 800e352:	2160      	movs	r1, #96	@ 0x60
 800e354:	4620      	mov	r0, r4
 800e356:	f7ff fc43 	bl	800dbe0 <CODEC_IO_Write>
 800e35a:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 800e35c:	f649 7225 	movw	r2, #40741	@ 0x9f25
 800e360:	214c      	movs	r1, #76	@ 0x4c
 800e362:	4620      	mov	r0, r4
 800e364:	f7ff fc3c 	bl	800dbe0 <CODEC_IO_Write>
 800e368:	4406      	add	r6, r0
    AUDIO_IO_Delay(15);
 800e36a:	200f      	movs	r0, #15
 800e36c:	f7f7 fa32 	bl	80057d4 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 800e370:	2201      	movs	r2, #1
 800e372:	212d      	movs	r1, #45	@ 0x2d
 800e374:	4620      	mov	r0, r4
 800e376:	f7ff fc33 	bl	800dbe0 <CODEC_IO_Write>
 800e37a:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800e37c:	2201      	movs	r2, #1
 800e37e:	212e      	movs	r1, #46	@ 0x2e
 800e380:	4620      	mov	r0, r4
 800e382:	f7ff fc2d 	bl	800dbe0 <CODEC_IO_Write>
 800e386:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 800e388:	f44f 724c 	mov.w	r2, #816	@ 0x330
 800e38c:	2103      	movs	r1, #3
 800e38e:	4620      	mov	r0, r4
 800e390:	f7ff fc26 	bl	800dbe0 <CODEC_IO_Write>
 800e394:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 800e396:	2233      	movs	r2, #51	@ 0x33
 800e398:	2154      	movs	r1, #84	@ 0x54
 800e39a:	4620      	mov	r0, r4
 800e39c:	f7ff fc20 	bl	800dbe0 <CODEC_IO_Write>
 800e3a0:	4406      	add	r6, r0
    AUDIO_IO_Delay(257);
 800e3a2:	f240 1001 	movw	r0, #257	@ 0x101
 800e3a6:	f7f7 fa15 	bl	80057d4 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 800e3aa:	22ee      	movs	r2, #238	@ 0xee
 800e3ac:	2160      	movs	r1, #96	@ 0x60
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f7ff fc16 	bl	800dbe0 <CODEC_IO_Write>
 800e3b4:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 800e3b6:	22c0      	movs	r2, #192	@ 0xc0
 800e3b8:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f7ff fc0f 	bl	800dbe0 <CODEC_IO_Write>
 800e3c2:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800e3c4:	22c0      	movs	r2, #192	@ 0xc0
 800e3c6:	f240 6111 	movw	r1, #1553	@ 0x611
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f7ff fc08 	bl	800dbe0 <CODEC_IO_Write>
 800e3d0:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800e3d2:	2210      	movs	r2, #16
 800e3d4:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f7ff fc01 	bl	800dbe0 <CODEC_IO_Write>
 800e3de:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 800e3e0:	22c0      	movs	r2, #192	@ 0xc0
 800e3e2:	f240 6112 	movw	r1, #1554	@ 0x612
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f7ff fbfa 	bl	800dbe0 <CODEC_IO_Write>
 800e3ec:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 800e3ee:	22c0      	movs	r2, #192	@ 0xc0
 800e3f0:	f240 6113 	movw	r1, #1555	@ 0x613
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	f7ff fbf3 	bl	800dbe0 <CODEC_IO_Write>
 800e3fa:	4406      	add	r6, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800e3fc:	2210      	movs	r2, #16
 800e3fe:	f240 4122 	movw	r1, #1058	@ 0x422
 800e402:	4620      	mov	r0, r4
 800e404:	f7ff fbec 	bl	800dbe0 <CODEC_IO_Write>
 800e408:	eb00 0a06 	add.w	sl, r0, r6
    wm8994_SetVolume(DeviceAddr, Volume);
 800e40c:	4649      	mov	r1, r9
 800e40e:	4640      	mov	r0, r8
 800e410:	f7ff fc6e 	bl	800dcf0 <wm8994_SetVolume>
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800e414:	f243 3703 	movw	r7, #13059	@ 0x3303
  if (input_device > 0) /* Audio input selected */
 800e418:	b1ad      	cbz	r5, 800e446 <wm8994_Init+0x61e>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 800e41a:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800e41e:	bf18      	it	ne
 800e420:	f5b5 7f80 	cmpne.w	r5, #256	@ 0x100
 800e424:	f000 8081 	beq.w	800e52a <wm8994_Init+0x702>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800e428:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800e42c:	f000 8096 	beq.w	800e55c <wm8994_Init+0x734>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 800e430:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800e434:	bf18      	it	ne
 800e436:	f5b5 7f40 	cmpne.w	r5, #768	@ 0x300
 800e43a:	f000 80b7 	beq.w	800e5ac <wm8994_Init+0x784>
    wm8994_SetVolume(DeviceAddr, Volume);
 800e43e:	4649      	mov	r1, r9
 800e440:	4640      	mov	r0, r8
 800e442:	f7ff fc55 	bl	800dcf0 <wm8994_SetVolume>
}
 800e446:	4650      	mov	r0, sl
 800e448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800e44c:	2233      	movs	r2, #51	@ 0x33
 800e44e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e452:	4620      	mov	r0, r4
 800e454:	f7ff fbc4 	bl	800dbe0 <CODEC_IO_Write>
 800e458:	4406      	add	r6, r0
    break;
 800e45a:	e71e      	b.n	800e29a <wm8994_Init+0x472>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800e45c:	2263      	movs	r2, #99	@ 0x63
 800e45e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e462:	4620      	mov	r0, r4
 800e464:	f7ff fbbc 	bl	800dbe0 <CODEC_IO_Write>
 800e468:	4406      	add	r6, r0
    break;
 800e46a:	e716      	b.n	800e29a <wm8994_Init+0x472>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800e46c:	2283      	movs	r2, #131	@ 0x83
 800e46e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e472:	4620      	mov	r0, r4
 800e474:	f7ff fbb4 	bl	800dbe0 <CODEC_IO_Write>
 800e478:	4406      	add	r6, r0
    break;
 800e47a:	e70e      	b.n	800e29a <wm8994_Init+0x472>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800e47c:	22a3      	movs	r2, #163	@ 0xa3
 800e47e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e482:	4620      	mov	r0, r4
 800e484:	f7ff fbac 	bl	800dbe0 <CODEC_IO_Write>
 800e488:	4406      	add	r6, r0
    break;
 800e48a:	e706      	b.n	800e29a <wm8994_Init+0x472>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800e48c:	2283      	movs	r2, #131	@ 0x83
 800e48e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e492:	4620      	mov	r0, r4
 800e494:	f7ff fba4 	bl	800dbe0 <CODEC_IO_Write>
 800e498:	4406      	add	r6, r0
    break; 
 800e49a:	e6fe      	b.n	800e29a <wm8994_Init+0x472>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800e49c:	f244 0218 	movw	r2, #16408	@ 0x4018
 800e4a0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f7ff fb9b 	bl	800dbe0 <CODEC_IO_Write>
 800e4aa:	4406      	add	r6, r0
 800e4ac:	e701      	b.n	800e2b2 <wm8994_Init+0x48a>
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 800e4ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e4b2:	212d      	movs	r1, #45	@ 0x2d
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	f7ff fb93 	bl	800dbe0 <CODEC_IO_Write>
 800e4ba:	eb00 070a 	add.w	r7, r0, sl
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 800e4be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e4c2:	212e      	movs	r1, #46	@ 0x2e
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	f7ff fb8b 	bl	800dbe0 <CODEC_IO_Write>
 800e4ca:	4407      	add	r7, r0
      if(ColdStartup)
 800e4cc:	4b36      	ldr	r3, [pc, #216]	@ (800e5a8 <wm8994_Init+0x780>)
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	b1bb      	cbz	r3, 800e502 <wm8994_Init+0x6da>
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 800e4d2:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 800e4d6:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800e4da:	4620      	mov	r0, r4
 800e4dc:	f7ff fb80 	bl	800dbe0 <CODEC_IO_Write>
 800e4e0:	4407      	add	r7, r0
        ColdStartup=0;
 800e4e2:	4b31      	ldr	r3, [pc, #196]	@ (800e5a8 <wm8994_Init+0x780>)
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	701a      	strb	r2, [r3, #0]
        AUDIO_IO_Delay(300);
 800e4e8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e4ec:	f7f7 f972 	bl	80057d4 <AUDIO_IO_Delay>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	f7ff fb72 	bl	800dbe0 <CODEC_IO_Write>
 800e4fc:	eb00 0a07 	add.w	sl, r0, r7
 800e500:	e6f3      	b.n	800e2ea <wm8994_Init+0x4c2>
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 800e502:	f248 1208 	movw	r2, #33032	@ 0x8108
 800e506:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800e50a:	4620      	mov	r0, r4
 800e50c:	f7ff fb68 	bl	800dbe0 <CODEC_IO_Write>
 800e510:	4407      	add	r7, r0
        AUDIO_IO_Delay(50);
 800e512:	2032      	movs	r0, #50	@ 0x32
 800e514:	f7f7 f95e 	bl	80057d4 <AUDIO_IO_Delay>
 800e518:	e7ea      	b.n	800e4f0 <wm8994_Init+0x6c8>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 800e51a:	f240 2205 	movw	r2, #517	@ 0x205
 800e51e:	2151      	movs	r1, #81	@ 0x51
 800e520:	4620      	mov	r0, r4
 800e522:	f7ff fb5d 	bl	800dbe0 <CODEC_IO_Write>
 800e526:	4406      	add	r6, r0
 800e528:	e70b      	b.n	800e342 <wm8994_Init+0x51a>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800e52a:	f047 0213 	orr.w	r2, r7, #19
 800e52e:	2101      	movs	r1, #1
 800e530:	4620      	mov	r0, r4
 800e532:	f7ff fb55 	bl	800dbe0 <CODEC_IO_Write>
 800e536:	eb00 050a 	add.w	r5, r0, sl
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800e53a:	2202      	movs	r2, #2
 800e53c:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800e540:	4620      	mov	r0, r4
 800e542:	f7ff fb4d 	bl	800dbe0 <CODEC_IO_Write>
 800e546:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800e548:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800e54c:	f240 4111 	movw	r1, #1041	@ 0x411
 800e550:	4620      	mov	r0, r4
 800e552:	f7ff fb45 	bl	800dbe0 <CODEC_IO_Write>
 800e556:	eb00 0a05 	add.w	sl, r0, r5
 800e55a:	e770      	b.n	800e43e <wm8994_Init+0x616>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800e55c:	f047 0213 	orr.w	r2, r7, #19
 800e560:	2101      	movs	r1, #1
 800e562:	4620      	mov	r0, r4
 800e564:	f7ff fb3c 	bl	800dbe0 <CODEC_IO_Write>
 800e568:	eb00 050a 	add.w	r5, r0, sl
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800e56c:	2202      	movs	r2, #2
 800e56e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800e572:	4620      	mov	r0, r4
 800e574:	f7ff fb34 	bl	800dbe0 <CODEC_IO_Write>
 800e578:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800e57a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800e57e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800e582:	4620      	mov	r0, r4
 800e584:	f7ff fb2c 	bl	800dbe0 <CODEC_IO_Write>
 800e588:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800e58a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800e58e:	f240 4111 	movw	r1, #1041	@ 0x411
 800e592:	4620      	mov	r0, r4
 800e594:	f7ff fb24 	bl	800dbe0 <CODEC_IO_Write>
 800e598:	eb00 0a05 	add.w	sl, r0, r5
 800e59c:	e74f      	b.n	800e43e <wm8994_Init+0x616>
 800e59e:	bf00      	nop
 800e5a0:	2001e7e0 	.word	0x2001e7e0
 800e5a4:	00017700 	.word	0x00017700
 800e5a8:	20002140 	.word	0x20002140
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 800e5ac:	220b      	movs	r2, #11
 800e5ae:	2118      	movs	r1, #24
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f7ff fb15 	bl	800dbe0 <CODEC_IO_Write>
 800e5b6:	eb00 050a 	add.w	r5, r0, sl
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 800e5ba:	220b      	movs	r2, #11
 800e5bc:	211a      	movs	r1, #26
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f7ff fb0e 	bl	800dbe0 <CODEC_IO_Write>
 800e5c4:	4405      	add	r5, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800e5c6:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800e5ca:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	f7ff fb06 	bl	800dbe0 <CODEC_IO_Write>
 800e5d4:	eb00 0a05 	add.w	sl, r0, r5
 800e5d8:	e731      	b.n	800e43e <wm8994_Init+0x616>
 800e5da:	bf00      	nop

0800e5dc <wm8994_SetOutputMode>:
{
 800e5dc:	b538      	push	{r3, r4, r5, lr}
  switch (Output) 
 800e5de:	2902      	cmp	r1, #2
 800e5e0:	d028      	beq.n	800e634 <wm8994_SetOutputMode+0x58>
 800e5e2:	2903      	cmp	r1, #3
 800e5e4:	d04b      	beq.n	800e67e <wm8994_SetOutputMode+0xa2>
 800e5e6:	2901      	cmp	r1, #1
 800e5e8:	d16e      	bne.n	800e6c8 <wm8994_SetOutputMode+0xec>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800e5ea:	b2c4      	uxtb	r4, r0
 800e5ec:	f640 420c 	movw	r2, #3084	@ 0xc0c
 800e5f0:	2105      	movs	r1, #5
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	f7ff faf4 	bl	800dbe0 <CODEC_IO_Write>
 800e5f8:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f240 6101 	movw	r1, #1537	@ 0x601
 800e600:	4620      	mov	r0, r4
 800e602:	f7ff faed 	bl	800dbe0 <CODEC_IO_Write>
 800e606:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800e608:	2200      	movs	r2, #0
 800e60a:	f240 6102 	movw	r1, #1538	@ 0x602
 800e60e:	4620      	mov	r0, r4
 800e610:	f7ff fae6 	bl	800dbe0 <CODEC_IO_Write>
 800e614:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800e616:	2202      	movs	r2, #2
 800e618:	f240 6104 	movw	r1, #1540	@ 0x604
 800e61c:	4620      	mov	r0, r4
 800e61e:	f7ff fadf 	bl	800dbe0 <CODEC_IO_Write>
 800e622:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800e624:	2202      	movs	r2, #2
 800e626:	f240 6105 	movw	r1, #1541	@ 0x605
 800e62a:	4620      	mov	r0, r4
 800e62c:	f7ff fad8 	bl	800dbe0 <CODEC_IO_Write>
 800e630:	4428      	add	r0, r5
}
 800e632:	bd38      	pop	{r3, r4, r5, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800e634:	b2c4      	uxtb	r4, r0
 800e636:	f240 3203 	movw	r2, #771	@ 0x303
 800e63a:	2105      	movs	r1, #5
 800e63c:	4620      	mov	r0, r4
 800e63e:	f7ff facf 	bl	800dbe0 <CODEC_IO_Write>
 800e642:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800e644:	2201      	movs	r2, #1
 800e646:	f240 6101 	movw	r1, #1537	@ 0x601
 800e64a:	4620      	mov	r0, r4
 800e64c:	f7ff fac8 	bl	800dbe0 <CODEC_IO_Write>
 800e650:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800e652:	2201      	movs	r2, #1
 800e654:	f240 6102 	movw	r1, #1538	@ 0x602
 800e658:	4620      	mov	r0, r4
 800e65a:	f7ff fac1 	bl	800dbe0 <CODEC_IO_Write>
 800e65e:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800e660:	2200      	movs	r2, #0
 800e662:	f240 6104 	movw	r1, #1540	@ 0x604
 800e666:	4620      	mov	r0, r4
 800e668:	f7ff faba 	bl	800dbe0 <CODEC_IO_Write>
 800e66c:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800e66e:	2200      	movs	r2, #0
 800e670:	f240 6105 	movw	r1, #1541	@ 0x605
 800e674:	4620      	mov	r0, r4
 800e676:	f7ff fab3 	bl	800dbe0 <CODEC_IO_Write>
 800e67a:	4428      	add	r0, r5
    break;
 800e67c:	e7d9      	b.n	800e632 <wm8994_SetOutputMode+0x56>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800e67e:	b2c4      	uxtb	r4, r0
 800e680:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800e684:	2105      	movs	r1, #5
 800e686:	4620      	mov	r0, r4
 800e688:	f7ff faaa 	bl	800dbe0 <CODEC_IO_Write>
 800e68c:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800e68e:	2201      	movs	r2, #1
 800e690:	f240 6101 	movw	r1, #1537	@ 0x601
 800e694:	4620      	mov	r0, r4
 800e696:	f7ff faa3 	bl	800dbe0 <CODEC_IO_Write>
 800e69a:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800e69c:	2201      	movs	r2, #1
 800e69e:	f240 6102 	movw	r1, #1538	@ 0x602
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f7ff fa9c 	bl	800dbe0 <CODEC_IO_Write>
 800e6a8:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800e6aa:	2202      	movs	r2, #2
 800e6ac:	f240 6104 	movw	r1, #1540	@ 0x604
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f7ff fa95 	bl	800dbe0 <CODEC_IO_Write>
 800e6b6:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800e6b8:	2202      	movs	r2, #2
 800e6ba:	f240 6105 	movw	r1, #1541	@ 0x605
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f7ff fa8e 	bl	800dbe0 <CODEC_IO_Write>
 800e6c4:	4428      	add	r0, r5
    break;
 800e6c6:	e7b4      	b.n	800e632 <wm8994_SetOutputMode+0x56>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800e6c8:	b2c4      	uxtb	r4, r0
 800e6ca:	f240 3203 	movw	r2, #771	@ 0x303
 800e6ce:	2105      	movs	r1, #5
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	f7ff fa85 	bl	800dbe0 <CODEC_IO_Write>
 800e6d6:	4605      	mov	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800e6d8:	2201      	movs	r2, #1
 800e6da:	f240 6101 	movw	r1, #1537	@ 0x601
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f7ff fa7e 	bl	800dbe0 <CODEC_IO_Write>
 800e6e4:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	f240 6102 	movw	r1, #1538	@ 0x602
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f7ff fa77 	bl	800dbe0 <CODEC_IO_Write>
 800e6f2:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f240 6104 	movw	r1, #1540	@ 0x604
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f7ff fa70 	bl	800dbe0 <CODEC_IO_Write>
 800e700:	4405      	add	r5, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800e702:	2200      	movs	r2, #0
 800e704:	f240 6105 	movw	r1, #1541	@ 0x605
 800e708:	4620      	mov	r0, r4
 800e70a:	f7ff fa69 	bl	800dbe0 <CODEC_IO_Write>
 800e70e:	4428      	add	r0, r5
  return counter;
 800e710:	e78f      	b.n	800e632 <wm8994_SetOutputMode+0x56>
	...

0800e714 <wm8994_SetFrequency>:
{
 800e714:	b508      	push	{r3, lr}
  switch (AudioFreq)
 800e716:	f5b1 4ffa 	cmp.w	r1, #32000	@ 0x7d00
 800e71a:	d03d      	beq.n	800e798 <wm8994_SetFrequency+0x84>
 800e71c:	d81c      	bhi.n	800e758 <wm8994_SetFrequency+0x44>
 800e71e:	f5b1 5f7a 	cmp.w	r1, #16000	@ 0x3e80
 800e722:	d032      	beq.n	800e78a <wm8994_SetFrequency+0x76>
 800e724:	d80d      	bhi.n	800e742 <wm8994_SetFrequency+0x2e>
 800e726:	f5b1 5ffa 	cmp.w	r1, #8000	@ 0x1f40
 800e72a:	d027      	beq.n	800e77c <wm8994_SetFrequency+0x68>
 800e72c:	f642 3311 	movw	r3, #11025	@ 0x2b11
 800e730:	4299      	cmp	r1, r3
 800e732:	d146      	bne.n	800e7c2 <wm8994_SetFrequency+0xae>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800e734:	2213      	movs	r2, #19
 800e736:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e73a:	b2c0      	uxtb	r0, r0
 800e73c:	f7ff fa50 	bl	800dbe0 <CODEC_IO_Write>
    break;
 800e740:	e022      	b.n	800e788 <wm8994_SetFrequency+0x74>
  switch (AudioFreq)
 800e742:	f245 6322 	movw	r3, #22050	@ 0x5622
 800e746:	4299      	cmp	r1, r3
 800e748:	d13b      	bne.n	800e7c2 <wm8994_SetFrequency+0xae>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800e74a:	2243      	movs	r2, #67	@ 0x43
 800e74c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e750:	b2c0      	uxtb	r0, r0
 800e752:	f7ff fa45 	bl	800dbe0 <CODEC_IO_Write>
    break;
 800e756:	e017      	b.n	800e788 <wm8994_SetFrequency+0x74>
  switch (AudioFreq)
 800e758:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e75c:	4299      	cmp	r1, r3
 800e75e:	d022      	beq.n	800e7a6 <wm8994_SetFrequency+0x92>
 800e760:	4b1b      	ldr	r3, [pc, #108]	@ (800e7d0 <wm8994_SetFrequency+0xbc>)
 800e762:	4299      	cmp	r1, r3
 800e764:	d026      	beq.n	800e7b4 <wm8994_SetFrequency+0xa0>
 800e766:	f64a 4344 	movw	r3, #44100	@ 0xac44
 800e76a:	4299      	cmp	r1, r3
 800e76c:	d129      	bne.n	800e7c2 <wm8994_SetFrequency+0xae>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800e76e:	2273      	movs	r2, #115	@ 0x73
 800e770:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e774:	b2c0      	uxtb	r0, r0
 800e776:	f7ff fa33 	bl	800dbe0 <CODEC_IO_Write>
    break; 
 800e77a:	e005      	b.n	800e788 <wm8994_SetFrequency+0x74>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800e77c:	2203      	movs	r2, #3
 800e77e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e782:	b2c0      	uxtb	r0, r0
 800e784:	f7ff fa2c 	bl	800dbe0 <CODEC_IO_Write>
}
 800e788:	bd08      	pop	{r3, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800e78a:	2233      	movs	r2, #51	@ 0x33
 800e78c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e790:	b2c0      	uxtb	r0, r0
 800e792:	f7ff fa25 	bl	800dbe0 <CODEC_IO_Write>
    break;
 800e796:	e7f7      	b.n	800e788 <wm8994_SetFrequency+0x74>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800e798:	2263      	movs	r2, #99	@ 0x63
 800e79a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e79e:	b2c0      	uxtb	r0, r0
 800e7a0:	f7ff fa1e 	bl	800dbe0 <CODEC_IO_Write>
    break;
 800e7a4:	e7f0      	b.n	800e788 <wm8994_SetFrequency+0x74>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800e7a6:	2283      	movs	r2, #131	@ 0x83
 800e7a8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e7ac:	b2c0      	uxtb	r0, r0
 800e7ae:	f7ff fa17 	bl	800dbe0 <CODEC_IO_Write>
    break;
 800e7b2:	e7e9      	b.n	800e788 <wm8994_SetFrequency+0x74>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800e7b4:	22a3      	movs	r2, #163	@ 0xa3
 800e7b6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e7ba:	b2c0      	uxtb	r0, r0
 800e7bc:	f7ff fa10 	bl	800dbe0 <CODEC_IO_Write>
    break;
 800e7c0:	e7e2      	b.n	800e788 <wm8994_SetFrequency+0x74>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800e7c2:	2283      	movs	r2, #131	@ 0x83
 800e7c4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800e7c8:	b2c0      	uxtb	r0, r0
 800e7ca:	f7ff fa09 	bl	800dbe0 <CODEC_IO_Write>
  return counter;
 800e7ce:	e7db      	b.n	800e788 <wm8994_SetFrequency+0x74>
 800e7d0:	00017700 	.word	0x00017700

0800e7d4 <wm8994_Reset>:
{
 800e7d4:	b508      	push	{r3, lr}
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	4611      	mov	r1, r2
 800e7da:	b2c0      	uxtb	r0, r0
 800e7dc:	f7ff fa00 	bl	800dbe0 <CODEC_IO_Write>
  outputEnabled = 0;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	4a02      	ldr	r2, [pc, #8]	@ (800e7ec <wm8994_Reset+0x18>)
 800e7e4:	6013      	str	r3, [r2, #0]
  inputEnabled=0;
 800e7e6:	4a02      	ldr	r2, [pc, #8]	@ (800e7f0 <wm8994_Reset+0x1c>)
 800e7e8:	6013      	str	r3, [r2, #0]
}
 800e7ea:	bd08      	pop	{r3, pc}
 800e7ec:	2001e7e4 	.word	0x2001e7e4
 800e7f0:	2001e7e0 	.word	0x2001e7e0

0800e7f4 <wm8994_DeInit>:
{
 800e7f4:	b508      	push	{r3, lr}
  AUDIO_IO_DeInit();
 800e7f6:	f7f6 ffb3 	bl	8005760 <AUDIO_IO_DeInit>
}
 800e7fa:	bd08      	pop	{r3, pc}

0800e7fc <wm8994_ReadID>:
{
 800e7fc:	b510      	push	{r4, lr}
 800e7fe:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 800e800:	f7f6 ffa6 	bl	8005750 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 800e804:	2100      	movs	r1, #0
 800e806:	b2e0      	uxtb	r0, r4
 800e808:	f7f6 ffc8 	bl	800579c <AUDIO_IO_Read>
}
 800e80c:	bd10      	pop	{r4, pc}
	...

0800e810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e810:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800e848 <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e814:	f7ff f95c 	bl	800dad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e818:	480c      	ldr	r0, [pc, #48]	@ (800e84c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800e81a:	490d      	ldr	r1, [pc, #52]	@ (800e850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800e81c:	4a0d      	ldr	r2, [pc, #52]	@ (800e854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800e81e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e820:	e002      	b.n	800e828 <LoopCopyDataInit>

0800e822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e826:	3304      	adds	r3, #4

0800e828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e82a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e82c:	d3f9      	bcc.n	800e822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e82e:	4a0a      	ldr	r2, [pc, #40]	@ (800e858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800e830:	4c0a      	ldr	r4, [pc, #40]	@ (800e85c <LoopFillZerobss+0x22>)
  movs r3, #0
 800e832:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e834:	e001      	b.n	800e83a <LoopFillZerobss>

0800e836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e838:	3204      	adds	r2, #4

0800e83a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e83a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e83c:	d3fb      	bcc.n	800e836 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 800e83e:	f002 fc1b 	bl	8011078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e842:	f7f5 fe05 	bl	8004450 <main>
  bx  lr    
 800e846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800e848:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800e84c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e850:	200021d0 	.word	0x200021d0
  ldr r2, =_sidata
 800e854:	0804ee30 	.word	0x0804ee30
  ldr r2, =_sbss
 800e858:	200021e0 	.word	0x200021e0
  ldr r4, =_ebss
 800e85c:	2001e934 	.word	0x2001e934

0800e860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e860:	e7fe      	b.n	800e860 <ADC_IRQHandler>
	...

0800e864 <ai_buffer_get_size>:
 800e864:	b368      	cbz	r0, 800e8c2 <ai_buffer_get_size+0x5e>
 800e866:	4b17      	ldr	r3, [pc, #92]	@ (800e8c4 <ai_buffer_get_size+0x60>)
 800e868:	4a17      	ldr	r2, [pc, #92]	@ (800e8c8 <ai_buffer_get_size+0x64>)
 800e86a:	b410      	push	{r4}
 800e86c:	6804      	ldr	r4, [r0, #0]
 800e86e:	4023      	ands	r3, r4
 800e870:	4293      	cmp	r3, r2
 800e872:	d123      	bne.n	800e8bc <ai_buffer_get_size+0x58>
 800e874:	b311      	cbz	r1, 800e8bc <ai_buffer_get_size+0x58>
 800e876:	6984      	ldr	r4, [r0, #24]
 800e878:	6862      	ldr	r2, [r4, #4]
 800e87a:	321f      	adds	r2, #31
 800e87c:	f022 021f 	bic.w	r2, r2, #31
 800e880:	7d03      	ldrb	r3, [r0, #20]
 800e882:	6941      	ldr	r1, [r0, #20]
 800e884:	f1a3 0301 	sub.w	r3, r3, #1
 800e888:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800e88c:	fab3 f383 	clz	r3, r3
 800e890:	095b      	lsrs	r3, r3, #5
 800e892:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800e896:	da0c      	bge.n	800e8b2 <ai_buffer_get_size+0x4e>
 800e898:	2b01      	cmp	r3, #1
 800e89a:	d103      	bne.n	800e8a4 <ai_buffer_get_size+0x40>
 800e89c:	2802      	cmp	r0, #2
 800e89e:	f04f 0302 	mov.w	r3, #2
 800e8a2:	d006      	beq.n	800e8b2 <ai_buffer_get_size+0x4e>
 800e8a4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	4298      	cmp	r0, r3
 800e8ac:	fb01 f202 	mul.w	r2, r1, r2
 800e8b0:	d1f2      	bne.n	800e898 <ai_buffer_get_size+0x34>
 800e8b2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800e8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8ba:	4770      	bx	lr
 800e8bc:	6984      	ldr	r4, [r0, #24]
 800e8be:	6862      	ldr	r2, [r4, #4]
 800e8c0:	e7de      	b.n	800e880 <ai_buffer_get_size+0x1c>
 800e8c2:	4770      	bx	lr
 800e8c4:	017fffff 	.word	0x017fffff
 800e8c8:	000400c0 	.word	0x000400c0

0800e8cc <ai_buffer_array_sane>:
 800e8cc:	b138      	cbz	r0, 800e8de <ai_buffer_array_sane+0x12>
 800e8ce:	6843      	ldr	r3, [r0, #4]
 800e8d0:	b123      	cbz	r3, 800e8dc <ai_buffer_array_sane+0x10>
 800e8d2:	8840      	ldrh	r0, [r0, #2]
 800e8d4:	3800      	subs	r0, #0
 800e8d6:	bf18      	it	ne
 800e8d8:	2001      	movne	r0, #1
 800e8da:	4770      	bx	lr
 800e8dc:	4618      	mov	r0, r3
 800e8de:	4770      	bx	lr

0800e8e0 <ai_buffer_array_item_set_address>:
 800e8e0:	b150      	cbz	r0, 800e8f8 <ai_buffer_array_item_set_address+0x18>
 800e8e2:	6843      	ldr	r3, [r0, #4]
 800e8e4:	b14b      	cbz	r3, 800e8fa <ai_buffer_array_item_set_address+0x1a>
 800e8e6:	8840      	ldrh	r0, [r0, #2]
 800e8e8:	b900      	cbnz	r0, 800e8ec <ai_buffer_array_item_set_address+0xc>
 800e8ea:	4770      	bx	lr
 800e8ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e8f0:	2001      	movs	r0, #1
 800e8f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e8f6:	605a      	str	r2, [r3, #4]
 800e8f8:	4770      	bx	lr
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop

0800e900 <ai_platform_get_weights_map>:
 800e900:	2900      	cmp	r1, #0
 800e902:	bf18      	it	ne
 800e904:	2800      	cmpne	r0, #0
 800e906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e908:	bf0c      	ite	eq
 800e90a:	2401      	moveq	r4, #1
 800e90c:	2400      	movne	r4, #0
 800e90e:	2a00      	cmp	r2, #0
 800e910:	bf08      	it	eq
 800e912:	f044 0401 	orreq.w	r4, r4, #1
 800e916:	b114      	cbz	r4, 800e91e <ai_platform_get_weights_map+0x1e>
 800e918:	2400      	movs	r4, #0
 800e91a:	4620      	mov	r0, r4
 800e91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e91e:	4616      	mov	r6, r2
 800e920:	4b22      	ldr	r3, [pc, #136]	@ (800e9ac <ai_platform_get_weights_map+0xac>)
 800e922:	6812      	ldr	r2, [r2, #0]
 800e924:	4605      	mov	r5, r0
 800e926:	460f      	mov	r7, r1
 800e928:	429a      	cmp	r2, r3
 800e92a:	d022      	beq.n	800e972 <ai_platform_get_weights_map+0x72>
 800e92c:	6870      	ldr	r0, [r6, #4]
 800e92e:	2800      	cmp	r0, #0
 800e930:	d0f2      	beq.n	800e918 <ai_platform_get_weights_map+0x18>
 800e932:	6806      	ldr	r6, [r0, #0]
 800e934:	429e      	cmp	r6, r3
 800e936:	d006      	beq.n	800e946 <ai_platform_get_weights_map+0x46>
 800e938:	f1a1 0401 	sub.w	r4, r1, #1
 800e93c:	6028      	str	r0, [r5, #0]
 800e93e:	fab4 f484 	clz	r4, r4
 800e942:	0964      	lsrs	r4, r4, #5
 800e944:	e7e9      	b.n	800e91a <ai_platform_get_weights_map+0x1a>
 800e946:	3d04      	subs	r5, #4
 800e948:	4602      	mov	r2, r0
 800e94a:	4621      	mov	r1, r4
 800e94c:	e000      	b.n	800e950 <ai_platform_get_weights_map+0x50>
 800e94e:	4619      	mov	r1, r3
 800e950:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800e954:	42b3      	cmp	r3, r6
 800e956:	d025      	beq.n	800e9a4 <ai_platform_get_weights_map+0xa4>
 800e958:	f845 3f04 	str.w	r3, [r5, #4]!
 800e95c:	1c4b      	adds	r3, r1, #1
 800e95e:	429f      	cmp	r7, r3
 800e960:	d8f5      	bhi.n	800e94e <ai_platform_get_weights_map+0x4e>
 800e962:	d1da      	bne.n	800e91a <ai_platform_get_weights_map+0x1a>
 800e964:	3102      	adds	r1, #2
 800e966:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800e96a:	42b3      	cmp	r3, r6
 800e96c:	d1d5      	bne.n	800e91a <ai_platform_get_weights_map+0x1a>
 800e96e:	2401      	movs	r4, #1
 800e970:	e7d3      	b.n	800e91a <ai_platform_get_weights_map+0x1a>
 800e972:	1d30      	adds	r0, r6, #4
 800e974:	f7ff ffaa 	bl	800e8cc <ai_buffer_array_sane>
 800e978:	2800      	cmp	r0, #0
 800e97a:	d0cd      	beq.n	800e918 <ai_platform_get_weights_map+0x18>
 800e97c:	88f3      	ldrh	r3, [r6, #6]
 800e97e:	429f      	cmp	r7, r3
 800e980:	d1ca      	bne.n	800e918 <ai_platform_get_weights_map+0x18>
 800e982:	3d04      	subs	r5, #4
 800e984:	4622      	mov	r2, r4
 800e986:	68b3      	ldr	r3, [r6, #8]
 800e988:	4423      	add	r3, r4
 800e98a:	341c      	adds	r4, #28
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	b123      	cbz	r3, 800e99a <ai_platform_get_weights_map+0x9a>
 800e990:	3201      	adds	r2, #1
 800e992:	f845 3f04 	str.w	r3, [r5, #4]!
 800e996:	4297      	cmp	r7, r2
 800e998:	d8f5      	bhi.n	800e986 <ai_platform_get_weights_map+0x86>
 800e99a:	1abc      	subs	r4, r7, r2
 800e99c:	fab4 f484 	clz	r4, r4
 800e9a0:	0964      	lsrs	r4, r4, #5
 800e9a2:	e7ba      	b.n	800e91a <ai_platform_get_weights_map+0x1a>
 800e9a4:	428f      	cmp	r7, r1
 800e9a6:	d1b8      	bne.n	800e91a <ai_platform_get_weights_map+0x1a>
 800e9a8:	e7e1      	b.n	800e96e <ai_platform_get_weights_map+0x6e>
 800e9aa:	bf00      	nop
 800e9ac:	a1facade 	.word	0xa1facade

0800e9b0 <ai_platform_get_activations_map>:
 800e9b0:	2900      	cmp	r1, #0
 800e9b2:	bf18      	it	ne
 800e9b4:	2800      	cmpne	r0, #0
 800e9b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9b8:	bf0c      	ite	eq
 800e9ba:	2401      	moveq	r4, #1
 800e9bc:	2400      	movne	r4, #0
 800e9be:	2a00      	cmp	r2, #0
 800e9c0:	bf08      	it	eq
 800e9c2:	f044 0401 	orreq.w	r4, r4, #1
 800e9c6:	b114      	cbz	r4, 800e9ce <ai_platform_get_activations_map+0x1e>
 800e9c8:	2400      	movs	r4, #0
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ce:	4616      	mov	r6, r2
 800e9d0:	4b22      	ldr	r3, [pc, #136]	@ (800ea5c <ai_platform_get_activations_map+0xac>)
 800e9d2:	6812      	ldr	r2, [r2, #0]
 800e9d4:	4605      	mov	r5, r0
 800e9d6:	460f      	mov	r7, r1
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d022      	beq.n	800ea22 <ai_platform_get_activations_map+0x72>
 800e9dc:	6a30      	ldr	r0, [r6, #32]
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	d0f2      	beq.n	800e9c8 <ai_platform_get_activations_map+0x18>
 800e9e2:	6806      	ldr	r6, [r0, #0]
 800e9e4:	429e      	cmp	r6, r3
 800e9e6:	d006      	beq.n	800e9f6 <ai_platform_get_activations_map+0x46>
 800e9e8:	f1a1 0401 	sub.w	r4, r1, #1
 800e9ec:	6028      	str	r0, [r5, #0]
 800e9ee:	fab4 f484 	clz	r4, r4
 800e9f2:	0964      	lsrs	r4, r4, #5
 800e9f4:	e7e9      	b.n	800e9ca <ai_platform_get_activations_map+0x1a>
 800e9f6:	3d04      	subs	r5, #4
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	4621      	mov	r1, r4
 800e9fc:	e000      	b.n	800ea00 <ai_platform_get_activations_map+0x50>
 800e9fe:	4619      	mov	r1, r3
 800ea00:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800ea04:	42b3      	cmp	r3, r6
 800ea06:	d026      	beq.n	800ea56 <ai_platform_get_activations_map+0xa6>
 800ea08:	f845 3f04 	str.w	r3, [r5, #4]!
 800ea0c:	1c4b      	adds	r3, r1, #1
 800ea0e:	429f      	cmp	r7, r3
 800ea10:	d8f5      	bhi.n	800e9fe <ai_platform_get_activations_map+0x4e>
 800ea12:	d1da      	bne.n	800e9ca <ai_platform_get_activations_map+0x1a>
 800ea14:	3102      	adds	r1, #2
 800ea16:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800ea1a:	42b3      	cmp	r3, r6
 800ea1c:	d1d5      	bne.n	800e9ca <ai_platform_get_activations_map+0x1a>
 800ea1e:	2401      	movs	r4, #1
 800ea20:	e7d3      	b.n	800e9ca <ai_platform_get_activations_map+0x1a>
 800ea22:	f106 000c 	add.w	r0, r6, #12
 800ea26:	f7ff ff51 	bl	800e8cc <ai_buffer_array_sane>
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	d0cc      	beq.n	800e9c8 <ai_platform_get_activations_map+0x18>
 800ea2e:	89f3      	ldrh	r3, [r6, #14]
 800ea30:	429f      	cmp	r7, r3
 800ea32:	d1c9      	bne.n	800e9c8 <ai_platform_get_activations_map+0x18>
 800ea34:	3d04      	subs	r5, #4
 800ea36:	4622      	mov	r2, r4
 800ea38:	6933      	ldr	r3, [r6, #16]
 800ea3a:	4423      	add	r3, r4
 800ea3c:	341c      	adds	r4, #28
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	b123      	cbz	r3, 800ea4c <ai_platform_get_activations_map+0x9c>
 800ea42:	3201      	adds	r2, #1
 800ea44:	f845 3f04 	str.w	r3, [r5, #4]!
 800ea48:	4297      	cmp	r7, r2
 800ea4a:	d8f5      	bhi.n	800ea38 <ai_platform_get_activations_map+0x88>
 800ea4c:	1abc      	subs	r4, r7, r2
 800ea4e:	fab4 f484 	clz	r4, r4
 800ea52:	0964      	lsrs	r4, r4, #5
 800ea54:	e7b9      	b.n	800e9ca <ai_platform_get_activations_map+0x1a>
 800ea56:	428f      	cmp	r7, r1
 800ea58:	d1b7      	bne.n	800e9ca <ai_platform_get_activations_map+0x1a>
 800ea5a:	e7e0      	b.n	800ea1e <ai_platform_get_activations_map+0x6e>
 800ea5c:	a1facade 	.word	0xa1facade

0800ea60 <ai_platform_bind_network_params>:
 800ea60:	2a00      	cmp	r2, #0
 800ea62:	bf18      	it	ne
 800ea64:	2900      	cmpne	r1, #0
 800ea66:	d010      	beq.n	800ea8a <ai_platform_bind_network_params+0x2a>
 800ea68:	b178      	cbz	r0, 800ea8a <ai_platform_bind_network_params+0x2a>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	4808      	ldr	r0, [pc, #32]	@ (800ea90 <ai_platform_bind_network_params+0x30>)
 800ea6e:	f103 0c0c 	add.w	ip, r3, #12
 800ea72:	f843 0b04 	str.w	r0, [r3], #4
 800ea76:	c903      	ldmia	r1, {r0, r1}
 800ea78:	e883 0003 	stmia.w	r3, {r0, r1}
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea82:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ea86:	4618      	mov	r0, r3
 800ea88:	4770      	bx	lr
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	4770      	bx	lr
 800ea90:	a1facade 	.word	0xa1facade

0800ea94 <ai_platform_network_get_error>:
 800ea94:	4b04      	ldr	r3, [pc, #16]	@ (800eaa8 <ai_platform_network_get_error+0x14>)
 800ea96:	6802      	ldr	r2, [r0, #0]
 800ea98:	4393      	bics	r3, r2
 800ea9a:	d102      	bne.n	800eaa2 <ai_platform_network_get_error+0xe>
 800ea9c:	300c      	adds	r0, #12
 800ea9e:	f000 ba2d 	b.w	800eefc <core_get_error>
 800eaa2:	f241 0010 	movw	r0, #4112	@ 0x1010
 800eaa6:	4770      	bx	lr
 800eaa8:	a1c00100 	.word	0xa1c00100

0800eaac <ai_platform_network_set_error>:
 800eaac:	b110      	cbz	r0, 800eab4 <ai_platform_network_set_error+0x8>
 800eaae:	300c      	adds	r0, #12
 800eab0:	f000 ba2a 	b.w	800ef08 <core_set_error>
 800eab4:	4770      	bx	lr
 800eab6:	bf00      	nop

0800eab8 <ai_platform_inputs_get>:
 800eab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eabc:	4b39      	ldr	r3, [pc, #228]	@ (800eba4 <ai_platform_inputs_get+0xec>)
 800eabe:	b085      	sub	sp, #20
 800eac0:	6802      	ldr	r2, [r0, #0]
 800eac2:	4393      	bics	r3, r2
 800eac4:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800eac8:	d162      	bne.n	800eb90 <ai_platform_inputs_get+0xd8>
 800eaca:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d051      	beq.n	800eb74 <ai_platform_inputs_get+0xbc>
 800ead0:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800ead4:	f1ba 0f00 	cmp.w	sl, #0
 800ead8:	d04c      	beq.n	800eb74 <ai_platform_inputs_get+0xbc>
 800eada:	f04f 0900 	mov.w	r9, #0
 800eade:	464d      	mov	r5, r9
 800eae0:	e016      	b.n	800eb10 <ai_platform_inputs_get+0x58>
 800eae2:	9901      	ldr	r1, [sp, #4]
 800eae4:	2301      	movs	r3, #1
 800eae6:	f848 3001 	str.w	r3, [r8, r1]
 800eaea:	69b1      	ldr	r1, [r6, #24]
 800eaec:	f04f 0301 	mov.w	r3, #1
 800eaf0:	684e      	ldr	r6, [r1, #4]
 800eaf2:	3501      	adds	r5, #1
 800eaf4:	f109 091c 	add.w	r9, r9, #28
 800eaf8:	7523      	strb	r3, [r4, #20]
 800eafa:	2300      	movs	r3, #0
 800eafc:	6961      	ldr	r1, [r4, #20]
 800eafe:	6020      	str	r0, [r4, #0]
 800eb00:	f36b 211f 	bfi	r1, fp, #8, #24
 800eb04:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800eb08:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800eb0c:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800eb10:	f8ba 3000 	ldrh.w	r3, [sl]
 800eb14:	b2ac      	uxth	r4, r5
 800eb16:	42ab      	cmp	r3, r5
 800eb18:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800eb1c:	9301      	str	r3, [sp, #4]
 800eb1e:	d93b      	bls.n	800eb98 <ai_platform_inputs_get+0xe0>
 800eb20:	f8da 3004 	ldr.w	r3, [sl, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d037      	beq.n	800eb98 <ai_platform_inputs_get+0xe0>
 800eb28:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800eb2c:	2e00      	cmp	r6, #0
 800eb2e:	d033      	beq.n	800eb98 <ai_platform_inputs_get+0xe0>
 800eb30:	f8da 3008 	ldr.w	r3, [sl, #8]
 800eb34:	69b2      	ldr	r2, [r6, #24]
 800eb36:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800eb3a:	6810      	ldr	r0, [r2, #0]
 800eb3c:	68b3      	ldr	r3, [r6, #8]
 800eb3e:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800eb42:	68f2      	ldr	r2, [r6, #12]
 800eb44:	444c      	add	r4, r9
 800eb46:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800eb4a:	9200      	str	r2, [sp, #0]
 800eb4c:	f001 ffa2 	bl	8010a94 <ai_array_to_buffer_fmt>
 800eb50:	69b1      	ldr	r1, [r6, #24]
 800eb52:	9a00      	ldr	r2, [sp, #0]
 800eb54:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800eb58:	2f00      	cmp	r7, #0
 800eb5a:	d0c7      	beq.n	800eaec <ai_platform_inputs_get+0x34>
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800eb62:	6831      	ldr	r1, [r6, #0]
 800eb64:	6079      	str	r1, [r7, #4]
 800eb66:	b111      	cbz	r1, 800eb6e <ai_platform_inputs_get+0xb6>
 800eb68:	8849      	ldrh	r1, [r1, #2]
 800eb6a:	2900      	cmp	r1, #0
 800eb6c:	d1b9      	bne.n	800eae2 <ai_platform_inputs_get+0x2a>
 800eb6e:	69b1      	ldr	r1, [r6, #24]
 800eb70:	2700      	movs	r7, #0
 800eb72:	e7bb      	b.n	800eaec <ai_platform_inputs_get+0x34>
 800eb74:	9803      	ldr	r0, [sp, #12]
 800eb76:	2400      	movs	r4, #0
 800eb78:	2218      	movs	r2, #24
 800eb7a:	2111      	movs	r1, #17
 800eb7c:	300c      	adds	r0, #12
 800eb7e:	f000 f9c3 	bl	800ef08 <core_set_error>
 800eb82:	4620      	mov	r0, r4
 800eb84:	9b02      	ldr	r3, [sp, #8]
 800eb86:	b103      	cbz	r3, 800eb8a <ai_platform_inputs_get+0xd2>
 800eb88:	801c      	strh	r4, [r3, #0]
 800eb8a:	b005      	add	sp, #20
 800eb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb90:	2000      	movs	r0, #0
 800eb92:	b005      	add	sp, #20
 800eb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb98:	2c00      	cmp	r4, #0
 800eb9a:	d0eb      	beq.n	800eb74 <ai_platform_inputs_get+0xbc>
 800eb9c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800eba0:	6858      	ldr	r0, [r3, #4]
 800eba2:	e7ef      	b.n	800eb84 <ai_platform_inputs_get+0xcc>
 800eba4:	a1c00100 	.word	0xa1c00100

0800eba8 <ai_platform_outputs_get>:
 800eba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebac:	4b38      	ldr	r3, [pc, #224]	@ (800ec90 <ai_platform_outputs_get+0xe8>)
 800ebae:	b085      	sub	sp, #20
 800ebb0:	6802      	ldr	r2, [r0, #0]
 800ebb2:	4393      	bics	r3, r2
 800ebb4:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800ebb8:	d15f      	bne.n	800ec7a <ai_platform_outputs_get+0xd2>
 800ebba:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d94e      	bls.n	800ec5e <ai_platform_outputs_get+0xb6>
 800ebc0:	f04f 0900 	mov.w	r9, #0
 800ebc4:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800ebc8:	464d      	mov	r5, r9
 800ebca:	e016      	b.n	800ebfa <ai_platform_outputs_get+0x52>
 800ebcc:	9901      	ldr	r1, [sp, #4]
 800ebce:	2301      	movs	r3, #1
 800ebd0:	f848 3001 	str.w	r3, [r8, r1]
 800ebd4:	69b1      	ldr	r1, [r6, #24]
 800ebd6:	f04f 0301 	mov.w	r3, #1
 800ebda:	684e      	ldr	r6, [r1, #4]
 800ebdc:	3501      	adds	r5, #1
 800ebde:	f109 091c 	add.w	r9, r9, #28
 800ebe2:	7523      	strb	r3, [r4, #20]
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	6961      	ldr	r1, [r4, #20]
 800ebe8:	6020      	str	r0, [r4, #0]
 800ebea:	f36b 211f 	bfi	r1, fp, #8, #24
 800ebee:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800ebf2:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800ebf6:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800ebfa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800ebfe:	b2ac      	uxth	r4, r5
 800ec00:	42ab      	cmp	r3, r5
 800ec02:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800ec06:	9301      	str	r3, [sp, #4]
 800ec08:	d93b      	bls.n	800ec82 <ai_platform_outputs_get+0xda>
 800ec0a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d037      	beq.n	800ec82 <ai_platform_outputs_get+0xda>
 800ec12:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800ec16:	2e00      	cmp	r6, #0
 800ec18:	d033      	beq.n	800ec82 <ai_platform_outputs_get+0xda>
 800ec1a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800ec1e:	69b2      	ldr	r2, [r6, #24]
 800ec20:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800ec24:	6810      	ldr	r0, [r2, #0]
 800ec26:	68b3      	ldr	r3, [r6, #8]
 800ec28:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800ec2c:	68f2      	ldr	r2, [r6, #12]
 800ec2e:	444c      	add	r4, r9
 800ec30:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800ec34:	9200      	str	r2, [sp, #0]
 800ec36:	f001 ff2d 	bl	8010a94 <ai_array_to_buffer_fmt>
 800ec3a:	69b1      	ldr	r1, [r6, #24]
 800ec3c:	9a00      	ldr	r2, [sp, #0]
 800ec3e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ec42:	2f00      	cmp	r7, #0
 800ec44:	d0c7      	beq.n	800ebd6 <ai_platform_outputs_get+0x2e>
 800ec46:	2100      	movs	r1, #0
 800ec48:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800ec4c:	6831      	ldr	r1, [r6, #0]
 800ec4e:	6079      	str	r1, [r7, #4]
 800ec50:	b111      	cbz	r1, 800ec58 <ai_platform_outputs_get+0xb0>
 800ec52:	8849      	ldrh	r1, [r1, #2]
 800ec54:	2900      	cmp	r1, #0
 800ec56:	d1b9      	bne.n	800ebcc <ai_platform_outputs_get+0x24>
 800ec58:	69b1      	ldr	r1, [r6, #24]
 800ec5a:	2700      	movs	r7, #0
 800ec5c:	e7bb      	b.n	800ebd6 <ai_platform_outputs_get+0x2e>
 800ec5e:	9803      	ldr	r0, [sp, #12]
 800ec60:	2400      	movs	r4, #0
 800ec62:	2218      	movs	r2, #24
 800ec64:	2111      	movs	r1, #17
 800ec66:	300c      	adds	r0, #12
 800ec68:	f000 f94e 	bl	800ef08 <core_set_error>
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	9b02      	ldr	r3, [sp, #8]
 800ec70:	b103      	cbz	r3, 800ec74 <ai_platform_outputs_get+0xcc>
 800ec72:	801c      	strh	r4, [r3, #0]
 800ec74:	b005      	add	sp, #20
 800ec76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7a:	2000      	movs	r0, #0
 800ec7c:	b005      	add	sp, #20
 800ec7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec82:	2c00      	cmp	r4, #0
 800ec84:	d0eb      	beq.n	800ec5e <ai_platform_outputs_get+0xb6>
 800ec86:	f8da 3014 	ldr.w	r3, [sl, #20]
 800ec8a:	6858      	ldr	r0, [r3, #4]
 800ec8c:	e7ef      	b.n	800ec6e <ai_platform_outputs_get+0xc6>
 800ec8e:	bf00      	nop
 800ec90:	a1c00100 	.word	0xa1c00100

0800ec94 <ai_platform_network_create>:
 800ec94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec98:	b083      	sub	sp, #12
 800ec9a:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800ec9e:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800eca2:	b320      	cbz	r0, 800ecee <ai_platform_network_create+0x5a>
 800eca4:	6002      	str	r2, [r0, #0]
 800eca6:	4616      	mov	r6, r2
 800eca8:	461f      	mov	r7, r3
 800ecaa:	4604      	mov	r4, r0
 800ecac:	f000 f924 	bl	800eef8 <core_init>
 800ecb0:	b970      	cbnz	r0, 800ecd0 <ai_platform_network_create+0x3c>
 800ecb2:	2530      	movs	r5, #48	@ 0x30
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	6023      	str	r3, [r4, #0]
 800ecb8:	2410      	movs	r4, #16
 800ecba:	464a      	mov	r2, r9
 800ecbc:	4641      	mov	r1, r8
 800ecbe:	4638      	mov	r0, r7
 800ecc0:	f001 ff58 	bl	8010b74 <ai_version_get>
 800ecc4:	60b0      	str	r0, [r6, #8]
 800ecc6:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800ecca:	b003      	add	sp, #12
 800eccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	4641      	mov	r1, r8
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	f001 ff4d 	bl	8010b74 <ai_version_get>
 800ecda:	4605      	mov	r5, r0
 800ecdc:	2200      	movs	r2, #0
 800ecde:	2105      	movs	r1, #5
 800ece0:	2001      	movs	r0, #1
 800ece2:	f001 ff47 	bl	8010b74 <ai_version_get>
 800ece6:	4285      	cmp	r5, r0
 800ece8:	d008      	beq.n	800ecfc <ai_platform_network_create+0x68>
 800ecea:	2501      	movs	r5, #1
 800ecec:	e7e2      	b.n	800ecb4 <ai_platform_network_create+0x20>
 800ecee:	2510      	movs	r5, #16
 800ecf0:	462c      	mov	r4, r5
 800ecf2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800ecf6:	b003      	add	sp, #12
 800ecf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecfc:	4b05      	ldr	r3, [pc, #20]	@ (800ed14 <ai_platform_network_create+0x80>)
 800ecfe:	a801      	add	r0, sp, #4
 800ed00:	9301      	str	r3, [sp, #4]
 800ed02:	f000 f90d 	bl	800ef20 <ai_check_custom_types>
 800ed06:	b110      	cbz	r0, 800ed0e <ai_platform_network_create+0x7a>
 800ed08:	2400      	movs	r4, #0
 800ed0a:	4625      	mov	r5, r4
 800ed0c:	e7d5      	b.n	800ecba <ai_platform_network_create+0x26>
 800ed0e:	2502      	movs	r5, #2
 800ed10:	e7d0      	b.n	800ecb4 <ai_platform_network_create+0x20>
 800ed12:	bf00      	nop
 800ed14:	84048403 	.word	0x84048403

0800ed18 <ai_platform_network_init>:
 800ed18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed1c:	4a5c      	ldr	r2, [pc, #368]	@ (800ee90 <ai_platform_network_init+0x178>)
 800ed1e:	460c      	mov	r4, r1
 800ed20:	6801      	ldr	r1, [r0, #0]
 800ed22:	438a      	bics	r2, r1
 800ed24:	d133      	bne.n	800ed8e <ai_platform_network_init+0x76>
 800ed26:	4605      	mov	r5, r0
 800ed28:	2c00      	cmp	r4, #0
 800ed2a:	f000 8093 	beq.w	800ee54 <ai_platform_network_init+0x13c>
 800ed2e:	f8d4 b000 	ldr.w	fp, [r4]
 800ed32:	4a58      	ldr	r2, [pc, #352]	@ (800ee94 <ai_platform_network_init+0x17c>)
 800ed34:	4593      	cmp	fp, r2
 800ed36:	d10f      	bne.n	800ed58 <ai_platform_network_init+0x40>
 800ed38:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 800ed3c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ed40:	4b53      	ldr	r3, [pc, #332]	@ (800ee90 <ai_platform_network_init+0x178>)
 800ed42:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 800ed46:	0c32      	lsrs	r2, r6, #16
 800ed48:	4299      	cmp	r1, r3
 800ed4a:	d02c      	beq.n	800eda6 <ai_platform_network_init+0x8e>
 800ed4c:	2303      	movs	r3, #3
 800ed4e:	462c      	mov	r4, r5
 800ed50:	612b      	str	r3, [r5, #16]
 800ed52:	4620      	mov	r0, r4
 800ed54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed58:	4627      	mov	r7, r4
 800ed5a:	2101      	movs	r1, #1
 800ed5c:	6864      	ldr	r4, [r4, #4]
 800ed5e:	4638      	mov	r0, r7
 800ed60:	f107 081c 	add.w	r8, r7, #28
 800ed64:	f7ff fd7e 	bl	800e864 <ai_buffer_get_size>
 800ed68:	4606      	mov	r6, r0
 800ed6a:	2101      	movs	r1, #1
 800ed6c:	4640      	mov	r0, r8
 800ed6e:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800ed72:	f7ff fd77 	bl	800e864 <ai_buffer_get_size>
 800ed76:	b976      	cbnz	r6, 800ed96 <ai_platform_network_init+0x7e>
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	d150      	bne.n	800ee1e <ai_platform_network_init+0x106>
 800ed7c:	4680      	mov	r8, r0
 800ed7e:	4686      	mov	lr, r0
 800ed80:	4606      	mov	r6, r0
 800ed82:	4607      	mov	r7, r0
 800ed84:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800ed88:	6829      	ldr	r1, [r5, #0]
 800ed8a:	0436      	lsls	r6, r6, #16
 800ed8c:	e7d8      	b.n	800ed40 <ai_platform_network_init+0x28>
 800ed8e:	2400      	movs	r4, #0
 800ed90:	4620      	mov	r0, r4
 800ed92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed96:	2800      	cmp	r0, #0
 800ed98:	d13b      	bne.n	800ee12 <ai_platform_network_init+0xfa>
 800ed9a:	4680      	mov	r8, r0
 800ed9c:	4686      	mov	lr, r0
 800ed9e:	2c00      	cmp	r4, #0
 800eda0:	d05e      	beq.n	800ee60 <ai_platform_network_init+0x148>
 800eda2:	2601      	movs	r6, #1
 800eda4:	e7ee      	b.n	800ed84 <ai_platform_network_init+0x6c>
 800eda6:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 800eda8:	4293      	cmp	r3, r2
 800edaa:	4b3a      	ldr	r3, [pc, #232]	@ (800ee94 <ai_platform_network_init+0x17c>)
 800edac:	d33e      	bcc.n	800ee2c <ai_platform_network_init+0x114>
 800edae:	459b      	cmp	fp, r3
 800edb0:	d03e      	beq.n	800ee30 <ai_platform_network_init+0x118>
 800edb2:	b1a2      	cbz	r2, 800edde <ai_platform_network_init+0xc6>
 800edb4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800edb8:	f04f 0c00 	mov.w	ip, #0
 800edbc:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800edc0:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 800edc2:	eb07 0b0c 	add.w	fp, r7, ip
 800edc6:	4464      	add	r4, ip
 800edc8:	f10c 0c1c 	add.w	ip, ip, #28
 800edcc:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800edd0:	45cc      	cmp	ip, r9
 800edd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edd4:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 800edd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800eddc:	d1f0      	bne.n	800edc0 <ai_platform_network_init+0xa8>
 800edde:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800ede0:	622e      	str	r6, [r5, #32]
 800ede2:	4553      	cmp	r3, sl
 800ede4:	d34b      	bcc.n	800ee7e <ai_platform_network_init+0x166>
 800ede6:	f1ba 0f00 	cmp.w	sl, #0
 800edea:	d025      	beq.n	800ee38 <ai_platform_network_init+0x120>
 800edec:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800edf0:	2700      	movs	r7, #0
 800edf2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800edf6:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 800edf8:	eb08 0607 	add.w	r6, r8, r7
 800edfc:	443c      	add	r4, r7
 800edfe:	371c      	adds	r7, #28
 800ee00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ee02:	4557      	cmp	r7, sl
 800ee04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee06:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ee0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ee0e:	d1f2      	bne.n	800edf6 <ai_platform_network_init+0xde>
 800ee10:	e012      	b.n	800ee38 <ai_platform_network_init+0x120>
 800ee12:	f1b9 0f00 	cmp.w	r9, #0
 800ee16:	d015      	beq.n	800ee44 <ai_platform_network_init+0x12c>
 800ee18:	f04f 0e01 	mov.w	lr, #1
 800ee1c:	e7bf      	b.n	800ed9e <ai_platform_network_init+0x86>
 800ee1e:	f1b9 0f00 	cmp.w	r9, #0
 800ee22:	d00f      	beq.n	800ee44 <ai_platform_network_init+0x12c>
 800ee24:	f04f 0e01 	mov.w	lr, #1
 800ee28:	4637      	mov	r7, r6
 800ee2a:	e7ab      	b.n	800ed84 <ai_platform_network_init+0x6c>
 800ee2c:	459b      	cmp	fp, r3
 800ee2e:	d11e      	bne.n	800ee6e <ai_platform_network_init+0x156>
 800ee30:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 800ee34:	e9c5 6708 	strd	r6, r7, [r5, #32]
 800ee38:	4628      	mov	r0, r5
 800ee3a:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 800ee3e:	f000 f897 	bl	800ef70 <ai_layers_init_all>
 800ee42:	e783      	b.n	800ed4c <ai_platform_network_init+0x34>
 800ee44:	2213      	movs	r2, #19
 800ee46:	2110      	movs	r1, #16
 800ee48:	f105 000c 	add.w	r0, r5, #12
 800ee4c:	2400      	movs	r4, #0
 800ee4e:	f000 f85b 	bl	800ef08 <core_set_error>
 800ee52:	e77e      	b.n	800ed52 <ai_platform_network_init+0x3a>
 800ee54:	2211      	movs	r2, #17
 800ee56:	2110      	movs	r1, #16
 800ee58:	300c      	adds	r0, #12
 800ee5a:	f000 f855 	bl	800ef08 <core_set_error>
 800ee5e:	e778      	b.n	800ed52 <ai_platform_network_init+0x3a>
 800ee60:	2212      	movs	r2, #18
 800ee62:	2110      	movs	r1, #16
 800ee64:	f105 000c 	add.w	r0, r5, #12
 800ee68:	f000 f84e 	bl	800ef08 <core_set_error>
 800ee6c:	e771      	b.n	800ed52 <ai_platform_network_init+0x3a>
 800ee6e:	2212      	movs	r2, #18
 800ee70:	2116      	movs	r1, #22
 800ee72:	f105 000c 	add.w	r0, r5, #12
 800ee76:	2400      	movs	r4, #0
 800ee78:	f000 f846 	bl	800ef08 <core_set_error>
 800ee7c:	e769      	b.n	800ed52 <ai_platform_network_init+0x3a>
 800ee7e:	2213      	movs	r2, #19
 800ee80:	2116      	movs	r1, #22
 800ee82:	f105 000c 	add.w	r0, r5, #12
 800ee86:	2400      	movs	r4, #0
 800ee88:	f000 f83e 	bl	800ef08 <core_set_error>
 800ee8c:	e761      	b.n	800ed52 <ai_platform_network_init+0x3a>
 800ee8e:	bf00      	nop
 800ee90:	a1c00100 	.word	0xa1c00100
 800ee94:	a1facade 	.word	0xa1facade

0800ee98 <ai_platform_network_post_init>:
 800ee98:	b538      	push	{r3, r4, r5, lr}
 800ee9a:	4b16      	ldr	r3, [pc, #88]	@ (800eef4 <ai_platform_network_post_init+0x5c>)
 800ee9c:	6802      	ldr	r2, [r0, #0]
 800ee9e:	ea02 0103 	and.w	r1, r2, r3
 800eea2:	4393      	bics	r3, r2
 800eea4:	d108      	bne.n	800eeb8 <ai_platform_network_post_init+0x20>
 800eea6:	6903      	ldr	r3, [r0, #16]
 800eea8:	4604      	mov	r4, r0
 800eeaa:	f013 0502 	ands.w	r5, r3, #2
 800eeae:	d005      	beq.n	800eebc <ai_platform_network_post_init+0x24>
 800eeb0:	428a      	cmp	r2, r1
 800eeb2:	d00a      	beq.n	800eeca <ai_platform_network_post_init+0x32>
 800eeb4:	2001      	movs	r0, #1
 800eeb6:	bd38      	pop	{r3, r4, r5, pc}
 800eeb8:	2000      	movs	r0, #0
 800eeba:	bd38      	pop	{r3, r4, r5, pc}
 800eebc:	2210      	movs	r2, #16
 800eebe:	2111      	movs	r1, #17
 800eec0:	300c      	adds	r0, #12
 800eec2:	f000 f821 	bl	800ef08 <core_set_error>
 800eec6:	4628      	mov	r0, r5
 800eec8:	bd38      	pop	{r3, r4, r5, pc}
 800eeca:	f000 f85f 	bl	800ef8c <ai_layers_post_init_all>
 800eece:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d0ef      	beq.n	800eeb4 <ai_platform_network_post_init+0x1c>
 800eed4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800eed6:	e008      	b.n	800eeea <ai_platform_network_post_init+0x52>
 800eed8:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800eedc:	4798      	blx	r3
 800eede:	692b      	ldr	r3, [r5, #16]
 800eee0:	42ab      	cmp	r3, r5
 800eee2:	461d      	mov	r5, r3
 800eee4:	d0e6      	beq.n	800eeb4 <ai_platform_network_post_init+0x1c>
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d0e4      	beq.n	800eeb4 <ai_platform_network_post_init+0x1c>
 800eeea:	4629      	mov	r1, r5
 800eeec:	2000      	movs	r0, #0
 800eeee:	2d00      	cmp	r5, #0
 800eef0:	d1f2      	bne.n	800eed8 <ai_platform_network_post_init+0x40>
 800eef2:	e7df      	b.n	800eeb4 <ai_platform_network_post_init+0x1c>
 800eef4:	a1c00100 	.word	0xa1c00100

0800eef8 <core_init>:
 800eef8:	2001      	movs	r0, #1
 800eefa:	4770      	bx	lr

0800eefc <core_get_error>:
 800eefc:	4603      	mov	r3, r0
 800eefe:	2200      	movs	r2, #0
 800ef00:	6800      	ldr	r0, [r0, #0]
 800ef02:	601a      	str	r2, [r3, #0]
 800ef04:	4770      	bx	lr
 800ef06:	bf00      	nop

0800ef08 <core_set_error>:
 800ef08:	4603      	mov	r3, r0
 800ef0a:	7800      	ldrb	r0, [r0, #0]
 800ef0c:	b108      	cbz	r0, 800ef12 <core_set_error+0xa>
 800ef0e:	2000      	movs	r0, #0
 800ef10:	4770      	bx	lr
 800ef12:	7019      	strb	r1, [r3, #0]
 800ef14:	2001      	movs	r0, #1
 800ef16:	6819      	ldr	r1, [r3, #0]
 800ef18:	f362 211f 	bfi	r1, r2, #8, #24
 800ef1c:	6019      	str	r1, [r3, #0]
 800ef1e:	4770      	bx	lr

0800ef20 <ai_check_custom_types>:
 800ef20:	b082      	sub	sp, #8
 800ef22:	4b12      	ldr	r3, [pc, #72]	@ (800ef6c <ai_check_custom_types+0x4c>)
 800ef24:	9301      	str	r3, [sp, #4]
 800ef26:	b118      	cbz	r0, 800ef30 <ai_check_custom_types+0x10>
 800ef28:	7803      	ldrb	r3, [r0, #0]
 800ef2a:	2b03      	cmp	r3, #3
 800ef2c:	d002      	beq.n	800ef34 <ai_check_custom_types+0x14>
 800ef2e:	2000      	movs	r0, #0
 800ef30:	b002      	add	sp, #8
 800ef32:	4770      	bx	lr
 800ef34:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d004      	beq.n	800ef46 <ai_check_custom_types+0x26>
 800ef3c:	2001      	movs	r0, #1
 800ef3e:	f080 0001 	eor.w	r0, r0, #1
 800ef42:	b002      	add	sp, #8
 800ef44:	4770      	bx	lr
 800ef46:	7842      	ldrb	r2, [r0, #1]
 800ef48:	3001      	adds	r0, #1
 800ef4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d1f4      	bne.n	800ef3c <ai_check_custom_types+0x1c>
 800ef52:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ef56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d1ee      	bne.n	800ef3c <ai_check_custom_types+0x1c>
 800ef5e:	7842      	ldrb	r2, [r0, #1]
 800ef60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d1e9      	bne.n	800ef3c <ai_check_custom_types+0x1c>
 800ef68:	2000      	movs	r0, #0
 800ef6a:	e7e8      	b.n	800ef3e <ai_check_custom_types+0x1e>
 800ef6c:	84048403 	.word	0x84048403

0800ef70 <ai_layers_init_all>:
 800ef70:	2100      	movs	r1, #0
 800ef72:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ef74:	b13b      	cbz	r3, 800ef86 <ai_layers_init_all+0x16>
 800ef76:	691a      	ldr	r2, [r3, #16]
 800ef78:	3101      	adds	r1, #1
 800ef7a:	60d8      	str	r0, [r3, #12]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	4613      	mov	r3, r2
 800ef80:	d001      	beq.n	800ef86 <ai_layers_init_all+0x16>
 800ef82:	2a00      	cmp	r2, #0
 800ef84:	d1f6      	bne.n	800ef74 <ai_layers_init_all+0x4>
 800ef86:	4608      	mov	r0, r1
 800ef88:	4770      	bx	lr
 800ef8a:	bf00      	nop

0800ef8c <ai_layers_post_init_all>:
 800ef8c:	b538      	push	{r3, r4, r5, lr}
 800ef8e:	2500      	movs	r5, #0
 800ef90:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800ef92:	b16c      	cbz	r4, 800efb0 <ai_layers_post_init_all+0x24>
 800ef94:	6863      	ldr	r3, [r4, #4]
 800ef96:	07db      	lsls	r3, r3, #31
 800ef98:	d504      	bpl.n	800efa4 <ai_layers_post_init_all+0x18>
 800ef9a:	6a23      	ldr	r3, [r4, #32]
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	b10b      	cbz	r3, 800efa4 <ai_layers_post_init_all+0x18>
 800efa0:	3501      	adds	r5, #1
 800efa2:	4798      	blx	r3
 800efa4:	6923      	ldr	r3, [r4, #16]
 800efa6:	42a3      	cmp	r3, r4
 800efa8:	461c      	mov	r4, r3
 800efaa:	d001      	beq.n	800efb0 <ai_layers_post_init_all+0x24>
 800efac:	2b00      	cmp	r3, #0
 800efae:	d1f0      	bne.n	800ef92 <ai_layers_post_init_all+0x6>
 800efb0:	4628      	mov	r0, r5
 800efb2:	bd38      	pop	{r3, r4, r5, pc}

0800efb4 <forward_conv2d_if32of32wf32>:
 800efb4:	6983      	ldr	r3, [r0, #24]
 800efb6:	881a      	ldrh	r2, [r3, #0]
 800efb8:	2a00      	cmp	r2, #0
 800efba:	f000 80b4 	beq.w	800f126 <forward_conv2d_if32of32wf32+0x172>
 800efbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efc2:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800efc6:	b0a3      	sub	sp, #140	@ 0x8c
 800efc8:	4607      	mov	r7, r0
 800efca:	f8de 3004 	ldr.w	r3, [lr, #4]
 800efce:	b103      	cbz	r3, 800efd2 <forward_conv2d_if32of32wf32+0x1e>
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2a01      	cmp	r2, #1
 800efd4:	f000 80e1 	beq.w	800f19a <forward_conv2d_if32of32wf32+0x1e6>
 800efd8:	f8de 0010 	ldr.w	r0, [lr, #16]
 800efdc:	b100      	cbz	r0, 800efe0 <forward_conv2d_if32of32wf32+0x2c>
 800efde:	6800      	ldr	r0, [r0, #0]
 800efe0:	2a02      	cmp	r2, #2
 800efe2:	f000 80a2 	beq.w	800f12a <forward_conv2d_if32of32wf32+0x176>
 800efe6:	f8de 501c 	ldr.w	r5, [lr, #28]
 800efea:	2d00      	cmp	r5, #0
 800efec:	f000 80ce 	beq.w	800f18c <forward_conv2d_if32of32wf32+0x1d8>
 800eff0:	f8be 1018 	ldrh.w	r1, [lr, #24]
 800eff4:	682c      	ldr	r4, [r5, #0]
 800eff6:	2901      	cmp	r1, #1
 800eff8:	f240 80ca 	bls.w	800f190 <forward_conv2d_if32of32wf32+0x1dc>
 800effc:	686d      	ldr	r5, [r5, #4]
 800effe:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800f002:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800f006:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f00a:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 800f00c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f00e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f012:	699b      	ldr	r3, [r3, #24]
 800f014:	9115      	str	r1, [sp, #84]	@ 0x54
 800f016:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800f01a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800f01e:	9116      	str	r1, [sp, #88]	@ 0x58
 800f020:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800f024:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800f028:	9117      	str	r1, [sp, #92]	@ 0x5c
 800f02a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800f02e:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800f032:	9118      	str	r1, [sp, #96]	@ 0x60
 800f034:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f038:	9119      	str	r1, [sp, #100]	@ 0x64
 800f03a:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800f03c:	911a      	str	r1, [sp, #104]	@ 0x68
 800f03e:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800f040:	911b      	str	r1, [sp, #108]	@ 0x6c
 800f042:	69f9      	ldr	r1, [r7, #28]
 800f044:	9120      	str	r1, [sp, #128]	@ 0x80
 800f046:	8831      	ldrh	r1, [r6, #0]
 800f048:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800f04c:	911c      	str	r1, [sp, #112]	@ 0x70
 800f04e:	88b1      	ldrh	r1, [r6, #4]
 800f050:	911d      	str	r1, [sp, #116]	@ 0x74
 800f052:	b299      	uxth	r1, r3
 800f054:	911e      	str	r1, [sp, #120]	@ 0x78
 800f056:	b2a1      	uxth	r1, r4
 800f058:	911f      	str	r1, [sp, #124]	@ 0x7c
 800f05a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800f05e:	e9da 7601 	ldrd	r7, r6, [sl, #4]
 800f062:	b10d      	cbz	r5, 800f068 <forward_conv2d_if32of32wf32+0xb4>
 800f064:	69ad      	ldr	r5, [r5, #24]
 800f066:	68ad      	ldr	r5, [r5, #8]
 800f068:	6980      	ldr	r0, [r0, #24]
 800f06a:	b2a4      	uxth	r4, r4
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	2a03      	cmp	r2, #3
 800f070:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800f074:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800f078:	f106 30ff 	add.w	r0, r6, #4294967295	@ 0xffffffff
 800f07c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f080:	fb00 6404 	mla	r4, r0, r4, r6
 800f084:	f107 30ff 	add.w	r0, r7, #4294967295	@ 0xffffffff
 800f088:	fb00 7303 	mla	r3, r0, r3, r7
 800f08c:	9314      	str	r3, [sp, #80]	@ 0x50
 800f08e:	f000 8081 	beq.w	800f194 <forward_conv2d_if32of32wf32+0x1e0>
 800f092:	f8de 3028 	ldr.w	r3, [lr, #40]	@ 0x28
 800f096:	2b00      	cmp	r3, #0
 800f098:	d04a      	beq.n	800f130 <forward_conv2d_if32of32wf32+0x17c>
 800f09a:	f8d3 8000 	ldr.w	r8, [r3]
 800f09e:	f1b8 0f00 	cmp.w	r8, #0
 800f0a2:	d003      	beq.n	800f0ac <forward_conv2d_if32of32wf32+0xf8>
 800f0a4:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f0a8:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800f0ac:	6858      	ldr	r0, [r3, #4]
 800f0ae:	2800      	cmp	r0, #0
 800f0b0:	d03f      	beq.n	800f132 <forward_conv2d_if32of32wf32+0x17e>
 800f0b2:	6983      	ldr	r3, [r0, #24]
 800f0b4:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800f0b8:	f8dc e000 	ldr.w	lr, [ip]
 800f0bc:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800f0c0:	f3ce 4343 	ubfx	r3, lr, #17, #4
 800f0c4:	fa42 f303 	asr.w	r3, r2, r3
 800f0c8:	07db      	lsls	r3, r3, #31
 800f0ca:	d553      	bpl.n	800f174 <forward_conv2d_if32of32wf32+0x1c0>
 800f0cc:	f1b9 0f00 	cmp.w	r9, #0
 800f0d0:	bf18      	it	ne
 800f0d2:	4649      	movne	r1, r9
 800f0d4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f0d6:	460a      	mov	r2, r1
 800f0d8:	940d      	str	r4, [sp, #52]	@ 0x34
 800f0da:	4651      	mov	r1, sl
 800f0dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800f0de:	4658      	mov	r0, fp
 800f0e0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f0e2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800f0e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0e6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800f0e8:	9707      	str	r7, [sp, #28]
 800f0ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f0ee:	940e      	str	r4, [sp, #56]	@ 0x38
 800f0f0:	e9cd 6308 	strd	r6, r3, [sp, #32]
 800f0f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f0f6:	9306      	str	r3, [sp, #24]
 800f0f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f0fa:	9305      	str	r3, [sp, #20]
 800f0fc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f0fe:	9304      	str	r3, [sp, #16]
 800f100:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f102:	9303      	str	r3, [sp, #12]
 800f104:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f106:	9302      	str	r3, [sp, #8]
 800f108:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f10a:	e9cd 8300 	strd	r8, r3, [sp]
 800f10e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f110:	9311      	str	r3, [sp, #68]	@ 0x44
 800f112:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f114:	9310      	str	r3, [sp, #64]	@ 0x40
 800f116:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f118:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f11a:	462b      	mov	r3, r5
 800f11c:	f000 fb0c 	bl	800f738 <forward_lite_conv2d_if32of32wf32>
 800f120:	b023      	add	sp, #140	@ 0x8c
 800f122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f126:	6853      	ldr	r3, [r2, #4]
 800f128:	deff      	udf	#255	@ 0xff
 800f12a:	2300      	movs	r3, #0
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	deff      	udf	#255	@ 0xff
 800f130:	4698      	mov	r8, r3
 800f132:	f8dc e000 	ldr.w	lr, [ip]
 800f136:	f46f 7088 	mvn.w	r0, #272	@ 0x110
 800f13a:	f3ce 4343 	ubfx	r3, lr, #17, #4
 800f13e:	4118      	asrs	r0, r3
 800f140:	f010 0001 	ands.w	r0, r0, #1
 800f144:	d1c6      	bne.n	800f0d4 <forward_conv2d_if32of32wf32+0x120>
 800f146:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 800f14a:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 800f14e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800f152:	fa43 f30e 	asr.w	r3, r3, lr
 800f156:	b29b      	uxth	r3, r3
 800f158:	2a00      	cmp	r2, #0
 800f15a:	d0bb      	beq.n	800f0d4 <forward_conv2d_if32of32wf32+0x120>
 800f15c:	4681      	mov	r9, r0
 800f15e:	6980      	ldr	r0, [r0, #24]
 800f160:	9121      	str	r1, [sp, #132]	@ 0x84
 800f162:	6840      	ldr	r0, [r0, #4]
 800f164:	9001      	str	r0, [sp, #4]
 800f166:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800f168:	9000      	str	r0, [sp, #0]
 800f16a:	4648      	mov	r0, r9
 800f16c:	f000 fe7a 	bl	800fe64 <lite_decompress_ilutof32>
 800f170:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800f172:	e7ab      	b.n	800f0cc <forward_conv2d_if32of32wf32+0x118>
 800f174:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 800f178:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 800f17c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800f180:	fa43 f30e 	asr.w	r3, r3, lr
 800f184:	b29b      	uxth	r3, r3
 800f186:	2a00      	cmp	r2, #0
 800f188:	d0a0      	beq.n	800f0cc <forward_conv2d_if32of32wf32+0x118>
 800f18a:	e7e8      	b.n	800f15e <forward_conv2d_if32of32wf32+0x1aa>
 800f18c:	462c      	mov	r4, r5
 800f18e:	e736      	b.n	800effe <forward_conv2d_if32of32wf32+0x4a>
 800f190:	2500      	movs	r5, #0
 800f192:	e734      	b.n	800effe <forward_conv2d_if32of32wf32+0x4a>
 800f194:	2300      	movs	r3, #0
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	deff      	udf	#255	@ 0xff
 800f19a:	2300      	movs	r3, #0
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	deff      	udf	#255	@ 0xff

0800f1a0 <forward_dense>:
 800f1a0:	6982      	ldr	r2, [r0, #24]
 800f1a2:	8813      	ldrh	r3, [r2, #0]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d043      	beq.n	800f230 <forward_dense+0x90>
 800f1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1ac:	6855      	ldr	r5, [r2, #4]
 800f1ae:	b08e      	sub	sp, #56	@ 0x38
 800f1b0:	6869      	ldr	r1, [r5, #4]
 800f1b2:	b101      	cbz	r1, 800f1b6 <forward_dense+0x16>
 800f1b4:	6809      	ldr	r1, [r1, #0]
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d069      	beq.n	800f28e <forward_dense+0xee>
 800f1ba:	692a      	ldr	r2, [r5, #16]
 800f1bc:	b102      	cbz	r2, 800f1c0 <forward_dense+0x20>
 800f1be:	6812      	ldr	r2, [r2, #0]
 800f1c0:	2b02      	cmp	r3, #2
 800f1c2:	d061      	beq.n	800f288 <forward_dense+0xe8>
 800f1c4:	69ec      	ldr	r4, [r5, #28]
 800f1c6:	2c00      	cmp	r4, #0
 800f1c8:	d057      	beq.n	800f27a <forward_dense+0xda>
 800f1ca:	8b2e      	ldrh	r6, [r5, #24]
 800f1cc:	6820      	ldr	r0, [r4, #0]
 800f1ce:	2e01      	cmp	r6, #1
 800f1d0:	d955      	bls.n	800f27e <forward_dense+0xde>
 800f1d2:	6864      	ldr	r4, [r4, #4]
 800f1d4:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800f1d8:	2b03      	cmp	r3, #3
 800f1da:	68d0      	ldr	r0, [r2, #12]
 800f1dc:	68cf      	ldr	r7, [r1, #12]
 800f1de:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800f1e2:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800f1e6:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800f1ea:	f8d9 0000 	ldr.w	r0, [r9]
 800f1ee:	fb06 f807 	mul.w	r8, r6, r7
 800f1f2:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 800f1f6:	d044      	beq.n	800f282 <forward_dense+0xe2>
 800f1f8:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 800f1fa:	b11d      	cbz	r5, 800f204 <forward_dense+0x64>
 800f1fc:	682d      	ldr	r5, [r5, #0]
 800f1fe:	b10d      	cbz	r5, 800f204 <forward_dense+0x64>
 800f200:	69ab      	ldr	r3, [r5, #24]
 800f202:	689d      	ldr	r5, [r3, #8]
 800f204:	6992      	ldr	r2, [r2, #24]
 800f206:	698b      	ldr	r3, [r1, #24]
 800f208:	6890      	ldr	r0, [r2, #8]
 800f20a:	6899      	ldr	r1, [r3, #8]
 800f20c:	b10c      	cbz	r4, 800f212 <forward_dense+0x72>
 800f20e:	69a3      	ldr	r3, [r4, #24]
 800f210:	689c      	ldr	r4, [r3, #8]
 800f212:	4b20      	ldr	r3, [pc, #128]	@ (800f294 <forward_dense+0xf4>)
 800f214:	459c      	cmp	ip, r3
 800f216:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800f21a:	d023      	beq.n	800f264 <forward_dense+0xc4>
 800f21c:	4e1e      	ldr	r6, [pc, #120]	@ (800f298 <forward_dense+0xf8>)
 800f21e:	45b4      	cmp	ip, r6
 800f220:	d015      	beq.n	800f24e <forward_dense+0xae>
 800f222:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 800f226:	459c      	cmp	ip, r3
 800f228:	d004      	beq.n	800f234 <forward_dense+0x94>
 800f22a:	b00e      	add	sp, #56	@ 0x38
 800f22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	deff      	udf	#255	@ 0xff
 800f234:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800f238:	a807      	add	r0, sp, #28
 800f23a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f23c:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 800f240:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 800f244:	f000 fe66 	bl	800ff14 <forward_lite_dense_if32of32wf32>
 800f248:	b00e      	add	sp, #56	@ 0x38
 800f24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f24e:	464b      	mov	r3, r9
 800f250:	9500      	str	r5, [sp, #0]
 800f252:	e9cd e803 	strd	lr, r8, [sp, #12]
 800f256:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800f25a:	f000 ffb9 	bl	80101d0 <forward_lite_dense_if32of32wf32_lut4>
 800f25e:	b00e      	add	sp, #56	@ 0x38
 800f260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f264:	464b      	mov	r3, r9
 800f266:	9500      	str	r5, [sp, #0]
 800f268:	e9cd e803 	strd	lr, r8, [sp, #12]
 800f26c:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800f270:	f001 f8d8 	bl	8010424 <forward_lite_dense_if32of32wf32_lut8>
 800f274:	b00e      	add	sp, #56	@ 0x38
 800f276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f27a:	4620      	mov	r0, r4
 800f27c:	e7aa      	b.n	800f1d4 <forward_dense+0x34>
 800f27e:	2400      	movs	r4, #0
 800f280:	e7a8      	b.n	800f1d4 <forward_dense+0x34>
 800f282:	2300      	movs	r3, #0
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	deff      	udf	#255	@ 0xff
 800f288:	2300      	movs	r3, #0
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	deff      	udf	#255	@ 0xff
 800f28e:	2300      	movs	r3, #0
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	deff      	udf	#255	@ 0xff
 800f294:	01d01040 	.word	0x01d01040
 800f298:	01e81040 	.word	0x01e81040

0800f29c <forward_transpose>:
 800f29c:	6983      	ldr	r3, [r0, #24]
 800f29e:	881a      	ldrh	r2, [r3, #0]
 800f2a0:	2a00      	cmp	r2, #0
 800f2a2:	d035      	beq.n	800f310 <forward_transpose+0x74>
 800f2a4:	6859      	ldr	r1, [r3, #4]
 800f2a6:	684b      	ldr	r3, [r1, #4]
 800f2a8:	b103      	cbz	r3, 800f2ac <forward_transpose+0x10>
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2a01      	cmp	r2, #1
 800f2ae:	f000 80a3 	beq.w	800f3f8 <forward_transpose+0x15c>
 800f2b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2b6:	690c      	ldr	r4, [r1, #16]
 800f2b8:	b08b      	sub	sp, #44	@ 0x2c
 800f2ba:	b104      	cbz	r4, 800f2be <forward_transpose+0x22>
 800f2bc:	6824      	ldr	r4, [r4, #0]
 800f2be:	6a05      	ldr	r5, [r0, #32]
 800f2c0:	e9d3 6204 	ldrd	r6, r2, [r3, #16]
 800f2c4:	6869      	ldr	r1, [r5, #4]
 800f2c6:	f5b6 6fa0 	cmp.w	r6, #1280	@ 0x500
 800f2ca:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800f2ce:	9100      	str	r1, [sp, #0]
 800f2d0:	68a9      	ldr	r1, [r5, #8]
 800f2d2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800f2d6:	9106      	str	r1, [sp, #24]
 800f2d8:	68e9      	ldr	r1, [r5, #12]
 800f2da:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800f2de:	9107      	str	r1, [sp, #28]
 800f2e0:	d318      	bcc.n	800f314 <forward_transpose+0x78>
 800f2e2:	69c1      	ldr	r1, [r0, #28]
 800f2e4:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 800f2e8:	f0c0 8082 	bcc.w	800f3f0 <forward_transpose+0x154>
 800f2ec:	6929      	ldr	r1, [r5, #16]
 800f2ee:	0089      	lsls	r1, r1, #2
 800f2f0:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 800f2f4:	5851      	ldr	r1, [r2, r1]
 800f2f6:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 800f2fa:	9103      	str	r1, [sp, #12]
 800f2fc:	d111      	bne.n	800f322 <forward_transpose+0x86>
 800f2fe:	69c1      	ldr	r1, [r0, #28]
 800f300:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 800f304:	d376      	bcc.n	800f3f4 <forward_transpose+0x158>
 800f306:	6969      	ldr	r1, [r5, #20]
 800f308:	0089      	lsls	r1, r1, #2
 800f30a:	5852      	ldr	r2, [r2, r1]
 800f30c:	9204      	str	r2, [sp, #16]
 800f30e:	e00a      	b.n	800f326 <forward_transpose+0x8a>
 800f310:	6853      	ldr	r3, [r2, #4]
 800f312:	deff      	udf	#255	@ 0xff
 800f314:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 800f318:	2100      	movs	r1, #0
 800f31a:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 800f31e:	9103      	str	r1, [sp, #12]
 800f320:	d0ed      	beq.n	800f2fe <forward_transpose+0x62>
 800f322:	2200      	movs	r2, #0
 800f324:	9204      	str	r2, [sp, #16]
 800f326:	699b      	ldr	r3, [r3, #24]
 800f328:	69a2      	ldr	r2, [r4, #24]
 800f32a:	68e1      	ldr	r1, [r4, #12]
 800f32c:	6896      	ldr	r6, [r2, #8]
 800f32e:	681a      	ldr	r2, [r3, #0]
 800f330:	689b      	ldr	r3, [r3, #8]
 800f332:	f3c2 2283 	ubfx	r2, r2, #10, #4
 800f336:	9301      	str	r3, [sp, #4]
 800f338:	68cb      	ldr	r3, [r1, #12]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d055      	beq.n	800f3ea <forward_transpose+0x14e>
 800f33e:	2300      	movs	r3, #0
 800f340:	6888      	ldr	r0, [r1, #8]
 800f342:	9302      	str	r3, [sp, #8]
 800f344:	2800      	cmp	r0, #0
 800f346:	d050      	beq.n	800f3ea <forward_transpose+0x14e>
 800f348:	68a5      	ldr	r5, [r4, #8]
 800f34a:	2000      	movs	r0, #0
 800f34c:	4692      	mov	sl, r2
 800f34e:	9308      	str	r3, [sp, #32]
 800f350:	f3c5 2517 	ubfx	r5, r5, #8, #24
 800f354:	9005      	str	r0, [sp, #20]
 800f356:	469b      	mov	fp, r3
 800f358:	f04f 0800 	mov.w	r8, #0
 800f35c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f35e:	2d04      	cmp	r5, #4
 800f360:	bf8c      	ite	hi
 800f362:	690b      	ldrhi	r3, [r1, #16]
 800f364:	2301      	movls	r3, #1
 800f366:	4598      	cmp	r8, r3
 800f368:	d229      	bcs.n	800f3be <forward_transpose+0x122>
 800f36a:	2d05      	cmp	r5, #5
 800f36c:	46d9      	mov	r9, fp
 800f36e:	f04f 0700 	mov.w	r7, #0
 800f372:	d91d      	bls.n	800f3b0 <forward_transpose+0x114>
 800f374:	694a      	ldr	r2, [r1, #20]
 800f376:	4297      	cmp	r7, r2
 800f378:	d21c      	bcs.n	800f3b4 <forward_transpose+0x118>
 800f37a:	684a      	ldr	r2, [r1, #4]
 800f37c:	b192      	cbz	r2, 800f3a4 <forward_transpose+0x108>
 800f37e:	2500      	movs	r5, #0
 800f380:	9b00      	ldr	r3, [sp, #0]
 800f382:	4631      	mov	r1, r6
 800f384:	4652      	mov	r2, sl
 800f386:	4456      	add	r6, sl
 800f388:	fb03 9005 	mla	r0, r3, r5, r9
 800f38c:	9b01      	ldr	r3, [sp, #4]
 800f38e:	3501      	adds	r5, #1
 800f390:	4418      	add	r0, r3
 800f392:	f001 faf7 	bl	8010984 <st_int8_copy>
 800f396:	68e1      	ldr	r1, [r4, #12]
 800f398:	684b      	ldr	r3, [r1, #4]
 800f39a:	429d      	cmp	r5, r3
 800f39c:	d3f0      	bcc.n	800f380 <forward_transpose+0xe4>
 800f39e:	68a3      	ldr	r3, [r4, #8]
 800f3a0:	f3c3 2517 	ubfx	r5, r3, #8, #24
 800f3a4:	9b04      	ldr	r3, [sp, #16]
 800f3a6:	2d05      	cmp	r5, #5
 800f3a8:	f107 0701 	add.w	r7, r7, #1
 800f3ac:	4499      	add	r9, r3
 800f3ae:	d8e1      	bhi.n	800f374 <forward_transpose+0xd8>
 800f3b0:	2f00      	cmp	r7, #0
 800f3b2:	d0e2      	beq.n	800f37a <forward_transpose+0xde>
 800f3b4:	9b03      	ldr	r3, [sp, #12]
 800f3b6:	f108 0801 	add.w	r8, r8, #1
 800f3ba:	449b      	add	fp, r3
 800f3bc:	e7cf      	b.n	800f35e <forward_transpose+0xc2>
 800f3be:	9a05      	ldr	r2, [sp, #20]
 800f3c0:	9806      	ldr	r0, [sp, #24]
 800f3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3c4:	3201      	adds	r2, #1
 800f3c6:	4403      	add	r3, r0
 800f3c8:	6888      	ldr	r0, [r1, #8]
 800f3ca:	9205      	str	r2, [sp, #20]
 800f3cc:	4282      	cmp	r2, r0
 800f3ce:	d3c2      	bcc.n	800f356 <forward_transpose+0xba>
 800f3d0:	9d02      	ldr	r5, [sp, #8]
 800f3d2:	4652      	mov	r2, sl
 800f3d4:	9b08      	ldr	r3, [sp, #32]
 800f3d6:	3501      	adds	r5, #1
 800f3d8:	462f      	mov	r7, r5
 800f3da:	9502      	str	r5, [sp, #8]
 800f3dc:	68cd      	ldr	r5, [r1, #12]
 800f3de:	42af      	cmp	r7, r5
 800f3e0:	d203      	bcs.n	800f3ea <forward_transpose+0x14e>
 800f3e2:	9d07      	ldr	r5, [sp, #28]
 800f3e4:	442b      	add	r3, r5
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	d1ae      	bne.n	800f348 <forward_transpose+0xac>
 800f3ea:	b00b      	add	sp, #44	@ 0x2c
 800f3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f0:	2104      	movs	r1, #4
 800f3f2:	e77d      	b.n	800f2f0 <forward_transpose+0x54>
 800f3f4:	2104      	movs	r1, #4
 800f3f6:	e788      	b.n	800f30a <forward_transpose+0x6e>
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	deff      	udf	#255	@ 0xff
 800f3fe:	bf00      	nop

0800f400 <forward_relu>:
 800f400:	6982      	ldr	r2, [r0, #24]
 800f402:	8813      	ldrh	r3, [r2, #0]
 800f404:	b323      	cbz	r3, 800f450 <forward_relu+0x50>
 800f406:	6851      	ldr	r1, [r2, #4]
 800f408:	684a      	ldr	r2, [r1, #4]
 800f40a:	b102      	cbz	r2, 800f40e <forward_relu+0xe>
 800f40c:	6812      	ldr	r2, [r2, #0]
 800f40e:	2b01      	cmp	r3, #1
 800f410:	f000 8086 	beq.w	800f520 <forward_relu+0x120>
 800f414:	b470      	push	{r4, r5, r6}
 800f416:	690b      	ldr	r3, [r1, #16]
 800f418:	b103      	cbz	r3, 800f41c <forward_relu+0x1c>
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	69c6      	ldr	r6, [r0, #28]
 800f41e:	b1ce      	cbz	r6, 800f454 <forward_relu+0x54>
 800f420:	6871      	ldr	r1, [r6, #4]
 800f422:	6998      	ldr	r0, [r3, #24]
 800f424:	2901      	cmp	r1, #1
 800f426:	d03f      	beq.n	800f4a8 <forward_relu+0xa8>
 800f428:	6893      	ldr	r3, [r2, #8]
 800f42a:	6991      	ldr	r1, [r2, #24]
 800f42c:	0a1b      	lsrs	r3, r3, #8
 800f42e:	6880      	ldr	r0, [r0, #8]
 800f430:	6889      	ldr	r1, [r1, #8]
 800f432:	d06c      	beq.n	800f50e <forward_relu+0x10e>
 800f434:	68d5      	ldr	r5, [r2, #12]
 800f436:	2201      	movs	r2, #1
 800f438:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f43c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800f440:	429d      	cmp	r5, r3
 800f442:	fb04 f202 	mul.w	r2, r4, r2
 800f446:	d1f9      	bne.n	800f43c <forward_relu+0x3c>
 800f448:	68b3      	ldr	r3, [r6, #8]
 800f44a:	bc70      	pop	{r4, r5, r6}
 800f44c:	f000 bc84 	b.w	800fd58 <forward_lite_nl_relu_generic_if32of32_kernel>
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	deff      	udf	#255	@ 0xff
 800f454:	6999      	ldr	r1, [r3, #24]
 800f456:	6893      	ldr	r3, [r2, #8]
 800f458:	6990      	ldr	r0, [r2, #24]
 800f45a:	0a1b      	lsrs	r3, r3, #8
 800f45c:	6889      	ldr	r1, [r1, #8]
 800f45e:	6884      	ldr	r4, [r0, #8]
 800f460:	d057      	beq.n	800f512 <forward_relu+0x112>
 800f462:	68d5      	ldr	r5, [r2, #12]
 800f464:	2201      	movs	r2, #1
 800f466:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f46a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800f46e:	429d      	cmp	r5, r3
 800f470:	fb00 f202 	mul.w	r2, r0, r2
 800f474:	d1f9      	bne.n	800f46a <forward_relu+0x6a>
 800f476:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f47a:	4413      	add	r3, r2
 800f47c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800f480:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800f484:	4294      	cmp	r4, r2
 800f486:	d80d      	bhi.n	800f4a4 <forward_relu+0xa4>
 800f488:	3204      	adds	r2, #4
 800f48a:	3104      	adds	r1, #4
 800f48c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800f528 <forward_relu+0x128>
 800f490:	4613      	mov	r3, r2
 800f492:	ed72 7a01 	vldmdb	r2!, {s15}
 800f496:	3b08      	subs	r3, #8
 800f498:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800f49c:	ed61 7a01 	vstmdb	r1!, {s15}
 800f4a0:	429c      	cmp	r4, r3
 800f4a2:	d9f5      	bls.n	800f490 <forward_relu+0x90>
 800f4a4:	bc70      	pop	{r4, r5, r6}
 800f4a6:	4770      	bx	lr
 800f4a8:	6993      	ldr	r3, [r2, #24]
 800f4aa:	6880      	ldr	r0, [r0, #8]
 800f4ac:	689c      	ldr	r4, [r3, #8]
 800f4ae:	6893      	ldr	r3, [r2, #8]
 800f4b0:	0a1b      	lsrs	r3, r3, #8
 800f4b2:	d030      	beq.n	800f516 <forward_relu+0x116>
 800f4b4:	68d5      	ldr	r5, [r2, #12]
 800f4b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f4ba:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f4be:	429d      	cmp	r5, r3
 800f4c0:	fb02 f101 	mul.w	r1, r2, r1
 800f4c4:	d1f9      	bne.n	800f4ba <forward_relu+0xba>
 800f4c6:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 800f4ca:	68b3      	ldr	r3, [r6, #8]
 800f4cc:	440a      	add	r2, r1
 800f4ce:	ed93 7a00 	vldr	s14, [r3]
 800f4d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f4d6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800f4da:	429c      	cmp	r4, r3
 800f4dc:	d8e2      	bhi.n	800f4a4 <forward_relu+0xa4>
 800f4de:	1d02      	adds	r2, r0, #4
 800f4e0:	3304      	adds	r3, #4
 800f4e2:	2000      	movs	r0, #0
 800f4e4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f4e8:	1f19      	subs	r1, r3, #4
 800f4ea:	3b08      	subs	r3, #8
 800f4ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f4:	d405      	bmi.n	800f502 <forward_relu+0x102>
 800f4f6:	429c      	cmp	r4, r3
 800f4f8:	f842 0d04 	str.w	r0, [r2, #-4]!
 800f4fc:	d8d2      	bhi.n	800f4a4 <forward_relu+0xa4>
 800f4fe:	460b      	mov	r3, r1
 800f500:	e7f0      	b.n	800f4e4 <forward_relu+0xe4>
 800f502:	429c      	cmp	r4, r3
 800f504:	ed62 7a01 	vstmdb	r2!, {s15}
 800f508:	d8cc      	bhi.n	800f4a4 <forward_relu+0xa4>
 800f50a:	460b      	mov	r3, r1
 800f50c:	e7ea      	b.n	800f4e4 <forward_relu+0xe4>
 800f50e:	2201      	movs	r2, #1
 800f510:	e79a      	b.n	800f448 <forward_relu+0x48>
 800f512:	4622      	mov	r2, r4
 800f514:	e7b8      	b.n	800f488 <forward_relu+0x88>
 800f516:	68b2      	ldr	r2, [r6, #8]
 800f518:	4623      	mov	r3, r4
 800f51a:	ed92 7a00 	vldr	s14, [r2]
 800f51e:	e7de      	b.n	800f4de <forward_relu+0xde>
 800f520:	2300      	movs	r3, #0
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	deff      	udf	#255	@ 0xff
 800f526:	bf00      	nop
 800f528:	00000000 	.word	0x00000000

0800f52c <forward_sm>:
 800f52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f530:	6982      	ldr	r2, [r0, #24]
 800f532:	8813      	ldrh	r3, [r2, #0]
 800f534:	b383      	cbz	r3, 800f598 <forward_sm+0x6c>
 800f536:	6852      	ldr	r2, [r2, #4]
 800f538:	6855      	ldr	r5, [r2, #4]
 800f53a:	b105      	cbz	r5, 800f53e <forward_sm+0x12>
 800f53c:	682d      	ldr	r5, [r5, #0]
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d029      	beq.n	800f596 <forward_sm+0x6a>
 800f542:	6913      	ldr	r3, [r2, #16]
 800f544:	b363      	cbz	r3, 800f5a0 <forward_sm+0x74>
 800f546:	681e      	ldr	r6, [r3, #0]
 800f548:	68a9      	ldr	r1, [r5, #8]
 800f54a:	68ec      	ldr	r4, [r5, #12]
 800f54c:	68f3      	ldr	r3, [r6, #12]
 800f54e:	0a09      	lsrs	r1, r1, #8
 800f550:	6867      	ldr	r7, [r4, #4]
 800f552:	685a      	ldr	r2, [r3, #4]
 800f554:	d022      	beq.n	800f59c <forward_sm+0x70>
 800f556:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f55a:	2301      	movs	r3, #1
 800f55c:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 800f560:	428c      	cmp	r4, r1
 800f562:	fb00 f303 	mul.w	r3, r0, r3
 800f566:	d1f9      	bne.n	800f55c <forward_sm+0x30>
 800f568:	009b      	lsls	r3, r3, #2
 800f56a:	69a8      	ldr	r0, [r5, #24]
 800f56c:	69b1      	ldr	r1, [r6, #24]
 800f56e:	6884      	ldr	r4, [r0, #8]
 800f570:	688e      	ldr	r6, [r1, #8]
 800f572:	18e5      	adds	r5, r4, r3
 800f574:	42ac      	cmp	r4, r5
 800f576:	d20c      	bcs.n	800f592 <forward_sm+0x66>
 800f578:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800f57c:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800f580:	4621      	mov	r1, r4
 800f582:	444c      	add	r4, r9
 800f584:	4630      	mov	r0, r6
 800f586:	463a      	mov	r2, r7
 800f588:	f000 fba2 	bl	800fcd0 <forward_lite_nl_softmax_if32of32_kernel>
 800f58c:	42a5      	cmp	r5, r4
 800f58e:	4446      	add	r6, r8
 800f590:	d8f6      	bhi.n	800f580 <forward_sm+0x54>
 800f592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f596:	2300      	movs	r3, #0
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	deff      	udf	#255	@ 0xff
 800f59c:	2304      	movs	r3, #4
 800f59e:	e7e4      	b.n	800f56a <forward_sm+0x3e>
 800f5a0:	68db      	ldr	r3, [r3, #12]
 800f5a2:	deff      	udf	#255	@ 0xff

0800f5a4 <forward_mp>:
 800f5a4:	6983      	ldr	r3, [r0, #24]
 800f5a6:	881a      	ldrh	r2, [r3, #0]
 800f5a8:	2a00      	cmp	r2, #0
 800f5aa:	f000 80bb 	beq.w	800f724 <forward_mp+0x180>
 800f5ae:	6859      	ldr	r1, [r3, #4]
 800f5b0:	684b      	ldr	r3, [r1, #4]
 800f5b2:	b103      	cbz	r3, 800f5b6 <forward_mp+0x12>
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	2a01      	cmp	r2, #1
 800f5b8:	f000 80b9 	beq.w	800f72e <forward_mp+0x18a>
 800f5bc:	690a      	ldr	r2, [r1, #16]
 800f5be:	2a00      	cmp	r2, #0
 800f5c0:	f000 80b8 	beq.w	800f734 <forward_mp+0x190>
 800f5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c8:	6811      	ldr	r1, [r2, #0]
 800f5ca:	b093      	sub	sp, #76	@ 0x4c
 800f5cc:	68ca      	ldr	r2, [r1, #12]
 800f5ce:	6989      	ldr	r1, [r1, #24]
 800f5d0:	68d4      	ldr	r4, [r2, #12]
 800f5d2:	6895      	ldr	r5, [r2, #8]
 800f5d4:	688a      	ldr	r2, [r1, #8]
 800f5d6:	68d9      	ldr	r1, [r3, #12]
 800f5d8:	699b      	ldr	r3, [r3, #24]
 800f5da:	9200      	str	r2, [sp, #0]
 800f5dc:	689b      	ldr	r3, [r3, #8]
 800f5de:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800f5e0:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800f5e4:	930e      	str	r3, [sp, #56]	@ 0x38
 800f5e6:	9408      	str	r4, [sp, #32]
 800f5e8:	9504      	str	r5, [sp, #16]
 800f5ea:	e9d2 3600 	ldrd	r3, r6, [r2]
 800f5ee:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 800f5f2:	69c1      	ldr	r1, [r0, #28]
 800f5f4:	f1c3 0a00 	rsb	sl, r3, #0
 800f5f8:	960d      	str	r6, [sp, #52]	@ 0x34
 800f5fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800f5fc:	6a01      	ldr	r1, [r0, #32]
 800f5fe:	9705      	str	r7, [sp, #20]
 800f600:	910a      	str	r1, [sp, #40]	@ 0x28
 800f602:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800f604:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f606:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f608:	910c      	str	r1, [sp, #48]	@ 0x30
 800f60a:	2c00      	cmp	r4, #0
 800f60c:	f000 8087 	beq.w	800f71e <forward_mp+0x17a>
 800f610:	441a      	add	r2, r3
 800f612:	9b05      	ldr	r3, [sp, #20]
 800f614:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800f618:	f04f 0b00 	mov.w	fp, #0
 800f61c:	fb09 f303 	mul.w	r3, r9, r3
 800f620:	9201      	str	r2, [sp, #4]
 800f622:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800f626:	4273      	negs	r3, r6
 800f628:	9310      	str	r3, [sp, #64]	@ 0x40
 800f62a:	fb05 f307 	mul.w	r3, r5, r7
 800f62e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f630:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f632:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800f636:	9901      	ldr	r1, [sp, #4]
 800f638:	9307      	str	r3, [sp, #28]
 800f63a:	428a      	cmp	r2, r1
 800f63c:	bf94      	ite	ls
 800f63e:	eb0a 0e02 	addls.w	lr, sl, r2
 800f642:	eb0a 0e01 	addhi.w	lr, sl, r1
 800f646:	9a04      	ldr	r2, [sp, #16]
 800f648:	2a00      	cmp	r2, #0
 800f64a:	d05e      	beq.n	800f70a <forward_mp+0x166>
 800f64c:	9a05      	ldr	r2, [sp, #20]
 800f64e:	9d00      	ldr	r5, [sp, #0]
 800f650:	fb02 f303 	mul.w	r3, r2, r3
 800f654:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 800f658:	9303      	str	r3, [sp, #12]
 800f65a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f65c:	18d3      	adds	r3, r2, r3
 800f65e:	2200      	movs	r2, #0
 800f660:	9302      	str	r3, [sp, #8]
 800f662:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f664:	9206      	str	r2, [sp, #24]
 800f666:	2b00      	cmp	r3, #0
 800f668:	469b      	mov	fp, r3
 800f66a:	db5d      	blt.n	800f728 <forward_mp+0x184>
 800f66c:	9a03      	ldr	r2, [sp, #12]
 800f66e:	18d6      	adds	r6, r2, r3
 800f670:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f672:	9902      	ldr	r1, [sp, #8]
 800f674:	fb06 2607 	mla	r6, r6, r7, r2
 800f678:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f67a:	428a      	cmp	r2, r1
 800f67c:	bf94      	ite	ls
 800f67e:	445a      	addls	r2, fp
 800f680:	eb0b 0201 	addhi.w	r2, fp, r1
 800f684:	1ad4      	subs	r4, r2, r3
 800f686:	f1b9 0f00 	cmp.w	r9, #0
 800f68a:	d008      	beq.n	800f69e <forward_mp+0xfa>
 800f68c:	4633      	mov	r3, r6
 800f68e:	462a      	mov	r2, r5
 800f690:	19b9      	adds	r1, r7, r6
 800f692:	f853 0b04 	ldr.w	r0, [r3], #4
 800f696:	4299      	cmp	r1, r3
 800f698:	f842 0b04 	str.w	r0, [r2], #4
 800f69c:	d1f9      	bne.n	800f692 <forward_mp+0xee>
 800f69e:	9b07      	ldr	r3, [sp, #28]
 800f6a0:	459e      	cmp	lr, r3
 800f6a2:	dd1f      	ble.n	800f6e4 <forward_mp+0x140>
 800f6a4:	469c      	mov	ip, r3
 800f6a6:	fb07 6404 	mla	r4, r7, r4, r6
 800f6aa:	42a6      	cmp	r6, r4
 800f6ac:	d214      	bcs.n	800f6d8 <forward_mp+0x134>
 800f6ae:	f1b9 0f00 	cmp.w	r9, #0
 800f6b2:	d011      	beq.n	800f6d8 <forward_mp+0x134>
 800f6b4:	19f1      	adds	r1, r6, r7
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	4602      	mov	r2, r0
 800f6ba:	462b      	mov	r3, r5
 800f6bc:	ecf2 7a01 	vldmia	r2!, {s15}
 800f6c0:	ed93 7a00 	vldr	s14, [r3]
 800f6c4:	428a      	cmp	r2, r1
 800f6c6:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800f6ca:	ece3 7a01 	vstmia	r3!, {s15}
 800f6ce:	d1f5      	bne.n	800f6bc <forward_mp+0x118>
 800f6d0:	4438      	add	r0, r7
 800f6d2:	4439      	add	r1, r7
 800f6d4:	42a0      	cmp	r0, r4
 800f6d6:	d3ef      	bcc.n	800f6b8 <forward_mp+0x114>
 800f6d8:	f10c 0c01 	add.w	ip, ip, #1
 800f6dc:	4446      	add	r6, r8
 800f6de:	4444      	add	r4, r8
 800f6e0:	45e6      	cmp	lr, ip
 800f6e2:	d1e2      	bne.n	800f6aa <forward_mp+0x106>
 800f6e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f6e6:	443d      	add	r5, r7
 800f6e8:	9802      	ldr	r0, [sp, #8]
 800f6ea:	9a06      	ldr	r2, [sp, #24]
 800f6ec:	eb01 030b 	add.w	r3, r1, fp
 800f6f0:	1a41      	subs	r1, r0, r1
 800f6f2:	3201      	adds	r2, #1
 800f6f4:	9102      	str	r1, [sp, #8]
 800f6f6:	9904      	ldr	r1, [sp, #16]
 800f6f8:	9206      	str	r2, [sp, #24]
 800f6fa:	4291      	cmp	r1, r2
 800f6fc:	d1b3      	bne.n	800f666 <forward_mp+0xc2>
 800f6fe:	9b00      	ldr	r3, [sp, #0]
 800f700:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f702:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800f706:	4413      	add	r3, r2
 800f708:	9300      	str	r3, [sp, #0]
 800f70a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f70c:	f10b 0b01 	add.w	fp, fp, #1
 800f710:	9a01      	ldr	r2, [sp, #4]
 800f712:	449a      	add	sl, r3
 800f714:	1ad3      	subs	r3, r2, r3
 800f716:	9301      	str	r3, [sp, #4]
 800f718:	9b08      	ldr	r3, [sp, #32]
 800f71a:	455b      	cmp	r3, fp
 800f71c:	d188      	bne.n	800f630 <forward_mp+0x8c>
 800f71e:	b013      	add	sp, #76	@ 0x4c
 800f720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f724:	6853      	ldr	r3, [r2, #4]
 800f726:	deff      	udf	#255	@ 0xff
 800f728:	9e03      	ldr	r6, [sp, #12]
 800f72a:	2300      	movs	r3, #0
 800f72c:	e7a0      	b.n	800f670 <forward_mp+0xcc>
 800f72e:	2300      	movs	r3, #0
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	deff      	udf	#255	@ 0xff
 800f734:	68d3      	ldr	r3, [r2, #12]
 800f736:	deff      	udf	#255	@ 0xff

0800f738 <forward_lite_conv2d_if32of32wf32>:
 800f738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f73c:	ed2d 8b0e 	vpush	{d8-d14}
 800f740:	b0a1      	sub	sp, #132	@ 0x84
 800f742:	4686      	mov	lr, r0
 800f744:	4694      	mov	ip, r2
 800f746:	910c      	str	r1, [sp, #48]	@ 0x30
 800f748:	f8bd 1108 	ldrh.w	r1, [sp, #264]	@ 0x108
 800f74c:	f8bd 4104 	ldrh.w	r4, [sp, #260]	@ 0x104
 800f750:	f8bd 510c 	ldrh.w	r5, [sp, #268]	@ 0x10c
 800f754:	424f      	negs	r7, r1
 800f756:	f8bd 6110 	ldrh.w	r6, [sp, #272]	@ 0x110
 800f75a:	901e      	str	r0, [sp, #120]	@ 0x78
 800f75c:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 800f75e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f760:	930e      	str	r3, [sp, #56]	@ 0x38
 800f762:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 800f764:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 800f766:	9418      	str	r4, [sp, #96]	@ 0x60
 800f768:	9508      	str	r5, [sp, #32]
 800f76a:	961f      	str	r6, [sp, #124]	@ 0x7c
 800f76c:	9711      	str	r7, [sp, #68]	@ 0x44
 800f76e:	2800      	cmp	r0, #0
 800f770:	f000 8175 	beq.w	800fa5e <forward_lite_conv2d_if32of32wf32+0x326>
 800f774:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 800f776:	910d      	str	r1, [sp, #52]	@ 0x34
 800f778:	fb00 f303 	mul.w	r3, r0, r3
 800f77c:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 800f77e:	ed9f 8abe 	vldr	s16, [pc, #760]	@ 800fa78 <forward_lite_conv2d_if32of32wf32+0x340>
 800f782:	fb01 f303 	mul.w	r3, r1, r3
 800f786:	009b      	lsls	r3, r3, #2
 800f788:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f78a:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 800f78c:	fb01 f303 	mul.w	r3, r1, r3
 800f790:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800f792:	fb01 f102 	mul.w	r1, r1, r2
 800f796:	0092      	lsls	r2, r2, #2
 800f798:	9205      	str	r2, [sp, #20]
 800f79a:	0089      	lsls	r1, r1, #2
 800f79c:	fb06 f203 	mul.w	r2, r6, r3
 800f7a0:	fb07 f303 	mul.w	r3, r7, r3
 800f7a4:	911a      	str	r1, [sp, #104]	@ 0x68
 800f7a6:	4261      	negs	r1, r4
 800f7a8:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 800f7ac:	0094      	lsls	r4, r2, #2
 800f7ae:	f10c 4278 	add.w	r2, ip, #4160749568	@ 0xf8000000
 800f7b2:	9312      	str	r3, [sp, #72]	@ 0x48
 800f7b4:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800f7b6:	9219      	str	r2, [sp, #100]	@ 0x64
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	fb05 f303 	mul.w	r3, r5, r3
 800f7be:	9115      	str	r1, [sp, #84]	@ 0x54
 800f7c0:	009b      	lsls	r3, r3, #2
 800f7c2:	941c      	str	r4, [sp, #112]	@ 0x70
 800f7c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800f7c6:	9306      	str	r3, [sp, #24]
 800f7c8:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	9307      	str	r3, [sp, #28]
 800f7ce:	fb03 f301 	mul.w	r3, r3, r1
 800f7d2:	9316      	str	r3, [sp, #88]	@ 0x58
 800f7d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	f2c0 8275 	blt.w	800fcc6 <forward_lite_conv2d_if32of32wf32+0x58e>
 800f7dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f7de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f7e4:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 800f7e6:	440a      	add	r2, r1
 800f7e8:	9945      	ldr	r1, [sp, #276]	@ 0x114
 800f7ea:	428a      	cmp	r2, r1
 800f7ec:	bf94      	ite	ls
 800f7ee:	ebc3 0b02 	rsbls	fp, r3, r2
 800f7f2:	ebc3 0b01 	rsbhi	fp, r3, r1
 800f7f6:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 800f7f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f7fa:	2a00      	cmp	r2, #0
 800f7fc:	f000 8144 	beq.w	800fa88 <forward_lite_conv2d_if32of32wf32+0x350>
 800f800:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f802:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800f806:	f0c0 813f 	bcc.w	800fa88 <forward_lite_conv2d_if32of32wf32+0x350>
 800f80a:	9a05      	ldr	r2, [sp, #20]
 800f80c:	188a      	adds	r2, r1, r2
 800f80e:	4291      	cmp	r1, r2
 800f810:	921b      	str	r2, [sp, #108]	@ 0x6c
 800f812:	f080 810e 	bcs.w	800fa32 <forward_lite_conv2d_if32of32wf32+0x2fa>
 800f816:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800f818:	fb02 f303 	mul.w	r3, r2, r3
 800f81c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f81e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f820:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f822:	4413      	add	r3, r2
 800f824:	931d      	str	r3, [sp, #116]	@ 0x74
 800f826:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f828:	9310      	str	r3, [sp, #64]	@ 0x40
 800f82a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f82c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f82e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f830:	930a      	str	r3, [sp, #40]	@ 0x28
 800f832:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f834:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 800f836:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f838:	f001 f8a4 	bl	8010984 <st_int8_copy>
 800f83c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f83e:	2b00      	cmp	r3, #0
 800f840:	f000 811f 	beq.w	800fa82 <forward_lite_conv2d_if32of32wf32+0x34a>
 800f844:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f846:	ecf3 1a01 	vldmia	r3!, {s3}
 800f84a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f84c:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800f84e:	2b00      	cmp	r3, #0
 800f850:	f000 80e4 	beq.w	800fa1c <forward_lite_conv2d_if32of32wf32+0x2e4>
 800f854:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f856:	9300      	str	r3, [sp, #0]
 800f858:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f85a:	9302      	str	r3, [sp, #8]
 800f85c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f85e:	9303      	str	r3, [sp, #12]
 800f860:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f862:	9301      	str	r3, [sp, #4]
 800f864:	2300      	movs	r3, #0
 800f866:	9304      	str	r3, [sp, #16]
 800f868:	9b01      	ldr	r3, [sp, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	f2c0 80fe 	blt.w	800fa6c <forward_lite_conv2d_if32of32wf32+0x334>
 800f870:	9902      	ldr	r1, [sp, #8]
 800f872:	2600      	movs	r6, #0
 800f874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f876:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800f878:	9807      	ldr	r0, [sp, #28]
 800f87a:	9c00      	ldr	r4, [sp, #0]
 800f87c:	fb00 3202 	mla	r2, r0, r2, r3
 800f880:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 800f882:	4423      	add	r3, r4
 800f884:	9c3f      	ldr	r4, [sp, #252]	@ 0xfc
 800f886:	42a3      	cmp	r3, r4
 800f888:	bf94      	ite	ls
 800f88a:	ebc6 0603 	rsbls	r6, r6, r3
 800f88e:	ebc6 0604 	rsbhi	r6, r6, r4
 800f892:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 800f894:	f1bb 0f00 	cmp.w	fp, #0
 800f898:	eba3 0a06 	sub.w	sl, r3, r6
 800f89c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800f89e:	eba4 0906 	sub.w	r9, r4, r6
 800f8a2:	fb03 f606 	mul.w	r6, r3, r6
 800f8a6:	f340 80e9 	ble.w	800fa7c <forward_lite_conv2d_if32of32wf32+0x344>
 800f8aa:	f026 070f 	bic.w	r7, r6, #15
 800f8ae:	eeb0 7a61 	vmov.f32	s14, s3
 800f8b2:	fb00 fa0a 	mul.w	sl, r0, sl
 800f8b6:	f04f 0c00 	mov.w	ip, #0
 800f8ba:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800f8be:	fb00 f909 	mul.w	r9, r0, r9
 800f8c2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800f8c6:	f108 0801 	add.w	r8, r8, #1
 800f8ca:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800f8ce:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800f8d2:	2f00      	cmp	r7, #0
 800f8d4:	f340 80c8 	ble.w	800fa68 <forward_lite_conv2d_if32of32wf32+0x330>
 800f8d8:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800f8dc:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800f8e0:	2400      	movs	r4, #0
 800f8e2:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 800f8e6:	3410      	adds	r4, #16
 800f8e8:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800f8ec:	3340      	adds	r3, #64	@ 0x40
 800f8ee:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 800f8f2:	42bc      	cmp	r4, r7
 800f8f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f8f8:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 800f8fc:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 800f900:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800f904:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 800f908:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f90c:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 800f910:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 800f914:	ed50 da1c 	vldr	s27, [r0, #-112]	@ 0xffffff90
 800f918:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 800f91c:	ed50 ca1b 	vldr	s25, [r0, #-108]	@ 0xffffff94
 800f920:	ed13 ca1b 	vldr	s24, [r3, #-108]	@ 0xffffff94
 800f924:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f928:	ed50 ba1a 	vldr	s23, [r0, #-104]	@ 0xffffff98
 800f92c:	ed13 ba1a 	vldr	s22, [r3, #-104]	@ 0xffffff98
 800f930:	ed50 aa19 	vldr	s21, [r0, #-100]	@ 0xffffff9c
 800f934:	ed13 aa19 	vldr	s20, [r3, #-100]	@ 0xffffff9c
 800f938:	ed50 9a18 	vldr	s19, [r0, #-96]	@ 0xffffffa0
 800f93c:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 800f940:	eeee 7a26 	vfma.f32	s15, s28, s13
 800f944:	ed50 8a17 	vldr	s17, [r0, #-92]	@ 0xffffffa4
 800f948:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 800f94c:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 800f950:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 800f954:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 800f958:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 800f95c:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800f960:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800f964:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800f968:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 800f96c:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800f970:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800f974:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800f978:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800f97c:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800f980:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800f984:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800f988:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800f98c:	eee9 7a89 	vfma.f32	s15, s19, s18
 800f990:	eee8 7a80 	vfma.f32	s15, s17, s0
 800f994:	eee0 7a81 	vfma.f32	s15, s1, s2
 800f998:	eee2 7a22 	vfma.f32	s15, s4, s5
 800f99c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f9a0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f9a4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f9a8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f9ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f9b0:	db97      	blt.n	800f8e2 <forward_lite_conv2d_if32of32wf32+0x1aa>
 800f9b2:	4471      	add	r1, lr
 800f9b4:	4472      	add	r2, lr
 800f9b6:	4640      	mov	r0, r8
 800f9b8:	4286      	cmp	r6, r0
 800f9ba:	dd10      	ble.n	800f9de <forward_lite_conv2d_if32of32wf32+0x2a6>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	460d      	mov	r5, r1
 800f9c0:	4614      	mov	r4, r2
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	ecf4 6a01 	vldmia	r4!, {s13}
 800f9c8:	ecf5 7a01 	vldmia	r5!, {s15}
 800f9cc:	429e      	cmp	r6, r3
 800f9ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f9d2:	d1f6      	bne.n	800f9c2 <forward_lite_conv2d_if32of32wf32+0x28a>
 800f9d4:	1a30      	subs	r0, r6, r0
 800f9d6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f9da:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f9de:	f10c 0c01 	add.w	ip, ip, #1
 800f9e2:	4451      	add	r1, sl
 800f9e4:	444a      	add	r2, r9
 800f9e6:	45e3      	cmp	fp, ip
 800f9e8:	f47f af73 	bne.w	800f8d2 <forward_lite_conv2d_if32of32wf32+0x19a>
 800f9ec:	9901      	ldr	r1, [sp, #4]
 800f9ee:	9808      	ldr	r0, [sp, #32]
 800f9f0:	9a03      	ldr	r2, [sp, #12]
 800f9f2:	4401      	add	r1, r0
 800f9f4:	9b04      	ldr	r3, [sp, #16]
 800f9f6:	ed82 7a00 	vstr	s14, [r2]
 800f9fa:	9101      	str	r1, [sp, #4]
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	9905      	ldr	r1, [sp, #20]
 800fa00:	9304      	str	r3, [sp, #16]
 800fa02:	440a      	add	r2, r1
 800fa04:	9906      	ldr	r1, [sp, #24]
 800fa06:	9203      	str	r2, [sp, #12]
 800fa08:	9a00      	ldr	r2, [sp, #0]
 800fa0a:	1a12      	subs	r2, r2, r0
 800fa0c:	9200      	str	r2, [sp, #0]
 800fa0e:	9a02      	ldr	r2, [sp, #8]
 800fa10:	440a      	add	r2, r1
 800fa12:	9202      	str	r2, [sp, #8]
 800fa14:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800fa16:	429a      	cmp	r2, r3
 800fa18:	f47f af26 	bne.w	800f868 <forward_lite_conv2d_if32of32wf32+0x130>
 800fa1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa1e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fa20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fa22:	440a      	add	r2, r1
 800fa24:	3304      	adds	r3, #4
 800fa26:	920a      	str	r2, [sp, #40]	@ 0x28
 800fa28:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fa2a:	9310      	str	r3, [sp, #64]	@ 0x40
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	f4ff af00 	bcc.w	800f832 <forward_lite_conv2d_if32of32wf32+0xfa>
 800fa32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fa34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fa36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fa38:	440a      	add	r2, r1
 800fa3a:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	920c      	str	r2, [sp, #48]	@ 0x30
 800fa40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fa42:	9314      	str	r3, [sp, #80]	@ 0x50
 800fa44:	440a      	add	r2, r1
 800fa46:	9211      	str	r2, [sp, #68]	@ 0x44
 800fa48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fa4a:	1a52      	subs	r2, r2, r1
 800fa4c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800fa4e:	920d      	str	r2, [sp, #52]	@ 0x34
 800fa50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fa52:	440a      	add	r2, r1
 800fa54:	9212      	str	r2, [sp, #72]	@ 0x48
 800fa56:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	f47f aebb 	bne.w	800f7d4 <forward_lite_conv2d_if32of32wf32+0x9c>
 800fa5e:	b021      	add	sp, #132	@ 0x84
 800fa60:	ecbd 8b0e 	vpop	{d8-d14}
 800fa64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa68:	2000      	movs	r0, #0
 800fa6a:	e7a5      	b.n	800f9b8 <forward_lite_conv2d_if32of32wf32+0x280>
 800fa6c:	9a00      	ldr	r2, [sp, #0]
 800fa6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa70:	4616      	mov	r6, r2
 800fa72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fa74:	189a      	adds	r2, r3, r2
 800fa76:	e6fe      	b.n	800f876 <forward_lite_conv2d_if32of32wf32+0x13e>
 800fa78:	00000000 	.word	0x00000000
 800fa7c:	eeb0 7a61 	vmov.f32	s14, s3
 800fa80:	e7b4      	b.n	800f9ec <forward_lite_conv2d_if32of32wf32+0x2b4>
 800fa82:	eef0 1a48 	vmov.f32	s3, s16
 800fa86:	e6e1      	b.n	800f84c <forward_lite_conv2d_if32of32wf32+0x114>
 800fa88:	9a05      	ldr	r2, [sp, #20]
 800fa8a:	188a      	adds	r2, r1, r2
 800fa8c:	4291      	cmp	r1, r2
 800fa8e:	921b      	str	r2, [sp, #108]	@ 0x6c
 800fa90:	d2cf      	bcs.n	800fa32 <forward_lite_conv2d_if32of32wf32+0x2fa>
 800fa92:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800fa94:	fb02 f303 	mul.w	r3, r2, r3
 800fa98:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fa9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa9e:	4413      	add	r3, r2
 800faa0:	931d      	str	r3, [sp, #116]	@ 0x74
 800faa2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800faa4:	9310      	str	r3, [sp, #64]	@ 0x40
 800faa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800faa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800faaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800faac:	9309      	str	r3, [sp, #36]	@ 0x24
 800faae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	f000 80fa 	beq.w	800fcaa <forward_lite_conv2d_if32of32wf32+0x572>
 800fab6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fab8:	ecf3 1a01 	vldmia	r3!, {s3}
 800fabc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fabe:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	f000 80e3 	beq.w	800fc8c <forward_lite_conv2d_if32of32wf32+0x554>
 800fac6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800fac8:	9300      	str	r3, [sp, #0]
 800faca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800facc:	9302      	str	r3, [sp, #8]
 800face:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fad0:	9303      	str	r3, [sp, #12]
 800fad2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fad4:	9301      	str	r3, [sp, #4]
 800fad6:	2300      	movs	r3, #0
 800fad8:	9304      	str	r3, [sp, #16]
 800fada:	9b01      	ldr	r3, [sp, #4]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	f2c0 80e9 	blt.w	800fcb4 <forward_lite_conv2d_if32of32wf32+0x57c>
 800fae2:	9a02      	ldr	r2, [sp, #8]
 800fae4:	2400      	movs	r4, #0
 800fae6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fae8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800faea:	9807      	ldr	r0, [sp, #28]
 800faec:	9d00      	ldr	r5, [sp, #0]
 800faee:	fb03 1300 	mla	r3, r3, r0, r1
 800faf2:	993b      	ldr	r1, [sp, #236]	@ 0xec
 800faf4:	4429      	add	r1, r5
 800faf6:	9d3f      	ldr	r5, [sp, #252]	@ 0xfc
 800faf8:	42a9      	cmp	r1, r5
 800fafa:	bf94      	ite	ls
 800fafc:	ebc4 0401 	rsbls	r4, r4, r1
 800fb00:	ebc4 0405 	rsbhi	r4, r4, r5
 800fb04:	993b      	ldr	r1, [sp, #236]	@ 0xec
 800fb06:	f1bb 0f00 	cmp.w	fp, #0
 800fb0a:	eba1 0a04 	sub.w	sl, r1, r4
 800fb0e:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 800fb10:	eba5 0904 	sub.w	r9, r5, r4
 800fb14:	fb01 f404 	mul.w	r4, r1, r4
 800fb18:	f340 80d2 	ble.w	800fcc0 <forward_lite_conv2d_if32of32wf32+0x588>
 800fb1c:	f024 0c0f 	bic.w	ip, r4, #15
 800fb20:	eeb0 7a61 	vmov.f32	s14, s3
 800fb24:	fb00 fa0a 	mul.w	sl, r0, sl
 800fb28:	2700      	movs	r7, #0
 800fb2a:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800fb2e:	fb00 f909 	mul.w	r9, r0, r9
 800fb32:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800fb36:	f108 0801 	add.w	r8, r8, #1
 800fb3a:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800fb3e:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800fb42:	f1bc 0f00 	cmp.w	ip, #0
 800fb46:	f340 80b3 	ble.w	800fcb0 <forward_lite_conv2d_if32of32wf32+0x578>
 800fb4a:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 800fb4e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800fb52:	2500      	movs	r5, #0
 800fb54:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 800fb58:	3510      	adds	r5, #16
 800fb5a:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800fb5e:	3140      	adds	r1, #64	@ 0x40
 800fb60:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 800fb64:	4565      	cmp	r5, ip
 800fb66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fb6a:	ed11 5a20 	vldr	s10, [r1, #-128]	@ 0xffffff80
 800fb6e:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 800fb72:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800fb76:	ed11 6a1e 	vldr	s12, [r1, #-120]	@ 0xffffff88
 800fb7a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800fb7e:	ed51 6a1d 	vldr	s13, [r1, #-116]	@ 0xffffff8c
 800fb82:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 800fb86:	ed50 da1c 	vldr	s27, [r0, #-112]	@ 0xffffff90
 800fb8a:	ed11 da1c 	vldr	s26, [r1, #-112]	@ 0xffffff90
 800fb8e:	ed50 ca1b 	vldr	s25, [r0, #-108]	@ 0xffffff94
 800fb92:	ed11 ca1b 	vldr	s24, [r1, #-108]	@ 0xffffff94
 800fb96:	eee5 7a86 	vfma.f32	s15, s11, s12
 800fb9a:	ed50 ba1a 	vldr	s23, [r0, #-104]	@ 0xffffff98
 800fb9e:	ed11 ba1a 	vldr	s22, [r1, #-104]	@ 0xffffff98
 800fba2:	ed50 aa19 	vldr	s21, [r0, #-100]	@ 0xffffff9c
 800fba6:	ed11 aa19 	vldr	s20, [r1, #-100]	@ 0xffffff9c
 800fbaa:	ed50 9a18 	vldr	s19, [r0, #-96]	@ 0xffffffa0
 800fbae:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 800fbb2:	eeee 7a26 	vfma.f32	s15, s28, s13
 800fbb6:	ed50 8a17 	vldr	s17, [r0, #-92]	@ 0xffffffa4
 800fbba:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 800fbbe:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 800fbc2:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 800fbc6:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 800fbca:	ed51 2a15 	vldr	s5, [r1, #-84]	@ 0xffffffac
 800fbce:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800fbd2:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800fbd6:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 800fbda:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 800fbde:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 800fbe2:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800fbe6:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 800fbea:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800fbee:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800fbf2:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 800fbf6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800fbfa:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800fbfe:	eee9 7a89 	vfma.f32	s15, s19, s18
 800fc02:	eee8 7a80 	vfma.f32	s15, s17, s0
 800fc06:	eee0 7a81 	vfma.f32	s15, s1, s2
 800fc0a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800fc0e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800fc12:	eee4 7a24 	vfma.f32	s15, s8, s9
 800fc16:	eee5 7a25 	vfma.f32	s15, s10, s11
 800fc1a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800fc1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fc22:	db97      	blt.n	800fb54 <forward_lite_conv2d_if32of32wf32+0x41c>
 800fc24:	4472      	add	r2, lr
 800fc26:	4473      	add	r3, lr
 800fc28:	4641      	mov	r1, r8
 800fc2a:	428c      	cmp	r4, r1
 800fc2c:	dd10      	ble.n	800fc50 <forward_lite_conv2d_if32of32wf32+0x518>
 800fc2e:	4608      	mov	r0, r1
 800fc30:	4616      	mov	r6, r2
 800fc32:	461d      	mov	r5, r3
 800fc34:	3001      	adds	r0, #1
 800fc36:	ecf5 6a01 	vldmia	r5!, {s13}
 800fc3a:	ecf6 7a01 	vldmia	r6!, {s15}
 800fc3e:	4284      	cmp	r4, r0
 800fc40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fc44:	d1f6      	bne.n	800fc34 <forward_lite_conv2d_if32of32wf32+0x4fc>
 800fc46:	1a61      	subs	r1, r4, r1
 800fc48:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800fc4c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800fc50:	3701      	adds	r7, #1
 800fc52:	4452      	add	r2, sl
 800fc54:	444b      	add	r3, r9
 800fc56:	45bb      	cmp	fp, r7
 800fc58:	f47f af73 	bne.w	800fb42 <forward_lite_conv2d_if32of32wf32+0x40a>
 800fc5c:	9901      	ldr	r1, [sp, #4]
 800fc5e:	9808      	ldr	r0, [sp, #32]
 800fc60:	9a03      	ldr	r2, [sp, #12]
 800fc62:	4401      	add	r1, r0
 800fc64:	9b04      	ldr	r3, [sp, #16]
 800fc66:	ed82 7a00 	vstr	s14, [r2]
 800fc6a:	9101      	str	r1, [sp, #4]
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	9905      	ldr	r1, [sp, #20]
 800fc70:	9304      	str	r3, [sp, #16]
 800fc72:	440a      	add	r2, r1
 800fc74:	9906      	ldr	r1, [sp, #24]
 800fc76:	9203      	str	r2, [sp, #12]
 800fc78:	9a00      	ldr	r2, [sp, #0]
 800fc7a:	1a12      	subs	r2, r2, r0
 800fc7c:	9200      	str	r2, [sp, #0]
 800fc7e:	9a02      	ldr	r2, [sp, #8]
 800fc80:	440a      	add	r2, r1
 800fc82:	9202      	str	r2, [sp, #8]
 800fc84:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800fc86:	429a      	cmp	r2, r3
 800fc88:	f47f af27 	bne.w	800fada <forward_lite_conv2d_if32of32wf32+0x3a2>
 800fc8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc8e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fc90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc92:	440a      	add	r2, r1
 800fc94:	3304      	adds	r3, #4
 800fc96:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc98:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fc9a:	9310      	str	r3, [sp, #64]	@ 0x40
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	f4bf aec8 	bcs.w	800fa32 <forward_lite_conv2d_if32of32wf32+0x2fa>
 800fca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	f47f af06 	bne.w	800fab6 <forward_lite_conv2d_if32of32wf32+0x37e>
 800fcaa:	eef0 1a48 	vmov.f32	s3, s16
 800fcae:	e706      	b.n	800fabe <forward_lite_conv2d_if32of32wf32+0x386>
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	e7ba      	b.n	800fc2a <forward_lite_conv2d_if32of32wf32+0x4f2>
 800fcb4:	9a00      	ldr	r2, [sp, #0]
 800fcb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcb8:	4614      	mov	r4, r2
 800fcba:	4413      	add	r3, r2
 800fcbc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fcbe:	e713      	b.n	800fae8 <forward_lite_conv2d_if32of32wf32+0x3b0>
 800fcc0:	eeb0 7a61 	vmov.f32	s14, s3
 800fcc4:	e7ca      	b.n	800fc5c <forward_lite_conv2d_if32of32wf32+0x524>
 800fcc6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800fcc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fcca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fccc:	e589      	b.n	800f7e2 <forward_lite_conv2d_if32of32wf32+0xaa>
 800fcce:	bf00      	nop

0800fcd0 <forward_lite_nl_softmax_if32of32_kernel>:
 800fcd0:	2a01      	cmp	r2, #1
 800fcd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd6:	4617      	mov	r7, r2
 800fcd8:	ed2d 8b02 	vpush	{d8}
 800fcdc:	ed91 8a00 	vldr	s16, [r1]
 800fce0:	d932      	bls.n	800fd48 <forward_lite_nl_softmax_if32of32_kernel+0x78>
 800fce2:	1d0b      	adds	r3, r1, #4
 800fce4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800fce8:	ecf3 7a01 	vldmia	r3!, {s15}
 800fcec:	429a      	cmp	r2, r3
 800fcee:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800fcf2:	d1f9      	bne.n	800fce8 <forward_lite_nl_softmax_if32of32_kernel+0x18>
 800fcf4:	4606      	mov	r6, r0
 800fcf6:	460d      	mov	r5, r1
 800fcf8:	2400      	movs	r4, #0
 800fcfa:	eddf 8a16 	vldr	s17, [pc, #88]	@ 800fd54 <forward_lite_nl_softmax_if32of32_kernel+0x84>
 800fcfe:	4680      	mov	r8, r0
 800fd00:	ecb5 0a01 	vldmia	r5!, {s0}
 800fd04:	3401      	adds	r4, #1
 800fd06:	ee30 0a48 	vsub.f32	s0, s0, s16
 800fd0a:	f002 f8b1 	bl	8011e70 <expf>
 800fd0e:	42a7      	cmp	r7, r4
 800fd10:	ee78 8a80 	vadd.f32	s17, s17, s0
 800fd14:	eca8 0a01 	vstmia	r8!, {s0}
 800fd18:	d8f2      	bhi.n	800fd00 <forward_lite_nl_softmax_if32of32_kernel+0x30>
 800fd1a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fd1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd22:	d00d      	beq.n	800fd40 <forward_lite_nl_softmax_if32of32_kernel+0x70>
 800fd24:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fd28:	2300      	movs	r3, #0
 800fd2a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800fd2e:	edd6 7a00 	vldr	s15, [r6]
 800fd32:	3301      	adds	r3, #1
 800fd34:	429f      	cmp	r7, r3
 800fd36:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd3a:	ece6 7a01 	vstmia	r6!, {s15}
 800fd3e:	d8f6      	bhi.n	800fd2e <forward_lite_nl_softmax_if32of32_kernel+0x5e>
 800fd40:	ecbd 8b02 	vpop	{d8}
 800fd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd48:	2a00      	cmp	r2, #0
 800fd4a:	d1d3      	bne.n	800fcf4 <forward_lite_nl_softmax_if32of32_kernel+0x24>
 800fd4c:	ecbd 8b02 	vpop	{d8}
 800fd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd54:	00000000 	.word	0x00000000

0800fd58 <forward_lite_nl_relu_generic_if32of32_kernel>:
 800fd58:	edd3 6a02 	vldr	s13, [r3, #8]
 800fd5c:	ed93 7a00 	vldr	s14, [r3]
 800fd60:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800fd64:	ed93 6a01 	vldr	s12, [r3, #4]
 800fd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd6c:	d42b      	bmi.n	800fdc6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800fd6e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800fd72:	4413      	add	r3, r2
 800fd74:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800fd78:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800fd7c:	4291      	cmp	r1, r2
 800fd7e:	d821      	bhi.n	800fdc4 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800fd80:	f10c 0104 	add.w	r1, ip, #4
 800fd84:	1d13      	adds	r3, r2, #4
 800fd86:	eba2 020c 	sub.w	r2, r2, ip
 800fd8a:	4408      	add	r0, r1
 800fd8c:	e00c      	b.n	800fda8 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800fd8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fd92:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800fd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9a:	db01      	blt.n	800fda0 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 800fd9c:	ee65 7a86 	vmul.f32	s15, s11, s12
 800fda0:	4293      	cmp	r3, r2
 800fda2:	ed60 7a01 	vstmdb	r0!, {s15}
 800fda6:	d00c      	beq.n	800fdc2 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800fda8:	ed73 7a01 	vldmdb	r3!, {s15}
 800fdac:	eef4 6ae7 	vcmpe.f32	s13, s15
 800fdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb4:	daeb      	bge.n	800fd8e <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800fdb6:	eef0 7a66 	vmov.f32	s15, s13
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	ed60 7a01 	vstmdb	r0!, {s15}
 800fdc0:	d1f2      	bne.n	800fda8 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800fdc2:	4770      	bx	lr
 800fdc4:	4770      	bx	lr
 800fdc6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fdca:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800fdce:	4413      	add	r3, r2
 800fdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd4:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 800fdd8:	b500      	push	{lr}
 800fdda:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800fdde:	d019      	beq.n	800fe14 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 800fde0:	4561      	cmp	r1, ip
 800fde2:	d815      	bhi.n	800fe10 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800fde4:	f10e 0204 	add.w	r2, lr, #4
 800fde8:	f10c 0304 	add.w	r3, ip, #4
 800fdec:	ebac 010e 	sub.w	r1, ip, lr
 800fdf0:	4402      	add	r2, r0
 800fdf2:	ed73 7a01 	vldmdb	r3!, {s15}
 800fdf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fdfa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800fdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe02:	ee66 6a86 	vmul.f32	s13, s13, s12
 800fe06:	d827      	bhi.n	800fe58 <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 800fe08:	428b      	cmp	r3, r1
 800fe0a:	ed62 6a01 	vstmdb	r2!, {s13}
 800fe0e:	d1f0      	bne.n	800fdf2 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 800fe10:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe14:	4561      	cmp	r1, ip
 800fe16:	d8fb      	bhi.n	800fe10 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800fe18:	f10e 0204 	add.w	r2, lr, #4
 800fe1c:	f10c 0304 	add.w	r3, ip, #4
 800fe20:	ebac 010e 	sub.w	r1, ip, lr
 800fe24:	f04f 0c00 	mov.w	ip, #0
 800fe28:	4402      	add	r2, r0
 800fe2a:	ed73 7a01 	vldmdb	r3!, {s15}
 800fe2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe36:	d40a      	bmi.n	800fe4e <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 800fe38:	428b      	cmp	r3, r1
 800fe3a:	f842 cd04 	str.w	ip, [r2, #-4]!
 800fe3e:	d0e7      	beq.n	800fe10 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800fe40:	ed73 7a01 	vldmdb	r3!, {s15}
 800fe44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe4c:	d5f4      	bpl.n	800fe38 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800fe4e:	428b      	cmp	r3, r1
 800fe50:	ed62 7a01 	vstmdb	r2!, {s15}
 800fe54:	d1e9      	bne.n	800fe2a <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 800fe56:	e7db      	b.n	800fe10 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800fe58:	428b      	cmp	r3, r1
 800fe5a:	ed62 7a01 	vstmdb	r2!, {s15}
 800fe5e:	d1c8      	bne.n	800fdf2 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 800fe60:	e7d6      	b.n	800fe10 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800fe62:	bf00      	nop

0800fe64 <lite_decompress_ilutof32>:
 800fe64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe68:	9d08      	ldr	r5, [sp, #32]
 800fe6a:	2b04      	cmp	r3, #4
 800fe6c:	ea4f 0685 	mov.w	r6, r5, lsl #2
 800fe70:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800fe74:	d014      	beq.n	800fea0 <lite_decompress_ilutof32+0x3c>
 800fe76:	2b08      	cmp	r3, #8
 800fe78:	d10f      	bne.n	800fe9a <lite_decompress_ilutof32+0x36>
 800fe7a:	42a8      	cmp	r0, r5
 800fe7c:	d20d      	bcs.n	800fe9a <lite_decompress_ilutof32+0x36>
 800fe7e:	460c      	mov	r4, r1
 800fe80:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fe84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f840 3b04 	str.w	r3, [r0], #4
 800fe8e:	4285      	cmp	r5, r0
 800fe90:	d8f6      	bhi.n	800fe80 <lite_decompress_ilutof32+0x1c>
 800fe92:	3e01      	subs	r6, #1
 800fe94:	eb01 0696 	add.w	r6, r1, r6, lsr #2
 800fe98:	1c71      	adds	r1, r6, #1
 800fe9a:	4608      	mov	r0, r1
 800fe9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fea0:	9b07      	ldr	r3, [sp, #28]
 800fea2:	085e      	lsrs	r6, r3, #1
 800fea4:	f003 0701 	and.w	r7, r3, #1
 800fea8:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800feac:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 800feb0:	42a8      	cmp	r0, r5
 800feb2:	d2f2      	bcs.n	800fe9a <lite_decompress_ilutof32+0x36>
 800feb4:	b33e      	cbz	r6, 800ff06 <lite_decompress_ilutof32+0xa2>
 800feb6:	f100 0e08 	add.w	lr, r0, #8
 800feba:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 800febe:	eb01 0408 	add.w	r4, r1, r8
 800fec2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800fec6:	f10e 0e08 	add.w	lr, lr, #8
 800feca:	091b      	lsrs	r3, r3, #4
 800fecc:	4564      	cmp	r4, ip
 800fece:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f84e 3c10 	str.w	r3, [lr, #-16]
 800fed8:	f89c 3000 	ldrb.w	r3, [ip]
 800fedc:	f003 030f 	and.w	r3, r3, #15
 800fee0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800feea:	d1ea      	bne.n	800fec2 <lite_decompress_ilutof32+0x5e>
 800feec:	4431      	add	r1, r6
 800feee:	4448      	add	r0, r9
 800fef0:	2f00      	cmp	r7, #0
 800fef2:	d0dd      	beq.n	800feb0 <lite_decompress_ilutof32+0x4c>
 800fef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fef8:	091b      	lsrs	r3, r3, #4
 800fefa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	f840 3b04 	str.w	r3, [r0], #4
 800ff04:	e7d4      	b.n	800feb0 <lite_decompress_ilutof32+0x4c>
 800ff06:	2f00      	cmp	r7, #0
 800ff08:	d1f4      	bne.n	800fef4 <lite_decompress_ilutof32+0x90>
 800ff0a:	42a8      	cmp	r0, r5
 800ff0c:	d3fd      	bcc.n	800ff0a <lite_decompress_ilutof32+0xa6>
 800ff0e:	4608      	mov	r0, r1
 800ff10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ff14 <forward_lite_dense_if32of32wf32>:
 800ff14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff18:	ed2d 8b0c 	vpush	{d8-d13}
 800ff1c:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800ff20:	6801      	ldr	r1, [r0, #0]
 800ff22:	b083      	sub	sp, #12
 800ff24:	fb02 f303 	mul.w	r3, r2, r3
 800ff28:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800ff2c:	9100      	str	r1, [sp, #0]
 800ff2e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ff32:	4299      	cmp	r1, r3
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	f080 811c 	bcs.w	8010172 <forward_lite_dense_if32of32wf32+0x25e>
 800ff3a:	4607      	mov	r7, r0
 800ff3c:	6904      	ldr	r4, [r0, #16]
 800ff3e:	0096      	lsls	r6, r2, #2
 800ff40:	9b00      	ldr	r3, [sp, #0]
 800ff42:	68bd      	ldr	r5, [r7, #8]
 800ff44:	eb03 0e06 	add.w	lr, r3, r6
 800ff48:	461e      	mov	r6, r3
 800ff4a:	459e      	cmp	lr, r3
 800ff4c:	f240 8103 	bls.w	8010156 <forward_lite_dense_if32of32wf32+0x242>
 800ff50:	f1a4 0c10 	sub.w	ip, r4, #16
 800ff54:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800ff58:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800ff5c:	f10c 0c01 	add.w	ip, ip, #1
 800ff60:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800ff64:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 800ff68:	2c0f      	cmp	r4, #15
 800ff6a:	f240 8107 	bls.w	801017c <forward_lite_dense_if32of32wf32+0x268>
 800ff6e:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 800ff72:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 800ff76:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80101cc <forward_lite_dense_if32of32wf32+0x2b8>
 800ff7a:	4621      	mov	r1, r4
 800ff7c:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 800ff80:	3910      	subs	r1, #16
 800ff82:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 800ff86:	3340      	adds	r3, #64	@ 0x40
 800ff88:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 800ff8c:	290f      	cmp	r1, #15
 800ff8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ff92:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 800ff96:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 800ff9a:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800ff9e:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 800ffa2:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ffa6:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 800ffaa:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 800ffae:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 800ffb2:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 800ffb6:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 800ffba:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 800ffbe:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ffc2:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 800ffc6:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 800ffca:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 800ffce:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 800ffd2:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 800ffd6:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 800ffda:	eeed 7a26 	vfma.f32	s15, s26, s13
 800ffde:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 800ffe2:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 800ffe6:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 800ffea:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 800ffee:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 800fff2:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 800fff6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800fffa:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 800fffe:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8010002:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8010006:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 801000a:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 801000e:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8010012:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8010016:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 801001a:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 801001e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8010022:	eee9 7a89 	vfma.f32	s15, s19, s18
 8010026:	eee8 7a88 	vfma.f32	s15, s17, s16
 801002a:	eee0 7a20 	vfma.f32	s15, s0, s1
 801002e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8010032:	eee2 7a22 	vfma.f32	s15, s4, s5
 8010036:	eee3 7a23 	vfma.f32	s15, s6, s7
 801003a:	eee4 7a24 	vfma.f32	s15, s8, s9
 801003e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010042:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010046:	ee37 7a27 	vadd.f32	s14, s14, s15
 801004a:	d897      	bhi.n	800ff7c <forward_lite_dense_if32of32wf32+0x68>
 801004c:	eb05 020b 	add.w	r2, r5, fp
 8010050:	f004 010f 	and.w	r1, r4, #15
 8010054:	4663      	mov	r3, ip
 8010056:	2903      	cmp	r1, #3
 8010058:	d95f      	bls.n	801011a <forward_lite_dense_if32of32wf32+0x206>
 801005a:	edd2 6a01 	vldr	s13, [r2, #4]
 801005e:	1f08      	subs	r0, r1, #4
 8010060:	edd3 7a01 	vldr	s15, [r3, #4]
 8010064:	ed93 4a00 	vldr	s8, [r3]
 8010068:	2803      	cmp	r0, #3
 801006a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801006e:	edd2 4a00 	vldr	s9, [r2]
 8010072:	ed93 5a02 	vldr	s10, [r3, #8]
 8010076:	edd2 5a02 	vldr	s11, [r2, #8]
 801007a:	eee4 7a24 	vfma.f32	s15, s8, s9
 801007e:	ed93 6a03 	vldr	s12, [r3, #12]
 8010082:	edd2 6a03 	vldr	s13, [r2, #12]
 8010086:	ee77 7a27 	vadd.f32	s15, s14, s15
 801008a:	eee5 7a25 	vfma.f32	s15, s10, s11
 801008e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010092:	eeb0 7a67 	vmov.f32	s14, s15
 8010096:	d938      	bls.n	801010a <forward_lite_dense_if32of32wf32+0x1f6>
 8010098:	edd2 6a05 	vldr	s13, [r2, #20]
 801009c:	f1a1 0a08 	sub.w	sl, r1, #8
 80100a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80100a4:	ed93 4a04 	vldr	s8, [r3, #16]
 80100a8:	f1ba 0f03 	cmp.w	sl, #3
 80100ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80100b0:	edd2 4a04 	vldr	s9, [r2, #16]
 80100b4:	ed93 5a06 	vldr	s10, [r3, #24]
 80100b8:	edd2 5a06 	vldr	s11, [r2, #24]
 80100bc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80100c0:	ed93 6a07 	vldr	s12, [r3, #28]
 80100c4:	edd2 6a07 	vldr	s13, [r2, #28]
 80100c8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80100cc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80100d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80100d4:	d919      	bls.n	801010a <forward_lite_dense_if32of32wf32+0x1f6>
 80100d6:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80100da:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80100de:	ed92 4a08 	vldr	s8, [r2, #32]
 80100e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80100e6:	edd3 4a08 	vldr	s9, [r3, #32]
 80100ea:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 80100ee:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 80100f2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80100f6:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 80100fa:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80100fe:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010102:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010106:	ee37 7a27 	vadd.f32	s14, s14, s15
 801010a:	0880      	lsrs	r0, r0, #2
 801010c:	f001 0103 	and.w	r1, r1, #3
 8010110:	3001      	adds	r0, #1
 8010112:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8010116:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801011a:	b1a9      	cbz	r1, 8010148 <forward_lite_dense_if32of32wf32+0x234>
 801011c:	edd3 6a00 	vldr	s13, [r3]
 8010120:	3901      	subs	r1, #1
 8010122:	edd2 7a00 	vldr	s15, [r2]
 8010126:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801012a:	d00d      	beq.n	8010148 <forward_lite_dense_if32of32wf32+0x234>
 801012c:	edd3 6a01 	vldr	s13, [r3, #4]
 8010130:	2901      	cmp	r1, #1
 8010132:	edd2 7a01 	vldr	s15, [r2, #4]
 8010136:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801013a:	d005      	beq.n	8010148 <forward_lite_dense_if32of32wf32+0x234>
 801013c:	edd2 6a02 	vldr	s13, [r2, #8]
 8010140:	edd3 7a02 	vldr	s15, [r3, #8]
 8010144:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010148:	eca6 7a01 	vstmia	r6!, {s14}
 801014c:	45b6      	cmp	lr, r6
 801014e:	444d      	add	r5, r9
 8010150:	f63f af0a 	bhi.w	800ff68 <forward_lite_dense_if32of32wf32+0x54>
 8010154:	697a      	ldr	r2, [r7, #20]
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	b9b3      	cbnz	r3, 8010188 <forward_lite_dense_if32of32wf32+0x274>
 801015a:	9b00      	ldr	r3, [sp, #0]
 801015c:	0096      	lsls	r6, r2, #2
 801015e:	9901      	ldr	r1, [sp, #4]
 8010160:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010164:	693c      	ldr	r4, [r7, #16]
 8010166:	4299      	cmp	r1, r3
 8010168:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 801016c:	9300      	str	r3, [sp, #0]
 801016e:	f63f aee7 	bhi.w	800ff40 <forward_lite_dense_if32of32wf32+0x2c>
 8010172:	b003      	add	sp, #12
 8010174:	ecbd 8b0c 	vpop	{d8-d13}
 8010178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801017c:	4621      	mov	r1, r4
 801017e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80101cc <forward_lite_dense_if32of32wf32+0x2b8>
 8010182:	462a      	mov	r2, r5
 8010184:	4643      	mov	r3, r8
 8010186:	e766      	b.n	8010056 <forward_lite_dense_if32of32wf32+0x142>
 8010188:	2a00      	cmp	r2, #0
 801018a:	d0e6      	beq.n	801015a <forward_lite_dense_if32of32wf32+0x246>
 801018c:	9a00      	ldr	r2, [sp, #0]
 801018e:	ed93 7a00 	vldr	s14, [r3]
 8010192:	edd2 7a00 	vldr	s15, [r2]
 8010196:	4613      	mov	r3, r2
 8010198:	ee77 7a87 	vadd.f32	s15, s15, s14
 801019c:	edc2 7a00 	vstr	s15, [r2]
 80101a0:	697a      	ldr	r2, [r7, #20]
 80101a2:	2a01      	cmp	r2, #1
 80101a4:	d9d9      	bls.n	801015a <forward_lite_dense_if32of32wf32+0x246>
 80101a6:	1d19      	adds	r1, r3, #4
 80101a8:	2301      	movs	r3, #1
 80101aa:	68fa      	ldr	r2, [r7, #12]
 80101ac:	ed91 7a00 	vldr	s14, [r1]
 80101b0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80101b4:	3301      	adds	r3, #1
 80101b6:	edd2 7a00 	vldr	s15, [r2]
 80101ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80101be:	ece1 7a01 	vstmia	r1!, {s15}
 80101c2:	697a      	ldr	r2, [r7, #20]
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d8f0      	bhi.n	80101aa <forward_lite_dense_if32of32wf32+0x296>
 80101c8:	e7c7      	b.n	801015a <forward_lite_dense_if32of32wf32+0x246>
 80101ca:	bf00      	nop
 80101cc:	00000000 	.word	0x00000000

080101d0 <forward_lite_dense_if32of32wf32_lut4>:
 80101d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d4:	b08d      	sub	sp, #52	@ 0x34
 80101d6:	4605      	mov	r5, r0
 80101d8:	460c      	mov	r4, r1
 80101da:	9005      	str	r0, [sp, #20]
 80101dc:	4618      	mov	r0, r3
 80101de:	920a      	str	r2, [sp, #40]	@ 0x28
 80101e0:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80101e2:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 80101e6:	fb02 f303 	mul.w	r3, r2, r3
 80101ea:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80101ee:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80101f0:	9308      	str	r3, [sp, #32]
 80101f2:	b126      	cbz	r6, 80101fe <forward_lite_dense_if32of32wf32_lut4+0x2e>
 80101f4:	2240      	movs	r2, #64	@ 0x40
 80101f6:	4631      	mov	r1, r6
 80101f8:	f000 fbc4 	bl	8010984 <st_int8_copy>
 80101fc:	4630      	mov	r0, r6
 80101fe:	9b05      	ldr	r3, [sp, #20]
 8010200:	9a08      	ldr	r2, [sp, #32]
 8010202:	4293      	cmp	r3, r2
 8010204:	f080 80f7 	bcs.w	80103f6 <forward_lite_dense_if32of32wf32_lut4+0x226>
 8010208:	08eb      	lsrs	r3, r5, #3
 801020a:	f005 0101 	and.w	r1, r5, #1
 801020e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010210:	f025 0801 	bic.w	r8, r5, #1
 8010214:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8010218:	9301      	str	r3, [sp, #4]
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	9102      	str	r1, [sp, #8]
 801021e:	0092      	lsls	r2, r2, #2
 8010220:	f104 0b20 	add.w	fp, r4, #32
 8010224:	00a9      	lsls	r1, r5, #2
 8010226:	9304      	str	r3, [sp, #16]
 8010228:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 801022c:	9b05      	ldr	r3, [sp, #20]
 801022e:	9207      	str	r2, [sp, #28]
 8010230:	9109      	str	r1, [sp, #36]	@ 0x24
 8010232:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010234:	9a07      	ldr	r2, [sp, #28]
 8010236:	eb03 0902 	add.w	r9, r3, r2
 801023a:	f1ab 0220 	sub.w	r2, fp, #32
 801023e:	4599      	cmp	r9, r3
 8010240:	9206      	str	r2, [sp, #24]
 8010242:	f240 80db 	bls.w	80103fc <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8010246:	469e      	mov	lr, r3
 8010248:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801024a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801024e:	9303      	str	r3, [sp, #12]
 8010250:	9b01      	ldr	r3, [sp, #4]
 8010252:	2b00      	cmp	r3, #0
 8010254:	f000 80b4 	beq.w	80103c0 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8010258:	9b04      	ldr	r3, [sp, #16]
 801025a:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8010420 <forward_lite_dense_if32of32wf32_lut4+0x250>
 801025e:	18d4      	adds	r4, r2, r3
 8010260:	465b      	mov	r3, fp
 8010262:	7816      	ldrb	r6, [r2, #0]
 8010264:	3204      	adds	r2, #4
 8010266:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 801026a:	3320      	adds	r3, #32
 801026c:	f006 070f 	and.w	r7, r6, #15
 8010270:	0936      	lsrs	r6, r6, #4
 8010272:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 8010276:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 801027a:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 801027e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8010282:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 8010286:	edd7 7a00 	vldr	s15, [r7]
 801028a:	ed96 3a00 	vldr	s6, [r6]
 801028e:	092e      	lsrs	r6, r5, #4
 8010290:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8010294:	f005 050f 	and.w	r5, r5, #15
 8010298:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801029c:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80102a0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80102a4:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 80102a8:	eee3 7a04 	vfma.f32	s15, s6, s8
 80102ac:	ed96 3a00 	vldr	s6, [r6]
 80102b0:	ed95 4a00 	vldr	s8, [r5]
 80102b4:	090d      	lsrs	r5, r1, #4
 80102b6:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 80102ba:	f001 010f 	and.w	r1, r1, #15
 80102be:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80102c2:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 80102c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80102ca:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 80102ce:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 80102d2:	eee3 7a23 	vfma.f32	s15, s6, s7
 80102d6:	eee4 7a05 	vfma.f32	s15, s8, s10
 80102da:	ed95 4a00 	vldr	s8, [r5]
 80102de:	ed91 5a00 	vldr	s10, [r1]
 80102e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80102e6:	42a2      	cmp	r2, r4
 80102e8:	ea4f 1511 	mov.w	r5, r1, lsr #4
 80102ec:	f001 010f 	and.w	r1, r1, #15
 80102f0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80102f4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80102f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80102fc:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010300:	ed95 5a00 	vldr	s10, [r5]
 8010304:	ed91 6a00 	vldr	s12, [r1]
 8010308:	eee5 7a25 	vfma.f32	s15, s10, s11
 801030c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010314:	d1a5      	bne.n	8010262 <forward_lite_dense_if32of32wf32_lut4+0x92>
 8010316:	4656      	mov	r6, sl
 8010318:	4546      	cmp	r6, r8
 801031a:	d257      	bcs.n	80103cc <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 801031c:	9b03      	ldr	r3, [sp, #12]
 801031e:	f106 0208 	add.w	r2, r6, #8
 8010322:	1e61      	subs	r1, r4, #1
 8010324:	1b9d      	subs	r5, r3, r6
 8010326:	08ef      	lsrs	r7, r5, #3
 8010328:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 801032c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010330:	3208      	adds	r2, #8
 8010332:	ed52 5a03 	vldr	s11, [r2, #-12]
 8010336:	f003 0c0f 	and.w	ip, r3, #15
 801033a:	091b      	lsrs	r3, r3, #4
 801033c:	ed52 6a04 	vldr	s13, [r2, #-16]
 8010340:	42a9      	cmp	r1, r5
 8010342:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8010346:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801034a:	eddc 7a00 	vldr	s15, [ip]
 801034e:	ed93 6a00 	vldr	s12, [r3]
 8010352:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010356:	eee6 7a26 	vfma.f32	s15, s12, s13
 801035a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801035e:	d1e5      	bne.n	801032c <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8010360:	3701      	adds	r7, #1
 8010362:	19e2      	adds	r2, r4, r7
 8010364:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8010368:	9b02      	ldr	r3, [sp, #8]
 801036a:	b30b      	cbz	r3, 80103b0 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 801036c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8010370:	edd6 7a00 	vldr	s15, [r6]
 8010374:	091b      	lsrs	r3, r3, #4
 8010376:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801037a:	edd3 6a00 	vldr	s13, [r3]
 801037e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010382:	ecae 7a01 	vstmia	lr!, {s14}
 8010386:	45f1      	cmp	r9, lr
 8010388:	f63f af62 	bhi.w	8010250 <forward_lite_dense_if32of32wf32_lut4+0x80>
 801038c:	9b05      	ldr	r3, [sp, #20]
 801038e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010390:	1899      	adds	r1, r3, r2
 8010392:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010394:	b9e3      	cbnz	r3, 80103d0 <forward_lite_dense_if32of32wf32_lut4+0x200>
 8010396:	9b08      	ldr	r3, [sp, #32]
 8010398:	428b      	cmp	r3, r1
 801039a:	d92c      	bls.n	80103f6 <forward_lite_dense_if32of32wf32_lut4+0x226>
 801039c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801039e:	4498      	add	r8, r3
 80103a0:	449a      	add	sl, r3
 80103a2:	449b      	add	fp, r3
 80103a4:	9b05      	ldr	r3, [sp, #20]
 80103a6:	4599      	cmp	r9, r3
 80103a8:	d92a      	bls.n	8010400 <forward_lite_dense_if32of32wf32_lut4+0x230>
 80103aa:	460b      	mov	r3, r1
 80103ac:	9105      	str	r1, [sp, #20]
 80103ae:	e741      	b.n	8010234 <forward_lite_dense_if32of32wf32_lut4+0x64>
 80103b0:	ecae 7a01 	vstmia	lr!, {s14}
 80103b4:	45f1      	cmp	r9, lr
 80103b6:	d9e9      	bls.n	801038c <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 80103b8:	9b01      	ldr	r3, [sp, #4]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	f47f af4c 	bne.w	8010258 <forward_lite_dense_if32of32wf32_lut4+0x88>
 80103c0:	9e06      	ldr	r6, [sp, #24]
 80103c2:	4614      	mov	r4, r2
 80103c4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8010420 <forward_lite_dense_if32of32wf32_lut4+0x250>
 80103c8:	4546      	cmp	r6, r8
 80103ca:	d3a7      	bcc.n	801031c <forward_lite_dense_if32of32wf32_lut4+0x14c>
 80103cc:	4622      	mov	r2, r4
 80103ce:	e7cb      	b.n	8010368 <forward_lite_dense_if32of32wf32_lut4+0x198>
 80103d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d0df      	beq.n	8010396 <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 80103d6:	9b07      	ldr	r3, [sp, #28]
 80103d8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80103da:	1acb      	subs	r3, r1, r3
 80103dc:	edd3 7a00 	vldr	s15, [r3]
 80103e0:	ecb2 7a01 	vldmia	r2!, {s14}
 80103e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80103e8:	ece3 7a01 	vstmia	r3!, {s15}
 80103ec:	428b      	cmp	r3, r1
 80103ee:	d1f5      	bne.n	80103dc <forward_lite_dense_if32of32wf32_lut4+0x20c>
 80103f0:	9b08      	ldr	r3, [sp, #32]
 80103f2:	428b      	cmp	r3, r1
 80103f4:	d8d2      	bhi.n	801039c <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 80103f6:	b00d      	add	sp, #52	@ 0x34
 80103f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103fc:	4619      	mov	r1, r3
 80103fe:	e7c8      	b.n	8010392 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8010400:	9b07      	ldr	r3, [sp, #28]
 8010402:	1acb      	subs	r3, r1, r3
 8010404:	461a      	mov	r2, r3
 8010406:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8010408:	ed92 7a00 	vldr	s14, [r2]
 801040c:	ecf0 7a01 	vldmia	r0!, {s15}
 8010410:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010414:	ece2 7a01 	vstmia	r2!, {s15}
 8010418:	428a      	cmp	r2, r1
 801041a:	d1f5      	bne.n	8010408 <forward_lite_dense_if32of32wf32_lut4+0x238>
 801041c:	e7f2      	b.n	8010404 <forward_lite_dense_if32of32wf32_lut4+0x234>
 801041e:	bf00      	nop
 8010420:	00000000 	.word	0x00000000

08010424 <forward_lite_dense_if32of32wf32_lut8>:
 8010424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010428:	b091      	sub	sp, #68	@ 0x44
 801042a:	4699      	mov	r9, r3
 801042c:	468b      	mov	fp, r1
 801042e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010430:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8010432:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8010436:	9003      	str	r0, [sp, #12]
 8010438:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 801043c:	fb02 f303 	mul.w	r3, r2, r3
 8010440:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010444:	930c      	str	r3, [sp, #48]	@ 0x30
 8010446:	b134      	cbz	r4, 8010456 <forward_lite_dense_if32of32wf32_lut8+0x32>
 8010448:	4648      	mov	r0, r9
 801044a:	46a1      	mov	r9, r4
 801044c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010450:	4621      	mov	r1, r4
 8010452:	f000 fa97 	bl	8010984 <st_int8_copy>
 8010456:	9b03      	ldr	r3, [sp, #12]
 8010458:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801045a:	4293      	cmp	r3, r2
 801045c:	f080 8084 	bcs.w	8010568 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8010460:	4bb7      	ldr	r3, [pc, #732]	@ (8010740 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 8010462:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010464:	4443      	add	r3, r8
 8010466:	9d03      	ldr	r5, [sp, #12]
 8010468:	0092      	lsls	r2, r2, #2
 801046a:	eddf 3ab6 	vldr	s7, [pc, #728]	@ 8010744 <forward_lite_dense_if32of32wf32_lut8+0x320>
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010472:	f103 0120 	add.w	r1, r3, #32
 8010476:	930d      	str	r3, [sp, #52]	@ 0x34
 8010478:	445b      	add	r3, fp
 801047a:	920f      	str	r2, [sp, #60]	@ 0x3c
 801047c:	9105      	str	r1, [sp, #20]
 801047e:	9300      	str	r3, [sp, #0]
 8010480:	eb0b 0301 	add.w	r3, fp, r1
 8010484:	469a      	mov	sl, r3
 8010486:	469e      	mov	lr, r3
 8010488:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801048a:	eb05 0c03 	add.w	ip, r5, r3
 801048e:	45ac      	cmp	ip, r5
 8010490:	d952      	bls.n	8010538 <forward_lite_dense_if32of32wf32_lut8+0x114>
 8010492:	9800      	ldr	r0, [sp, #0]
 8010494:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010496:	f100 011f 	add.w	r1, r0, #31
 801049a:	eba0 020b 	sub.w	r2, r0, fp
 801049e:	445b      	add	r3, fp
 80104a0:	9101      	str	r1, [sp, #4]
 80104a2:	eba1 010b 	sub.w	r1, r1, fp
 80104a6:	0952      	lsrs	r2, r2, #5
 80104a8:	9306      	str	r3, [sp, #24]
 80104aa:	0889      	lsrs	r1, r1, #2
 80104ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104ae:	3101      	adds	r1, #1
 80104b0:	9102      	str	r1, [sp, #8]
 80104b2:	1c51      	adds	r1, r2, #1
 80104b4:	00d2      	lsls	r2, r2, #3
 80104b6:	3210      	adds	r2, #16
 80104b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80104ba:	00ca      	lsls	r2, r1, #3
 80104bc:	9208      	str	r2, [sp, #32]
 80104be:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 80104c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80104c4:	1f02      	subs	r2, r0, #4
 80104c6:	9204      	str	r2, [sp, #16]
 80104c8:	f10b 0204 	add.w	r2, fp, #4
 80104cc:	9207      	str	r2, [sp, #28]
 80104ce:	f1b8 0f07 	cmp.w	r8, #7
 80104d2:	d84c      	bhi.n	801056e <forward_lite_dense_if32of32wf32_lut8+0x14a>
 80104d4:	45d3      	cmp	fp, sl
 80104d6:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8010744 <forward_lite_dense_if32of32wf32_lut8+0x320>
 80104da:	d20f      	bcs.n	80104fc <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80104dc:	4659      	mov	r1, fp
 80104de:	4618      	mov	r0, r3
 80104e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104e4:	ecf1 7a01 	vldmia	r1!, {s15}
 80104e8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80104ec:	4551      	cmp	r1, sl
 80104ee:	edd2 6a00 	vldr	s13, [r2]
 80104f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80104f6:	d3f3      	bcc.n	80104e0 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 80104f8:	9a02      	ldr	r2, [sp, #8]
 80104fa:	4413      	add	r3, r2
 80104fc:	eca5 7a01 	vstmia	r5!, {s14}
 8010500:	45ac      	cmp	ip, r5
 8010502:	d8e4      	bhi.n	80104ce <forward_lite_dense_if32of32wf32_lut8+0xaa>
 8010504:	9b03      	ldr	r3, [sp, #12]
 8010506:	46f3      	mov	fp, lr
 8010508:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801050a:	1899      	adds	r1, r3, r2
 801050c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801050e:	b9c3      	cbnz	r3, 8010542 <forward_lite_dense_if32of32wf32_lut8+0x11e>
 8010510:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010512:	428b      	cmp	r3, r1
 8010514:	d928      	bls.n	8010568 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8010516:	9b00      	ldr	r3, [sp, #0]
 8010518:	9a05      	ldr	r2, [sp, #20]
 801051a:	4413      	add	r3, r2
 801051c:	4492      	add	sl, r2
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	9b03      	ldr	r3, [sp, #12]
 8010522:	459c      	cmp	ip, r3
 8010524:	f240 821e 	bls.w	8010964 <forward_lite_dense_if32of32wf32_lut8+0x540>
 8010528:	460d      	mov	r5, r1
 801052a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801052c:	4496      	add	lr, r2
 801052e:	9103      	str	r1, [sp, #12]
 8010530:	eb05 0c03 	add.w	ip, r5, r3
 8010534:	45ac      	cmp	ip, r5
 8010536:	d8ac      	bhi.n	8010492 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8010538:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801053a:	4629      	mov	r1, r5
 801053c:	46f3      	mov	fp, lr
 801053e:	2b00      	cmp	r3, #0
 8010540:	d0e6      	beq.n	8010510 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8010542:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010544:	2b00      	cmp	r3, #0
 8010546:	d0e3      	beq.n	8010510 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8010548:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801054a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801054c:	1acb      	subs	r3, r1, r3
 801054e:	edd3 7a00 	vldr	s15, [r3]
 8010552:	ecb2 7a01 	vldmia	r2!, {s14}
 8010556:	ee77 7a87 	vadd.f32	s15, s15, s14
 801055a:	ece3 7a01 	vstmia	r3!, {s15}
 801055e:	428b      	cmp	r3, r1
 8010560:	d1f5      	bne.n	801054e <forward_lite_dense_if32of32wf32_lut8+0x12a>
 8010562:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010564:	428b      	cmp	r3, r1
 8010566:	d8d6      	bhi.n	8010516 <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8010568:	b011      	add	sp, #68	@ 0x44
 801056a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801056e:	f003 0203 	and.w	r2, r3, #3
 8010572:	2a02      	cmp	r2, #2
 8010574:	f000 81ee 	beq.w	8010954 <forward_lite_dense_if32of32wf32_lut8+0x530>
 8010578:	2a03      	cmp	r2, #3
 801057a:	f000 80e5 	beq.w	8010748 <forward_lite_dense_if32of32wf32_lut8+0x324>
 801057e:	2a01      	cmp	r2, #1
 8010580:	f000 81d2 	beq.w	8010928 <forward_lite_dense_if32of32wf32_lut8+0x504>
 8010584:	9a06      	ldr	r2, [sp, #24]
 8010586:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8010744 <forward_lite_dense_if32of32wf32_lut8+0x320>
 801058a:	4593      	cmp	fp, r2
 801058c:	f200 81e8 	bhi.w	8010960 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 8010590:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010592:	f103 0208 	add.w	r2, r3, #8
 8010596:	f10b 0120 	add.w	r1, fp, #32
 801059a:	18c4      	adds	r4, r0, r3
 801059c:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 80105a0:	3208      	adds	r2, #8
 80105a2:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 80105a6:	3120      	adds	r1, #32
 80105a8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80105ac:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 80105b0:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 80105b4:	edd0 7a00 	vldr	s15, [r0]
 80105b8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 80105bc:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80105c0:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 80105c4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80105c8:	ed11 5a0c 	vldr	s10, [r1, #-48]	@ 0xffffffd0
 80105cc:	ed51 5a0b 	vldr	s11, [r1, #-44]	@ 0xffffffd4
 80105d0:	edd0 2a00 	vldr	s5, [r0]
 80105d4:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 80105d8:	eee2 7a83 	vfma.f32	s15, s5, s6
 80105dc:	ed11 6a0a 	vldr	s12, [r1, #-40]	@ 0xffffffd8
 80105e0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80105e4:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 80105e8:	ed90 3a00 	vldr	s6, [r0]
 80105ec:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 80105f0:	eee3 7a04 	vfma.f32	s15, s6, s8
 80105f4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80105f8:	ed90 4a00 	vldr	s8, [r0]
 80105fc:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8010600:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8010604:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010608:	edd0 4a00 	vldr	s9, [r0]
 801060c:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8010610:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8010614:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010618:	ed90 5a00 	vldr	s10, [r0]
 801061c:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8010620:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8010624:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010628:	edd0 5a00 	vldr	s11, [r0]
 801062c:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8010630:	42a2      	cmp	r2, r4
 8010632:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8010636:	eee5 7a86 	vfma.f32	s15, s11, s12
 801063a:	ed90 6a00 	vldr	s12, [r0]
 801063e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010642:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010646:	d1a9      	bne.n	801059c <forward_lite_dense_if32of32wf32_lut8+0x178>
 8010648:	9a08      	ldr	r2, [sp, #32]
 801064a:	4413      	add	r3, r2
 801064c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801064e:	4572      	cmp	r2, lr
 8010650:	f4bf af54 	bcs.w	80104fc <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8010654:	7819      	ldrb	r1, [r3, #0]
 8010656:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801065a:	edd1 7a00 	vldr	s15, [r1]
 801065e:	4611      	mov	r1, r2
 8010660:	ecf1 6a01 	vldmia	r1!, {s13}
 8010664:	458a      	cmp	sl, r1
 8010666:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801066a:	d963      	bls.n	8010734 <forward_lite_dense_if32of32wf32_lut8+0x310>
 801066c:	7859      	ldrb	r1, [r3, #1]
 801066e:	edd2 6a01 	vldr	s13, [r2, #4]
 8010672:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010676:	edd1 7a00 	vldr	s15, [r1]
 801067a:	f102 0108 	add.w	r1, r2, #8
 801067e:	458a      	cmp	sl, r1
 8010680:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010684:	d956      	bls.n	8010734 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8010686:	7899      	ldrb	r1, [r3, #2]
 8010688:	edd2 6a02 	vldr	s13, [r2, #8]
 801068c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010690:	edd1 7a00 	vldr	s15, [r1]
 8010694:	f102 010c 	add.w	r1, r2, #12
 8010698:	458a      	cmp	sl, r1
 801069a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801069e:	d949      	bls.n	8010734 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80106a0:	78d9      	ldrb	r1, [r3, #3]
 80106a2:	edd2 6a03 	vldr	s13, [r2, #12]
 80106a6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80106aa:	edd1 7a00 	vldr	s15, [r1]
 80106ae:	f102 0110 	add.w	r1, r2, #16
 80106b2:	458a      	cmp	sl, r1
 80106b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80106b8:	d93c      	bls.n	8010734 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80106ba:	7919      	ldrb	r1, [r3, #4]
 80106bc:	edd2 6a04 	vldr	s13, [r2, #16]
 80106c0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80106c4:	edd1 7a00 	vldr	s15, [r1]
 80106c8:	f102 0114 	add.w	r1, r2, #20
 80106cc:	458a      	cmp	sl, r1
 80106ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80106d2:	d92f      	bls.n	8010734 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80106d4:	7959      	ldrb	r1, [r3, #5]
 80106d6:	edd2 6a05 	vldr	s13, [r2, #20]
 80106da:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80106de:	edd1 7a00 	vldr	s15, [r1]
 80106e2:	f102 0118 	add.w	r1, r2, #24
 80106e6:	458a      	cmp	sl, r1
 80106e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80106ec:	d922      	bls.n	8010734 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80106ee:	7999      	ldrb	r1, [r3, #6]
 80106f0:	edd2 6a06 	vldr	s13, [r2, #24]
 80106f4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80106f8:	edd1 7a00 	vldr	s15, [r1]
 80106fc:	f102 011c 	add.w	r1, r2, #28
 8010700:	458a      	cmp	sl, r1
 8010702:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010706:	d915      	bls.n	8010734 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8010708:	79d9      	ldrb	r1, [r3, #7]
 801070a:	edd2 6a07 	vldr	s13, [r2, #28]
 801070e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010712:	edd1 7a00 	vldr	s15, [r1]
 8010716:	f102 0120 	add.w	r1, r2, #32
 801071a:	458a      	cmp	sl, r1
 801071c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010720:	d908      	bls.n	8010734 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8010722:	7a19      	ldrb	r1, [r3, #8]
 8010724:	edd2 7a08 	vldr	s15, [r2, #32]
 8010728:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801072c:	edd1 6a00 	vldr	s13, [r1]
 8010730:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010734:	9901      	ldr	r1, [sp, #4]
 8010736:	1a8a      	subs	r2, r1, r2
 8010738:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 801073c:	1c53      	adds	r3, r2, #1
 801073e:	e6dd      	b.n	80104fc <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8010740:	3ffffff8 	.word	0x3ffffff8
 8010744:	00000000 	.word	0x00000000
 8010748:	eeb0 7a63 	vmov.f32	s14, s7
 801074c:	465a      	mov	r2, fp
 801074e:	461f      	mov	r7, r3
 8010750:	4610      	mov	r0, r2
 8010752:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010756:	ecf0 7a01 	vldmia	r0!, {s15}
 801075a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801075e:	edd1 6a00 	vldr	s13, [r1]
 8010762:	9900      	ldr	r1, [sp, #0]
 8010764:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010768:	4288      	cmp	r0, r1
 801076a:	f200 80f7 	bhi.w	801095c <forward_lite_dense_if32of32wf32_lut8+0x538>
 801076e:	9904      	ldr	r1, [sp, #16]
 8010770:	f103 0411 	add.w	r4, r3, #17
 8010774:	3309      	adds	r3, #9
 8010776:	1a8e      	subs	r6, r1, r2
 8010778:	3224      	adds	r2, #36	@ 0x24
 801077a:	0976      	lsrs	r6, r6, #5
 801077c:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8010780:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8010784:	3308      	adds	r3, #8
 8010786:	ed52 2a07 	vldr	s5, [r2, #-28]	@ 0xffffffe4
 801078a:	3220      	adds	r2, #32
 801078c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010790:	ed12 3a10 	vldr	s6, [r2, #-64]	@ 0xffffffc0
 8010794:	ed12 4a0e 	vldr	s8, [r2, #-56]	@ 0xffffffc8
 8010798:	edd1 7a00 	vldr	s15, [r1]
 801079c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80107a0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80107a4:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 80107a8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80107ac:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 80107b0:	ed52 5a0b 	vldr	s11, [r2, #-44]	@ 0xffffffd4
 80107b4:	edd1 2a00 	vldr	s5, [r1]
 80107b8:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 80107bc:	eee2 7a83 	vfma.f32	s15, s5, s6
 80107c0:	ed12 6a0a 	vldr	s12, [r2, #-40]	@ 0xffffffd8
 80107c4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80107c8:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 80107cc:	ed91 3a00 	vldr	s6, [r1]
 80107d0:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 80107d4:	eee3 7a04 	vfma.f32	s15, s6, s8
 80107d8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80107dc:	ed91 4a00 	vldr	s8, [r1]
 80107e0:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80107e4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80107e8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80107ec:	edd1 4a00 	vldr	s9, [r1]
 80107f0:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 80107f4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80107f8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80107fc:	ed91 5a00 	vldr	s10, [r1]
 8010800:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8010804:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010808:	eee5 7a25 	vfma.f32	s15, s10, s11
 801080c:	edd1 5a00 	vldr	s11, [r1]
 8010810:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8010814:	42a3      	cmp	r3, r4
 8010816:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801081a:	eee5 7a86 	vfma.f32	s15, s11, s12
 801081e:	ed91 6a00 	vldr	s12, [r1]
 8010822:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010826:	ee37 7a27 	vadd.f32	s14, s14, s15
 801082a:	d1a9      	bne.n	8010780 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 801082c:	3601      	adds	r6, #1
 801082e:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8010832:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8010836:	4550      	cmp	r0, sl
 8010838:	f4bf ae60 	bcs.w	80104fc <forward_lite_dense_if32of32wf32_lut8+0xd8>
 801083c:	781a      	ldrb	r2, [r3, #0]
 801083e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8010842:	edd2 7a00 	vldr	s15, [r2]
 8010846:	4602      	mov	r2, r0
 8010848:	ecf2 6a01 	vldmia	r2!, {s13}
 801084c:	4592      	cmp	sl, r2
 801084e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010852:	d963      	bls.n	801091c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8010854:	785a      	ldrb	r2, [r3, #1]
 8010856:	edd0 6a01 	vldr	s13, [r0, #4]
 801085a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801085e:	edd2 7a00 	vldr	s15, [r2]
 8010862:	f100 0208 	add.w	r2, r0, #8
 8010866:	4592      	cmp	sl, r2
 8010868:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801086c:	d956      	bls.n	801091c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801086e:	789a      	ldrb	r2, [r3, #2]
 8010870:	edd0 6a02 	vldr	s13, [r0, #8]
 8010874:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8010878:	edd2 7a00 	vldr	s15, [r2]
 801087c:	f100 020c 	add.w	r2, r0, #12
 8010880:	4592      	cmp	sl, r2
 8010882:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010886:	d949      	bls.n	801091c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8010888:	78da      	ldrb	r2, [r3, #3]
 801088a:	edd0 6a03 	vldr	s13, [r0, #12]
 801088e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8010892:	edd2 7a00 	vldr	s15, [r2]
 8010896:	f100 0210 	add.w	r2, r0, #16
 801089a:	4592      	cmp	sl, r2
 801089c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80108a0:	d93c      	bls.n	801091c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80108a2:	791a      	ldrb	r2, [r3, #4]
 80108a4:	edd0 6a04 	vldr	s13, [r0, #16]
 80108a8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80108ac:	edd2 7a00 	vldr	s15, [r2]
 80108b0:	f100 0214 	add.w	r2, r0, #20
 80108b4:	4592      	cmp	sl, r2
 80108b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80108ba:	d92f      	bls.n	801091c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80108bc:	795a      	ldrb	r2, [r3, #5]
 80108be:	edd0 6a05 	vldr	s13, [r0, #20]
 80108c2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80108c6:	edd2 7a00 	vldr	s15, [r2]
 80108ca:	f100 0218 	add.w	r2, r0, #24
 80108ce:	4596      	cmp	lr, r2
 80108d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80108d4:	d922      	bls.n	801091c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80108d6:	799a      	ldrb	r2, [r3, #6]
 80108d8:	edd0 6a06 	vldr	s13, [r0, #24]
 80108dc:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80108e0:	edd2 7a00 	vldr	s15, [r2]
 80108e4:	f100 021c 	add.w	r2, r0, #28
 80108e8:	4596      	cmp	lr, r2
 80108ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80108ee:	d915      	bls.n	801091c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80108f0:	79da      	ldrb	r2, [r3, #7]
 80108f2:	edd0 6a07 	vldr	s13, [r0, #28]
 80108f6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80108fa:	edd2 7a00 	vldr	s15, [r2]
 80108fe:	f100 0220 	add.w	r2, r0, #32
 8010902:	4596      	cmp	lr, r2
 8010904:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010908:	d908      	bls.n	801091c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801090a:	7a1a      	ldrb	r2, [r3, #8]
 801090c:	edd0 7a08 	vldr	s15, [r0, #32]
 8010910:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8010914:	edd2 6a00 	vldr	s13, [r2]
 8010918:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801091c:	9a01      	ldr	r2, [sp, #4]
 801091e:	1a10      	subs	r0, r2, r0
 8010920:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8010924:	1c43      	adds	r3, r0, #1
 8010926:	e5e9      	b.n	80104fc <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8010928:	f813 1b01 	ldrb.w	r1, [r3], #1
 801092c:	eddb 7a00 	vldr	s15, [fp]
 8010930:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010934:	9a07      	ldr	r2, [sp, #28]
 8010936:	ed91 7a00 	vldr	s14, [r1]
 801093a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801093e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010942:	ecf2 7a01 	vldmia	r2!, {s15}
 8010946:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801094a:	edd1 6a00 	vldr	s13, [r1]
 801094e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010952:	e6fc      	b.n	801074e <forward_lite_dense_if32of32wf32_lut8+0x32a>
 8010954:	eeb0 7a63 	vmov.f32	s14, s7
 8010958:	465a      	mov	r2, fp
 801095a:	e7f0      	b.n	801093e <forward_lite_dense_if32of32wf32_lut8+0x51a>
 801095c:	463b      	mov	r3, r7
 801095e:	e76a      	b.n	8010836 <forward_lite_dense_if32of32wf32_lut8+0x412>
 8010960:	465a      	mov	r2, fp
 8010962:	e674      	b.n	801064e <forward_lite_dense_if32of32wf32_lut8+0x22a>
 8010964:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010966:	1acb      	subs	r3, r1, r3
 8010968:	461a      	mov	r2, r3
 801096a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801096c:	ed92 7a00 	vldr	s14, [r2]
 8010970:	ecf0 7a01 	vldmia	r0!, {s15}
 8010974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010978:	ece2 7a01 	vstmia	r2!, {s15}
 801097c:	4291      	cmp	r1, r2
 801097e:	d1f5      	bne.n	801096c <forward_lite_dense_if32of32wf32_lut8+0x548>
 8010980:	e7f2      	b.n	8010968 <forward_lite_dense_if32of32wf32_lut8+0x544>
 8010982:	bf00      	nop

08010984 <st_int8_copy>:
 8010984:	4288      	cmp	r0, r1
 8010986:	d010      	beq.n	80109aa <st_int8_copy+0x26>
 8010988:	b17a      	cbz	r2, 80109aa <st_int8_copy+0x26>
 801098a:	4288      	cmp	r0, r1
 801098c:	eb00 0302 	add.w	r3, r0, r2
 8010990:	d20c      	bcs.n	80109ac <st_int8_copy+0x28>
 8010992:	428b      	cmp	r3, r1
 8010994:	d90a      	bls.n	80109ac <st_int8_copy+0x28>
 8010996:	4283      	cmp	r3, r0
 8010998:	440a      	add	r2, r1
 801099a:	d906      	bls.n	80109aa <st_int8_copy+0x26>
 801099c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80109a0:	4283      	cmp	r3, r0
 80109a2:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80109a6:	d1f9      	bne.n	801099c <st_int8_copy+0x18>
 80109a8:	4770      	bx	lr
 80109aa:	4770      	bx	lr
 80109ac:	078b      	lsls	r3, r1, #30
 80109ae:	d102      	bne.n	80109b6 <st_int8_copy+0x32>
 80109b0:	e008      	b.n	80109c4 <st_int8_copy+0x40>
 80109b2:	2a00      	cmp	r2, #0
 80109b4:	d04c      	beq.n	8010a50 <st_int8_copy+0xcc>
 80109b6:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80109ba:	3a01      	subs	r2, #1
 80109bc:	f801 3b01 	strb.w	r3, [r1], #1
 80109c0:	078b      	lsls	r3, r1, #30
 80109c2:	d1f6      	bne.n	80109b2 <st_int8_copy+0x2e>
 80109c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c8:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80109cc:	d05d      	beq.n	8010a8a <st_int8_copy+0x106>
 80109ce:	ea41 0300 	orr.w	r3, r1, r0
 80109d2:	075b      	lsls	r3, r3, #29
 80109d4:	d13d      	bne.n	8010a52 <st_int8_copy+0xce>
 80109d6:	f1be 0f01 	cmp.w	lr, #1
 80109da:	d03a      	beq.n	8010a52 <st_int8_copy+0xce>
 80109dc:	f100 0310 	add.w	r3, r0, #16
 80109e0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80109e4:	f101 0c10 	add.w	ip, r1, #16
 80109e8:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80109ec:	3310      	adds	r3, #16
 80109ee:	f10c 0c10 	add.w	ip, ip, #16
 80109f2:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 80109f6:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 80109fa:	4573      	cmp	r3, lr
 80109fc:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 8010a00:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 8010a04:	d1f2      	bne.n	80109ec <st_int8_copy+0x68>
 8010a06:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8010a0a:	4421      	add	r1, r4
 8010a0c:	4420      	add	r0, r4
 8010a0e:	f002 0203 	and.w	r2, r2, #3
 8010a12:	b16b      	cbz	r3, 8010a30 <st_int8_copy+0xac>
 8010a14:	6804      	ldr	r4, [r0, #0]
 8010a16:	600c      	str	r4, [r1, #0]
 8010a18:	1e5c      	subs	r4, r3, #1
 8010a1a:	d005      	beq.n	8010a28 <st_int8_copy+0xa4>
 8010a1c:	6845      	ldr	r5, [r0, #4]
 8010a1e:	2c01      	cmp	r4, #1
 8010a20:	604d      	str	r5, [r1, #4]
 8010a22:	d001      	beq.n	8010a28 <st_int8_copy+0xa4>
 8010a24:	6884      	ldr	r4, [r0, #8]
 8010a26:	608c      	str	r4, [r1, #8]
 8010a28:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8010a2c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010a30:	b162      	cbz	r2, 8010a4c <st_int8_copy+0xc8>
 8010a32:	f990 3000 	ldrsb.w	r3, [r0]
 8010a36:	3a01      	subs	r2, #1
 8010a38:	700b      	strb	r3, [r1, #0]
 8010a3a:	d007      	beq.n	8010a4c <st_int8_copy+0xc8>
 8010a3c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010a40:	2a01      	cmp	r2, #1
 8010a42:	704b      	strb	r3, [r1, #1]
 8010a44:	d002      	beq.n	8010a4c <st_int8_copy+0xc8>
 8010a46:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8010a4a:	708b      	strb	r3, [r1, #2]
 8010a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a50:	4770      	bx	lr
 8010a52:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8010a56:	460b      	mov	r3, r1
 8010a58:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8010a5c:	4684      	mov	ip, r0
 8010a5e:	f8dc 8000 	ldr.w	r8, [ip]
 8010a62:	3310      	adds	r3, #16
 8010a64:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8010a68:	f10c 0c10 	add.w	ip, ip, #16
 8010a6c:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8010a70:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8010a74:	f843 8c10 	str.w	r8, [r3, #-16]
 8010a78:	f843 7c0c 	str.w	r7, [r3, #-12]
 8010a7c:	f843 6c08 	str.w	r6, [r3, #-8]
 8010a80:	f843 5c04 	str.w	r5, [r3, #-4]
 8010a84:	459e      	cmp	lr, r3
 8010a86:	d1ea      	bne.n	8010a5e <st_int8_copy+0xda>
 8010a88:	e7bd      	b.n	8010a06 <st_int8_copy+0x82>
 8010a8a:	0893      	lsrs	r3, r2, #2
 8010a8c:	f002 0203 	and.w	r2, r2, #3
 8010a90:	e7bf      	b.n	8010a12 <st_int8_copy+0x8e>
 8010a92:	bf00      	nop

08010a94 <ai_array_to_buffer_fmt>:
 8010a94:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8010a98:	2b02      	cmp	r3, #2
 8010a9a:	d053      	beq.n	8010b44 <ai_array_to_buffer_fmt+0xb0>
 8010a9c:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8010aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8010b50 <ai_array_to_buffer_fmt+0xbc>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d010      	beq.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010aa6:	dc21      	bgt.n	8010aec <ai_array_to_buffer_fmt+0x58>
 8010aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8010b54 <ai_array_to_buffer_fmt+0xc0>)
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	d00c      	beq.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010aae:	dd0f      	ble.n	8010ad0 <ai_array_to_buffer_fmt+0x3c>
 8010ab0:	4a29      	ldr	r2, [pc, #164]	@ (8010b58 <ai_array_to_buffer_fmt+0xc4>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d008      	beq.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010ab6:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8010aba:	4293      	cmp	r3, r2
 8010abc:	d004      	beq.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010abe:	4a27      	ldr	r2, [pc, #156]	@ (8010b5c <ai_array_to_buffer_fmt+0xc8>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	bf0c      	ite	eq
 8010ac4:	4613      	moveq	r3, r2
 8010ac6:	2340      	movne	r3, #64	@ 0x40
 8010ac8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8010acc:	4318      	orrs	r0, r3
 8010ace:	4770      	bx	lr
 8010ad0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d0f7      	beq.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010ad8:	dd2a      	ble.n	8010b30 <ai_array_to_buffer_fmt+0x9c>
 8010ada:	4a21      	ldr	r2, [pc, #132]	@ (8010b60 <ai_array_to_buffer_fmt+0xcc>)
 8010adc:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	bf0c      	ite	eq
 8010ae4:	4613      	moveq	r3, r2
 8010ae6:	2340      	movne	r3, #64	@ 0x40
 8010ae8:	4318      	orrs	r0, r3
 8010aea:	4770      	bx	lr
 8010aec:	4a1d      	ldr	r2, [pc, #116]	@ (8010b64 <ai_array_to_buffer_fmt+0xd0>)
 8010aee:	4293      	cmp	r3, r2
 8010af0:	d0ea      	beq.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010af2:	dd0f      	ble.n	8010b14 <ai_array_to_buffer_fmt+0x80>
 8010af4:	4a1c      	ldr	r2, [pc, #112]	@ (8010b68 <ai_array_to_buffer_fmt+0xd4>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d0e6      	beq.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010afa:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d0e2      	beq.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010b02:	4a1a      	ldr	r2, [pc, #104]	@ (8010b6c <ai_array_to_buffer_fmt+0xd8>)
 8010b04:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	bf0c      	ite	eq
 8010b0c:	4613      	moveq	r3, r2
 8010b0e:	2340      	movne	r3, #64	@ 0x40
 8010b10:	4318      	orrs	r0, r3
 8010b12:	4770      	bx	lr
 8010b14:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d0d5      	beq.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010b1c:	3207      	adds	r2, #7
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d0d2      	beq.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010b22:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8010b26:	4293      	cmp	r3, r2
 8010b28:	bf0c      	ite	eq
 8010b2a:	4613      	moveq	r3, r2
 8010b2c:	2340      	movne	r3, #64	@ 0x40
 8010b2e:	e7cb      	b.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010b30:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d0c7      	beq.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010b38:	3280      	adds	r2, #128	@ 0x80
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	bf0c      	ite	eq
 8010b3e:	4613      	moveq	r3, r2
 8010b40:	2340      	movne	r3, #64	@ 0x40
 8010b42:	e7c1      	b.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010b44:	4b0a      	ldr	r3, [pc, #40]	@ (8010b70 <ai_array_to_buffer_fmt+0xdc>)
 8010b46:	4003      	ands	r3, r0
 8010b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010b4c:	e7bc      	b.n	8010ac8 <ai_array_to_buffer_fmt+0x34>
 8010b4e:	bf00      	nop
 8010b50:	00840040 	.word	0x00840040
 8010b54:	00040840 	.word	0x00040840
 8010b58:	00041040 	.word	0x00041040
 8010b5c:	0004084f 	.word	0x0004084f
 8010b60:	00040447 	.word	0x00040447
 8010b64:	00840840 	.word	0x00840840
 8010b68:	00841040 	.word	0x00841040
 8010b6c:	0084084f 	.word	0x0084084f
 8010b70:	00803fff 	.word	0x00803fff

08010b74 <ai_version_get>:
 8010b74:	0212      	lsls	r2, r2, #8
 8010b76:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010b7a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8010b7e:	4770      	bx	lr

08010b80 <sbrk_aligned>:
 8010b80:	b570      	push	{r4, r5, r6, lr}
 8010b82:	4e0f      	ldr	r6, [pc, #60]	@ (8010bc0 <sbrk_aligned+0x40>)
 8010b84:	460c      	mov	r4, r1
 8010b86:	6831      	ldr	r1, [r6, #0]
 8010b88:	4605      	mov	r5, r0
 8010b8a:	b911      	cbnz	r1, 8010b92 <sbrk_aligned+0x12>
 8010b8c:	f000 fa5e 	bl	801104c <_sbrk_r>
 8010b90:	6030      	str	r0, [r6, #0]
 8010b92:	4621      	mov	r1, r4
 8010b94:	4628      	mov	r0, r5
 8010b96:	f000 fa59 	bl	801104c <_sbrk_r>
 8010b9a:	1c43      	adds	r3, r0, #1
 8010b9c:	d103      	bne.n	8010ba6 <sbrk_aligned+0x26>
 8010b9e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	bd70      	pop	{r4, r5, r6, pc}
 8010ba6:	1cc4      	adds	r4, r0, #3
 8010ba8:	f024 0403 	bic.w	r4, r4, #3
 8010bac:	42a0      	cmp	r0, r4
 8010bae:	d0f8      	beq.n	8010ba2 <sbrk_aligned+0x22>
 8010bb0:	1a21      	subs	r1, r4, r0
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	f000 fa4a 	bl	801104c <_sbrk_r>
 8010bb8:	3001      	adds	r0, #1
 8010bba:	d1f2      	bne.n	8010ba2 <sbrk_aligned+0x22>
 8010bbc:	e7ef      	b.n	8010b9e <sbrk_aligned+0x1e>
 8010bbe:	bf00      	nop
 8010bc0:	2001e7e8 	.word	0x2001e7e8

08010bc4 <_malloc_r>:
 8010bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bc8:	1ccd      	adds	r5, r1, #3
 8010bca:	f025 0503 	bic.w	r5, r5, #3
 8010bce:	3508      	adds	r5, #8
 8010bd0:	2d0c      	cmp	r5, #12
 8010bd2:	bf38      	it	cc
 8010bd4:	250c      	movcc	r5, #12
 8010bd6:	2d00      	cmp	r5, #0
 8010bd8:	4606      	mov	r6, r0
 8010bda:	db01      	blt.n	8010be0 <_malloc_r+0x1c>
 8010bdc:	42a9      	cmp	r1, r5
 8010bde:	d904      	bls.n	8010bea <_malloc_r+0x26>
 8010be0:	230c      	movs	r3, #12
 8010be2:	6033      	str	r3, [r6, #0]
 8010be4:	2000      	movs	r0, #0
 8010be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010cc0 <_malloc_r+0xfc>
 8010bee:	f000 f89f 	bl	8010d30 <__malloc_lock>
 8010bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8010bf6:	461c      	mov	r4, r3
 8010bf8:	bb44      	cbnz	r4, 8010c4c <_malloc_r+0x88>
 8010bfa:	4629      	mov	r1, r5
 8010bfc:	4630      	mov	r0, r6
 8010bfe:	f7ff ffbf 	bl	8010b80 <sbrk_aligned>
 8010c02:	1c43      	adds	r3, r0, #1
 8010c04:	4604      	mov	r4, r0
 8010c06:	d158      	bne.n	8010cba <_malloc_r+0xf6>
 8010c08:	f8d8 4000 	ldr.w	r4, [r8]
 8010c0c:	4627      	mov	r7, r4
 8010c0e:	2f00      	cmp	r7, #0
 8010c10:	d143      	bne.n	8010c9a <_malloc_r+0xd6>
 8010c12:	2c00      	cmp	r4, #0
 8010c14:	d04b      	beq.n	8010cae <_malloc_r+0xea>
 8010c16:	6823      	ldr	r3, [r4, #0]
 8010c18:	4639      	mov	r1, r7
 8010c1a:	4630      	mov	r0, r6
 8010c1c:	eb04 0903 	add.w	r9, r4, r3
 8010c20:	f000 fa14 	bl	801104c <_sbrk_r>
 8010c24:	4581      	cmp	r9, r0
 8010c26:	d142      	bne.n	8010cae <_malloc_r+0xea>
 8010c28:	6821      	ldr	r1, [r4, #0]
 8010c2a:	1a6d      	subs	r5, r5, r1
 8010c2c:	4629      	mov	r1, r5
 8010c2e:	4630      	mov	r0, r6
 8010c30:	f7ff ffa6 	bl	8010b80 <sbrk_aligned>
 8010c34:	3001      	adds	r0, #1
 8010c36:	d03a      	beq.n	8010cae <_malloc_r+0xea>
 8010c38:	6823      	ldr	r3, [r4, #0]
 8010c3a:	442b      	add	r3, r5
 8010c3c:	6023      	str	r3, [r4, #0]
 8010c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8010c42:	685a      	ldr	r2, [r3, #4]
 8010c44:	bb62      	cbnz	r2, 8010ca0 <_malloc_r+0xdc>
 8010c46:	f8c8 7000 	str.w	r7, [r8]
 8010c4a:	e00f      	b.n	8010c6c <_malloc_r+0xa8>
 8010c4c:	6822      	ldr	r2, [r4, #0]
 8010c4e:	1b52      	subs	r2, r2, r5
 8010c50:	d420      	bmi.n	8010c94 <_malloc_r+0xd0>
 8010c52:	2a0b      	cmp	r2, #11
 8010c54:	d917      	bls.n	8010c86 <_malloc_r+0xc2>
 8010c56:	1961      	adds	r1, r4, r5
 8010c58:	42a3      	cmp	r3, r4
 8010c5a:	6025      	str	r5, [r4, #0]
 8010c5c:	bf18      	it	ne
 8010c5e:	6059      	strne	r1, [r3, #4]
 8010c60:	6863      	ldr	r3, [r4, #4]
 8010c62:	bf08      	it	eq
 8010c64:	f8c8 1000 	streq.w	r1, [r8]
 8010c68:	5162      	str	r2, [r4, r5]
 8010c6a:	604b      	str	r3, [r1, #4]
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	f000 f865 	bl	8010d3c <__malloc_unlock>
 8010c72:	f104 000b 	add.w	r0, r4, #11
 8010c76:	1d23      	adds	r3, r4, #4
 8010c78:	f020 0007 	bic.w	r0, r0, #7
 8010c7c:	1ac2      	subs	r2, r0, r3
 8010c7e:	bf1c      	itt	ne
 8010c80:	1a1b      	subne	r3, r3, r0
 8010c82:	50a3      	strne	r3, [r4, r2]
 8010c84:	e7af      	b.n	8010be6 <_malloc_r+0x22>
 8010c86:	6862      	ldr	r2, [r4, #4]
 8010c88:	42a3      	cmp	r3, r4
 8010c8a:	bf0c      	ite	eq
 8010c8c:	f8c8 2000 	streq.w	r2, [r8]
 8010c90:	605a      	strne	r2, [r3, #4]
 8010c92:	e7eb      	b.n	8010c6c <_malloc_r+0xa8>
 8010c94:	4623      	mov	r3, r4
 8010c96:	6864      	ldr	r4, [r4, #4]
 8010c98:	e7ae      	b.n	8010bf8 <_malloc_r+0x34>
 8010c9a:	463c      	mov	r4, r7
 8010c9c:	687f      	ldr	r7, [r7, #4]
 8010c9e:	e7b6      	b.n	8010c0e <_malloc_r+0x4a>
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	42a3      	cmp	r3, r4
 8010ca6:	d1fb      	bne.n	8010ca0 <_malloc_r+0xdc>
 8010ca8:	2300      	movs	r3, #0
 8010caa:	6053      	str	r3, [r2, #4]
 8010cac:	e7de      	b.n	8010c6c <_malloc_r+0xa8>
 8010cae:	230c      	movs	r3, #12
 8010cb0:	6033      	str	r3, [r6, #0]
 8010cb2:	4630      	mov	r0, r6
 8010cb4:	f000 f842 	bl	8010d3c <__malloc_unlock>
 8010cb8:	e794      	b.n	8010be4 <_malloc_r+0x20>
 8010cba:	6005      	str	r5, [r0, #0]
 8010cbc:	e7d6      	b.n	8010c6c <_malloc_r+0xa8>
 8010cbe:	bf00      	nop
 8010cc0:	2001e7ec 	.word	0x2001e7ec

08010cc4 <sniprintf>:
 8010cc4:	b40c      	push	{r2, r3}
 8010cc6:	b530      	push	{r4, r5, lr}
 8010cc8:	4b18      	ldr	r3, [pc, #96]	@ (8010d2c <sniprintf+0x68>)
 8010cca:	1e0c      	subs	r4, r1, #0
 8010ccc:	681d      	ldr	r5, [r3, #0]
 8010cce:	b09d      	sub	sp, #116	@ 0x74
 8010cd0:	da08      	bge.n	8010ce4 <sniprintf+0x20>
 8010cd2:	238b      	movs	r3, #139	@ 0x8b
 8010cd4:	602b      	str	r3, [r5, #0]
 8010cd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010cda:	b01d      	add	sp, #116	@ 0x74
 8010cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ce0:	b002      	add	sp, #8
 8010ce2:	4770      	bx	lr
 8010ce4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010ce8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010cec:	f04f 0300 	mov.w	r3, #0
 8010cf0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010cf2:	bf14      	ite	ne
 8010cf4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8010cf8:	4623      	moveq	r3, r4
 8010cfa:	9304      	str	r3, [sp, #16]
 8010cfc:	9307      	str	r3, [sp, #28]
 8010cfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010d02:	9002      	str	r0, [sp, #8]
 8010d04:	9006      	str	r0, [sp, #24]
 8010d06:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010d0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010d0c:	ab21      	add	r3, sp, #132	@ 0x84
 8010d0e:	a902      	add	r1, sp, #8
 8010d10:	4628      	mov	r0, r5
 8010d12:	9301      	str	r3, [sp, #4]
 8010d14:	f000 fa8c 	bl	8011230 <_svfiprintf_r>
 8010d18:	1c43      	adds	r3, r0, #1
 8010d1a:	bfbc      	itt	lt
 8010d1c:	238b      	movlt	r3, #139	@ 0x8b
 8010d1e:	602b      	strlt	r3, [r5, #0]
 8010d20:	2c00      	cmp	r4, #0
 8010d22:	d0da      	beq.n	8010cda <sniprintf+0x16>
 8010d24:	9b02      	ldr	r3, [sp, #8]
 8010d26:	2200      	movs	r2, #0
 8010d28:	701a      	strb	r2, [r3, #0]
 8010d2a:	e7d6      	b.n	8010cda <sniprintf+0x16>
 8010d2c:	20002180 	.word	0x20002180

08010d30 <__malloc_lock>:
 8010d30:	4801      	ldr	r0, [pc, #4]	@ (8010d38 <__malloc_lock+0x8>)
 8010d32:	f000 b9c6 	b.w	80110c2 <__retarget_lock_acquire_recursive>
 8010d36:	bf00      	nop
 8010d38:	2001e92c 	.word	0x2001e92c

08010d3c <__malloc_unlock>:
 8010d3c:	4801      	ldr	r0, [pc, #4]	@ (8010d44 <__malloc_unlock+0x8>)
 8010d3e:	f000 b9c1 	b.w	80110c4 <__retarget_lock_release_recursive>
 8010d42:	bf00      	nop
 8010d44:	2001e92c 	.word	0x2001e92c

08010d48 <std>:
 8010d48:	2300      	movs	r3, #0
 8010d4a:	b510      	push	{r4, lr}
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8010d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d56:	6083      	str	r3, [r0, #8]
 8010d58:	8181      	strh	r1, [r0, #12]
 8010d5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8010d5c:	81c2      	strh	r2, [r0, #14]
 8010d5e:	6183      	str	r3, [r0, #24]
 8010d60:	4619      	mov	r1, r3
 8010d62:	2208      	movs	r2, #8
 8010d64:	305c      	adds	r0, #92	@ 0x5c
 8010d66:	f000 f969 	bl	801103c <memset>
 8010d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8010da0 <std+0x58>)
 8010d6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8010d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8010da4 <std+0x5c>)
 8010d70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010d72:	4b0d      	ldr	r3, [pc, #52]	@ (8010da8 <std+0x60>)
 8010d74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010d76:	4b0d      	ldr	r3, [pc, #52]	@ (8010dac <std+0x64>)
 8010d78:	6323      	str	r3, [r4, #48]	@ 0x30
 8010d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8010db0 <std+0x68>)
 8010d7c:	6224      	str	r4, [r4, #32]
 8010d7e:	429c      	cmp	r4, r3
 8010d80:	d006      	beq.n	8010d90 <std+0x48>
 8010d82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010d86:	4294      	cmp	r4, r2
 8010d88:	d002      	beq.n	8010d90 <std+0x48>
 8010d8a:	33d0      	adds	r3, #208	@ 0xd0
 8010d8c:	429c      	cmp	r4, r3
 8010d8e:	d105      	bne.n	8010d9c <std+0x54>
 8010d90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d98:	f000 b992 	b.w	80110c0 <__retarget_lock_init_recursive>
 8010d9c:	bd10      	pop	{r4, pc}
 8010d9e:	bf00      	nop
 8010da0:	08011b2d 	.word	0x08011b2d
 8010da4:	08011b4f 	.word	0x08011b4f
 8010da8:	08011b87 	.word	0x08011b87
 8010dac:	08011bab 	.word	0x08011bab
 8010db0:	2001e7f0 	.word	0x2001e7f0

08010db4 <stdio_exit_handler>:
 8010db4:	4a02      	ldr	r2, [pc, #8]	@ (8010dc0 <stdio_exit_handler+0xc>)
 8010db6:	4903      	ldr	r1, [pc, #12]	@ (8010dc4 <stdio_exit_handler+0x10>)
 8010db8:	4803      	ldr	r0, [pc, #12]	@ (8010dc8 <stdio_exit_handler+0x14>)
 8010dba:	f000 b897 	b.w	8010eec <_fwalk_sglue>
 8010dbe:	bf00      	nop
 8010dc0:	20002174 	.word	0x20002174
 8010dc4:	08011acd 	.word	0x08011acd
 8010dc8:	20002184 	.word	0x20002184

08010dcc <cleanup_stdio>:
 8010dcc:	6841      	ldr	r1, [r0, #4]
 8010dce:	4b0c      	ldr	r3, [pc, #48]	@ (8010e00 <cleanup_stdio+0x34>)
 8010dd0:	4299      	cmp	r1, r3
 8010dd2:	b510      	push	{r4, lr}
 8010dd4:	4604      	mov	r4, r0
 8010dd6:	d001      	beq.n	8010ddc <cleanup_stdio+0x10>
 8010dd8:	f000 fe78 	bl	8011acc <_fflush_r>
 8010ddc:	68a1      	ldr	r1, [r4, #8]
 8010dde:	4b09      	ldr	r3, [pc, #36]	@ (8010e04 <cleanup_stdio+0x38>)
 8010de0:	4299      	cmp	r1, r3
 8010de2:	d002      	beq.n	8010dea <cleanup_stdio+0x1e>
 8010de4:	4620      	mov	r0, r4
 8010de6:	f000 fe71 	bl	8011acc <_fflush_r>
 8010dea:	68e1      	ldr	r1, [r4, #12]
 8010dec:	4b06      	ldr	r3, [pc, #24]	@ (8010e08 <cleanup_stdio+0x3c>)
 8010dee:	4299      	cmp	r1, r3
 8010df0:	d004      	beq.n	8010dfc <cleanup_stdio+0x30>
 8010df2:	4620      	mov	r0, r4
 8010df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010df8:	f000 be68 	b.w	8011acc <_fflush_r>
 8010dfc:	bd10      	pop	{r4, pc}
 8010dfe:	bf00      	nop
 8010e00:	2001e7f0 	.word	0x2001e7f0
 8010e04:	2001e858 	.word	0x2001e858
 8010e08:	2001e8c0 	.word	0x2001e8c0

08010e0c <global_stdio_init.part.0>:
 8010e0c:	b510      	push	{r4, lr}
 8010e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8010e3c <global_stdio_init.part.0+0x30>)
 8010e10:	4c0b      	ldr	r4, [pc, #44]	@ (8010e40 <global_stdio_init.part.0+0x34>)
 8010e12:	4a0c      	ldr	r2, [pc, #48]	@ (8010e44 <global_stdio_init.part.0+0x38>)
 8010e14:	601a      	str	r2, [r3, #0]
 8010e16:	4620      	mov	r0, r4
 8010e18:	2200      	movs	r2, #0
 8010e1a:	2104      	movs	r1, #4
 8010e1c:	f7ff ff94 	bl	8010d48 <std>
 8010e20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010e24:	2201      	movs	r2, #1
 8010e26:	2109      	movs	r1, #9
 8010e28:	f7ff ff8e 	bl	8010d48 <std>
 8010e2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010e30:	2202      	movs	r2, #2
 8010e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e36:	2112      	movs	r1, #18
 8010e38:	f7ff bf86 	b.w	8010d48 <std>
 8010e3c:	2001e928 	.word	0x2001e928
 8010e40:	2001e7f0 	.word	0x2001e7f0
 8010e44:	08010db5 	.word	0x08010db5

08010e48 <__sfp_lock_acquire>:
 8010e48:	4801      	ldr	r0, [pc, #4]	@ (8010e50 <__sfp_lock_acquire+0x8>)
 8010e4a:	f000 b93a 	b.w	80110c2 <__retarget_lock_acquire_recursive>
 8010e4e:	bf00      	nop
 8010e50:	2001e92d 	.word	0x2001e92d

08010e54 <__sfp_lock_release>:
 8010e54:	4801      	ldr	r0, [pc, #4]	@ (8010e5c <__sfp_lock_release+0x8>)
 8010e56:	f000 b935 	b.w	80110c4 <__retarget_lock_release_recursive>
 8010e5a:	bf00      	nop
 8010e5c:	2001e92d 	.word	0x2001e92d

08010e60 <__sinit>:
 8010e60:	b510      	push	{r4, lr}
 8010e62:	4604      	mov	r4, r0
 8010e64:	f7ff fff0 	bl	8010e48 <__sfp_lock_acquire>
 8010e68:	6a23      	ldr	r3, [r4, #32]
 8010e6a:	b11b      	cbz	r3, 8010e74 <__sinit+0x14>
 8010e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e70:	f7ff bff0 	b.w	8010e54 <__sfp_lock_release>
 8010e74:	4b04      	ldr	r3, [pc, #16]	@ (8010e88 <__sinit+0x28>)
 8010e76:	6223      	str	r3, [r4, #32]
 8010e78:	4b04      	ldr	r3, [pc, #16]	@ (8010e8c <__sinit+0x2c>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1f5      	bne.n	8010e6c <__sinit+0xc>
 8010e80:	f7ff ffc4 	bl	8010e0c <global_stdio_init.part.0>
 8010e84:	e7f2      	b.n	8010e6c <__sinit+0xc>
 8010e86:	bf00      	nop
 8010e88:	08010dcd 	.word	0x08010dcd
 8010e8c:	2001e928 	.word	0x2001e928

08010e90 <_realloc_r>:
 8010e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e94:	4607      	mov	r7, r0
 8010e96:	4614      	mov	r4, r2
 8010e98:	460d      	mov	r5, r1
 8010e9a:	b921      	cbnz	r1, 8010ea6 <_realloc_r+0x16>
 8010e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea0:	4611      	mov	r1, r2
 8010ea2:	f7ff be8f 	b.w	8010bc4 <_malloc_r>
 8010ea6:	b92a      	cbnz	r2, 8010eb4 <_realloc_r+0x24>
 8010ea8:	f000 f91c 	bl	80110e4 <_free_r>
 8010eac:	4625      	mov	r5, r4
 8010eae:	4628      	mov	r0, r5
 8010eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eb4:	f000 fe32 	bl	8011b1c <_malloc_usable_size_r>
 8010eb8:	4284      	cmp	r4, r0
 8010eba:	4606      	mov	r6, r0
 8010ebc:	d802      	bhi.n	8010ec4 <_realloc_r+0x34>
 8010ebe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010ec2:	d8f4      	bhi.n	8010eae <_realloc_r+0x1e>
 8010ec4:	4621      	mov	r1, r4
 8010ec6:	4638      	mov	r0, r7
 8010ec8:	f7ff fe7c 	bl	8010bc4 <_malloc_r>
 8010ecc:	4680      	mov	r8, r0
 8010ece:	b908      	cbnz	r0, 8010ed4 <_realloc_r+0x44>
 8010ed0:	4645      	mov	r5, r8
 8010ed2:	e7ec      	b.n	8010eae <_realloc_r+0x1e>
 8010ed4:	42b4      	cmp	r4, r6
 8010ed6:	4622      	mov	r2, r4
 8010ed8:	4629      	mov	r1, r5
 8010eda:	bf28      	it	cs
 8010edc:	4632      	movcs	r2, r6
 8010ede:	f000 f8f2 	bl	80110c6 <memcpy>
 8010ee2:	4629      	mov	r1, r5
 8010ee4:	4638      	mov	r0, r7
 8010ee6:	f000 f8fd 	bl	80110e4 <_free_r>
 8010eea:	e7f1      	b.n	8010ed0 <_realloc_r+0x40>

08010eec <_fwalk_sglue>:
 8010eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ef0:	4607      	mov	r7, r0
 8010ef2:	4688      	mov	r8, r1
 8010ef4:	4614      	mov	r4, r2
 8010ef6:	2600      	movs	r6, #0
 8010ef8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010efc:	f1b9 0901 	subs.w	r9, r9, #1
 8010f00:	d505      	bpl.n	8010f0e <_fwalk_sglue+0x22>
 8010f02:	6824      	ldr	r4, [r4, #0]
 8010f04:	2c00      	cmp	r4, #0
 8010f06:	d1f7      	bne.n	8010ef8 <_fwalk_sglue+0xc>
 8010f08:	4630      	mov	r0, r6
 8010f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f0e:	89ab      	ldrh	r3, [r5, #12]
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	d907      	bls.n	8010f24 <_fwalk_sglue+0x38>
 8010f14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f18:	3301      	adds	r3, #1
 8010f1a:	d003      	beq.n	8010f24 <_fwalk_sglue+0x38>
 8010f1c:	4629      	mov	r1, r5
 8010f1e:	4638      	mov	r0, r7
 8010f20:	47c0      	blx	r8
 8010f22:	4306      	orrs	r6, r0
 8010f24:	3568      	adds	r5, #104	@ 0x68
 8010f26:	e7e9      	b.n	8010efc <_fwalk_sglue+0x10>

08010f28 <iprintf>:
 8010f28:	b40f      	push	{r0, r1, r2, r3}
 8010f2a:	b507      	push	{r0, r1, r2, lr}
 8010f2c:	4906      	ldr	r1, [pc, #24]	@ (8010f48 <iprintf+0x20>)
 8010f2e:	ab04      	add	r3, sp, #16
 8010f30:	6808      	ldr	r0, [r1, #0]
 8010f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f36:	6881      	ldr	r1, [r0, #8]
 8010f38:	9301      	str	r3, [sp, #4]
 8010f3a:	f000 fa9f 	bl	801147c <_vfiprintf_r>
 8010f3e:	b003      	add	sp, #12
 8010f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f44:	b004      	add	sp, #16
 8010f46:	4770      	bx	lr
 8010f48:	20002180 	.word	0x20002180

08010f4c <_puts_r>:
 8010f4c:	6a03      	ldr	r3, [r0, #32]
 8010f4e:	b570      	push	{r4, r5, r6, lr}
 8010f50:	6884      	ldr	r4, [r0, #8]
 8010f52:	4605      	mov	r5, r0
 8010f54:	460e      	mov	r6, r1
 8010f56:	b90b      	cbnz	r3, 8010f5c <_puts_r+0x10>
 8010f58:	f7ff ff82 	bl	8010e60 <__sinit>
 8010f5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010f5e:	07db      	lsls	r3, r3, #31
 8010f60:	d405      	bmi.n	8010f6e <_puts_r+0x22>
 8010f62:	89a3      	ldrh	r3, [r4, #12]
 8010f64:	0598      	lsls	r0, r3, #22
 8010f66:	d402      	bmi.n	8010f6e <_puts_r+0x22>
 8010f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f6a:	f000 f8aa 	bl	80110c2 <__retarget_lock_acquire_recursive>
 8010f6e:	89a3      	ldrh	r3, [r4, #12]
 8010f70:	0719      	lsls	r1, r3, #28
 8010f72:	d502      	bpl.n	8010f7a <_puts_r+0x2e>
 8010f74:	6923      	ldr	r3, [r4, #16]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d135      	bne.n	8010fe6 <_puts_r+0x9a>
 8010f7a:	4621      	mov	r1, r4
 8010f7c:	4628      	mov	r0, r5
 8010f7e:	f000 fe57 	bl	8011c30 <__swsetup_r>
 8010f82:	b380      	cbz	r0, 8010fe6 <_puts_r+0x9a>
 8010f84:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010f88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010f8a:	07da      	lsls	r2, r3, #31
 8010f8c:	d405      	bmi.n	8010f9a <_puts_r+0x4e>
 8010f8e:	89a3      	ldrh	r3, [r4, #12]
 8010f90:	059b      	lsls	r3, r3, #22
 8010f92:	d402      	bmi.n	8010f9a <_puts_r+0x4e>
 8010f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f96:	f000 f895 	bl	80110c4 <__retarget_lock_release_recursive>
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	bd70      	pop	{r4, r5, r6, pc}
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	da04      	bge.n	8010fac <_puts_r+0x60>
 8010fa2:	69a2      	ldr	r2, [r4, #24]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	dc17      	bgt.n	8010fd8 <_puts_r+0x8c>
 8010fa8:	290a      	cmp	r1, #10
 8010faa:	d015      	beq.n	8010fd8 <_puts_r+0x8c>
 8010fac:	6823      	ldr	r3, [r4, #0]
 8010fae:	1c5a      	adds	r2, r3, #1
 8010fb0:	6022      	str	r2, [r4, #0]
 8010fb2:	7019      	strb	r1, [r3, #0]
 8010fb4:	68a3      	ldr	r3, [r4, #8]
 8010fb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010fba:	3b01      	subs	r3, #1
 8010fbc:	60a3      	str	r3, [r4, #8]
 8010fbe:	2900      	cmp	r1, #0
 8010fc0:	d1ed      	bne.n	8010f9e <_puts_r+0x52>
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	da11      	bge.n	8010fea <_puts_r+0x9e>
 8010fc6:	4622      	mov	r2, r4
 8010fc8:	210a      	movs	r1, #10
 8010fca:	4628      	mov	r0, r5
 8010fcc:	f000 fdf1 	bl	8011bb2 <__swbuf_r>
 8010fd0:	3001      	adds	r0, #1
 8010fd2:	d0d7      	beq.n	8010f84 <_puts_r+0x38>
 8010fd4:	250a      	movs	r5, #10
 8010fd6:	e7d7      	b.n	8010f88 <_puts_r+0x3c>
 8010fd8:	4622      	mov	r2, r4
 8010fda:	4628      	mov	r0, r5
 8010fdc:	f000 fde9 	bl	8011bb2 <__swbuf_r>
 8010fe0:	3001      	adds	r0, #1
 8010fe2:	d1e7      	bne.n	8010fb4 <_puts_r+0x68>
 8010fe4:	e7ce      	b.n	8010f84 <_puts_r+0x38>
 8010fe6:	3e01      	subs	r6, #1
 8010fe8:	e7e4      	b.n	8010fb4 <_puts_r+0x68>
 8010fea:	6823      	ldr	r3, [r4, #0]
 8010fec:	1c5a      	adds	r2, r3, #1
 8010fee:	6022      	str	r2, [r4, #0]
 8010ff0:	220a      	movs	r2, #10
 8010ff2:	701a      	strb	r2, [r3, #0]
 8010ff4:	e7ee      	b.n	8010fd4 <_puts_r+0x88>
	...

08010ff8 <puts>:
 8010ff8:	4b02      	ldr	r3, [pc, #8]	@ (8011004 <puts+0xc>)
 8010ffa:	4601      	mov	r1, r0
 8010ffc:	6818      	ldr	r0, [r3, #0]
 8010ffe:	f7ff bfa5 	b.w	8010f4c <_puts_r>
 8011002:	bf00      	nop
 8011004:	20002180 	.word	0x20002180

08011008 <memmove>:
 8011008:	4288      	cmp	r0, r1
 801100a:	b510      	push	{r4, lr}
 801100c:	eb01 0402 	add.w	r4, r1, r2
 8011010:	d902      	bls.n	8011018 <memmove+0x10>
 8011012:	4284      	cmp	r4, r0
 8011014:	4623      	mov	r3, r4
 8011016:	d807      	bhi.n	8011028 <memmove+0x20>
 8011018:	1e43      	subs	r3, r0, #1
 801101a:	42a1      	cmp	r1, r4
 801101c:	d008      	beq.n	8011030 <memmove+0x28>
 801101e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011022:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011026:	e7f8      	b.n	801101a <memmove+0x12>
 8011028:	4402      	add	r2, r0
 801102a:	4601      	mov	r1, r0
 801102c:	428a      	cmp	r2, r1
 801102e:	d100      	bne.n	8011032 <memmove+0x2a>
 8011030:	bd10      	pop	{r4, pc}
 8011032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801103a:	e7f7      	b.n	801102c <memmove+0x24>

0801103c <memset>:
 801103c:	4402      	add	r2, r0
 801103e:	4603      	mov	r3, r0
 8011040:	4293      	cmp	r3, r2
 8011042:	d100      	bne.n	8011046 <memset+0xa>
 8011044:	4770      	bx	lr
 8011046:	f803 1b01 	strb.w	r1, [r3], #1
 801104a:	e7f9      	b.n	8011040 <memset+0x4>

0801104c <_sbrk_r>:
 801104c:	b538      	push	{r3, r4, r5, lr}
 801104e:	4d06      	ldr	r5, [pc, #24]	@ (8011068 <_sbrk_r+0x1c>)
 8011050:	2300      	movs	r3, #0
 8011052:	4604      	mov	r4, r0
 8011054:	4608      	mov	r0, r1
 8011056:	602b      	str	r3, [r5, #0]
 8011058:	f7fc fd16 	bl	800da88 <_sbrk>
 801105c:	1c43      	adds	r3, r0, #1
 801105e:	d102      	bne.n	8011066 <_sbrk_r+0x1a>
 8011060:	682b      	ldr	r3, [r5, #0]
 8011062:	b103      	cbz	r3, 8011066 <_sbrk_r+0x1a>
 8011064:	6023      	str	r3, [r4, #0]
 8011066:	bd38      	pop	{r3, r4, r5, pc}
 8011068:	2001e930 	.word	0x2001e930

0801106c <__errno>:
 801106c:	4b01      	ldr	r3, [pc, #4]	@ (8011074 <__errno+0x8>)
 801106e:	6818      	ldr	r0, [r3, #0]
 8011070:	4770      	bx	lr
 8011072:	bf00      	nop
 8011074:	20002180 	.word	0x20002180

08011078 <__libc_init_array>:
 8011078:	b570      	push	{r4, r5, r6, lr}
 801107a:	4d0d      	ldr	r5, [pc, #52]	@ (80110b0 <__libc_init_array+0x38>)
 801107c:	4c0d      	ldr	r4, [pc, #52]	@ (80110b4 <__libc_init_array+0x3c>)
 801107e:	1b64      	subs	r4, r4, r5
 8011080:	10a4      	asrs	r4, r4, #2
 8011082:	2600      	movs	r6, #0
 8011084:	42a6      	cmp	r6, r4
 8011086:	d109      	bne.n	801109c <__libc_init_array+0x24>
 8011088:	4d0b      	ldr	r5, [pc, #44]	@ (80110b8 <__libc_init_array+0x40>)
 801108a:	4c0c      	ldr	r4, [pc, #48]	@ (80110bc <__libc_init_array+0x44>)
 801108c:	f001 f99c 	bl	80123c8 <_init>
 8011090:	1b64      	subs	r4, r4, r5
 8011092:	10a4      	asrs	r4, r4, #2
 8011094:	2600      	movs	r6, #0
 8011096:	42a6      	cmp	r6, r4
 8011098:	d105      	bne.n	80110a6 <__libc_init_array+0x2e>
 801109a:	bd70      	pop	{r4, r5, r6, pc}
 801109c:	f855 3b04 	ldr.w	r3, [r5], #4
 80110a0:	4798      	blx	r3
 80110a2:	3601      	adds	r6, #1
 80110a4:	e7ee      	b.n	8011084 <__libc_init_array+0xc>
 80110a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80110aa:	4798      	blx	r3
 80110ac:	3601      	adds	r6, #1
 80110ae:	e7f2      	b.n	8011096 <__libc_init_array+0x1e>
 80110b0:	0804ee28 	.word	0x0804ee28
 80110b4:	0804ee28 	.word	0x0804ee28
 80110b8:	0804ee28 	.word	0x0804ee28
 80110bc:	0804ee2c 	.word	0x0804ee2c

080110c0 <__retarget_lock_init_recursive>:
 80110c0:	4770      	bx	lr

080110c2 <__retarget_lock_acquire_recursive>:
 80110c2:	4770      	bx	lr

080110c4 <__retarget_lock_release_recursive>:
 80110c4:	4770      	bx	lr

080110c6 <memcpy>:
 80110c6:	440a      	add	r2, r1
 80110c8:	4291      	cmp	r1, r2
 80110ca:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80110ce:	d100      	bne.n	80110d2 <memcpy+0xc>
 80110d0:	4770      	bx	lr
 80110d2:	b510      	push	{r4, lr}
 80110d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80110dc:	4291      	cmp	r1, r2
 80110de:	d1f9      	bne.n	80110d4 <memcpy+0xe>
 80110e0:	bd10      	pop	{r4, pc}
	...

080110e4 <_free_r>:
 80110e4:	b538      	push	{r3, r4, r5, lr}
 80110e6:	4605      	mov	r5, r0
 80110e8:	2900      	cmp	r1, #0
 80110ea:	d041      	beq.n	8011170 <_free_r+0x8c>
 80110ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110f0:	1f0c      	subs	r4, r1, #4
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	bfb8      	it	lt
 80110f6:	18e4      	addlt	r4, r4, r3
 80110f8:	f7ff fe1a 	bl	8010d30 <__malloc_lock>
 80110fc:	4a1d      	ldr	r2, [pc, #116]	@ (8011174 <_free_r+0x90>)
 80110fe:	6813      	ldr	r3, [r2, #0]
 8011100:	b933      	cbnz	r3, 8011110 <_free_r+0x2c>
 8011102:	6063      	str	r3, [r4, #4]
 8011104:	6014      	str	r4, [r2, #0]
 8011106:	4628      	mov	r0, r5
 8011108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801110c:	f7ff be16 	b.w	8010d3c <__malloc_unlock>
 8011110:	42a3      	cmp	r3, r4
 8011112:	d908      	bls.n	8011126 <_free_r+0x42>
 8011114:	6820      	ldr	r0, [r4, #0]
 8011116:	1821      	adds	r1, r4, r0
 8011118:	428b      	cmp	r3, r1
 801111a:	bf01      	itttt	eq
 801111c:	6819      	ldreq	r1, [r3, #0]
 801111e:	685b      	ldreq	r3, [r3, #4]
 8011120:	1809      	addeq	r1, r1, r0
 8011122:	6021      	streq	r1, [r4, #0]
 8011124:	e7ed      	b.n	8011102 <_free_r+0x1e>
 8011126:	461a      	mov	r2, r3
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	b10b      	cbz	r3, 8011130 <_free_r+0x4c>
 801112c:	42a3      	cmp	r3, r4
 801112e:	d9fa      	bls.n	8011126 <_free_r+0x42>
 8011130:	6811      	ldr	r1, [r2, #0]
 8011132:	1850      	adds	r0, r2, r1
 8011134:	42a0      	cmp	r0, r4
 8011136:	d10b      	bne.n	8011150 <_free_r+0x6c>
 8011138:	6820      	ldr	r0, [r4, #0]
 801113a:	4401      	add	r1, r0
 801113c:	1850      	adds	r0, r2, r1
 801113e:	4283      	cmp	r3, r0
 8011140:	6011      	str	r1, [r2, #0]
 8011142:	d1e0      	bne.n	8011106 <_free_r+0x22>
 8011144:	6818      	ldr	r0, [r3, #0]
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	6053      	str	r3, [r2, #4]
 801114a:	4408      	add	r0, r1
 801114c:	6010      	str	r0, [r2, #0]
 801114e:	e7da      	b.n	8011106 <_free_r+0x22>
 8011150:	d902      	bls.n	8011158 <_free_r+0x74>
 8011152:	230c      	movs	r3, #12
 8011154:	602b      	str	r3, [r5, #0]
 8011156:	e7d6      	b.n	8011106 <_free_r+0x22>
 8011158:	6820      	ldr	r0, [r4, #0]
 801115a:	1821      	adds	r1, r4, r0
 801115c:	428b      	cmp	r3, r1
 801115e:	bf04      	itt	eq
 8011160:	6819      	ldreq	r1, [r3, #0]
 8011162:	685b      	ldreq	r3, [r3, #4]
 8011164:	6063      	str	r3, [r4, #4]
 8011166:	bf04      	itt	eq
 8011168:	1809      	addeq	r1, r1, r0
 801116a:	6021      	streq	r1, [r4, #0]
 801116c:	6054      	str	r4, [r2, #4]
 801116e:	e7ca      	b.n	8011106 <_free_r+0x22>
 8011170:	bd38      	pop	{r3, r4, r5, pc}
 8011172:	bf00      	nop
 8011174:	2001e7ec 	.word	0x2001e7ec

08011178 <__ssputs_r>:
 8011178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801117c:	688e      	ldr	r6, [r1, #8]
 801117e:	461f      	mov	r7, r3
 8011180:	42be      	cmp	r6, r7
 8011182:	680b      	ldr	r3, [r1, #0]
 8011184:	4682      	mov	sl, r0
 8011186:	460c      	mov	r4, r1
 8011188:	4690      	mov	r8, r2
 801118a:	d82d      	bhi.n	80111e8 <__ssputs_r+0x70>
 801118c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011190:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011194:	d026      	beq.n	80111e4 <__ssputs_r+0x6c>
 8011196:	6965      	ldr	r5, [r4, #20]
 8011198:	6909      	ldr	r1, [r1, #16]
 801119a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801119e:	eba3 0901 	sub.w	r9, r3, r1
 80111a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80111a6:	1c7b      	adds	r3, r7, #1
 80111a8:	444b      	add	r3, r9
 80111aa:	106d      	asrs	r5, r5, #1
 80111ac:	429d      	cmp	r5, r3
 80111ae:	bf38      	it	cc
 80111b0:	461d      	movcc	r5, r3
 80111b2:	0553      	lsls	r3, r2, #21
 80111b4:	d527      	bpl.n	8011206 <__ssputs_r+0x8e>
 80111b6:	4629      	mov	r1, r5
 80111b8:	f7ff fd04 	bl	8010bc4 <_malloc_r>
 80111bc:	4606      	mov	r6, r0
 80111be:	b360      	cbz	r0, 801121a <__ssputs_r+0xa2>
 80111c0:	6921      	ldr	r1, [r4, #16]
 80111c2:	464a      	mov	r2, r9
 80111c4:	f7ff ff7f 	bl	80110c6 <memcpy>
 80111c8:	89a3      	ldrh	r3, [r4, #12]
 80111ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80111ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111d2:	81a3      	strh	r3, [r4, #12]
 80111d4:	6126      	str	r6, [r4, #16]
 80111d6:	6165      	str	r5, [r4, #20]
 80111d8:	444e      	add	r6, r9
 80111da:	eba5 0509 	sub.w	r5, r5, r9
 80111de:	6026      	str	r6, [r4, #0]
 80111e0:	60a5      	str	r5, [r4, #8]
 80111e2:	463e      	mov	r6, r7
 80111e4:	42be      	cmp	r6, r7
 80111e6:	d900      	bls.n	80111ea <__ssputs_r+0x72>
 80111e8:	463e      	mov	r6, r7
 80111ea:	6820      	ldr	r0, [r4, #0]
 80111ec:	4632      	mov	r2, r6
 80111ee:	4641      	mov	r1, r8
 80111f0:	f7ff ff0a 	bl	8011008 <memmove>
 80111f4:	68a3      	ldr	r3, [r4, #8]
 80111f6:	1b9b      	subs	r3, r3, r6
 80111f8:	60a3      	str	r3, [r4, #8]
 80111fa:	6823      	ldr	r3, [r4, #0]
 80111fc:	4433      	add	r3, r6
 80111fe:	6023      	str	r3, [r4, #0]
 8011200:	2000      	movs	r0, #0
 8011202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011206:	462a      	mov	r2, r5
 8011208:	f7ff fe42 	bl	8010e90 <_realloc_r>
 801120c:	4606      	mov	r6, r0
 801120e:	2800      	cmp	r0, #0
 8011210:	d1e0      	bne.n	80111d4 <__ssputs_r+0x5c>
 8011212:	6921      	ldr	r1, [r4, #16]
 8011214:	4650      	mov	r0, sl
 8011216:	f7ff ff65 	bl	80110e4 <_free_r>
 801121a:	230c      	movs	r3, #12
 801121c:	f8ca 3000 	str.w	r3, [sl]
 8011220:	89a3      	ldrh	r3, [r4, #12]
 8011222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011226:	81a3      	strh	r3, [r4, #12]
 8011228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801122c:	e7e9      	b.n	8011202 <__ssputs_r+0x8a>
	...

08011230 <_svfiprintf_r>:
 8011230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011234:	4698      	mov	r8, r3
 8011236:	898b      	ldrh	r3, [r1, #12]
 8011238:	061b      	lsls	r3, r3, #24
 801123a:	b09d      	sub	sp, #116	@ 0x74
 801123c:	4607      	mov	r7, r0
 801123e:	460d      	mov	r5, r1
 8011240:	4614      	mov	r4, r2
 8011242:	d510      	bpl.n	8011266 <_svfiprintf_r+0x36>
 8011244:	690b      	ldr	r3, [r1, #16]
 8011246:	b973      	cbnz	r3, 8011266 <_svfiprintf_r+0x36>
 8011248:	2140      	movs	r1, #64	@ 0x40
 801124a:	f7ff fcbb 	bl	8010bc4 <_malloc_r>
 801124e:	6028      	str	r0, [r5, #0]
 8011250:	6128      	str	r0, [r5, #16]
 8011252:	b930      	cbnz	r0, 8011262 <_svfiprintf_r+0x32>
 8011254:	230c      	movs	r3, #12
 8011256:	603b      	str	r3, [r7, #0]
 8011258:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801125c:	b01d      	add	sp, #116	@ 0x74
 801125e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011262:	2340      	movs	r3, #64	@ 0x40
 8011264:	616b      	str	r3, [r5, #20]
 8011266:	2300      	movs	r3, #0
 8011268:	9309      	str	r3, [sp, #36]	@ 0x24
 801126a:	2320      	movs	r3, #32
 801126c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011270:	f8cd 800c 	str.w	r8, [sp, #12]
 8011274:	2330      	movs	r3, #48	@ 0x30
 8011276:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011414 <_svfiprintf_r+0x1e4>
 801127a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801127e:	f04f 0901 	mov.w	r9, #1
 8011282:	4623      	mov	r3, r4
 8011284:	469a      	mov	sl, r3
 8011286:	f813 2b01 	ldrb.w	r2, [r3], #1
 801128a:	b10a      	cbz	r2, 8011290 <_svfiprintf_r+0x60>
 801128c:	2a25      	cmp	r2, #37	@ 0x25
 801128e:	d1f9      	bne.n	8011284 <_svfiprintf_r+0x54>
 8011290:	ebba 0b04 	subs.w	fp, sl, r4
 8011294:	d00b      	beq.n	80112ae <_svfiprintf_r+0x7e>
 8011296:	465b      	mov	r3, fp
 8011298:	4622      	mov	r2, r4
 801129a:	4629      	mov	r1, r5
 801129c:	4638      	mov	r0, r7
 801129e:	f7ff ff6b 	bl	8011178 <__ssputs_r>
 80112a2:	3001      	adds	r0, #1
 80112a4:	f000 80a7 	beq.w	80113f6 <_svfiprintf_r+0x1c6>
 80112a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80112aa:	445a      	add	r2, fp
 80112ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80112ae:	f89a 3000 	ldrb.w	r3, [sl]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	f000 809f 	beq.w	80113f6 <_svfiprintf_r+0x1c6>
 80112b8:	2300      	movs	r3, #0
 80112ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80112be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112c2:	f10a 0a01 	add.w	sl, sl, #1
 80112c6:	9304      	str	r3, [sp, #16]
 80112c8:	9307      	str	r3, [sp, #28]
 80112ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80112ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80112d0:	4654      	mov	r4, sl
 80112d2:	2205      	movs	r2, #5
 80112d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112d8:	484e      	ldr	r0, [pc, #312]	@ (8011414 <_svfiprintf_r+0x1e4>)
 80112da:	f7ee fff1 	bl	80002c0 <memchr>
 80112de:	9a04      	ldr	r2, [sp, #16]
 80112e0:	b9d8      	cbnz	r0, 801131a <_svfiprintf_r+0xea>
 80112e2:	06d0      	lsls	r0, r2, #27
 80112e4:	bf44      	itt	mi
 80112e6:	2320      	movmi	r3, #32
 80112e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112ec:	0711      	lsls	r1, r2, #28
 80112ee:	bf44      	itt	mi
 80112f0:	232b      	movmi	r3, #43	@ 0x2b
 80112f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112f6:	f89a 3000 	ldrb.w	r3, [sl]
 80112fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80112fc:	d015      	beq.n	801132a <_svfiprintf_r+0xfa>
 80112fe:	9a07      	ldr	r2, [sp, #28]
 8011300:	4654      	mov	r4, sl
 8011302:	2000      	movs	r0, #0
 8011304:	f04f 0c0a 	mov.w	ip, #10
 8011308:	4621      	mov	r1, r4
 801130a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801130e:	3b30      	subs	r3, #48	@ 0x30
 8011310:	2b09      	cmp	r3, #9
 8011312:	d94b      	bls.n	80113ac <_svfiprintf_r+0x17c>
 8011314:	b1b0      	cbz	r0, 8011344 <_svfiprintf_r+0x114>
 8011316:	9207      	str	r2, [sp, #28]
 8011318:	e014      	b.n	8011344 <_svfiprintf_r+0x114>
 801131a:	eba0 0308 	sub.w	r3, r0, r8
 801131e:	fa09 f303 	lsl.w	r3, r9, r3
 8011322:	4313      	orrs	r3, r2
 8011324:	9304      	str	r3, [sp, #16]
 8011326:	46a2      	mov	sl, r4
 8011328:	e7d2      	b.n	80112d0 <_svfiprintf_r+0xa0>
 801132a:	9b03      	ldr	r3, [sp, #12]
 801132c:	1d19      	adds	r1, r3, #4
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	9103      	str	r1, [sp, #12]
 8011332:	2b00      	cmp	r3, #0
 8011334:	bfbb      	ittet	lt
 8011336:	425b      	neglt	r3, r3
 8011338:	f042 0202 	orrlt.w	r2, r2, #2
 801133c:	9307      	strge	r3, [sp, #28]
 801133e:	9307      	strlt	r3, [sp, #28]
 8011340:	bfb8      	it	lt
 8011342:	9204      	strlt	r2, [sp, #16]
 8011344:	7823      	ldrb	r3, [r4, #0]
 8011346:	2b2e      	cmp	r3, #46	@ 0x2e
 8011348:	d10a      	bne.n	8011360 <_svfiprintf_r+0x130>
 801134a:	7863      	ldrb	r3, [r4, #1]
 801134c:	2b2a      	cmp	r3, #42	@ 0x2a
 801134e:	d132      	bne.n	80113b6 <_svfiprintf_r+0x186>
 8011350:	9b03      	ldr	r3, [sp, #12]
 8011352:	1d1a      	adds	r2, r3, #4
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	9203      	str	r2, [sp, #12]
 8011358:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801135c:	3402      	adds	r4, #2
 801135e:	9305      	str	r3, [sp, #20]
 8011360:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011424 <_svfiprintf_r+0x1f4>
 8011364:	7821      	ldrb	r1, [r4, #0]
 8011366:	2203      	movs	r2, #3
 8011368:	4650      	mov	r0, sl
 801136a:	f7ee ffa9 	bl	80002c0 <memchr>
 801136e:	b138      	cbz	r0, 8011380 <_svfiprintf_r+0x150>
 8011370:	9b04      	ldr	r3, [sp, #16]
 8011372:	eba0 000a 	sub.w	r0, r0, sl
 8011376:	2240      	movs	r2, #64	@ 0x40
 8011378:	4082      	lsls	r2, r0
 801137a:	4313      	orrs	r3, r2
 801137c:	3401      	adds	r4, #1
 801137e:	9304      	str	r3, [sp, #16]
 8011380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011384:	4824      	ldr	r0, [pc, #144]	@ (8011418 <_svfiprintf_r+0x1e8>)
 8011386:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801138a:	2206      	movs	r2, #6
 801138c:	f7ee ff98 	bl	80002c0 <memchr>
 8011390:	2800      	cmp	r0, #0
 8011392:	d036      	beq.n	8011402 <_svfiprintf_r+0x1d2>
 8011394:	4b21      	ldr	r3, [pc, #132]	@ (801141c <_svfiprintf_r+0x1ec>)
 8011396:	bb1b      	cbnz	r3, 80113e0 <_svfiprintf_r+0x1b0>
 8011398:	9b03      	ldr	r3, [sp, #12]
 801139a:	3307      	adds	r3, #7
 801139c:	f023 0307 	bic.w	r3, r3, #7
 80113a0:	3308      	adds	r3, #8
 80113a2:	9303      	str	r3, [sp, #12]
 80113a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113a6:	4433      	add	r3, r6
 80113a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80113aa:	e76a      	b.n	8011282 <_svfiprintf_r+0x52>
 80113ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80113b0:	460c      	mov	r4, r1
 80113b2:	2001      	movs	r0, #1
 80113b4:	e7a8      	b.n	8011308 <_svfiprintf_r+0xd8>
 80113b6:	2300      	movs	r3, #0
 80113b8:	3401      	adds	r4, #1
 80113ba:	9305      	str	r3, [sp, #20]
 80113bc:	4619      	mov	r1, r3
 80113be:	f04f 0c0a 	mov.w	ip, #10
 80113c2:	4620      	mov	r0, r4
 80113c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113c8:	3a30      	subs	r2, #48	@ 0x30
 80113ca:	2a09      	cmp	r2, #9
 80113cc:	d903      	bls.n	80113d6 <_svfiprintf_r+0x1a6>
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d0c6      	beq.n	8011360 <_svfiprintf_r+0x130>
 80113d2:	9105      	str	r1, [sp, #20]
 80113d4:	e7c4      	b.n	8011360 <_svfiprintf_r+0x130>
 80113d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80113da:	4604      	mov	r4, r0
 80113dc:	2301      	movs	r3, #1
 80113de:	e7f0      	b.n	80113c2 <_svfiprintf_r+0x192>
 80113e0:	ab03      	add	r3, sp, #12
 80113e2:	9300      	str	r3, [sp, #0]
 80113e4:	462a      	mov	r2, r5
 80113e6:	4b0e      	ldr	r3, [pc, #56]	@ (8011420 <_svfiprintf_r+0x1f0>)
 80113e8:	a904      	add	r1, sp, #16
 80113ea:	4638      	mov	r0, r7
 80113ec:	f3af 8000 	nop.w
 80113f0:	1c42      	adds	r2, r0, #1
 80113f2:	4606      	mov	r6, r0
 80113f4:	d1d6      	bne.n	80113a4 <_svfiprintf_r+0x174>
 80113f6:	89ab      	ldrh	r3, [r5, #12]
 80113f8:	065b      	lsls	r3, r3, #25
 80113fa:	f53f af2d 	bmi.w	8011258 <_svfiprintf_r+0x28>
 80113fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011400:	e72c      	b.n	801125c <_svfiprintf_r+0x2c>
 8011402:	ab03      	add	r3, sp, #12
 8011404:	9300      	str	r3, [sp, #0]
 8011406:	462a      	mov	r2, r5
 8011408:	4b05      	ldr	r3, [pc, #20]	@ (8011420 <_svfiprintf_r+0x1f0>)
 801140a:	a904      	add	r1, sp, #16
 801140c:	4638      	mov	r0, r7
 801140e:	f000 f9bb 	bl	8011788 <_printf_i>
 8011412:	e7ed      	b.n	80113f0 <_svfiprintf_r+0x1c0>
 8011414:	0804eb84 	.word	0x0804eb84
 8011418:	0804eb8e 	.word	0x0804eb8e
 801141c:	00000000 	.word	0x00000000
 8011420:	08011179 	.word	0x08011179
 8011424:	0804eb8a 	.word	0x0804eb8a

08011428 <__sfputc_r>:
 8011428:	6893      	ldr	r3, [r2, #8]
 801142a:	3b01      	subs	r3, #1
 801142c:	2b00      	cmp	r3, #0
 801142e:	b410      	push	{r4}
 8011430:	6093      	str	r3, [r2, #8]
 8011432:	da08      	bge.n	8011446 <__sfputc_r+0x1e>
 8011434:	6994      	ldr	r4, [r2, #24]
 8011436:	42a3      	cmp	r3, r4
 8011438:	db01      	blt.n	801143e <__sfputc_r+0x16>
 801143a:	290a      	cmp	r1, #10
 801143c:	d103      	bne.n	8011446 <__sfputc_r+0x1e>
 801143e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011442:	f000 bbb6 	b.w	8011bb2 <__swbuf_r>
 8011446:	6813      	ldr	r3, [r2, #0]
 8011448:	1c58      	adds	r0, r3, #1
 801144a:	6010      	str	r0, [r2, #0]
 801144c:	7019      	strb	r1, [r3, #0]
 801144e:	4608      	mov	r0, r1
 8011450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011454:	4770      	bx	lr

08011456 <__sfputs_r>:
 8011456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011458:	4606      	mov	r6, r0
 801145a:	460f      	mov	r7, r1
 801145c:	4614      	mov	r4, r2
 801145e:	18d5      	adds	r5, r2, r3
 8011460:	42ac      	cmp	r4, r5
 8011462:	d101      	bne.n	8011468 <__sfputs_r+0x12>
 8011464:	2000      	movs	r0, #0
 8011466:	e007      	b.n	8011478 <__sfputs_r+0x22>
 8011468:	f814 1b01 	ldrb.w	r1, [r4], #1
 801146c:	463a      	mov	r2, r7
 801146e:	4630      	mov	r0, r6
 8011470:	f7ff ffda 	bl	8011428 <__sfputc_r>
 8011474:	1c43      	adds	r3, r0, #1
 8011476:	d1f3      	bne.n	8011460 <__sfputs_r+0xa>
 8011478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801147c <_vfiprintf_r>:
 801147c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011480:	460d      	mov	r5, r1
 8011482:	b09d      	sub	sp, #116	@ 0x74
 8011484:	4614      	mov	r4, r2
 8011486:	4698      	mov	r8, r3
 8011488:	4606      	mov	r6, r0
 801148a:	b118      	cbz	r0, 8011494 <_vfiprintf_r+0x18>
 801148c:	6a03      	ldr	r3, [r0, #32]
 801148e:	b90b      	cbnz	r3, 8011494 <_vfiprintf_r+0x18>
 8011490:	f7ff fce6 	bl	8010e60 <__sinit>
 8011494:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011496:	07d9      	lsls	r1, r3, #31
 8011498:	d405      	bmi.n	80114a6 <_vfiprintf_r+0x2a>
 801149a:	89ab      	ldrh	r3, [r5, #12]
 801149c:	059a      	lsls	r2, r3, #22
 801149e:	d402      	bmi.n	80114a6 <_vfiprintf_r+0x2a>
 80114a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80114a2:	f7ff fe0e 	bl	80110c2 <__retarget_lock_acquire_recursive>
 80114a6:	89ab      	ldrh	r3, [r5, #12]
 80114a8:	071b      	lsls	r3, r3, #28
 80114aa:	d501      	bpl.n	80114b0 <_vfiprintf_r+0x34>
 80114ac:	692b      	ldr	r3, [r5, #16]
 80114ae:	b99b      	cbnz	r3, 80114d8 <_vfiprintf_r+0x5c>
 80114b0:	4629      	mov	r1, r5
 80114b2:	4630      	mov	r0, r6
 80114b4:	f000 fbbc 	bl	8011c30 <__swsetup_r>
 80114b8:	b170      	cbz	r0, 80114d8 <_vfiprintf_r+0x5c>
 80114ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80114bc:	07dc      	lsls	r4, r3, #31
 80114be:	d504      	bpl.n	80114ca <_vfiprintf_r+0x4e>
 80114c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80114c4:	b01d      	add	sp, #116	@ 0x74
 80114c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ca:	89ab      	ldrh	r3, [r5, #12]
 80114cc:	0598      	lsls	r0, r3, #22
 80114ce:	d4f7      	bmi.n	80114c0 <_vfiprintf_r+0x44>
 80114d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80114d2:	f7ff fdf7 	bl	80110c4 <__retarget_lock_release_recursive>
 80114d6:	e7f3      	b.n	80114c0 <_vfiprintf_r+0x44>
 80114d8:	2300      	movs	r3, #0
 80114da:	9309      	str	r3, [sp, #36]	@ 0x24
 80114dc:	2320      	movs	r3, #32
 80114de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80114e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80114e6:	2330      	movs	r3, #48	@ 0x30
 80114e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011698 <_vfiprintf_r+0x21c>
 80114ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80114f0:	f04f 0901 	mov.w	r9, #1
 80114f4:	4623      	mov	r3, r4
 80114f6:	469a      	mov	sl, r3
 80114f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114fc:	b10a      	cbz	r2, 8011502 <_vfiprintf_r+0x86>
 80114fe:	2a25      	cmp	r2, #37	@ 0x25
 8011500:	d1f9      	bne.n	80114f6 <_vfiprintf_r+0x7a>
 8011502:	ebba 0b04 	subs.w	fp, sl, r4
 8011506:	d00b      	beq.n	8011520 <_vfiprintf_r+0xa4>
 8011508:	465b      	mov	r3, fp
 801150a:	4622      	mov	r2, r4
 801150c:	4629      	mov	r1, r5
 801150e:	4630      	mov	r0, r6
 8011510:	f7ff ffa1 	bl	8011456 <__sfputs_r>
 8011514:	3001      	adds	r0, #1
 8011516:	f000 80a7 	beq.w	8011668 <_vfiprintf_r+0x1ec>
 801151a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801151c:	445a      	add	r2, fp
 801151e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011520:	f89a 3000 	ldrb.w	r3, [sl]
 8011524:	2b00      	cmp	r3, #0
 8011526:	f000 809f 	beq.w	8011668 <_vfiprintf_r+0x1ec>
 801152a:	2300      	movs	r3, #0
 801152c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011534:	f10a 0a01 	add.w	sl, sl, #1
 8011538:	9304      	str	r3, [sp, #16]
 801153a:	9307      	str	r3, [sp, #28]
 801153c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011540:	931a      	str	r3, [sp, #104]	@ 0x68
 8011542:	4654      	mov	r4, sl
 8011544:	2205      	movs	r2, #5
 8011546:	f814 1b01 	ldrb.w	r1, [r4], #1
 801154a:	4853      	ldr	r0, [pc, #332]	@ (8011698 <_vfiprintf_r+0x21c>)
 801154c:	f7ee feb8 	bl	80002c0 <memchr>
 8011550:	9a04      	ldr	r2, [sp, #16]
 8011552:	b9d8      	cbnz	r0, 801158c <_vfiprintf_r+0x110>
 8011554:	06d1      	lsls	r1, r2, #27
 8011556:	bf44      	itt	mi
 8011558:	2320      	movmi	r3, #32
 801155a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801155e:	0713      	lsls	r3, r2, #28
 8011560:	bf44      	itt	mi
 8011562:	232b      	movmi	r3, #43	@ 0x2b
 8011564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011568:	f89a 3000 	ldrb.w	r3, [sl]
 801156c:	2b2a      	cmp	r3, #42	@ 0x2a
 801156e:	d015      	beq.n	801159c <_vfiprintf_r+0x120>
 8011570:	9a07      	ldr	r2, [sp, #28]
 8011572:	4654      	mov	r4, sl
 8011574:	2000      	movs	r0, #0
 8011576:	f04f 0c0a 	mov.w	ip, #10
 801157a:	4621      	mov	r1, r4
 801157c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011580:	3b30      	subs	r3, #48	@ 0x30
 8011582:	2b09      	cmp	r3, #9
 8011584:	d94b      	bls.n	801161e <_vfiprintf_r+0x1a2>
 8011586:	b1b0      	cbz	r0, 80115b6 <_vfiprintf_r+0x13a>
 8011588:	9207      	str	r2, [sp, #28]
 801158a:	e014      	b.n	80115b6 <_vfiprintf_r+0x13a>
 801158c:	eba0 0308 	sub.w	r3, r0, r8
 8011590:	fa09 f303 	lsl.w	r3, r9, r3
 8011594:	4313      	orrs	r3, r2
 8011596:	9304      	str	r3, [sp, #16]
 8011598:	46a2      	mov	sl, r4
 801159a:	e7d2      	b.n	8011542 <_vfiprintf_r+0xc6>
 801159c:	9b03      	ldr	r3, [sp, #12]
 801159e:	1d19      	adds	r1, r3, #4
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	9103      	str	r1, [sp, #12]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	bfbb      	ittet	lt
 80115a8:	425b      	neglt	r3, r3
 80115aa:	f042 0202 	orrlt.w	r2, r2, #2
 80115ae:	9307      	strge	r3, [sp, #28]
 80115b0:	9307      	strlt	r3, [sp, #28]
 80115b2:	bfb8      	it	lt
 80115b4:	9204      	strlt	r2, [sp, #16]
 80115b6:	7823      	ldrb	r3, [r4, #0]
 80115b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80115ba:	d10a      	bne.n	80115d2 <_vfiprintf_r+0x156>
 80115bc:	7863      	ldrb	r3, [r4, #1]
 80115be:	2b2a      	cmp	r3, #42	@ 0x2a
 80115c0:	d132      	bne.n	8011628 <_vfiprintf_r+0x1ac>
 80115c2:	9b03      	ldr	r3, [sp, #12]
 80115c4:	1d1a      	adds	r2, r3, #4
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	9203      	str	r2, [sp, #12]
 80115ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80115ce:	3402      	adds	r4, #2
 80115d0:	9305      	str	r3, [sp, #20]
 80115d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80116a8 <_vfiprintf_r+0x22c>
 80115d6:	7821      	ldrb	r1, [r4, #0]
 80115d8:	2203      	movs	r2, #3
 80115da:	4650      	mov	r0, sl
 80115dc:	f7ee fe70 	bl	80002c0 <memchr>
 80115e0:	b138      	cbz	r0, 80115f2 <_vfiprintf_r+0x176>
 80115e2:	9b04      	ldr	r3, [sp, #16]
 80115e4:	eba0 000a 	sub.w	r0, r0, sl
 80115e8:	2240      	movs	r2, #64	@ 0x40
 80115ea:	4082      	lsls	r2, r0
 80115ec:	4313      	orrs	r3, r2
 80115ee:	3401      	adds	r4, #1
 80115f0:	9304      	str	r3, [sp, #16]
 80115f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115f6:	4829      	ldr	r0, [pc, #164]	@ (801169c <_vfiprintf_r+0x220>)
 80115f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80115fc:	2206      	movs	r2, #6
 80115fe:	f7ee fe5f 	bl	80002c0 <memchr>
 8011602:	2800      	cmp	r0, #0
 8011604:	d03f      	beq.n	8011686 <_vfiprintf_r+0x20a>
 8011606:	4b26      	ldr	r3, [pc, #152]	@ (80116a0 <_vfiprintf_r+0x224>)
 8011608:	bb1b      	cbnz	r3, 8011652 <_vfiprintf_r+0x1d6>
 801160a:	9b03      	ldr	r3, [sp, #12]
 801160c:	3307      	adds	r3, #7
 801160e:	f023 0307 	bic.w	r3, r3, #7
 8011612:	3308      	adds	r3, #8
 8011614:	9303      	str	r3, [sp, #12]
 8011616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011618:	443b      	add	r3, r7
 801161a:	9309      	str	r3, [sp, #36]	@ 0x24
 801161c:	e76a      	b.n	80114f4 <_vfiprintf_r+0x78>
 801161e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011622:	460c      	mov	r4, r1
 8011624:	2001      	movs	r0, #1
 8011626:	e7a8      	b.n	801157a <_vfiprintf_r+0xfe>
 8011628:	2300      	movs	r3, #0
 801162a:	3401      	adds	r4, #1
 801162c:	9305      	str	r3, [sp, #20]
 801162e:	4619      	mov	r1, r3
 8011630:	f04f 0c0a 	mov.w	ip, #10
 8011634:	4620      	mov	r0, r4
 8011636:	f810 2b01 	ldrb.w	r2, [r0], #1
 801163a:	3a30      	subs	r2, #48	@ 0x30
 801163c:	2a09      	cmp	r2, #9
 801163e:	d903      	bls.n	8011648 <_vfiprintf_r+0x1cc>
 8011640:	2b00      	cmp	r3, #0
 8011642:	d0c6      	beq.n	80115d2 <_vfiprintf_r+0x156>
 8011644:	9105      	str	r1, [sp, #20]
 8011646:	e7c4      	b.n	80115d2 <_vfiprintf_r+0x156>
 8011648:	fb0c 2101 	mla	r1, ip, r1, r2
 801164c:	4604      	mov	r4, r0
 801164e:	2301      	movs	r3, #1
 8011650:	e7f0      	b.n	8011634 <_vfiprintf_r+0x1b8>
 8011652:	ab03      	add	r3, sp, #12
 8011654:	9300      	str	r3, [sp, #0]
 8011656:	462a      	mov	r2, r5
 8011658:	4b12      	ldr	r3, [pc, #72]	@ (80116a4 <_vfiprintf_r+0x228>)
 801165a:	a904      	add	r1, sp, #16
 801165c:	4630      	mov	r0, r6
 801165e:	f3af 8000 	nop.w
 8011662:	4607      	mov	r7, r0
 8011664:	1c78      	adds	r0, r7, #1
 8011666:	d1d6      	bne.n	8011616 <_vfiprintf_r+0x19a>
 8011668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801166a:	07d9      	lsls	r1, r3, #31
 801166c:	d405      	bmi.n	801167a <_vfiprintf_r+0x1fe>
 801166e:	89ab      	ldrh	r3, [r5, #12]
 8011670:	059a      	lsls	r2, r3, #22
 8011672:	d402      	bmi.n	801167a <_vfiprintf_r+0x1fe>
 8011674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011676:	f7ff fd25 	bl	80110c4 <__retarget_lock_release_recursive>
 801167a:	89ab      	ldrh	r3, [r5, #12]
 801167c:	065b      	lsls	r3, r3, #25
 801167e:	f53f af1f 	bmi.w	80114c0 <_vfiprintf_r+0x44>
 8011682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011684:	e71e      	b.n	80114c4 <_vfiprintf_r+0x48>
 8011686:	ab03      	add	r3, sp, #12
 8011688:	9300      	str	r3, [sp, #0]
 801168a:	462a      	mov	r2, r5
 801168c:	4b05      	ldr	r3, [pc, #20]	@ (80116a4 <_vfiprintf_r+0x228>)
 801168e:	a904      	add	r1, sp, #16
 8011690:	4630      	mov	r0, r6
 8011692:	f000 f879 	bl	8011788 <_printf_i>
 8011696:	e7e4      	b.n	8011662 <_vfiprintf_r+0x1e6>
 8011698:	0804eb84 	.word	0x0804eb84
 801169c:	0804eb8e 	.word	0x0804eb8e
 80116a0:	00000000 	.word	0x00000000
 80116a4:	08011457 	.word	0x08011457
 80116a8:	0804eb8a 	.word	0x0804eb8a

080116ac <_printf_common>:
 80116ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116b0:	4616      	mov	r6, r2
 80116b2:	4698      	mov	r8, r3
 80116b4:	688a      	ldr	r2, [r1, #8]
 80116b6:	690b      	ldr	r3, [r1, #16]
 80116b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80116bc:	4293      	cmp	r3, r2
 80116be:	bfb8      	it	lt
 80116c0:	4613      	movlt	r3, r2
 80116c2:	6033      	str	r3, [r6, #0]
 80116c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80116c8:	4607      	mov	r7, r0
 80116ca:	460c      	mov	r4, r1
 80116cc:	b10a      	cbz	r2, 80116d2 <_printf_common+0x26>
 80116ce:	3301      	adds	r3, #1
 80116d0:	6033      	str	r3, [r6, #0]
 80116d2:	6823      	ldr	r3, [r4, #0]
 80116d4:	0699      	lsls	r1, r3, #26
 80116d6:	bf42      	ittt	mi
 80116d8:	6833      	ldrmi	r3, [r6, #0]
 80116da:	3302      	addmi	r3, #2
 80116dc:	6033      	strmi	r3, [r6, #0]
 80116de:	6825      	ldr	r5, [r4, #0]
 80116e0:	f015 0506 	ands.w	r5, r5, #6
 80116e4:	d106      	bne.n	80116f4 <_printf_common+0x48>
 80116e6:	f104 0a19 	add.w	sl, r4, #25
 80116ea:	68e3      	ldr	r3, [r4, #12]
 80116ec:	6832      	ldr	r2, [r6, #0]
 80116ee:	1a9b      	subs	r3, r3, r2
 80116f0:	42ab      	cmp	r3, r5
 80116f2:	dc26      	bgt.n	8011742 <_printf_common+0x96>
 80116f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80116f8:	6822      	ldr	r2, [r4, #0]
 80116fa:	3b00      	subs	r3, #0
 80116fc:	bf18      	it	ne
 80116fe:	2301      	movne	r3, #1
 8011700:	0692      	lsls	r2, r2, #26
 8011702:	d42b      	bmi.n	801175c <_printf_common+0xb0>
 8011704:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011708:	4641      	mov	r1, r8
 801170a:	4638      	mov	r0, r7
 801170c:	47c8      	blx	r9
 801170e:	3001      	adds	r0, #1
 8011710:	d01e      	beq.n	8011750 <_printf_common+0xa4>
 8011712:	6823      	ldr	r3, [r4, #0]
 8011714:	6922      	ldr	r2, [r4, #16]
 8011716:	f003 0306 	and.w	r3, r3, #6
 801171a:	2b04      	cmp	r3, #4
 801171c:	bf02      	ittt	eq
 801171e:	68e5      	ldreq	r5, [r4, #12]
 8011720:	6833      	ldreq	r3, [r6, #0]
 8011722:	1aed      	subeq	r5, r5, r3
 8011724:	68a3      	ldr	r3, [r4, #8]
 8011726:	bf0c      	ite	eq
 8011728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801172c:	2500      	movne	r5, #0
 801172e:	4293      	cmp	r3, r2
 8011730:	bfc4      	itt	gt
 8011732:	1a9b      	subgt	r3, r3, r2
 8011734:	18ed      	addgt	r5, r5, r3
 8011736:	2600      	movs	r6, #0
 8011738:	341a      	adds	r4, #26
 801173a:	42b5      	cmp	r5, r6
 801173c:	d11a      	bne.n	8011774 <_printf_common+0xc8>
 801173e:	2000      	movs	r0, #0
 8011740:	e008      	b.n	8011754 <_printf_common+0xa8>
 8011742:	2301      	movs	r3, #1
 8011744:	4652      	mov	r2, sl
 8011746:	4641      	mov	r1, r8
 8011748:	4638      	mov	r0, r7
 801174a:	47c8      	blx	r9
 801174c:	3001      	adds	r0, #1
 801174e:	d103      	bne.n	8011758 <_printf_common+0xac>
 8011750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011758:	3501      	adds	r5, #1
 801175a:	e7c6      	b.n	80116ea <_printf_common+0x3e>
 801175c:	18e1      	adds	r1, r4, r3
 801175e:	1c5a      	adds	r2, r3, #1
 8011760:	2030      	movs	r0, #48	@ 0x30
 8011762:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011766:	4422      	add	r2, r4
 8011768:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801176c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011770:	3302      	adds	r3, #2
 8011772:	e7c7      	b.n	8011704 <_printf_common+0x58>
 8011774:	2301      	movs	r3, #1
 8011776:	4622      	mov	r2, r4
 8011778:	4641      	mov	r1, r8
 801177a:	4638      	mov	r0, r7
 801177c:	47c8      	blx	r9
 801177e:	3001      	adds	r0, #1
 8011780:	d0e6      	beq.n	8011750 <_printf_common+0xa4>
 8011782:	3601      	adds	r6, #1
 8011784:	e7d9      	b.n	801173a <_printf_common+0x8e>
	...

08011788 <_printf_i>:
 8011788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801178c:	7e0f      	ldrb	r7, [r1, #24]
 801178e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011790:	2f78      	cmp	r7, #120	@ 0x78
 8011792:	4691      	mov	r9, r2
 8011794:	4680      	mov	r8, r0
 8011796:	460c      	mov	r4, r1
 8011798:	469a      	mov	sl, r3
 801179a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801179e:	d807      	bhi.n	80117b0 <_printf_i+0x28>
 80117a0:	2f62      	cmp	r7, #98	@ 0x62
 80117a2:	d80a      	bhi.n	80117ba <_printf_i+0x32>
 80117a4:	2f00      	cmp	r7, #0
 80117a6:	f000 80d1 	beq.w	801194c <_printf_i+0x1c4>
 80117aa:	2f58      	cmp	r7, #88	@ 0x58
 80117ac:	f000 80b8 	beq.w	8011920 <_printf_i+0x198>
 80117b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80117b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80117b8:	e03a      	b.n	8011830 <_printf_i+0xa8>
 80117ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80117be:	2b15      	cmp	r3, #21
 80117c0:	d8f6      	bhi.n	80117b0 <_printf_i+0x28>
 80117c2:	a101      	add	r1, pc, #4	@ (adr r1, 80117c8 <_printf_i+0x40>)
 80117c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80117c8:	08011821 	.word	0x08011821
 80117cc:	08011835 	.word	0x08011835
 80117d0:	080117b1 	.word	0x080117b1
 80117d4:	080117b1 	.word	0x080117b1
 80117d8:	080117b1 	.word	0x080117b1
 80117dc:	080117b1 	.word	0x080117b1
 80117e0:	08011835 	.word	0x08011835
 80117e4:	080117b1 	.word	0x080117b1
 80117e8:	080117b1 	.word	0x080117b1
 80117ec:	080117b1 	.word	0x080117b1
 80117f0:	080117b1 	.word	0x080117b1
 80117f4:	08011933 	.word	0x08011933
 80117f8:	0801185f 	.word	0x0801185f
 80117fc:	080118ed 	.word	0x080118ed
 8011800:	080117b1 	.word	0x080117b1
 8011804:	080117b1 	.word	0x080117b1
 8011808:	08011955 	.word	0x08011955
 801180c:	080117b1 	.word	0x080117b1
 8011810:	0801185f 	.word	0x0801185f
 8011814:	080117b1 	.word	0x080117b1
 8011818:	080117b1 	.word	0x080117b1
 801181c:	080118f5 	.word	0x080118f5
 8011820:	6833      	ldr	r3, [r6, #0]
 8011822:	1d1a      	adds	r2, r3, #4
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	6032      	str	r2, [r6, #0]
 8011828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801182c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011830:	2301      	movs	r3, #1
 8011832:	e09c      	b.n	801196e <_printf_i+0x1e6>
 8011834:	6833      	ldr	r3, [r6, #0]
 8011836:	6820      	ldr	r0, [r4, #0]
 8011838:	1d19      	adds	r1, r3, #4
 801183a:	6031      	str	r1, [r6, #0]
 801183c:	0606      	lsls	r6, r0, #24
 801183e:	d501      	bpl.n	8011844 <_printf_i+0xbc>
 8011840:	681d      	ldr	r5, [r3, #0]
 8011842:	e003      	b.n	801184c <_printf_i+0xc4>
 8011844:	0645      	lsls	r5, r0, #25
 8011846:	d5fb      	bpl.n	8011840 <_printf_i+0xb8>
 8011848:	f9b3 5000 	ldrsh.w	r5, [r3]
 801184c:	2d00      	cmp	r5, #0
 801184e:	da03      	bge.n	8011858 <_printf_i+0xd0>
 8011850:	232d      	movs	r3, #45	@ 0x2d
 8011852:	426d      	negs	r5, r5
 8011854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011858:	4858      	ldr	r0, [pc, #352]	@ (80119bc <_printf_i+0x234>)
 801185a:	230a      	movs	r3, #10
 801185c:	e011      	b.n	8011882 <_printf_i+0xfa>
 801185e:	6821      	ldr	r1, [r4, #0]
 8011860:	6833      	ldr	r3, [r6, #0]
 8011862:	0608      	lsls	r0, r1, #24
 8011864:	f853 5b04 	ldr.w	r5, [r3], #4
 8011868:	d402      	bmi.n	8011870 <_printf_i+0xe8>
 801186a:	0649      	lsls	r1, r1, #25
 801186c:	bf48      	it	mi
 801186e:	b2ad      	uxthmi	r5, r5
 8011870:	2f6f      	cmp	r7, #111	@ 0x6f
 8011872:	4852      	ldr	r0, [pc, #328]	@ (80119bc <_printf_i+0x234>)
 8011874:	6033      	str	r3, [r6, #0]
 8011876:	bf14      	ite	ne
 8011878:	230a      	movne	r3, #10
 801187a:	2308      	moveq	r3, #8
 801187c:	2100      	movs	r1, #0
 801187e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011882:	6866      	ldr	r6, [r4, #4]
 8011884:	60a6      	str	r6, [r4, #8]
 8011886:	2e00      	cmp	r6, #0
 8011888:	db05      	blt.n	8011896 <_printf_i+0x10e>
 801188a:	6821      	ldr	r1, [r4, #0]
 801188c:	432e      	orrs	r6, r5
 801188e:	f021 0104 	bic.w	r1, r1, #4
 8011892:	6021      	str	r1, [r4, #0]
 8011894:	d04b      	beq.n	801192e <_printf_i+0x1a6>
 8011896:	4616      	mov	r6, r2
 8011898:	fbb5 f1f3 	udiv	r1, r5, r3
 801189c:	fb03 5711 	mls	r7, r3, r1, r5
 80118a0:	5dc7      	ldrb	r7, [r0, r7]
 80118a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80118a6:	462f      	mov	r7, r5
 80118a8:	42bb      	cmp	r3, r7
 80118aa:	460d      	mov	r5, r1
 80118ac:	d9f4      	bls.n	8011898 <_printf_i+0x110>
 80118ae:	2b08      	cmp	r3, #8
 80118b0:	d10b      	bne.n	80118ca <_printf_i+0x142>
 80118b2:	6823      	ldr	r3, [r4, #0]
 80118b4:	07df      	lsls	r7, r3, #31
 80118b6:	d508      	bpl.n	80118ca <_printf_i+0x142>
 80118b8:	6923      	ldr	r3, [r4, #16]
 80118ba:	6861      	ldr	r1, [r4, #4]
 80118bc:	4299      	cmp	r1, r3
 80118be:	bfde      	ittt	le
 80118c0:	2330      	movle	r3, #48	@ 0x30
 80118c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80118c6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80118ca:	1b92      	subs	r2, r2, r6
 80118cc:	6122      	str	r2, [r4, #16]
 80118ce:	f8cd a000 	str.w	sl, [sp]
 80118d2:	464b      	mov	r3, r9
 80118d4:	aa03      	add	r2, sp, #12
 80118d6:	4621      	mov	r1, r4
 80118d8:	4640      	mov	r0, r8
 80118da:	f7ff fee7 	bl	80116ac <_printf_common>
 80118de:	3001      	adds	r0, #1
 80118e0:	d14a      	bne.n	8011978 <_printf_i+0x1f0>
 80118e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80118e6:	b004      	add	sp, #16
 80118e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118ec:	6823      	ldr	r3, [r4, #0]
 80118ee:	f043 0320 	orr.w	r3, r3, #32
 80118f2:	6023      	str	r3, [r4, #0]
 80118f4:	4832      	ldr	r0, [pc, #200]	@ (80119c0 <_printf_i+0x238>)
 80118f6:	2778      	movs	r7, #120	@ 0x78
 80118f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80118fc:	6823      	ldr	r3, [r4, #0]
 80118fe:	6831      	ldr	r1, [r6, #0]
 8011900:	061f      	lsls	r7, r3, #24
 8011902:	f851 5b04 	ldr.w	r5, [r1], #4
 8011906:	d402      	bmi.n	801190e <_printf_i+0x186>
 8011908:	065f      	lsls	r7, r3, #25
 801190a:	bf48      	it	mi
 801190c:	b2ad      	uxthmi	r5, r5
 801190e:	6031      	str	r1, [r6, #0]
 8011910:	07d9      	lsls	r1, r3, #31
 8011912:	bf44      	itt	mi
 8011914:	f043 0320 	orrmi.w	r3, r3, #32
 8011918:	6023      	strmi	r3, [r4, #0]
 801191a:	b11d      	cbz	r5, 8011924 <_printf_i+0x19c>
 801191c:	2310      	movs	r3, #16
 801191e:	e7ad      	b.n	801187c <_printf_i+0xf4>
 8011920:	4826      	ldr	r0, [pc, #152]	@ (80119bc <_printf_i+0x234>)
 8011922:	e7e9      	b.n	80118f8 <_printf_i+0x170>
 8011924:	6823      	ldr	r3, [r4, #0]
 8011926:	f023 0320 	bic.w	r3, r3, #32
 801192a:	6023      	str	r3, [r4, #0]
 801192c:	e7f6      	b.n	801191c <_printf_i+0x194>
 801192e:	4616      	mov	r6, r2
 8011930:	e7bd      	b.n	80118ae <_printf_i+0x126>
 8011932:	6833      	ldr	r3, [r6, #0]
 8011934:	6825      	ldr	r5, [r4, #0]
 8011936:	6961      	ldr	r1, [r4, #20]
 8011938:	1d18      	adds	r0, r3, #4
 801193a:	6030      	str	r0, [r6, #0]
 801193c:	062e      	lsls	r6, r5, #24
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	d501      	bpl.n	8011946 <_printf_i+0x1be>
 8011942:	6019      	str	r1, [r3, #0]
 8011944:	e002      	b.n	801194c <_printf_i+0x1c4>
 8011946:	0668      	lsls	r0, r5, #25
 8011948:	d5fb      	bpl.n	8011942 <_printf_i+0x1ba>
 801194a:	8019      	strh	r1, [r3, #0]
 801194c:	2300      	movs	r3, #0
 801194e:	6123      	str	r3, [r4, #16]
 8011950:	4616      	mov	r6, r2
 8011952:	e7bc      	b.n	80118ce <_printf_i+0x146>
 8011954:	6833      	ldr	r3, [r6, #0]
 8011956:	1d1a      	adds	r2, r3, #4
 8011958:	6032      	str	r2, [r6, #0]
 801195a:	681e      	ldr	r6, [r3, #0]
 801195c:	6862      	ldr	r2, [r4, #4]
 801195e:	2100      	movs	r1, #0
 8011960:	4630      	mov	r0, r6
 8011962:	f7ee fcad 	bl	80002c0 <memchr>
 8011966:	b108      	cbz	r0, 801196c <_printf_i+0x1e4>
 8011968:	1b80      	subs	r0, r0, r6
 801196a:	6060      	str	r0, [r4, #4]
 801196c:	6863      	ldr	r3, [r4, #4]
 801196e:	6123      	str	r3, [r4, #16]
 8011970:	2300      	movs	r3, #0
 8011972:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011976:	e7aa      	b.n	80118ce <_printf_i+0x146>
 8011978:	6923      	ldr	r3, [r4, #16]
 801197a:	4632      	mov	r2, r6
 801197c:	4649      	mov	r1, r9
 801197e:	4640      	mov	r0, r8
 8011980:	47d0      	blx	sl
 8011982:	3001      	adds	r0, #1
 8011984:	d0ad      	beq.n	80118e2 <_printf_i+0x15a>
 8011986:	6823      	ldr	r3, [r4, #0]
 8011988:	079b      	lsls	r3, r3, #30
 801198a:	d413      	bmi.n	80119b4 <_printf_i+0x22c>
 801198c:	68e0      	ldr	r0, [r4, #12]
 801198e:	9b03      	ldr	r3, [sp, #12]
 8011990:	4298      	cmp	r0, r3
 8011992:	bfb8      	it	lt
 8011994:	4618      	movlt	r0, r3
 8011996:	e7a6      	b.n	80118e6 <_printf_i+0x15e>
 8011998:	2301      	movs	r3, #1
 801199a:	4632      	mov	r2, r6
 801199c:	4649      	mov	r1, r9
 801199e:	4640      	mov	r0, r8
 80119a0:	47d0      	blx	sl
 80119a2:	3001      	adds	r0, #1
 80119a4:	d09d      	beq.n	80118e2 <_printf_i+0x15a>
 80119a6:	3501      	adds	r5, #1
 80119a8:	68e3      	ldr	r3, [r4, #12]
 80119aa:	9903      	ldr	r1, [sp, #12]
 80119ac:	1a5b      	subs	r3, r3, r1
 80119ae:	42ab      	cmp	r3, r5
 80119b0:	dcf2      	bgt.n	8011998 <_printf_i+0x210>
 80119b2:	e7eb      	b.n	801198c <_printf_i+0x204>
 80119b4:	2500      	movs	r5, #0
 80119b6:	f104 0619 	add.w	r6, r4, #25
 80119ba:	e7f5      	b.n	80119a8 <_printf_i+0x220>
 80119bc:	0804eb95 	.word	0x0804eb95
 80119c0:	0804eba6 	.word	0x0804eba6

080119c4 <__sflush_r>:
 80119c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80119c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119cc:	0716      	lsls	r6, r2, #28
 80119ce:	4605      	mov	r5, r0
 80119d0:	460c      	mov	r4, r1
 80119d2:	d454      	bmi.n	8011a7e <__sflush_r+0xba>
 80119d4:	684b      	ldr	r3, [r1, #4]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	dc02      	bgt.n	80119e0 <__sflush_r+0x1c>
 80119da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80119dc:	2b00      	cmp	r3, #0
 80119de:	dd48      	ble.n	8011a72 <__sflush_r+0xae>
 80119e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80119e2:	2e00      	cmp	r6, #0
 80119e4:	d045      	beq.n	8011a72 <__sflush_r+0xae>
 80119e6:	2300      	movs	r3, #0
 80119e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80119ec:	682f      	ldr	r7, [r5, #0]
 80119ee:	6a21      	ldr	r1, [r4, #32]
 80119f0:	602b      	str	r3, [r5, #0]
 80119f2:	d030      	beq.n	8011a56 <__sflush_r+0x92>
 80119f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80119f6:	89a3      	ldrh	r3, [r4, #12]
 80119f8:	0759      	lsls	r1, r3, #29
 80119fa:	d505      	bpl.n	8011a08 <__sflush_r+0x44>
 80119fc:	6863      	ldr	r3, [r4, #4]
 80119fe:	1ad2      	subs	r2, r2, r3
 8011a00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a02:	b10b      	cbz	r3, 8011a08 <__sflush_r+0x44>
 8011a04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a06:	1ad2      	subs	r2, r2, r3
 8011a08:	2300      	movs	r3, #0
 8011a0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a0c:	6a21      	ldr	r1, [r4, #32]
 8011a0e:	4628      	mov	r0, r5
 8011a10:	47b0      	blx	r6
 8011a12:	1c43      	adds	r3, r0, #1
 8011a14:	89a3      	ldrh	r3, [r4, #12]
 8011a16:	d106      	bne.n	8011a26 <__sflush_r+0x62>
 8011a18:	6829      	ldr	r1, [r5, #0]
 8011a1a:	291d      	cmp	r1, #29
 8011a1c:	d82b      	bhi.n	8011a76 <__sflush_r+0xb2>
 8011a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8011ac8 <__sflush_r+0x104>)
 8011a20:	40ca      	lsrs	r2, r1
 8011a22:	07d6      	lsls	r6, r2, #31
 8011a24:	d527      	bpl.n	8011a76 <__sflush_r+0xb2>
 8011a26:	2200      	movs	r2, #0
 8011a28:	6062      	str	r2, [r4, #4]
 8011a2a:	04d9      	lsls	r1, r3, #19
 8011a2c:	6922      	ldr	r2, [r4, #16]
 8011a2e:	6022      	str	r2, [r4, #0]
 8011a30:	d504      	bpl.n	8011a3c <__sflush_r+0x78>
 8011a32:	1c42      	adds	r2, r0, #1
 8011a34:	d101      	bne.n	8011a3a <__sflush_r+0x76>
 8011a36:	682b      	ldr	r3, [r5, #0]
 8011a38:	b903      	cbnz	r3, 8011a3c <__sflush_r+0x78>
 8011a3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8011a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a3e:	602f      	str	r7, [r5, #0]
 8011a40:	b1b9      	cbz	r1, 8011a72 <__sflush_r+0xae>
 8011a42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a46:	4299      	cmp	r1, r3
 8011a48:	d002      	beq.n	8011a50 <__sflush_r+0x8c>
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	f7ff fb4a 	bl	80110e4 <_free_r>
 8011a50:	2300      	movs	r3, #0
 8011a52:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a54:	e00d      	b.n	8011a72 <__sflush_r+0xae>
 8011a56:	2301      	movs	r3, #1
 8011a58:	4628      	mov	r0, r5
 8011a5a:	47b0      	blx	r6
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	1c50      	adds	r0, r2, #1
 8011a60:	d1c9      	bne.n	80119f6 <__sflush_r+0x32>
 8011a62:	682b      	ldr	r3, [r5, #0]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d0c6      	beq.n	80119f6 <__sflush_r+0x32>
 8011a68:	2b1d      	cmp	r3, #29
 8011a6a:	d001      	beq.n	8011a70 <__sflush_r+0xac>
 8011a6c:	2b16      	cmp	r3, #22
 8011a6e:	d11e      	bne.n	8011aae <__sflush_r+0xea>
 8011a70:	602f      	str	r7, [r5, #0]
 8011a72:	2000      	movs	r0, #0
 8011a74:	e022      	b.n	8011abc <__sflush_r+0xf8>
 8011a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a7a:	b21b      	sxth	r3, r3
 8011a7c:	e01b      	b.n	8011ab6 <__sflush_r+0xf2>
 8011a7e:	690f      	ldr	r7, [r1, #16]
 8011a80:	2f00      	cmp	r7, #0
 8011a82:	d0f6      	beq.n	8011a72 <__sflush_r+0xae>
 8011a84:	0793      	lsls	r3, r2, #30
 8011a86:	680e      	ldr	r6, [r1, #0]
 8011a88:	bf08      	it	eq
 8011a8a:	694b      	ldreq	r3, [r1, #20]
 8011a8c:	600f      	str	r7, [r1, #0]
 8011a8e:	bf18      	it	ne
 8011a90:	2300      	movne	r3, #0
 8011a92:	eba6 0807 	sub.w	r8, r6, r7
 8011a96:	608b      	str	r3, [r1, #8]
 8011a98:	f1b8 0f00 	cmp.w	r8, #0
 8011a9c:	dde9      	ble.n	8011a72 <__sflush_r+0xae>
 8011a9e:	6a21      	ldr	r1, [r4, #32]
 8011aa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011aa2:	4643      	mov	r3, r8
 8011aa4:	463a      	mov	r2, r7
 8011aa6:	4628      	mov	r0, r5
 8011aa8:	47b0      	blx	r6
 8011aaa:	2800      	cmp	r0, #0
 8011aac:	dc08      	bgt.n	8011ac0 <__sflush_r+0xfc>
 8011aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ab6:	81a3      	strh	r3, [r4, #12]
 8011ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ac0:	4407      	add	r7, r0
 8011ac2:	eba8 0800 	sub.w	r8, r8, r0
 8011ac6:	e7e7      	b.n	8011a98 <__sflush_r+0xd4>
 8011ac8:	20400001 	.word	0x20400001

08011acc <_fflush_r>:
 8011acc:	b538      	push	{r3, r4, r5, lr}
 8011ace:	690b      	ldr	r3, [r1, #16]
 8011ad0:	4605      	mov	r5, r0
 8011ad2:	460c      	mov	r4, r1
 8011ad4:	b913      	cbnz	r3, 8011adc <_fflush_r+0x10>
 8011ad6:	2500      	movs	r5, #0
 8011ad8:	4628      	mov	r0, r5
 8011ada:	bd38      	pop	{r3, r4, r5, pc}
 8011adc:	b118      	cbz	r0, 8011ae6 <_fflush_r+0x1a>
 8011ade:	6a03      	ldr	r3, [r0, #32]
 8011ae0:	b90b      	cbnz	r3, 8011ae6 <_fflush_r+0x1a>
 8011ae2:	f7ff f9bd 	bl	8010e60 <__sinit>
 8011ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d0f3      	beq.n	8011ad6 <_fflush_r+0xa>
 8011aee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011af0:	07d0      	lsls	r0, r2, #31
 8011af2:	d404      	bmi.n	8011afe <_fflush_r+0x32>
 8011af4:	0599      	lsls	r1, r3, #22
 8011af6:	d402      	bmi.n	8011afe <_fflush_r+0x32>
 8011af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011afa:	f7ff fae2 	bl	80110c2 <__retarget_lock_acquire_recursive>
 8011afe:	4628      	mov	r0, r5
 8011b00:	4621      	mov	r1, r4
 8011b02:	f7ff ff5f 	bl	80119c4 <__sflush_r>
 8011b06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b08:	07da      	lsls	r2, r3, #31
 8011b0a:	4605      	mov	r5, r0
 8011b0c:	d4e4      	bmi.n	8011ad8 <_fflush_r+0xc>
 8011b0e:	89a3      	ldrh	r3, [r4, #12]
 8011b10:	059b      	lsls	r3, r3, #22
 8011b12:	d4e1      	bmi.n	8011ad8 <_fflush_r+0xc>
 8011b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b16:	f7ff fad5 	bl	80110c4 <__retarget_lock_release_recursive>
 8011b1a:	e7dd      	b.n	8011ad8 <_fflush_r+0xc>

08011b1c <_malloc_usable_size_r>:
 8011b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b20:	1f18      	subs	r0, r3, #4
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	bfbc      	itt	lt
 8011b26:	580b      	ldrlt	r3, [r1, r0]
 8011b28:	18c0      	addlt	r0, r0, r3
 8011b2a:	4770      	bx	lr

08011b2c <__sread>:
 8011b2c:	b510      	push	{r4, lr}
 8011b2e:	460c      	mov	r4, r1
 8011b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b34:	f000 f956 	bl	8011de4 <_read_r>
 8011b38:	2800      	cmp	r0, #0
 8011b3a:	bfab      	itete	ge
 8011b3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8011b40:	181b      	addge	r3, r3, r0
 8011b42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011b46:	bfac      	ite	ge
 8011b48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011b4a:	81a3      	strhlt	r3, [r4, #12]
 8011b4c:	bd10      	pop	{r4, pc}

08011b4e <__swrite>:
 8011b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b52:	461f      	mov	r7, r3
 8011b54:	898b      	ldrh	r3, [r1, #12]
 8011b56:	05db      	lsls	r3, r3, #23
 8011b58:	4605      	mov	r5, r0
 8011b5a:	460c      	mov	r4, r1
 8011b5c:	4616      	mov	r6, r2
 8011b5e:	d505      	bpl.n	8011b6c <__swrite+0x1e>
 8011b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b64:	2302      	movs	r3, #2
 8011b66:	2200      	movs	r2, #0
 8011b68:	f000 f92a 	bl	8011dc0 <_lseek_r>
 8011b6c:	89a3      	ldrh	r3, [r4, #12]
 8011b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011b76:	81a3      	strh	r3, [r4, #12]
 8011b78:	4632      	mov	r2, r6
 8011b7a:	463b      	mov	r3, r7
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b82:	f000 b941 	b.w	8011e08 <_write_r>

08011b86 <__sseek>:
 8011b86:	b510      	push	{r4, lr}
 8011b88:	460c      	mov	r4, r1
 8011b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b8e:	f000 f917 	bl	8011dc0 <_lseek_r>
 8011b92:	1c43      	adds	r3, r0, #1
 8011b94:	89a3      	ldrh	r3, [r4, #12]
 8011b96:	bf15      	itete	ne
 8011b98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011b9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011b9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011ba2:	81a3      	strheq	r3, [r4, #12]
 8011ba4:	bf18      	it	ne
 8011ba6:	81a3      	strhne	r3, [r4, #12]
 8011ba8:	bd10      	pop	{r4, pc}

08011baa <__sclose>:
 8011baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bae:	f000 b93d 	b.w	8011e2c <_close_r>

08011bb2 <__swbuf_r>:
 8011bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bb4:	460e      	mov	r6, r1
 8011bb6:	4614      	mov	r4, r2
 8011bb8:	4605      	mov	r5, r0
 8011bba:	b118      	cbz	r0, 8011bc4 <__swbuf_r+0x12>
 8011bbc:	6a03      	ldr	r3, [r0, #32]
 8011bbe:	b90b      	cbnz	r3, 8011bc4 <__swbuf_r+0x12>
 8011bc0:	f7ff f94e 	bl	8010e60 <__sinit>
 8011bc4:	69a3      	ldr	r3, [r4, #24]
 8011bc6:	60a3      	str	r3, [r4, #8]
 8011bc8:	89a3      	ldrh	r3, [r4, #12]
 8011bca:	071a      	lsls	r2, r3, #28
 8011bcc:	d501      	bpl.n	8011bd2 <__swbuf_r+0x20>
 8011bce:	6923      	ldr	r3, [r4, #16]
 8011bd0:	b943      	cbnz	r3, 8011be4 <__swbuf_r+0x32>
 8011bd2:	4621      	mov	r1, r4
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	f000 f82b 	bl	8011c30 <__swsetup_r>
 8011bda:	b118      	cbz	r0, 8011be4 <__swbuf_r+0x32>
 8011bdc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011be0:	4638      	mov	r0, r7
 8011be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011be4:	6823      	ldr	r3, [r4, #0]
 8011be6:	6922      	ldr	r2, [r4, #16]
 8011be8:	1a98      	subs	r0, r3, r2
 8011bea:	6963      	ldr	r3, [r4, #20]
 8011bec:	b2f6      	uxtb	r6, r6
 8011bee:	4283      	cmp	r3, r0
 8011bf0:	4637      	mov	r7, r6
 8011bf2:	dc05      	bgt.n	8011c00 <__swbuf_r+0x4e>
 8011bf4:	4621      	mov	r1, r4
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	f7ff ff68 	bl	8011acc <_fflush_r>
 8011bfc:	2800      	cmp	r0, #0
 8011bfe:	d1ed      	bne.n	8011bdc <__swbuf_r+0x2a>
 8011c00:	68a3      	ldr	r3, [r4, #8]
 8011c02:	3b01      	subs	r3, #1
 8011c04:	60a3      	str	r3, [r4, #8]
 8011c06:	6823      	ldr	r3, [r4, #0]
 8011c08:	1c5a      	adds	r2, r3, #1
 8011c0a:	6022      	str	r2, [r4, #0]
 8011c0c:	701e      	strb	r6, [r3, #0]
 8011c0e:	6962      	ldr	r2, [r4, #20]
 8011c10:	1c43      	adds	r3, r0, #1
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d004      	beq.n	8011c20 <__swbuf_r+0x6e>
 8011c16:	89a3      	ldrh	r3, [r4, #12]
 8011c18:	07db      	lsls	r3, r3, #31
 8011c1a:	d5e1      	bpl.n	8011be0 <__swbuf_r+0x2e>
 8011c1c:	2e0a      	cmp	r6, #10
 8011c1e:	d1df      	bne.n	8011be0 <__swbuf_r+0x2e>
 8011c20:	4621      	mov	r1, r4
 8011c22:	4628      	mov	r0, r5
 8011c24:	f7ff ff52 	bl	8011acc <_fflush_r>
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	d0d9      	beq.n	8011be0 <__swbuf_r+0x2e>
 8011c2c:	e7d6      	b.n	8011bdc <__swbuf_r+0x2a>
	...

08011c30 <__swsetup_r>:
 8011c30:	b538      	push	{r3, r4, r5, lr}
 8011c32:	4b29      	ldr	r3, [pc, #164]	@ (8011cd8 <__swsetup_r+0xa8>)
 8011c34:	4605      	mov	r5, r0
 8011c36:	6818      	ldr	r0, [r3, #0]
 8011c38:	460c      	mov	r4, r1
 8011c3a:	b118      	cbz	r0, 8011c44 <__swsetup_r+0x14>
 8011c3c:	6a03      	ldr	r3, [r0, #32]
 8011c3e:	b90b      	cbnz	r3, 8011c44 <__swsetup_r+0x14>
 8011c40:	f7ff f90e 	bl	8010e60 <__sinit>
 8011c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c48:	0719      	lsls	r1, r3, #28
 8011c4a:	d422      	bmi.n	8011c92 <__swsetup_r+0x62>
 8011c4c:	06da      	lsls	r2, r3, #27
 8011c4e:	d407      	bmi.n	8011c60 <__swsetup_r+0x30>
 8011c50:	2209      	movs	r2, #9
 8011c52:	602a      	str	r2, [r5, #0]
 8011c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c58:	81a3      	strh	r3, [r4, #12]
 8011c5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c5e:	e033      	b.n	8011cc8 <__swsetup_r+0x98>
 8011c60:	0758      	lsls	r0, r3, #29
 8011c62:	d512      	bpl.n	8011c8a <__swsetup_r+0x5a>
 8011c64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c66:	b141      	cbz	r1, 8011c7a <__swsetup_r+0x4a>
 8011c68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c6c:	4299      	cmp	r1, r3
 8011c6e:	d002      	beq.n	8011c76 <__swsetup_r+0x46>
 8011c70:	4628      	mov	r0, r5
 8011c72:	f7ff fa37 	bl	80110e4 <_free_r>
 8011c76:	2300      	movs	r3, #0
 8011c78:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c7a:	89a3      	ldrh	r3, [r4, #12]
 8011c7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011c80:	81a3      	strh	r3, [r4, #12]
 8011c82:	2300      	movs	r3, #0
 8011c84:	6063      	str	r3, [r4, #4]
 8011c86:	6923      	ldr	r3, [r4, #16]
 8011c88:	6023      	str	r3, [r4, #0]
 8011c8a:	89a3      	ldrh	r3, [r4, #12]
 8011c8c:	f043 0308 	orr.w	r3, r3, #8
 8011c90:	81a3      	strh	r3, [r4, #12]
 8011c92:	6923      	ldr	r3, [r4, #16]
 8011c94:	b94b      	cbnz	r3, 8011caa <__swsetup_r+0x7a>
 8011c96:	89a3      	ldrh	r3, [r4, #12]
 8011c98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ca0:	d003      	beq.n	8011caa <__swsetup_r+0x7a>
 8011ca2:	4621      	mov	r1, r4
 8011ca4:	4628      	mov	r0, r5
 8011ca6:	f000 f83f 	bl	8011d28 <__smakebuf_r>
 8011caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cae:	f013 0201 	ands.w	r2, r3, #1
 8011cb2:	d00a      	beq.n	8011cca <__swsetup_r+0x9a>
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	60a2      	str	r2, [r4, #8]
 8011cb8:	6962      	ldr	r2, [r4, #20]
 8011cba:	4252      	negs	r2, r2
 8011cbc:	61a2      	str	r2, [r4, #24]
 8011cbe:	6922      	ldr	r2, [r4, #16]
 8011cc0:	b942      	cbnz	r2, 8011cd4 <__swsetup_r+0xa4>
 8011cc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011cc6:	d1c5      	bne.n	8011c54 <__swsetup_r+0x24>
 8011cc8:	bd38      	pop	{r3, r4, r5, pc}
 8011cca:	0799      	lsls	r1, r3, #30
 8011ccc:	bf58      	it	pl
 8011cce:	6962      	ldrpl	r2, [r4, #20]
 8011cd0:	60a2      	str	r2, [r4, #8]
 8011cd2:	e7f4      	b.n	8011cbe <__swsetup_r+0x8e>
 8011cd4:	2000      	movs	r0, #0
 8011cd6:	e7f7      	b.n	8011cc8 <__swsetup_r+0x98>
 8011cd8:	20002180 	.word	0x20002180

08011cdc <__swhatbuf_r>:
 8011cdc:	b570      	push	{r4, r5, r6, lr}
 8011cde:	460c      	mov	r4, r1
 8011ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ce4:	2900      	cmp	r1, #0
 8011ce6:	b096      	sub	sp, #88	@ 0x58
 8011ce8:	4615      	mov	r5, r2
 8011cea:	461e      	mov	r6, r3
 8011cec:	da0d      	bge.n	8011d0a <__swhatbuf_r+0x2e>
 8011cee:	89a3      	ldrh	r3, [r4, #12]
 8011cf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011cf4:	f04f 0100 	mov.w	r1, #0
 8011cf8:	bf14      	ite	ne
 8011cfa:	2340      	movne	r3, #64	@ 0x40
 8011cfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011d00:	2000      	movs	r0, #0
 8011d02:	6031      	str	r1, [r6, #0]
 8011d04:	602b      	str	r3, [r5, #0]
 8011d06:	b016      	add	sp, #88	@ 0x58
 8011d08:	bd70      	pop	{r4, r5, r6, pc}
 8011d0a:	466a      	mov	r2, sp
 8011d0c:	f000 f89e 	bl	8011e4c <_fstat_r>
 8011d10:	2800      	cmp	r0, #0
 8011d12:	dbec      	blt.n	8011cee <__swhatbuf_r+0x12>
 8011d14:	9901      	ldr	r1, [sp, #4]
 8011d16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011d1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011d1e:	4259      	negs	r1, r3
 8011d20:	4159      	adcs	r1, r3
 8011d22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011d26:	e7eb      	b.n	8011d00 <__swhatbuf_r+0x24>

08011d28 <__smakebuf_r>:
 8011d28:	898b      	ldrh	r3, [r1, #12]
 8011d2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d2c:	079d      	lsls	r5, r3, #30
 8011d2e:	4606      	mov	r6, r0
 8011d30:	460c      	mov	r4, r1
 8011d32:	d507      	bpl.n	8011d44 <__smakebuf_r+0x1c>
 8011d34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011d38:	6023      	str	r3, [r4, #0]
 8011d3a:	6123      	str	r3, [r4, #16]
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	6163      	str	r3, [r4, #20]
 8011d40:	b003      	add	sp, #12
 8011d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d44:	ab01      	add	r3, sp, #4
 8011d46:	466a      	mov	r2, sp
 8011d48:	f7ff ffc8 	bl	8011cdc <__swhatbuf_r>
 8011d4c:	9f00      	ldr	r7, [sp, #0]
 8011d4e:	4605      	mov	r5, r0
 8011d50:	4639      	mov	r1, r7
 8011d52:	4630      	mov	r0, r6
 8011d54:	f7fe ff36 	bl	8010bc4 <_malloc_r>
 8011d58:	b948      	cbnz	r0, 8011d6e <__smakebuf_r+0x46>
 8011d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d5e:	059a      	lsls	r2, r3, #22
 8011d60:	d4ee      	bmi.n	8011d40 <__smakebuf_r+0x18>
 8011d62:	f023 0303 	bic.w	r3, r3, #3
 8011d66:	f043 0302 	orr.w	r3, r3, #2
 8011d6a:	81a3      	strh	r3, [r4, #12]
 8011d6c:	e7e2      	b.n	8011d34 <__smakebuf_r+0xc>
 8011d6e:	89a3      	ldrh	r3, [r4, #12]
 8011d70:	6020      	str	r0, [r4, #0]
 8011d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d76:	81a3      	strh	r3, [r4, #12]
 8011d78:	9b01      	ldr	r3, [sp, #4]
 8011d7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011d7e:	b15b      	cbz	r3, 8011d98 <__smakebuf_r+0x70>
 8011d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d84:	4630      	mov	r0, r6
 8011d86:	f000 f80b 	bl	8011da0 <_isatty_r>
 8011d8a:	b128      	cbz	r0, 8011d98 <__smakebuf_r+0x70>
 8011d8c:	89a3      	ldrh	r3, [r4, #12]
 8011d8e:	f023 0303 	bic.w	r3, r3, #3
 8011d92:	f043 0301 	orr.w	r3, r3, #1
 8011d96:	81a3      	strh	r3, [r4, #12]
 8011d98:	89a3      	ldrh	r3, [r4, #12]
 8011d9a:	431d      	orrs	r5, r3
 8011d9c:	81a5      	strh	r5, [r4, #12]
 8011d9e:	e7cf      	b.n	8011d40 <__smakebuf_r+0x18>

08011da0 <_isatty_r>:
 8011da0:	b538      	push	{r3, r4, r5, lr}
 8011da2:	4d06      	ldr	r5, [pc, #24]	@ (8011dbc <_isatty_r+0x1c>)
 8011da4:	2300      	movs	r3, #0
 8011da6:	4604      	mov	r4, r0
 8011da8:	4608      	mov	r0, r1
 8011daa:	602b      	str	r3, [r5, #0]
 8011dac:	f7fb fe67 	bl	800da7e <_isatty>
 8011db0:	1c43      	adds	r3, r0, #1
 8011db2:	d102      	bne.n	8011dba <_isatty_r+0x1a>
 8011db4:	682b      	ldr	r3, [r5, #0]
 8011db6:	b103      	cbz	r3, 8011dba <_isatty_r+0x1a>
 8011db8:	6023      	str	r3, [r4, #0]
 8011dba:	bd38      	pop	{r3, r4, r5, pc}
 8011dbc:	2001e930 	.word	0x2001e930

08011dc0 <_lseek_r>:
 8011dc0:	b538      	push	{r3, r4, r5, lr}
 8011dc2:	4d07      	ldr	r5, [pc, #28]	@ (8011de0 <_lseek_r+0x20>)
 8011dc4:	4604      	mov	r4, r0
 8011dc6:	4608      	mov	r0, r1
 8011dc8:	4611      	mov	r1, r2
 8011dca:	2200      	movs	r2, #0
 8011dcc:	602a      	str	r2, [r5, #0]
 8011dce:	461a      	mov	r2, r3
 8011dd0:	f7fb fe57 	bl	800da82 <_lseek>
 8011dd4:	1c43      	adds	r3, r0, #1
 8011dd6:	d102      	bne.n	8011dde <_lseek_r+0x1e>
 8011dd8:	682b      	ldr	r3, [r5, #0]
 8011dda:	b103      	cbz	r3, 8011dde <_lseek_r+0x1e>
 8011ddc:	6023      	str	r3, [r4, #0]
 8011dde:	bd38      	pop	{r3, r4, r5, pc}
 8011de0:	2001e930 	.word	0x2001e930

08011de4 <_read_r>:
 8011de4:	b538      	push	{r3, r4, r5, lr}
 8011de6:	4d07      	ldr	r5, [pc, #28]	@ (8011e04 <_read_r+0x20>)
 8011de8:	4604      	mov	r4, r0
 8011dea:	4608      	mov	r0, r1
 8011dec:	4611      	mov	r1, r2
 8011dee:	2200      	movs	r2, #0
 8011df0:	602a      	str	r2, [r5, #0]
 8011df2:	461a      	mov	r2, r3
 8011df4:	f7fb fe1d 	bl	800da32 <_read>
 8011df8:	1c43      	adds	r3, r0, #1
 8011dfa:	d102      	bne.n	8011e02 <_read_r+0x1e>
 8011dfc:	682b      	ldr	r3, [r5, #0]
 8011dfe:	b103      	cbz	r3, 8011e02 <_read_r+0x1e>
 8011e00:	6023      	str	r3, [r4, #0]
 8011e02:	bd38      	pop	{r3, r4, r5, pc}
 8011e04:	2001e930 	.word	0x2001e930

08011e08 <_write_r>:
 8011e08:	b538      	push	{r3, r4, r5, lr}
 8011e0a:	4d07      	ldr	r5, [pc, #28]	@ (8011e28 <_write_r+0x20>)
 8011e0c:	4604      	mov	r4, r0
 8011e0e:	4608      	mov	r0, r1
 8011e10:	4611      	mov	r1, r2
 8011e12:	2200      	movs	r2, #0
 8011e14:	602a      	str	r2, [r5, #0]
 8011e16:	461a      	mov	r2, r3
 8011e18:	f7fb fe1b 	bl	800da52 <_write>
 8011e1c:	1c43      	adds	r3, r0, #1
 8011e1e:	d102      	bne.n	8011e26 <_write_r+0x1e>
 8011e20:	682b      	ldr	r3, [r5, #0]
 8011e22:	b103      	cbz	r3, 8011e26 <_write_r+0x1e>
 8011e24:	6023      	str	r3, [r4, #0]
 8011e26:	bd38      	pop	{r3, r4, r5, pc}
 8011e28:	2001e930 	.word	0x2001e930

08011e2c <_close_r>:
 8011e2c:	b538      	push	{r3, r4, r5, lr}
 8011e2e:	4d06      	ldr	r5, [pc, #24]	@ (8011e48 <_close_r+0x1c>)
 8011e30:	2300      	movs	r3, #0
 8011e32:	4604      	mov	r4, r0
 8011e34:	4608      	mov	r0, r1
 8011e36:	602b      	str	r3, [r5, #0]
 8011e38:	f7fb fe19 	bl	800da6e <_close>
 8011e3c:	1c43      	adds	r3, r0, #1
 8011e3e:	d102      	bne.n	8011e46 <_close_r+0x1a>
 8011e40:	682b      	ldr	r3, [r5, #0]
 8011e42:	b103      	cbz	r3, 8011e46 <_close_r+0x1a>
 8011e44:	6023      	str	r3, [r4, #0]
 8011e46:	bd38      	pop	{r3, r4, r5, pc}
 8011e48:	2001e930 	.word	0x2001e930

08011e4c <_fstat_r>:
 8011e4c:	b538      	push	{r3, r4, r5, lr}
 8011e4e:	4d07      	ldr	r5, [pc, #28]	@ (8011e6c <_fstat_r+0x20>)
 8011e50:	2300      	movs	r3, #0
 8011e52:	4604      	mov	r4, r0
 8011e54:	4608      	mov	r0, r1
 8011e56:	4611      	mov	r1, r2
 8011e58:	602b      	str	r3, [r5, #0]
 8011e5a:	f7fb fe0b 	bl	800da74 <_fstat>
 8011e5e:	1c43      	adds	r3, r0, #1
 8011e60:	d102      	bne.n	8011e68 <_fstat_r+0x1c>
 8011e62:	682b      	ldr	r3, [r5, #0]
 8011e64:	b103      	cbz	r3, 8011e68 <_fstat_r+0x1c>
 8011e66:	6023      	str	r3, [r4, #0]
 8011e68:	bd38      	pop	{r3, r4, r5, pc}
 8011e6a:	bf00      	nop
 8011e6c:	2001e930 	.word	0x2001e930

08011e70 <expf>:
 8011e70:	ee10 3a10 	vmov	r3, s0
 8011e74:	f240 412a 	movw	r1, #1066	@ 0x42a
 8011e78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011e7c:	428a      	cmp	r2, r1
 8011e7e:	eeb7 3ac0 	vcvt.f64.f32	d3, s0
 8011e82:	d832      	bhi.n	8011eea <expf+0x7a>
 8011e84:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011e88:	4b2d      	ldr	r3, [pc, #180]	@ (8011f40 <expf+0xd0>)
 8011e8a:	ed93 2b4a 	vldr	d2, [r3, #296]	@ 0x128
 8011e8e:	ed93 1b48 	vldr	d1, [r3, #288]	@ 0x120
 8011e92:	eeb0 7b41 	vmov.f64	d7, d1
 8011e96:	eea2 7b03 	vfma.f64	d7, d2, d3
 8011e9a:	ee17 0a10 	vmov	r0, s14
 8011e9e:	ee37 7b41 	vsub.f64	d7, d7, d1
 8011ea2:	f000 021f 	and.w	r2, r0, #31
 8011ea6:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8011eaa:	b430      	push	{r4, r5}
 8011eac:	ee92 7b03 	vfnms.f64	d7, d2, d3
 8011eb0:	ed93 4b4c 	vldr	d4, [r3, #304]	@ 0x130
 8011eb4:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8011eb8:	684d      	ldr	r5, [r1, #4]
 8011eba:	ed93 6b4e 	vldr	d6, [r3, #312]	@ 0x138
 8011ebe:	ed93 5b50 	vldr	d5, [r3, #320]	@ 0x140
 8011ec2:	eea4 6b07 	vfma.f64	d6, d4, d7
 8011ec6:	ee27 4b07 	vmul.f64	d4, d7, d7
 8011eca:	2100      	movs	r1, #0
 8011ecc:	190a      	adds	r2, r1, r4
 8011ece:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8011ed2:	eea5 0b07 	vfma.f64	d0, d5, d7
 8011ed6:	ec43 2b17 	vmov	d7, r2, r3
 8011eda:	eea6 0b04 	vfma.f64	d0, d6, d4
 8011ede:	bc30      	pop	{r4, r5}
 8011ee0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011ee4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011ee8:	4770      	bx	lr
 8011eea:	f513 0f00 	cmn.w	r3, #8388608	@ 0x800000
 8011eee:	d020      	beq.n	8011f32 <expf+0xc2>
 8011ef0:	f5b2 6fff 	cmp.w	r2, #2040	@ 0x7f8
 8011ef4:	d21a      	bcs.n	8011f2c <expf+0xbc>
 8011ef6:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8011f44 <expf+0xd4>
 8011efa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f02:	dc10      	bgt.n	8011f26 <expf+0xb6>
 8011f04:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011f48 <expf+0xd8>
 8011f08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f10:	d412      	bmi.n	8011f38 <expf+0xc8>
 8011f12:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011f4c <expf+0xdc>
 8011f16:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1e:	d5b1      	bpl.n	8011e84 <expf+0x14>
 8011f20:	2000      	movs	r0, #0
 8011f22:	f000 b89f 	b.w	8012064 <__math_may_uflowf>
 8011f26:	2000      	movs	r0, #0
 8011f28:	f000 b8a2 	b.w	8012070 <__math_oflowf>
 8011f2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011f30:	4770      	bx	lr
 8011f32:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8011f50 <expf+0xe0>
 8011f36:	4770      	bx	lr
 8011f38:	2000      	movs	r0, #0
 8011f3a:	f000 b88d 	b.w	8012058 <__math_uflowf>
 8011f3e:	bf00      	nop
 8011f40:	0804ebb8 	.word	0x0804ebb8
 8011f44:	42b17217 	.word	0x42b17217
 8011f48:	c2cff1b4 	.word	0xc2cff1b4
 8011f4c:	c2ce8ecf 	.word	0xc2ce8ecf
 8011f50:	00000000 	.word	0x00000000

08011f54 <logf>:
 8011f54:	ee10 3a10 	vmov	r3, s0
 8011f58:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	d038      	beq.n	8011fd2 <logf+0x7e>
 8011f60:	f5a3 0100 	sub.w	r1, r3, #8388608	@ 0x800000
 8011f64:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8011f68:	d236      	bcs.n	8011fd8 <logf+0x84>
 8011f6a:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 8011f6e:	f102 4340 	add.w	r3, r2, #3221225472	@ 0xc0000000
 8011f72:	4927      	ldr	r1, [pc, #156]	@ (8012010 <logf+0xbc>)
 8011f74:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 8011f78:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 8011f7c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8011f80:	ed91 4b40 	vldr	d4, [r1, #256]	@ 0x100
 8011f84:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 8011f88:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 8011f8c:	ed91 6b42 	vldr	d6, [r1, #264]	@ 0x108
 8011f90:	0dd9      	lsrs	r1, r3, #23
 8011f92:	05c9      	lsls	r1, r1, #23
 8011f94:	ed90 2b00 	vldr	d2, [r0]
 8011f98:	1a52      	subs	r2, r2, r1
 8011f9a:	ee03 2a90 	vmov	s7, r2
 8011f9e:	ed90 1b02 	vldr	d1, [r0, #8]
 8011fa2:	15db      	asrs	r3, r3, #23
 8011fa4:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8011fa8:	eea2 0b03 	vfma.f64	d0, d2, d3
 8011fac:	ee03 3a90 	vmov	s7, r3
 8011fb0:	ee20 2b00 	vmul.f64	d2, d0, d0
 8011fb4:	eea5 7b00 	vfma.f64	d7, d5, d0
 8011fb8:	eeb8 3be3 	vcvt.f64.s32	d3, s7
 8011fbc:	eea6 7b02 	vfma.f64	d7, d6, d2
 8011fc0:	eea3 1b04 	vfma.f64	d1, d3, d4
 8011fc4:	ee30 0b01 	vadd.f64	d0, d0, d1
 8011fc8:	eea2 0b07 	vfma.f64	d0, d2, d7
 8011fcc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011fd0:	4770      	bx	lr
 8011fd2:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8012014 <logf+0xc0>
 8011fd6:	4770      	bx	lr
 8011fd8:	0059      	lsls	r1, r3, #1
 8011fda:	d014      	beq.n	8012006 <logf+0xb2>
 8011fdc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011fe0:	d014      	beq.n	801200c <logf+0xb8>
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	db0b      	blt.n	8011ffe <logf+0xaa>
 8011fe6:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 8011fea:	d208      	bcs.n	8011ffe <logf+0xaa>
 8011fec:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8012018 <logf+0xc4>
 8011ff0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011ff4:	ee17 3a90 	vmov	r3, s15
 8011ff8:	f1a3 6238 	sub.w	r2, r3, #192937984	@ 0xb800000
 8011ffc:	e7b5      	b.n	8011f6a <logf+0x16>
 8011ffe:	ee00 3a10 	vmov	s0, r3
 8012002:	f000 b84d 	b.w	80120a0 <__math_invalidf>
 8012006:	2001      	movs	r0, #1
 8012008:	f000 b838 	b.w	801207c <__math_divzerof>
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	0804ed00 	.word	0x0804ed00
 8012014:	00000000 	.word	0x00000000
 8012018:	4b000000 	.word	0x4b000000

0801201c <with_errnof>:
 801201c:	b510      	push	{r4, lr}
 801201e:	ed2d 8b02 	vpush	{d8}
 8012022:	eeb0 8a40 	vmov.f32	s16, s0
 8012026:	4604      	mov	r4, r0
 8012028:	f7ff f820 	bl	801106c <__errno>
 801202c:	eeb0 0a48 	vmov.f32	s0, s16
 8012030:	ecbd 8b02 	vpop	{d8}
 8012034:	6004      	str	r4, [r0, #0]
 8012036:	bd10      	pop	{r4, pc}

08012038 <xflowf>:
 8012038:	b130      	cbz	r0, 8012048 <xflowf+0x10>
 801203a:	eef1 7a40 	vneg.f32	s15, s0
 801203e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012042:	2022      	movs	r0, #34	@ 0x22
 8012044:	f7ff bfea 	b.w	801201c <with_errnof>
 8012048:	eef0 7a40 	vmov.f32	s15, s0
 801204c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012050:	2022      	movs	r0, #34	@ 0x22
 8012052:	f7ff bfe3 	b.w	801201c <with_errnof>
 8012056:	bf00      	nop

08012058 <__math_uflowf>:
 8012058:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012060 <__math_uflowf+0x8>
 801205c:	f7ff bfec 	b.w	8012038 <xflowf>
 8012060:	10000000 	.word	0x10000000

08012064 <__math_may_uflowf>:
 8012064:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801206c <__math_may_uflowf+0x8>
 8012068:	f7ff bfe6 	b.w	8012038 <xflowf>
 801206c:	1a200000 	.word	0x1a200000

08012070 <__math_oflowf>:
 8012070:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012078 <__math_oflowf+0x8>
 8012074:	f7ff bfe0 	b.w	8012038 <xflowf>
 8012078:	70000000 	.word	0x70000000

0801207c <__math_divzerof>:
 801207c:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 801209c <__math_divzerof+0x20>
 8012080:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012084:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012088:	2800      	cmp	r0, #0
 801208a:	f04f 0022 	mov.w	r0, #34	@ 0x22
 801208e:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8012092:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012096:	f7ff bfc1 	b.w	801201c <with_errnof>
 801209a:	bf00      	nop
 801209c:	00000000 	.word	0x00000000

080120a0 <__math_invalidf>:
 80120a0:	eef0 7a40 	vmov.f32	s15, s0
 80120a4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80120a8:	eef4 7a67 	vcmp.f32	s15, s15
 80120ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80120b4:	d602      	bvs.n	80120bc <__math_invalidf+0x1c>
 80120b6:	2021      	movs	r0, #33	@ 0x21
 80120b8:	f7ff bfb0 	b.w	801201c <with_errnof>
 80120bc:	4770      	bx	lr
 80120be:	bf00      	nop

080120c0 <sqrtf>:
 80120c0:	b508      	push	{r3, lr}
 80120c2:	ed2d 8b02 	vpush	{d8}
 80120c6:	eeb0 8a40 	vmov.f32	s16, s0
 80120ca:	f000 f81b 	bl	8012104 <__ieee754_sqrtf>
 80120ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80120d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120d6:	d606      	bvs.n	80120e6 <sqrtf+0x26>
 80120d8:	eddf 8a09 	vldr	s17, [pc, #36]	@ 8012100 <sqrtf+0x40>
 80120dc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80120e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120e4:	d402      	bmi.n	80120ec <sqrtf+0x2c>
 80120e6:	ecbd 8b02 	vpop	{d8}
 80120ea:	bd08      	pop	{r3, pc}
 80120ec:	f7fe ffbe 	bl	801106c <__errno>
 80120f0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80120f4:	ecbd 8b02 	vpop	{d8}
 80120f8:	2321      	movs	r3, #33	@ 0x21
 80120fa:	6003      	str	r3, [r0, #0]
 80120fc:	bd08      	pop	{r3, pc}
 80120fe:	bf00      	nop
 8012100:	00000000 	.word	0x00000000

08012104 <__ieee754_sqrtf>:
 8012104:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012108:	4770      	bx	lr
 801210a:	bf00      	nop

0801210c <__udivmoddi4>:
 801210c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012110:	9d08      	ldr	r5, [sp, #32]
 8012112:	460e      	mov	r6, r1
 8012114:	4604      	mov	r4, r0
 8012116:	460f      	mov	r7, r1
 8012118:	2b00      	cmp	r3, #0
 801211a:	d14a      	bne.n	80121b2 <__udivmoddi4+0xa6>
 801211c:	4694      	mov	ip, r2
 801211e:	458c      	cmp	ip, r1
 8012120:	fab2 f282 	clz	r2, r2
 8012124:	d960      	bls.n	80121e8 <__udivmoddi4+0xdc>
 8012126:	b142      	cbz	r2, 801213a <__udivmoddi4+0x2e>
 8012128:	f1c2 0320 	rsb	r3, r2, #32
 801212c:	4097      	lsls	r7, r2
 801212e:	fa20 f303 	lsr.w	r3, r0, r3
 8012132:	fa0c fc02 	lsl.w	ip, ip, r2
 8012136:	431f      	orrs	r7, r3
 8012138:	4094      	lsls	r4, r2
 801213a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 801213e:	fa1f f68c 	uxth.w	r6, ip
 8012142:	fbb7 f1fe 	udiv	r1, r7, lr
 8012146:	0c23      	lsrs	r3, r4, #16
 8012148:	fb0e 7711 	mls	r7, lr, r1, r7
 801214c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012150:	fb01 f006 	mul.w	r0, r1, r6
 8012154:	4298      	cmp	r0, r3
 8012156:	d90a      	bls.n	801216e <__udivmoddi4+0x62>
 8012158:	eb1c 0303 	adds.w	r3, ip, r3
 801215c:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8012160:	f080 8115 	bcs.w	801238e <__udivmoddi4+0x282>
 8012164:	4298      	cmp	r0, r3
 8012166:	f240 8112 	bls.w	801238e <__udivmoddi4+0x282>
 801216a:	3902      	subs	r1, #2
 801216c:	4463      	add	r3, ip
 801216e:	1a1b      	subs	r3, r3, r0
 8012170:	b2a4      	uxth	r4, r4
 8012172:	fbb3 f0fe 	udiv	r0, r3, lr
 8012176:	fb0e 3310 	mls	r3, lr, r0, r3
 801217a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 801217e:	fb00 f606 	mul.w	r6, r0, r6
 8012182:	42a6      	cmp	r6, r4
 8012184:	d90a      	bls.n	801219c <__udivmoddi4+0x90>
 8012186:	eb1c 0404 	adds.w	r4, ip, r4
 801218a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801218e:	f080 8100 	bcs.w	8012392 <__udivmoddi4+0x286>
 8012192:	42a6      	cmp	r6, r4
 8012194:	f240 80fd 	bls.w	8012392 <__udivmoddi4+0x286>
 8012198:	4464      	add	r4, ip
 801219a:	3802      	subs	r0, #2
 801219c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80121a0:	1ba4      	subs	r4, r4, r6
 80121a2:	2100      	movs	r1, #0
 80121a4:	b11d      	cbz	r5, 80121ae <__udivmoddi4+0xa2>
 80121a6:	40d4      	lsrs	r4, r2
 80121a8:	2300      	movs	r3, #0
 80121aa:	e9c5 4300 	strd	r4, r3, [r5]
 80121ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121b2:	428b      	cmp	r3, r1
 80121b4:	d905      	bls.n	80121c2 <__udivmoddi4+0xb6>
 80121b6:	b10d      	cbz	r5, 80121bc <__udivmoddi4+0xb0>
 80121b8:	e9c5 0100 	strd	r0, r1, [r5]
 80121bc:	2100      	movs	r1, #0
 80121be:	4608      	mov	r0, r1
 80121c0:	e7f5      	b.n	80121ae <__udivmoddi4+0xa2>
 80121c2:	fab3 f183 	clz	r1, r3
 80121c6:	2900      	cmp	r1, #0
 80121c8:	d146      	bne.n	8012258 <__udivmoddi4+0x14c>
 80121ca:	42b3      	cmp	r3, r6
 80121cc:	d302      	bcc.n	80121d4 <__udivmoddi4+0xc8>
 80121ce:	4282      	cmp	r2, r0
 80121d0:	f200 80f5 	bhi.w	80123be <__udivmoddi4+0x2b2>
 80121d4:	1a84      	subs	r4, r0, r2
 80121d6:	eb66 0203 	sbc.w	r2, r6, r3
 80121da:	2001      	movs	r0, #1
 80121dc:	4617      	mov	r7, r2
 80121de:	2d00      	cmp	r5, #0
 80121e0:	d0e5      	beq.n	80121ae <__udivmoddi4+0xa2>
 80121e2:	e9c5 4700 	strd	r4, r7, [r5]
 80121e6:	e7e2      	b.n	80121ae <__udivmoddi4+0xa2>
 80121e8:	2a00      	cmp	r2, #0
 80121ea:	f040 8093 	bne.w	8012314 <__udivmoddi4+0x208>
 80121ee:	eba1 030c 	sub.w	r3, r1, ip
 80121f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80121f6:	fa1f fe8c 	uxth.w	lr, ip
 80121fa:	2101      	movs	r1, #1
 80121fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8012200:	fb07 3016 	mls	r0, r7, r6, r3
 8012204:	0c23      	lsrs	r3, r4, #16
 8012206:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801220a:	fb0e f006 	mul.w	r0, lr, r6
 801220e:	4298      	cmp	r0, r3
 8012210:	d908      	bls.n	8012224 <__udivmoddi4+0x118>
 8012212:	eb1c 0303 	adds.w	r3, ip, r3
 8012216:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 801221a:	d202      	bcs.n	8012222 <__udivmoddi4+0x116>
 801221c:	4298      	cmp	r0, r3
 801221e:	f200 80d0 	bhi.w	80123c2 <__udivmoddi4+0x2b6>
 8012222:	4646      	mov	r6, r8
 8012224:	1a1b      	subs	r3, r3, r0
 8012226:	b2a4      	uxth	r4, r4
 8012228:	fbb3 f0f7 	udiv	r0, r3, r7
 801222c:	fb07 3310 	mls	r3, r7, r0, r3
 8012230:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8012234:	fb0e fe00 	mul.w	lr, lr, r0
 8012238:	45a6      	cmp	lr, r4
 801223a:	d908      	bls.n	801224e <__udivmoddi4+0x142>
 801223c:	eb1c 0404 	adds.w	r4, ip, r4
 8012240:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8012244:	d202      	bcs.n	801224c <__udivmoddi4+0x140>
 8012246:	45a6      	cmp	lr, r4
 8012248:	f200 80b6 	bhi.w	80123b8 <__udivmoddi4+0x2ac>
 801224c:	4618      	mov	r0, r3
 801224e:	eba4 040e 	sub.w	r4, r4, lr
 8012252:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8012256:	e7a5      	b.n	80121a4 <__udivmoddi4+0x98>
 8012258:	f1c1 0720 	rsb	r7, r1, #32
 801225c:	408b      	lsls	r3, r1
 801225e:	fa22 fc07 	lsr.w	ip, r2, r7
 8012262:	ea4c 0c03 	orr.w	ip, ip, r3
 8012266:	fa06 fe01 	lsl.w	lr, r6, r1
 801226a:	fa20 f407 	lsr.w	r4, r0, r7
 801226e:	fa26 f307 	lsr.w	r3, r6, r7
 8012272:	ea44 040e 	orr.w	r4, r4, lr
 8012276:	fa00 f801 	lsl.w	r8, r0, r1
 801227a:	ea4f 401c 	mov.w	r0, ip, lsr #16
 801227e:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8012282:	fbb3 fef0 	udiv	lr, r3, r0
 8012286:	fa1f f68c 	uxth.w	r6, ip
 801228a:	fb00 331e 	mls	r3, r0, lr, r3
 801228e:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8012292:	fb0e f906 	mul.w	r9, lr, r6
 8012296:	4599      	cmp	r9, r3
 8012298:	fa02 f201 	lsl.w	r2, r2, r1
 801229c:	d90b      	bls.n	80122b6 <__udivmoddi4+0x1aa>
 801229e:	eb1c 0303 	adds.w	r3, ip, r3
 80122a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80122a6:	f080 8085 	bcs.w	80123b4 <__udivmoddi4+0x2a8>
 80122aa:	4599      	cmp	r9, r3
 80122ac:	f240 8082 	bls.w	80123b4 <__udivmoddi4+0x2a8>
 80122b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80122b4:	4463      	add	r3, ip
 80122b6:	eba3 0909 	sub.w	r9, r3, r9
 80122ba:	b2a4      	uxth	r4, r4
 80122bc:	fbb9 f3f0 	udiv	r3, r9, r0
 80122c0:	fb00 9913 	mls	r9, r0, r3, r9
 80122c4:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 80122c8:	fb03 f606 	mul.w	r6, r3, r6
 80122cc:	42a6      	cmp	r6, r4
 80122ce:	d908      	bls.n	80122e2 <__udivmoddi4+0x1d6>
 80122d0:	eb1c 0404 	adds.w	r4, ip, r4
 80122d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80122d8:	d268      	bcs.n	80123ac <__udivmoddi4+0x2a0>
 80122da:	42a6      	cmp	r6, r4
 80122dc:	d966      	bls.n	80123ac <__udivmoddi4+0x2a0>
 80122de:	3b02      	subs	r3, #2
 80122e0:	4464      	add	r4, ip
 80122e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80122e6:	1ba4      	subs	r4, r4, r6
 80122e8:	fba0 e602 	umull	lr, r6, r0, r2
 80122ec:	42b4      	cmp	r4, r6
 80122ee:	4673      	mov	r3, lr
 80122f0:	46b1      	mov	r9, r6
 80122f2:	d352      	bcc.n	801239a <__udivmoddi4+0x28e>
 80122f4:	d04f      	beq.n	8012396 <__udivmoddi4+0x28a>
 80122f6:	b15d      	cbz	r5, 8012310 <__udivmoddi4+0x204>
 80122f8:	ebb8 0203 	subs.w	r2, r8, r3
 80122fc:	eb64 0409 	sbc.w	r4, r4, r9
 8012300:	fa04 f707 	lsl.w	r7, r4, r7
 8012304:	fa22 f301 	lsr.w	r3, r2, r1
 8012308:	431f      	orrs	r7, r3
 801230a:	40cc      	lsrs	r4, r1
 801230c:	e9c5 7400 	strd	r7, r4, [r5]
 8012310:	2100      	movs	r1, #0
 8012312:	e74c      	b.n	80121ae <__udivmoddi4+0xa2>
 8012314:	f1c2 0120 	rsb	r1, r2, #32
 8012318:	fa20 f301 	lsr.w	r3, r0, r1
 801231c:	fa0c fc02 	lsl.w	ip, ip, r2
 8012320:	fa26 f101 	lsr.w	r1, r6, r1
 8012324:	4096      	lsls	r6, r2
 8012326:	4333      	orrs	r3, r6
 8012328:	ea4f 471c 	mov.w	r7, ip, lsr #16
 801232c:	fa1f fe8c 	uxth.w	lr, ip
 8012330:	fbb1 f0f7 	udiv	r0, r1, r7
 8012334:	fb07 1610 	mls	r6, r7, r0, r1
 8012338:	0c19      	lsrs	r1, r3, #16
 801233a:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 801233e:	fb00 f60e 	mul.w	r6, r0, lr
 8012342:	428e      	cmp	r6, r1
 8012344:	fa04 f402 	lsl.w	r4, r4, r2
 8012348:	d908      	bls.n	801235c <__udivmoddi4+0x250>
 801234a:	eb1c 0101 	adds.w	r1, ip, r1
 801234e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8012352:	d22d      	bcs.n	80123b0 <__udivmoddi4+0x2a4>
 8012354:	428e      	cmp	r6, r1
 8012356:	d92b      	bls.n	80123b0 <__udivmoddi4+0x2a4>
 8012358:	3802      	subs	r0, #2
 801235a:	4461      	add	r1, ip
 801235c:	1b89      	subs	r1, r1, r6
 801235e:	b29b      	uxth	r3, r3
 8012360:	fbb1 f6f7 	udiv	r6, r1, r7
 8012364:	fb07 1116 	mls	r1, r7, r6, r1
 8012368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801236c:	fb06 f10e 	mul.w	r1, r6, lr
 8012370:	4299      	cmp	r1, r3
 8012372:	d908      	bls.n	8012386 <__udivmoddi4+0x27a>
 8012374:	eb1c 0303 	adds.w	r3, ip, r3
 8012378:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 801237c:	d214      	bcs.n	80123a8 <__udivmoddi4+0x29c>
 801237e:	4299      	cmp	r1, r3
 8012380:	d912      	bls.n	80123a8 <__udivmoddi4+0x29c>
 8012382:	3e02      	subs	r6, #2
 8012384:	4463      	add	r3, ip
 8012386:	1a5b      	subs	r3, r3, r1
 8012388:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 801238c:	e736      	b.n	80121fc <__udivmoddi4+0xf0>
 801238e:	4639      	mov	r1, r7
 8012390:	e6ed      	b.n	801216e <__udivmoddi4+0x62>
 8012392:	4618      	mov	r0, r3
 8012394:	e702      	b.n	801219c <__udivmoddi4+0x90>
 8012396:	45f0      	cmp	r8, lr
 8012398:	d2ad      	bcs.n	80122f6 <__udivmoddi4+0x1ea>
 801239a:	ebbe 0302 	subs.w	r3, lr, r2
 801239e:	eb66 060c 	sbc.w	r6, r6, ip
 80123a2:	3801      	subs	r0, #1
 80123a4:	46b1      	mov	r9, r6
 80123a6:	e7a6      	b.n	80122f6 <__udivmoddi4+0x1ea>
 80123a8:	4646      	mov	r6, r8
 80123aa:	e7ec      	b.n	8012386 <__udivmoddi4+0x27a>
 80123ac:	4603      	mov	r3, r0
 80123ae:	e798      	b.n	80122e2 <__udivmoddi4+0x1d6>
 80123b0:	4640      	mov	r0, r8
 80123b2:	e7d3      	b.n	801235c <__udivmoddi4+0x250>
 80123b4:	46d6      	mov	lr, sl
 80123b6:	e77e      	b.n	80122b6 <__udivmoddi4+0x1aa>
 80123b8:	4464      	add	r4, ip
 80123ba:	3802      	subs	r0, #2
 80123bc:	e747      	b.n	801224e <__udivmoddi4+0x142>
 80123be:	4608      	mov	r0, r1
 80123c0:	e70d      	b.n	80121de <__udivmoddi4+0xd2>
 80123c2:	3e02      	subs	r6, #2
 80123c4:	4463      	add	r3, ip
 80123c6:	e72d      	b.n	8012224 <__udivmoddi4+0x118>

080123c8 <_init>:
 80123c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ca:	bf00      	nop
 80123cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ce:	bc08      	pop	{r3}
 80123d0:	469e      	mov	lr, r3
 80123d2:	4770      	bx	lr

080123d4 <_fini>:
 80123d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123d6:	bf00      	nop
 80123d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123da:	bc08      	pop	{r3}
 80123dc:	469e      	mov	lr, r3
 80123de:	4770      	bx	lr
